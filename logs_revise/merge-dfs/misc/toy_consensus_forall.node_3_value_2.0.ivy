#lang ivy1.7

type node
type quorum
type value

relation member(N:node, Q:quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

relation voted(N:node)
relation vote(N:node, V:value)
relation decided(V:value)
function voting_quorum: quorum

after init {
    voted(N) := false;
    vote(N, V) := false;
    decided(V) := false;
}

action cast_vote(n: node, v: value) = {
    require ~voted(n);
    
    vote(n, v) := true;
    voted(n) := true;
}

action decide(v: value, q: quorum) = {
    require member(N,q) -> vote(N,v);
    
    decided(v) := true;
    voting_quorum := q;
}

export cast_vote
export decide

#invariant [safety] decided(V1) & decided(V2) -> V1 = V2

##invariant [manual_1] vote(N,V) -> voted(N)
##invariant [manual_2] vote(N, V1) & vote(N, V2) -> V1 = V2
##invariant [manual_3] decided(V) & member(N, voting_quorum) -> vote(N, V)

invariant [invar_1] forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4
invariant [invar_3] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3
invariant [invar_4] forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)) # qcost: 4
invariant [invar_12] forall NODE0,VALUE0,QUORUM0. voting_quorum = QUORUM0 | vote(NODE0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0) # qcost: 7
