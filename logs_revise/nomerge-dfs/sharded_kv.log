
**********************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.ivy

**********************************************************


**********************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

**********************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=1,key=1,value=1 -f 1 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 3

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 1

[FW NOTE]: number of branching actions: 3

ivy_to_cpp target=qrm sharded_kv.node_1_key_1_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_1_key_1_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_1_key_1_value_1.finite.cpp sharded_kv.node_1_key_1_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_1_key_1_value_1.finite.o sharded_kv.node_1_key_1_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.023 seconds

[QRM NOTE]: Time elapsed since last: 7.023 seconds

[QRM NOTE]: Peak memory: 1172741 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        4

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 0


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

===========================================================================================================

sort: key=['key0']
sort: value=['value0']
sort: node=['node0']
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
representative states : 0, 4, 6, 1


=== State Orbit 0 =====================
size : 1
repr state: 000
lex min decimal: 0
states:
000




=== State Orbit 1 =====================
size : 1
repr state: 100
lex min decimal: 4
states:
100




=== State Orbit 2 =====================
size : 1
repr state: 110
lex min decimal: 6
states:
110




=== State Orbit 3 =====================
size : 1
repr state: 001
lex min decimal: 1
states:
001



[QRM NOTE]: Time elapsed since start: 7.103 seconds

[QRM NOTE]: Time elapsed since last: 0.079 seconds

[QRM NOTE]: Peak memory: 1198892 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.106 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 149503 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

======================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 01-
0     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1-1
1     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -11
2     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 3

[PRIME NOTE]: number of orbits before merging: 3

[PRIME NOTE]: number of primes: 3

[QRM NOTE]: Time elapsed since start: 7.119 seconds

[QRM NOTE]: Time elapsed since last: 0.013 seconds

[QRM NOTE]: Peak memory: 1206229 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2]
 solution : []


Before reduction : 
 pending  : [0, 1, 2]
 solution : []

Essensial at level 0 : {0, 1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0)]

Covered at level 0 : {2}

After reduction : 
 pending  : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1]

[QRM NOTE]: Time elapsed since start: 7.120 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 158216 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 01-
0     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node0,key0)', 'table(node0,key0,value0)']

sign_func_name2args: {'1$owner': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0',)): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0',)): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node0,key0)', 'table(node0,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0',)): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0',)): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', '~owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,KEY0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1-1
1     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0',)): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0',)): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0',)), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0',)): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0',)): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0; node$0$transfer_msg$0': [node$0$owner$0$0; node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0; node$0$transfer_msg$0': node$0$owner$0$0; node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,KEY0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 01-
0     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0,KEY0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1-1
1     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0,KEY0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 7.190 seconds

[QRM NOTE]: Time elapsed since last: 0.070 seconds

[QRM NOTE]: Peak memory: 1887493 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1]


Solution : [0, 1] has cost 10.


Before backtrack at level 1
 pending : []
 solution : [0, 1]

After backtrack at level 1
 pending : []
 solution : [0, 1]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 10

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1]

[MIN NOTE]: solution length: 2

invariant [invar_0] forall VALUE0,NODE0,KEY0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0) # qcost: 5

invariant [invar_1] forall VALUE0,NODE0,KEY0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0) # qcost: 5

[MIN NOTE]: number of total invariants: 2

[MIN NOTE]: total qCost: 10




[QRM NOTE]: Time elapsed since start: 7.226 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 1873582 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/sharded_kv.ivy: node=1,key=1,value=1]

*************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=2,key=1,value=1 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=2,key=1,value=1]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 8

ivy_to_cpp target=qrm sharded_kv.node_2_key_1_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_2_key_1_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_2_key_1_value_1.finite.cpp sharded_kv.node_2_key_1_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_2_key_1_value_1.finite.o sharded_kv.node_2_key_1_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.379 seconds

[QRM NOTE]: Time elapsed since last: 7.379 seconds

[QRM NOTE]: Peak memory: 1174734 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        7

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 3


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=2,key=1,value=1]

==================================================================================================================================

sort: key=['key0']
sort: value=['value0']
sort: node=['node0', 'node1']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
representative states : 0, 16, 20, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000
lex min decimal: 0
states:
000000




=== State Orbit 1 =====================
size : 2
repr state: 100000
lex min decimal: 16
states:
010000
100000




=== State Orbit 2 =====================
size : 2
repr state: 101000
lex min decimal: 20
states:
101000
010100




=== State Orbit 3 =====================
size : 2
repr state: 000010
lex min decimal: 1
states:
000010
000001



[QRM NOTE]: Time elapsed since start: 7.454 seconds

[QRM NOTE]: Time elapsed since last: 0.075 seconds

[QRM NOTE]: Peak memory: 1202032 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=2,key=1,value=1]

=======================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 60, binary: 111100

Found a representative state in Rmin not in reachability: decimal: 52, binary: 110100

Found a representative state in Rmin not in reachability: decimal: 3, binary: 000011

Found a representative state in Rmin not in reachability: decimal: 18, binary: 010010

Found a representative state in Rmin not in reachability: decimal: 22, binary: 010110

Found a representative state in Rmin not in reachability: decimal: 48, binary: 110000

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.463 seconds

[QRM NOTE]: Time elapsed since last: 0.008 seconds

[QRM NOTE]: Peak memory: 155916 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=1,key=2,value=1 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=2,value=1]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm sharded_kv.node_1_key_2_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_1_key_2_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_1_key_2_value_1.finite.cpp sharded_kv.node_1_key_2_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_1_key_2_value_1.finite.o sharded_kv.node_1_key_2_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.352 seconds

[QRM NOTE]: Time elapsed since last: 6.352 seconds

[QRM NOTE]: Peak memory: 1174777 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        16

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 6


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=2,value=1]

==================================================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0']
sort: node=['node0']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'table(node0,key0,value0)', 'table(node0,key1,value0)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key1,value0)']
representative states : 0, 48, 16, 52, 18, 22, 3, 60, 20, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000
lex min decimal: 0
states:
000000




=== State Orbit 1 =====================
size : 1
repr state: 110000
lex min decimal: 48
states:
110000




=== State Orbit 2 =====================
size : 2
repr state: 010000
lex min decimal: 16
states:
010000
100000




=== State Orbit 3 =====================
size : 2
repr state: 111000
lex min decimal: 52
states:
111000
110100




=== State Orbit 4 =====================
size : 2
repr state: 010010
lex min decimal: 18
states:
010010
100001




=== State Orbit 5 =====================
size : 2
repr state: 010110
lex min decimal: 22
states:
101001
010110




=== State Orbit 6 =====================
size : 1
repr state: 000011
lex min decimal: 3
states:
000011




=== State Orbit 7 =====================
size : 1
repr state: 111100
lex min decimal: 60
states:
111100




=== State Orbit 8 =====================
size : 2
repr state: 010100
lex min decimal: 20
states:
101000
010100




=== State Orbit 9 =====================
size : 2
repr state: 000001
lex min decimal: 1
states:
000010
000001



[QRM NOTE]: Time elapsed since start: 6.432 seconds

[QRM NOTE]: Time elapsed since last: 0.080 seconds

[QRM NOTE]: Peak memory: 1207193 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=2,value=1]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.441 seconds

[QRM NOTE]: Time elapsed since last: 0.009 seconds

[QRM NOTE]: Peak memory: 160455 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy -s node=1,key=1,value=2 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=1,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm sharded_kv.node_1_key_1_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_1_key_1_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_1_key_1_value_2.finite.cpp sharded_kv.node_1_key_1_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_1_key_1_value_2.finite.o sharded_kv.node_1_key_1_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.932 seconds

[QRM NOTE]: Time elapsed since last: 6.932 seconds

[QRM NOTE]: Peak memory: 1174258 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        6

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 2


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=1,value=2]

==================================================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0']
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
representative states : 0, 16, 20, 1


=== State Orbit 0 =====================
size : 1
repr state: 00000
lex min decimal: 0
states:
00000




=== State Orbit 1 =====================
size : 1
repr state: 10000
lex min decimal: 16
states:
10000




=== State Orbit 2 =====================
size : 2
repr state: 11000
lex min decimal: 20
states:
10100
11000




=== State Orbit 3 =====================
size : 2
repr state: 00010
lex min decimal: 1
states:
00010
00001



[QRM NOTE]: Time elapsed since start: 7.221 seconds

[QRM NOTE]: Time elapsed since last: 0.289 seconds

[QRM NOTE]: Peak memory: 1201371 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_1_key_1_value_1.0.ivy: node=1,key=1,value=2]

=======================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 28, binary: 11100

Found a representative state in Rmin not in reachability: decimal: 3, binary: 00011

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.232 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 155199 bytes

next size: node=2,key=1,value=2


**********************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

**********************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=2,key=1,value=2 -f 1 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 4

[FW NOTE]: number of branching actions: 16

ivy_to_cpp target=qrm sharded_kv.node_2_key_1_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_2_key_1_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_2_key_1_value_2.finite.cpp sharded_kv.node_2_key_1_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_2_key_1_value_2.finite.o sharded_kv.node_2_key_1_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.126 seconds

[QRM NOTE]: Time elapsed since last: 6.126 seconds

[QRM NOTE]: Peak memory: 1176487 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        11

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 7


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

===========================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1']
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
representative states : 0, 256, 272, 1


=== State Orbit 0 =====================
size : 1
repr state: 0000000000
lex min decimal: 0
states:
0000000000




=== State Orbit 1 =====================
size : 2
repr state: 0100000000
lex min decimal: 256
states:
0100000000
1000000000




=== State Orbit 2 =====================
size : 4
repr state: 0100100000
lex min decimal: 272
states:
0100010000
1010000000
0100100000
1001000000




=== State Orbit 3 =====================
size : 4
repr state: 0000001000
lex min decimal: 1
states:
0000000001
0000001000
0000000010
0000000100



[QRM NOTE]: Time elapsed since start: 6.210 seconds

[QRM NOTE]: Time elapsed since last: 0.084 seconds

[QRM NOTE]: Peak memory: 1205024 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.212 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 155777 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

======================================================================================================


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 1
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 4
num_suborbits: 1
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 4
num_suborbits: 1
8 (*) : -----1---1
8     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value1)']
9     : ---1---1--
9     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value1)']
10     : ----1---1-
10     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value0)']
11     : --1---1---
11     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 4
num_suborbits: 1
12 (*) : --1------1
12     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
13     : ----1--1--
13     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value1)']
14     : ---1----1-
14     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
15     : -----11---
15     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 4
num_suborbits: 1
16 (*) : ---1-----1
16     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
17     : -----1-1--
17     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value1)']
18     : --1-----1-
18     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
19     : ----1-1---
19     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 1
20 (*) : ----1----1
20     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
21     : --1----1--
21     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
22     : -----1--1-
22     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value0)']
23     : ---1--1---
23     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 4
num_suborbits: 1
35 (*) : 1----1----
35     : ['owner(node0,key0)', 'table(node1,key0,value1)']
36     : -1-1------
36     : ['owner(node1,key0)', 'table(node0,key0,value1)']
37     : 1---1-----
37     : ['owner(node0,key0)', 'table(node1,key0,value0)']
38     : -11-------
38     : ['owner(node1,key0)', 'table(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 2
num_suborbits: 1
39 (*) : --1--1----
39     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
40     : ---11-----
40     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 2
num_suborbits: 1
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 2
num_suborbits: 1
43 (*) : ---1-1----
43     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
44     : --1-1-----
44     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 15

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 45

[QRM NOTE]: Time elapsed since start: 6.232 seconds

[QRM NOTE]: Time elapsed since last: 0.020 seconds

[QRM NOTE]: Peak memory: 1276790 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []

Essensial at level 0 : {0, 1, 6, 7, 8, 9, 10, 13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0)]

Covered at level 0 : {2, 3, 4, 5, 11, 12, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

[QRM NOTE]: Time elapsed since start: 6.235 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 227343 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 1
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0], 'node$0$transfer_msg$0': [node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0': node$0$owner$0$0, 'node$0$transfer_msg$0': node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'transfer_msg(NODE1,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,KEY0,NODE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 1 =====================
size : 4
num_suborbits: 1
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0; node$0$transfer_msg$0': [node$0$owner$0$0; node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0; node$0$transfer_msg$0': node$0$owner$0$0; node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,KEY0,NODE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE0,KEY0,VALUE0)


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE1,KEY0,VALUE1)', 'transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE1,VALUE0,KEY0,NODE0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

	identical_single_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,KEY0. (exists NODE0. ~transfer_msg(NODE0,KEY0,VALUE0))


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']

sign_func_name2args: {'0$transfer_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$transfer_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1]}

	identical_single_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': node$0$transfer_msg$0$0; node$0$transfer_msg$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,NODE0. (exists VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0))


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'owner(node1,key0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',)))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$owner$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$owner$0$1]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$owner$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$owner$1$1': Const('key0', EnumeratedSort('key', ('key0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

part_sig: ('key$0$owner$1$0; key$0$owner$1$1', 'node$0$owner$0$0 | node$0$owner$0$1')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'owner(node1,key0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)))}

sign_func_name2count:  {'0$owner': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$owner$1': [key$0$owner$1$0; key$0$owner$1$1]}

	identical_single_classes: {'key$0$owner$1; key$0$owner$1': key$0$owner$1$0; key$0$owner$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists

quantifier mode: key: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0. (exists NODE0. ~owner(NODE0,KEY0))


=== Prime Orbit 10 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node1,key0)', 'table(node1,key0,value1)']

sign_func_name2args: {'1$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node1,key0)', 'table(node1,key0,value1)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', '~owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)


=== Prime Orbit 13 =====================
size : 2
num_suborbits: 1
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node0,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$table$0$0, node$0$table$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$table$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- SigGenerator ----------

terms:  ['table(node0,key0,value0)', 'table(node0,key0,value1)']

func_name2symbol:  {'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'table': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$table': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1')): value$0$table$2$0 | value$0$table$2$1}

	sort: node

	identical_classes: {'node$0$table$0; node$0$table$0': [node$0$table$0$0; node$0$table$0$1]}

	identical_single_classes: {'node$0$table$0; node$0$table$0': node$0$table$0$0; node$0$table$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$0$table$1': [key$0$table$1$0; key$0$table$1$1]}

	identical_single_classes: {'key$0$table$1; key$0$table$1': key$0$table$1$0; key$0$table$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('KEY0', EnumeratedSort('key', ('key0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,NODE0. (exists VALUE0. ~table(NODE0,KEY0,VALUE0))


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 1
0 (*) : 1--------1
0     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
1     : -1-----1--
1     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
2     : 1-------1-
2     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
3     : -1----1---
3     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,NODE1,KEY0,NODE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 1 =====================
size : 4
num_suborbits: 1
4 (*) : -1-------1
4     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
5     : 1------1--
5     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
6     : -1------1-
6     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
7     : 1-----1---
7     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,KEY0,NODE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE0,KEY0,VALUE0)
qcost : 5




=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
24 (*) : ------1--1
24     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
25     : -------11-
25     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall VALUE1,NODE1,VALUE0,KEY0,NODE0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
26 (*) : -------1-1
26     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
27     : ------1-1-
27     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
num_forall :   2
num_exists :   1
num_literals : 1
quantified form : forall VALUE0,KEY0. (exists NODE0. ~transfer_msg(NODE0,KEY0,VALUE0))
qcost : 4




=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
28 (*) : --------11
28     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
29     : ------11--
29     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
num_forall :   2
num_exists :   1
num_literals : 1
quantified form : forall KEY0,NODE0. (exists VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0))
qcost : 4




=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
30 (*) : 11--------
30     : ['owner(node0,key0)', 'owner(node1,key0)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall KEY0. (exists NODE0. ~owner(NODE0,KEY0))
qcost : 3




=== Prime Orbit 10 =====================
size : 4
num_suborbits: 1
31 (*) : -0---1----
31     : ['table(node1,key0,value1)', '~owner(node1,key0)']
32     : 0--1------
32     : ['table(node0,key0,value1)', '~owner(node0,key0)']
33     : -0--1-----
33     : ['table(node1,key0,value0)', '~owner(node1,key0)']
34     : 0-1-------
34     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 13 =====================
size : 2
num_suborbits: 1
41 (*) : --11------
41     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
42     : ----11----
42     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
num_forall :   2
num_exists :   1
num_literals : 1
quantified form : forall KEY0,NODE0. (exists VALUE0. ~table(NODE0,KEY0,VALUE0))
qcost : 4



[QRM NOTE]: Time elapsed since start: 6.314 seconds

[QRM NOTE]: Time elapsed since last: 0.080 seconds

[QRM NOTE]: Peak memory: 1973092 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


Solution : [0, 1, 6, 7, 8, 9, 10, 13] has cost 41.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]

After backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 10, 13]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 41

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 6, 7, 8, 9, 10, 13]

[MIN NOTE]: solution length: 8

invariant [invar_0] forall VALUE0,NODE1,KEY0,NODE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1 # qcost: 7

invariant [invar_1] forall VALUE0,KEY0,NODE0. ~owner(NODE0,KEY0) | ~transfer_msg(NODE0,KEY0,VALUE0) # qcost: 5

invariant [invar_6] forall VALUE1,NODE1,VALUE0,KEY0,NODE0. ~transfer_msg(NODE1,KEY0,VALUE1) | ~transfer_msg(NODE0,KEY0,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1) # qcost: 9

invariant [invar_7] forall VALUE0,KEY0. (exists NODE0. ~transfer_msg(NODE0,KEY0,VALUE0)) # qcost: 4

invariant [invar_8] forall KEY0,NODE0. (exists VALUE0. ~transfer_msg(NODE0,KEY0,VALUE0)) # qcost: 4

invariant [invar_9] forall KEY0. (exists NODE0. ~owner(NODE0,KEY0)) # qcost: 3

invariant [invar_10] forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0) # qcost: 5

invariant [invar_13] forall KEY0,NODE0. (exists VALUE0. ~table(NODE0,KEY0,VALUE0)) # qcost: 4

[MIN NOTE]: number of total invariants: 8

[MIN NOTE]: total qCost: 41




[QRM NOTE]: Time elapsed since start: 6.349 seconds

[QRM NOTE]: Time elapsed since last: 0.034 seconds

[QRM NOTE]: Peak memory: 1955853 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/sharded_kv.ivy: node=2,key=1,value=2]

*************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=3,key=1,value=2 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=3,key=1,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 12

[FW NOTE]: number of branching actions: 30

ivy_to_cpp target=qrm sharded_kv.node_3_key_1_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_3_key_1_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_3_key_1_value_2.finite.cpp sharded_kv.node_3_key_1_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_3_key_1_value_2.finite.o sharded_kv.node_3_key_1_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.867 seconds

[QRM NOTE]: Time elapsed since last: 6.867 seconds

[QRM NOTE]: Peak memory: 1179664 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        16

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 12


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=3,key=1,value=2]

==================================================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1', 'node2']
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
representative states : 0, 4096, 4160, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 3
repr state: 001000000000000
lex min decimal: 4096
states:
100000000000000
001000000000000
010000000000000




=== State Orbit 2 =====================
size : 6
repr state: 001000010000000
lex min decimal: 4160
states:
001000001000000
010001000000000
100100000000000
001000010000000
100010000000000
010000100000000




=== State Orbit 3 =====================
size : 6
repr state: 000000000100000
lex min decimal: 1
states:
000000000100000
000000000000001
000000000001000
000000000010000
000000000000100
000000000000010



[QRM NOTE]: Time elapsed since start: 6.957 seconds

[QRM NOTE]: Time elapsed since last: 0.090 seconds

[QRM NOTE]: Peak memory: 1210554 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=3,key=1,value=2]

=======================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 12608, binary: 011000101000000

Found a representative state in Rmin not in reachability: decimal: 5, binary: 000000000000101

Found a representative state in Rmin not in reachability: decimal: 12288, binary: 011000000000000

Found a representative state in Rmin not in reachability: decimal: 12352, binary: 011000001000000

Found a representative state in Rmin not in reachability: decimal: 12672, binary: 011000110000000

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.045 seconds

[QRM NOTE]: Time elapsed since last: 0.088 seconds

[QRM NOTE]: Peak memory: 224258 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=2,key=2,value=2 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=2,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 20

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 8

[FW NOTE]: number of branching actions: 32

ivy_to_cpp target=qrm sharded_kv.node_2_key_2_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_2_key_2_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_2_key_2_value_2.finite.cpp sharded_kv.node_2_key_2_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_2_key_2_value_2.finite.o sharded_kv.node_2_key_2_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.351 seconds

[QRM NOTE]: Time elapsed since last: 7.351 seconds

[QRM NOTE]: Peak memory: 1182462 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 12

[FW NOTE]: number of total reachable states:        121

[FW NOTE]: number of dfs representative states:     22

[FW NOTE]: number of dfs non-representative states: 99


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=2,value=2]

==================================================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0', 'value1']
sort: node=['node0', 'node1']
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'owner(node1,key0)', 'owner(node1,key1)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key1,value0)', 'table(node0,key1,value1)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key1,value0)', 'table(node1,key1,value1)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key1,value0)', 'transfer_msg(node0,key1,value1)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key1,value0)', 'transfer_msg(node1,key1,value1)']
representative states : 0, 196608, 65536, 393216, 196864, 65600, 394240, 65540, 65796, 20, 65856, 5, 398336, 399360, 65800, 6, 24, 65920, 198144, 197888, 65792, 1


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000000000
lex min decimal: 0
states:
00000000000000000000




=== State Orbit 1 =====================
size : 2
repr state: 00110000000000000000
lex min decimal: 196608
states:
11000000000000000000
00110000000000000000




=== State Orbit 2 =====================
size : 4
repr state: 00100000000000000000
lex min decimal: 65536
states:
01000000000000000000
10000000000000000000
00010000000000000000
00100000000000000000




=== State Orbit 3 =====================
size : 2
repr state: 01100000000000000000
lex min decimal: 393216
states:
10010000000000000000
01100000000000000000




=== State Orbit 4 =====================
size : 8
repr state: 00110000100000000000
lex min decimal: 196864
states:
11000010000000000000
11000100000000000000
11000001000000000000
00110000001000000000
00110000010000000000
11001000000000000000
00110000000100000000
00110000100000000000




=== State Orbit 5 =====================
size : 8
repr state: 00010000000010000000
lex min decimal: 65600
states:
00010000000010000000
10000000000000000010
01000000000000001000
01000000000000000100
00100000000000100000
10000000000000000001
00100000000000010000
00010000000001000000




=== State Orbit 6 =====================
size : 8
repr state: 10011000000000000000
lex min decimal: 394240
states:
01100000010000000000
10010000000100000000
01100001000000000000
10010100000000000000
10011000000000000000
10010000001000000000
01100000100000000000
01100010000000000000




=== State Orbit 7 =====================
size : 8
repr state: 00010000000000001000
lex min decimal: 65540
states:
01000000000010000000
00010000000000000100
00100000000000000010
00010000000000001000
01000000000001000000
10000000000000010000
10000000000000100000
00100000000000000001




=== State Orbit 8 =====================
size : 8
repr state: 00010000001000001000
lex min decimal: 65796
states:
10001000000000100000
01000001000001000000
00100000010000000001
10000100000000010000
01000010000010000000
00010000001000001000
00100000100000000010
00010000000100000100




=== State Orbit 9 =====================
size : 4
repr state: 00000000000000101000
lex min decimal: 20
states:
00000000000000010100
00000000000001000001
00000000000000101000
00000000000010000010




=== State Orbit 10 =====================
size : 8
repr state: 01000010000000001000
lex min decimal: 65856
states:
10000100000000000001
00100000010000010000
00010000000101000000
00100000100000100000
01000001000000000100
10001000000000000010
00010000001010000000
01000010000000001000




=== State Orbit 11 =====================
size : 4
repr state: 00000000000000001010
lex min decimal: 5
states:
00000000000010100000
00000000000001010000
00000000000000001010
00000000000000000101




=== State Orbit 12 =====================
size : 4
repr state: 01100010100000000000
lex min decimal: 398336
states:
10010100000100000000
01100010100000000000
10011000001000000000
01100001010000000000




=== State Orbit 13 =====================
size : 4
repr state: 01100001100000000000
lex min decimal: 399360
states:
01100001100000000000
10010100001000000000
01100010010000000000
10011000000100000000




=== State Orbit 14 =====================
size : 8
repr state: 01000001000010000000
lex min decimal: 65800
states:
10000100000000100000
00010000000100001000
01000001000010000000
00010000001000000100
00100000010000000010
00100000100000000001
10001000000000010000
01000010000001000000




=== State Orbit 15 =====================
size : 4
repr state: 00000000000010010000
lex min decimal: 6
states:
00000000000000000110
00000000000001100000
00000000000000001001
00000000000010010000




=== State Orbit 16 =====================
size : 4
repr state: 00000000000010000001
lex min decimal: 24
states:
00000000000000100100
00000000000001000010
00000000000000011000
00000000000010000001




=== State Orbit 17 =====================
size : 8
repr state: 10001000000000000001
lex min decimal: 65920
states:
00100000010000100000
01000010000000000100
00010000000110000000
10001000000000000001
00010000001001000000
00100000100000010000
10000100000000000010
01000001000000001000




=== State Orbit 18 =====================
size : 4
repr state: 11001001000000000000
lex min decimal: 198144
states:
11000110000000000000
00110000011000000000
11001001000000000000
00110000100100000000




=== State Orbit 19 =====================
size : 4
repr state: 11000101000000000000
lex min decimal: 197888
states:
00110000101000000000
11000101000000000000
11001010000000000000
00110000010100000000




=== State Orbit 20 =====================
size : 8
repr state: 00100000100000000000
lex min decimal: 65792
states:
01000010000000000000
00100000100000000000
00010000000100000000
10000100000000000000
00010000001000000000
01000001000000000000
10001000000000000000
00100000010000000000




=== State Orbit 21 =====================
size : 8
repr state: 00000000000010000000
lex min decimal: 1
states:
00000000000000000100
00000000000010000000
00000000000000000001
00000000000000000010
00000000000000001000
00000000000000100000
00000000000001000000
00000000000000010000



[QRM NOTE]: Time elapsed since start: 7.527 seconds

[QRM NOTE]: Time elapsed since last: 0.177 seconds

[QRM NOTE]: Peak memory: 1255477 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=2,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.652 seconds

[QRM NOTE]: Time elapsed since last: 0.125 seconds

[QRM NOTE]: Peak memory: 258949 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy -s node=2,key=1,value=3 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=1,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 14

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 12

[FW NOTE]: number of branching actions: 24

ivy_to_cpp target=qrm sharded_kv.node_2_key_1_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_2_key_1_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_2_key_1_value_3.finite.cpp sharded_kv.node_2_key_1_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_2_key_1_value_3.finite.o sharded_kv.node_2_key_1_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.216 seconds

[QRM NOTE]: Time elapsed since last: 6.216 seconds

[QRM NOTE]: Peak memory: 1179264 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        15

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 11


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=1,value=3]

==================================================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1']
predicate: table('node', 'key', 'value')
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
representative states : 0, 4096, 4160, 1


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000
lex min decimal: 0
states:
00000000000000




=== State Orbit 1 =====================
size : 2
repr state: 10000000000000
lex min decimal: 4096
states:
10000000000000
01000000000000




=== State Orbit 2 =====================
size : 6
repr state: 10100000000000
lex min decimal: 4160
states:
01000100000000
10100000000000
01000010000000
10010000000000
10001000000000
01000001000000




=== State Orbit 3 =====================
size : 6
repr state: 00000000100000
lex min decimal: 1
states:
00000000000001
00000000100000
00000000001000
00000000010000
00000000000010
00000000000100



[QRM NOTE]: Time elapsed since start: 6.305 seconds

[QRM NOTE]: Time elapsed since last: 0.090 seconds

[QRM NOTE]: Peak memory: 1209864 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_2_key_1_value_2.0.ivy: node=2,key=1,value=3]

=======================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 4288, binary: 01000011000000

Found a representative state in Rmin not in reachability: decimal: 3, binary: 00000000000011

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.383 seconds

[QRM NOTE]: Time elapsed since last: 0.077 seconds

[QRM NOTE]: Peak memory: 216183 bytes

next size: node=3,key=1,value=3


**********************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

**********************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.ivy -s node=3,key=1,value=3 -f 1 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 21

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 45

ivy_to_cpp target=qrm sharded_kv.node_3_key_1_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_3_key_1_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_3_key_1_value_3.finite.cpp sharded_kv.node_3_key_1_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_3_key_1_value_3.finite.o sharded_kv.node_3_key_1_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.275 seconds

[QRM NOTE]: Time elapsed since last: 6.275 seconds

[QRM NOTE]: Peak memory: 1184468 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        22

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 18


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

===========================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1', 'node2']
predicate: transfer_msg('node', 'key', 'value')
predicate: owner('node', 'key')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
representative states : 0, 262144, 262656, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000
lex min decimal: 0
states:
000000000000000000000




=== State Orbit 1 =====================
size : 3
repr state: 001000000000000000000
lex min decimal: 262144
states:
010000000000000000000
001000000000000000000
100000000000000000000




=== State Orbit 2 =====================
size : 9
repr state: 001000000100000000000
lex min decimal: 262656
states:
010000010000000000000
100010000000000000000
010000001000000000000
001000000010000000000
100100000000000000000
010000100000000000000
001000000100000000000
100001000000000000000
001000000001000000000




=== State Orbit 3 =====================
size : 9
repr state: 000000000000100000000
lex min decimal: 1
states:
000000000000010000000
000000000000000010000
000000000000100000000
000000000000000000100
000000000000000100000
000000000000000001000
000000000000000000001
000000000000001000000
000000000000000000010



[QRM NOTE]: Time elapsed since start: 6.398 seconds

[QRM NOTE]: Time elapsed since last: 0.124 seconds

[QRM NOTE]: Peak memory: 1218873 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.401 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 173095 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

======================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 1
0 (*) : -1------------------1
0     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']
1     : --1--------------1---
1     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value2)']
2     : 1-------------------1
2     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value2)']
3     : --1-----------1------
3     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value2)']
4     : 1----------------1---
4     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value2)']
5     : -1------------1------
5     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value2)']
6     : -1-----------------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
7     : --1-------------1----
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
8     : 1------------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
9     : --1----------1-------
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
10     : 1---------------1----
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
11     : -1-----------1-------
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
12     : -1----------------1--
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
13     : --1------------1-----
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
14     : 1-----------------1--
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
15     : --1---------1--------
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
16     : 1--------------1-----
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
17     : -1----------1--------
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
18 (*) : --1-----------------1
18     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']
19     : -1---------------1---
19     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value2)']
20     : 1-------------1------
20     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value2)']
21     : --1----------------1-
21     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
22     : -1--------------1----
22     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
23     : 1------------1-------
23     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
24     : --1---------------1--
24     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
25     : -1-------------1-----
25     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
26     : 1-----------1--------
26     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
27 (*) : -----------1--------1
27     : ['table(node2,key0,value2)', 'transfer_msg(node2,key0,value2)']
28     : --------1--------1---
28     : ['table(node1,key0,value2)', 'transfer_msg(node1,key0,value2)']
29     : -----1--------1------
29     : ['table(node0,key0,value2)', 'transfer_msg(node0,key0,value2)']
30     : ----------1--------1-
30     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value1)']
31     : -------1--------1----
31     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value1)']
32     : ----1--------1-------
32     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value1)']
33     : ---------1--------1--
33     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value0)']
34     : ------1--------1-----
34     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value0)']
35     : ---1--------1--------
35     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 36
num_suborbits: 1
36 (*) : ---1----------------1
36     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
37     : ---1-------------1---
37     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
38     : ------1-------------1
38     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
39     : ------1-------1------
39     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value2)']
40     : ---------1-------1---
40     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value2)']
41     : ---------1----1------
41     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value2)']
42     : ---1---------------1-
42     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
43     : ---1------------1----
43     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
44     : ------1------------1-
44     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
45     : ------1------1-------
45     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value1)']
46     : ---------1------1----
46     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value1)']
47     : ---------1---1-------
47     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value1)']
48     : ----1---------------1
48     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
49     : ----1------------1---
49     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
50     : -------1------------1
50     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
51     : -------1------1------
51     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value2)']
52     : ----------1------1---
52     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value2)']
53     : ----------1---1------
53     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value2)']
54     : ----1-------------1--
54     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
55     : ----1----------1-----
55     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
56     : -------1----------1--
56     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
57     : -------1----1--------
57     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value0)']
58     : ----------1----1-----
58     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value0)']
59     : ----------1-1--------
59     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value0)']
60     : -----1-------------1-
60     : ['table(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
61     : -----1----------1----
61     : ['table(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
62     : --------1----------1-
62     : ['table(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
63     : --------1----1-------
63     : ['table(node1,key0,value2)', 'transfer_msg(node0,key0,value1)']
64     : -----------1----1----
64     : ['table(node2,key0,value2)', 'transfer_msg(node1,key0,value1)']
65     : -----------1-1-------
65     : ['table(node2,key0,value2)', 'transfer_msg(node0,key0,value1)']
66     : -----1------------1--
66     : ['table(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
67     : -----1---------1-----
67     : ['table(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
68     : --------1---------1--
68     : ['table(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
69     : --------1---1--------
69     : ['table(node1,key0,value2)', 'transfer_msg(node0,key0,value0)']
70     : -----------1---1-----
70     : ['table(node2,key0,value2)', 'transfer_msg(node1,key0,value0)']
71     : -----------11--------
71     : ['table(node2,key0,value2)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : -----1--------------1
72     : ['table(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
73     : -----1-----------1---
73     : ['table(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
74     : --------1-----------1
74     : ['table(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
75     : --------1-----1------
75     : ['table(node1,key0,value2)', 'transfer_msg(node0,key0,value2)']
76     : -----------1-----1---
76     : ['table(node2,key0,value2)', 'transfer_msg(node1,key0,value2)']
77     : -----------1--1------
77     : ['table(node2,key0,value2)', 'transfer_msg(node0,key0,value2)']
78     : ----1--------------1-
78     : ['table(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
79     : ----1-----------1----
79     : ['table(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
80     : -------1-----------1-
80     : ['table(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
81     : -------1-----1-------
81     : ['table(node1,key0,value1)', 'transfer_msg(node0,key0,value1)']
82     : ----------1-----1----
82     : ['table(node2,key0,value1)', 'transfer_msg(node1,key0,value1)']
83     : ----------1--1-------
83     : ['table(node2,key0,value1)', 'transfer_msg(node0,key0,value1)']
84     : ---1--------------1--
84     : ['table(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
85     : ---1-----------1-----
85     : ['table(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
86     : ------1-----------1--
86     : ['table(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
87     : ------1-----1--------
87     : ['table(node1,key0,value0)', 'transfer_msg(node0,key0,value0)']
88     : ---------1-----1-----
88     : ['table(node2,key0,value0)', 'transfer_msg(node1,key0,value0)']
89     : ---------1--1--------
89     : ['table(node2,key0,value0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
90 (*) : ---------1----------1
90     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
91     : ------1----------1---
91     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
92     : ---1----------1------
92     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
93     : ---------1---------1-
93     : ['table(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
94     : ------1---------1----
94     : ['table(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
95     : ---1---------1-------
95     : ['table(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
96     : ----------1---------1
96     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
97     : -------1---------1---
97     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
98     : ----1---------1------
98     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
99     : ----------1-------1--
99     : ['table(node2,key0,value1)', 'transfer_msg(node2,key0,value0)']
100     : -------1-------1-----
100     : ['table(node1,key0,value1)', 'transfer_msg(node1,key0,value0)']
101     : ----1-------1--------
101     : ['table(node0,key0,value1)', 'transfer_msg(node0,key0,value0)']
102     : -----------1-------1-
102     : ['table(node2,key0,value2)', 'transfer_msg(node2,key0,value1)']
103     : --------1-------1----
103     : ['table(node1,key0,value2)', 'transfer_msg(node1,key0,value1)']
104     : -----1-------1-------
104     : ['table(node0,key0,value2)', 'transfer_msg(node0,key0,value1)']
105     : -----------1------1--
105     : ['table(node2,key0,value2)', 'transfer_msg(node2,key0,value0)']
106     : --------1------1-----
106     : ['table(node1,key0,value2)', 'transfer_msg(node1,key0,value0)']
107     : -----1------1--------
107     : ['table(node0,key0,value2)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
108 (*) : ------------1-------1
108     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
109     : ------------1----1---
109     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
110     : ---------------1----1
110     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
111     : --------------11-----
111     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
112     : -----------------11--
112     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
113     : --------------1---1--
113     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
114     : ------------1------1-
114     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
115     : ------------1---1----
115     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
116     : ---------------1---1-
116     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
117     : -------------1-1-----
117     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
118     : ----------------1-1--
118     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
119     : -------------1----1--
119     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
120     : -------------1------1
120     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
121     : -------------1---1---
121     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
122     : ----------------1---1
122     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
123     : --------------1-1----
123     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
124     : -----------------1-1-
124     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
125     : --------------1----1-
125     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 9
num_suborbits: 1
126 (*) : --------------1-----1
126     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
127     : --------------1--1---
127     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
128     : -----------------1--1
128     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
129     : -------------1-----1-
129     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
130     : -------------1--1----
130     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
131     : ----------------1--1-
131     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
132     : ------------1-----1--
132     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
133     : ------------1--1-----
133     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
134     : ---------------1--1--
134     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
135 (*) : ------------------1-1
135     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
136     : ---------------1-1---
136     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
137     : ------------1-1------
137     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
138     : ------------------11-
138     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
139     : ---------------11----
139     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
140     : ------------11-------
140     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
141     : -------------------11
141     : ['transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
142     : ----------------11---
142     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
143     : -------------11------
143     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
144 (*) : 11-------------------
144     : ['owner(node0,key0)', 'owner(node1,key0)']
145     : 1-1------------------
145     : ['owner(node0,key0)', 'owner(node2,key0)']
146     : -11------------------
146     : ['owner(node1,key0)', 'owner(node2,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
147 (*) : -1---------1---------
147     : ['owner(node1,key0)', 'table(node2,key0,value2)']
148     : --1-----1------------
148     : ['owner(node2,key0)', 'table(node1,key0,value2)']
149     : 1----------1---------
149     : ['owner(node0,key0)', 'table(node2,key0,value2)']
150     : --1--1---------------
150     : ['owner(node2,key0)', 'table(node0,key0,value2)']
151     : 1-------1------------
151     : ['owner(node0,key0)', 'table(node1,key0,value2)']
152     : -1---1---------------
152     : ['owner(node1,key0)', 'table(node0,key0,value2)']
153     : -1--------1----------
153     : ['owner(node1,key0)', 'table(node2,key0,value1)']
154     : --1----1-------------
154     : ['owner(node2,key0)', 'table(node1,key0,value1)']
155     : 1---------1----------
155     : ['owner(node0,key0)', 'table(node2,key0,value1)']
156     : --1-1----------------
156     : ['owner(node2,key0)', 'table(node0,key0,value1)']
157     : 1------1-------------
157     : ['owner(node0,key0)', 'table(node1,key0,value1)']
158     : -1--1----------------
158     : ['owner(node1,key0)', 'table(node0,key0,value1)']
159     : -1-------1-----------
159     : ['owner(node1,key0)', 'table(node2,key0,value0)']
160     : --1---1--------------
160     : ['owner(node2,key0)', 'table(node1,key0,value0)']
161     : 1--------1-----------
161     : ['owner(node0,key0)', 'table(node2,key0,value0)']
162     : --11-----------------
162     : ['owner(node2,key0)', 'table(node0,key0,value0)']
163     : 1-----1--------------
163     : ['owner(node0,key0)', 'table(node1,key0,value0)']
164     : -1-1-----------------
164     : ['owner(node1,key0)', 'table(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
165 (*) : --0--------1---------
165     : ['table(node2,key0,value2)', '~owner(node2,key0)']
166     : -0------1------------
166     : ['table(node1,key0,value2)', '~owner(node1,key0)']
167     : 0----1---------------
167     : ['table(node0,key0,value2)', '~owner(node0,key0)']
168     : --0-------1----------
168     : ['table(node2,key0,value1)', '~owner(node2,key0)']
169     : -0-----1-------------
169     : ['table(node1,key0,value1)', '~owner(node1,key0)']
170     : 0---1----------------
170     : ['table(node0,key0,value1)', '~owner(node0,key0)']
171     : --0------1-----------
171     : ['table(node2,key0,value0)', '~owner(node2,key0)']
172     : -0----1--------------
172     : ['table(node1,key0,value0)', '~owner(node1,key0)']
173     : 0--1-----------------
173     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 18
num_suborbits: 1
174 (*) : ---1-------1---------
174     : ['table(node0,key0,value0)', 'table(node2,key0,value2)']
175     : ---1----1------------
175     : ['table(node0,key0,value0)', 'table(node1,key0,value2)']
176     : ------1----1---------
176     : ['table(node1,key0,value0)', 'table(node2,key0,value2)']
177     : -----11--------------
177     : ['table(node0,key0,value2)', 'table(node1,key0,value0)']
178     : --------11-----------
178     : ['table(node1,key0,value2)', 'table(node2,key0,value0)']
179     : -----1---1-----------
179     : ['table(node0,key0,value2)', 'table(node2,key0,value0)']
180     : ---1------1----------
180     : ['table(node0,key0,value0)', 'table(node2,key0,value1)']
181     : ---1---1-------------
181     : ['table(node0,key0,value0)', 'table(node1,key0,value1)']
182     : ------1---1----------
182     : ['table(node1,key0,value0)', 'table(node2,key0,value1)']
183     : ----1-1--------------
183     : ['table(node0,key0,value1)', 'table(node1,key0,value0)']
184     : -------1-1-----------
184     : ['table(node1,key0,value1)', 'table(node2,key0,value0)']
185     : ----1----1-----------
185     : ['table(node0,key0,value1)', 'table(node2,key0,value0)']
186     : ----1------1---------
186     : ['table(node0,key0,value1)', 'table(node2,key0,value2)']
187     : ----1---1------------
187     : ['table(node0,key0,value1)', 'table(node1,key0,value2)']
188     : -------1---1---------
188     : ['table(node1,key0,value1)', 'table(node2,key0,value2)']
189     : -----1-1-------------
189     : ['table(node0,key0,value2)', 'table(node1,key0,value1)']
190     : --------1-1----------
190     : ['table(node1,key0,value2)', 'table(node2,key0,value1)']
191     : -----1----1----------
191     : ['table(node0,key0,value2)', 'table(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
192 (*) : ---11----------------
192     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
193     : ------11-------------
193     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
194     : ---------11----------
194     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
195     : ---1-1---------------
195     : ['table(node0,key0,value0)', 'table(node0,key0,value2)']
196     : ------1-1------------
196     : ['table(node1,key0,value0)', 'table(node1,key0,value2)']
197     : ---------1-1---------
197     : ['table(node2,key0,value0)', 'table(node2,key0,value2)']
198     : ----11---------------
198     : ['table(node0,key0,value1)', 'table(node0,key0,value2)']
199     : -------11------------
199     : ['table(node1,key0,value1)', 'table(node1,key0,value2)']
200     : ----------11---------
200     : ['table(node2,key0,value1)', 'table(node2,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
201 (*) : -----1-----1---------
201     : ['table(node0,key0,value2)', 'table(node2,key0,value2)']
202     : -----1--1------------
202     : ['table(node0,key0,value2)', 'table(node1,key0,value2)']
203     : --------1--1---------
203     : ['table(node1,key0,value2)', 'table(node2,key0,value2)']
204     : ----1-----1----------
204     : ['table(node0,key0,value1)', 'table(node2,key0,value1)']
205     : ----1--1-------------
205     : ['table(node0,key0,value1)', 'table(node1,key0,value1)']
206     : -------1--1----------
206     : ['table(node1,key0,value1)', 'table(node2,key0,value1)']
207     : ---1-----1-----------
207     : ['table(node0,key0,value0)', 'table(node2,key0,value0)']
208     : ---1--1--------------
208     : ['table(node0,key0,value0)', 'table(node1,key0,value0)']
209     : ------1--1-----------
209     : ['table(node1,key0,value0)', 'table(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 15

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 210

[QRM NOTE]: Time elapsed since start: 6.461 seconds

[QRM NOTE]: Time elapsed since last: 0.061 seconds

[QRM NOTE]: Peak memory: 1503570 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
 solution : []

Essensial at level 0 : {0, 1, 6, 7, 8, 9, 11, 13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0)]

Covered at level 0 : {2, 3, 4, 5, 10, 12, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]

[QRM NOTE]: Time elapsed since start: 6.465 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 448498 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 1
0 (*) : -1------------------1
0     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']
1     : --1--------------1---
1     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value2)']
2     : 1-------------------1
2     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value2)']
3     : --1-----------1------
3     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value2)']
4     : 1----------------1---
4     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value2)']
5     : -1------------1------
5     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value2)']
6     : -1-----------------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
7     : --1-------------1----
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
8     : 1------------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
9     : --1----------1-------
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
10     : 1---------------1----
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
11     : -1-----------1-------
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
12     : -1----------------1--
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
13     : --1------------1-----
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
14     : 1-----------------1--
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
15     : --1---------1--------
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
16     : 1--------------1-----
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
17     : -1----------1--------
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$owner': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0 | node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0], 'node$0$transfer_msg$0': [node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0': node$0$owner$0$0, 'node$0$transfer_msg$0': node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE1,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,KEY0,NODE1. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) | NODE0 = NODE1


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
18 (*) : --1-----------------1
18     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']
19     : -1---------------1---
19     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value2)']
20     : 1-------------1------
20     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value2)']
21     : --1----------------1-
21     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
22     : -1--------------1----
22     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
23     : 1------------1-------
23     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
24     : --1---------------1--
24     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
25     : -1-------------1-----
25     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
26     : 1-----------1--------
26     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$owner': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0, node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$transfer_msg$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0]}

sig2const: {'node$0$owner$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

part_sig: ('key$0$owner$1$0; key$0$transfer_msg$1$0', 'node$0$owner$0$0; node$0$transfer_msg$0$0', 'value$0$transfer_msg$2$0')


---------- SigGenerator ----------

terms:  ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$owner': 1, '0$transfer_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0; node$0$transfer_msg$0$0], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$transfer_msg$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0; node$0$transfer_msg$0$0, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$transfer_msg$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0}

	sort: node

	identical_classes: {'node$0$owner$0; node$0$transfer_msg$0': [node$0$owner$0$0; node$0$transfer_msg$0$0]}

	identical_single_classes: {'node$0$owner$0; node$0$transfer_msg$0': node$0$owner$0$0; node$0$transfer_msg$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$transfer_msg$1': [key$0$owner$1$0; key$0$transfer_msg$1$0]}

	identical_single_classes: {'key$0$owner$1; key$0$transfer_msg$1': key$0$owner$1$0; key$0$transfer_msg$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0]}

	identical_single_classes: {'value$0$transfer_msg$2': value$0$transfer_msg$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,KEY0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
108 (*) : ------------1-------1
108     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
109     : ------------1----1---
109     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
110     : ---------------1----1
110     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
111     : --------------11-----
111     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
112     : -----------------11--
112     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
113     : --------------1---1--
113     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
114     : ------------1------1-
114     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
115     : ------------1---1----
115     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
116     : ---------------1---1-
116     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
117     : -------------1-1-----
117     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
118     : ----------------1-1--
118     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
119     : -------------1----1--
119     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
120     : -------------1------1
120     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
121     : -------------1---1---
121     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
122     : ----------------1---1
122     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
123     : --------------1-1----
123     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
124     : -----------------1-1-
124     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
125     : --------------1----1-
125     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE1,KEY0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall KEY0,VALUE0,NODE1,VALUE1,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 7 =====================
size : 9
num_suborbits: 1
126 (*) : --------------1-----1
126     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
127     : --------------1--1---
127     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
128     : -----------------1--1
128     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
129     : -------------1-----1-
129     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
130     : -------------1--1----
130     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
131     : ----------------1--1-
131     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
132     : ------------1-----1--
132     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
133     : ------------1--1-----
133     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
134     : ---------------1--1--
134     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$transfer_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0; value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0 | node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$transfer_msg$0': [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1]}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': [value$0$transfer_msg$2$0; value$0$transfer_msg$2$1]}

	identical_single_classes: {'value$0$transfer_msg$2; value$0$transfer_msg$2': value$0$transfer_msg$2$0; value$0$transfer_msg$2$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE1,KEY0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,KEY0,NODE1. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
135 (*) : ------------------1-1
135     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
136     : ---------------1-1---
136     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
137     : ------------1-1------
137     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
138     : ------------------11-
138     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
139     : ---------------11----
139     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
140     : ------------11-------
140     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
141     : -------------------11
141     : ['transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
142     : ----------------11---
142     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
143     : -------------11------
143     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']

sign_func_name2args: {'0$transfer_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$transfer_msg$0$0, node$0$transfer_msg$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$transfer_msg$1$0, key$0$transfer_msg$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$transfer_msg$2$1]}

sig2const: {'node$0$transfer_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$transfer_msg$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$transfer_msg$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$transfer_msg$2$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

part_sig: ('key$0$transfer_msg$1$0; key$0$transfer_msg$1$1', 'node$0$transfer_msg$0$0; node$0$transfer_msg$0$1', 'value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1')


---------- SigGenerator ----------

terms:  ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']

func_name2symbol:  {'transfer_msg': Const('transfer_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'transfer_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$transfer_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1], EnumeratedSort('key', ('key0',)): [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$transfer_msg$0$0; node$0$transfer_msg$0$1, EnumeratedSort('key', ('key0',)): key$0$transfer_msg$1$0; key$0$transfer_msg$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$transfer_msg$2$0 | value$0$transfer_msg$2$1}

	sort: node

	identical_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': [node$0$transfer_msg$0$0; node$0$transfer_msg$0$1]}

	identical_single_classes: {'node$0$transfer_msg$0; node$0$transfer_msg$0': node$0$transfer_msg$0$0; node$0$transfer_msg$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': [key$0$transfer_msg$1$0; key$0$transfer_msg$1$1]}

	identical_single_classes: {'key$0$transfer_msg$1; key$0$transfer_msg$1': key$0$transfer_msg$1$0; key$0$transfer_msg$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$transfer_msg$2': [value$0$transfer_msg$2$0, value$0$transfer_msg$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$transfer_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['transfer_msg(NODE0,KEY0,VALUE0)', 'transfer_msg(NODE0,KEY0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,KEY0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE0,KEY0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
144 (*) : 11-------------------
144     : ['owner(node0,key0)', 'owner(node1,key0)']
145     : 1-1------------------
145     : ['owner(node0,key0)', 'owner(node2,key0)']
146     : -11------------------
146     : ['owner(node1,key0)', 'owner(node2,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['owner(node0,key0)', 'owner(node1,key0)']

sign_func_name2args: {'0$owner': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',)))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$owner$1$0, key$0$owner$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$owner$0$1]}

sig2const: {'node$0$owner$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$owner$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$owner$1$1': Const('key0', EnumeratedSort('key', ('key0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

part_sig: ('key$0$owner$1$0; key$0$owner$1$1', 'node$0$owner$0$0 | node$0$owner$0$1')


---------- SigGenerator ----------

terms:  ['owner(node0,key0)', 'owner(node1,key0)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)))}

sign_func_name2count:  {'0$owner': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$owner$0$0, node$0$owner$0$1], EnumeratedSort('key', ('key0',)): [key$0$owner$1$0; key$0$owner$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$owner$0$0 | node$0$owner$0$1, EnumeratedSort('key', ('key0',)): key$0$owner$1$0; key$0$owner$1$1}

	sort: node

	identical_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$owner$0': [node$0$owner$0$0, node$0$owner$0$1]}

	sort: key

	identical_classes: {'key$0$owner$1; key$0$owner$1': [key$0$owner$1$0; key$0$owner$1$1]}

	identical_single_classes: {'key$0$owner$1; key$0$owner$1': key$0$owner$1$0; key$0$owner$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['owner(NODE0,KEY0)', 'owner(NODE1,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,KEY0,NODE1. ~owner(NODE0,KEY0) | ~owner(NODE1,KEY0) | NODE0 = NODE1


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
165 (*) : --0--------1---------
165     : ['table(node2,key0,value2)', '~owner(node2,key0)']
166     : -0------1------------
166     : ['table(node1,key0,value2)', '~owner(node1,key0)']
167     : 0----1---------------
167     : ['table(node0,key0,value2)', '~owner(node0,key0)']
168     : --0-------1----------
168     : ['table(node2,key0,value1)', '~owner(node2,key0)']
169     : -0-----1-------------
169     : ['table(node1,key0,value1)', '~owner(node1,key0)']
170     : 0---1----------------
170     : ['table(node0,key0,value1)', '~owner(node0,key0)']
171     : --0------1-----------
171     : ['table(node2,key0,value0)', '~owner(node2,key0)']
172     : -0----1--------------
172     : ['table(node1,key0,value0)', '~owner(node1,key0)']
173     : 0--1-----------------
173     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~owner(node2,key0)', 'table(node2,key0,value2)']

sign_func_name2args: {'1$owner': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))))], '0$table': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$owner$0$0, node$0$table$0$0], Const('key0', EnumeratedSort('key', ('key0',))): [key$1$owner$1$0, key$0$table$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$table$2$0]}

sig2const: {'node$1$owner$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$1$owner$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'node$0$table$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0}

part_sig: ('key$0$table$1$0; key$1$owner$1$0', 'node$0$table$0$0; node$1$owner$0$0', 'value$0$table$2$0')


---------- SigGenerator ----------

terms:  ['~owner(node2,key0)', 'table(node2,key0,value2)']

func_name2symbol:  {'owner': Const('owner', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), BooleanSort())), 'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'owner': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',))), 'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'1$owner': 1, '0$table': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$1$owner$0$0], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$1$owner$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$1$owner$0$0, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$1$owner$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0}

	sort: node

	identical_classes: {'node$0$table$0; node$1$owner$0': [node$0$table$0$0; node$1$owner$0$0]}

	identical_single_classes: {'node$0$table$0; node$1$owner$0': node$0$table$0$0; node$1$owner$0$0}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$1$owner$1': [key$0$table$1$0; key$1$owner$1$0]}

	identical_single_classes: {'key$0$table$1; key$1$owner$1': key$0$table$1$0; key$1$owner$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0]}

	identical_single_classes: {'value$0$table$2': value$0$table$2$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$owner': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))]], '0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', '~owner(NODE0,KEY0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
192 (*) : ---11----------------
192     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
193     : ------11-------------
193     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
194     : ---------11----------
194     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
195     : ---1-1---------------
195     : ['table(node0,key0,value0)', 'table(node0,key0,value2)']
196     : ------1-1------------
196     : ['table(node1,key0,value0)', 'table(node1,key0,value2)']
197     : ---------1-1---------
197     : ['table(node2,key0,value0)', 'table(node2,key0,value2)']
198     : ----11---------------
198     : ['table(node0,key0,value1)', 'table(node0,key0,value2)']
199     : -------11------------
199     : ['table(node1,key0,value1)', 'table(node1,key0,value2)']
200     : ----------11---------
200     : ['table(node2,key0,value1)', 'table(node2,key0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['table(node0,key0,value0)', 'table(node0,key0,value1)']

sign_func_name2args: {'0$table': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('key0', EnumeratedSort('key', ('key0',))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$table$0$0, node$0$table$0$1], Const('key0', EnumeratedSort('key', ('key0',))): [key$0$table$1$0, key$0$table$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$table$2$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$table$2$1]}

sig2const: {'node$0$table$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$0': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$table$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'key$0$table$1$1': Const('key0', EnumeratedSort('key', ('key0',))), 'value$0$table$2$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0 | value$0$table$2$1}

part_sig: ('key$0$table$1$0; key$0$table$1$1', 'node$0$table$0$0; node$0$table$0$1', 'value$0$table$2$0 | value$0$table$2$1')


---------- SigGenerator ----------

terms:  ['table(node0,key0,value0)', 'table(node0,key0,value1)']

func_name2symbol:  {'table': Const('table', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'table': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('key', ('key0',)), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$table': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$table$0$0; node$0$table$0$1], EnumeratedSort('key', ('key0',)): [key$0$table$1$0; key$0$table$1$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$table$2$0, value$0$table$2$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$table$0$0; node$0$table$0$1, EnumeratedSort('key', ('key0',)): key$0$table$1$0; key$0$table$1$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$table$2$0 | value$0$table$2$1}

	sort: node

	identical_classes: {'node$0$table$0; node$0$table$0': [node$0$table$0$0; node$0$table$0$1]}

	identical_single_classes: {'node$0$table$0; node$0$table$0': node$0$table$0$0; node$0$table$0$1}

	identical_multi_classes: {}

	sort: key

	identical_classes: {'key$0$table$1; key$0$table$1': [key$0$table$1$0; key$0$table$1$1]}

	identical_single_classes: {'key$0$table$1; key$0$table$1': key$0$table$1$0; key$0$table$1$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$table$2': [value$0$table$2$0, value$0$table$2$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: key: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$table': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('KEY0', EnumeratedSort('key', ('key0',))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['table(NODE0,KEY0,VALUE0)', 'table(NODE0,KEY0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE0,KEY0,VALUE1) | VALUE0 = VALUE1


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 18
num_suborbits: 1
0 (*) : -1------------------1
0     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value2)']
1     : --1--------------1---
1     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value2)']
2     : 1-------------------1
2     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value2)']
3     : --1-----------1------
3     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value2)']
4     : 1----------------1---
4     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value2)']
5     : -1------------1------
5     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value2)']
6     : -1-----------------1-
6     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value1)']
7     : --1-------------1----
7     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value1)']
8     : 1------------------1-
8     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value1)']
9     : --1----------1-------
9     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value1)']
10     : 1---------------1----
10     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value1)']
11     : -1-----------1-------
11     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value1)']
12     : -1----------------1--
12     : ['owner(node1,key0)', 'transfer_msg(node2,key0,value0)']
13     : --1------------1-----
13     : ['owner(node2,key0)', 'transfer_msg(node1,key0,value0)']
14     : 1-----------------1--
14     : ['owner(node0,key0)', 'transfer_msg(node2,key0,value0)']
15     : --1---------1--------
15     : ['owner(node2,key0)', 'transfer_msg(node0,key0,value0)']
16     : 1--------------1-----
16     : ['owner(node0,key0)', 'transfer_msg(node1,key0,value0)']
17     : -1----------1--------
17     : ['owner(node1,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall NODE0,VALUE0,KEY0,NODE1. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
18 (*) : --1-----------------1
18     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value2)']
19     : -1---------------1---
19     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value2)']
20     : 1-------------1------
20     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value2)']
21     : --1----------------1-
21     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value1)']
22     : -1--------------1----
22     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value1)']
23     : 1------------1-------
23     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value1)']
24     : --1---------------1--
24     : ['owner(node2,key0)', 'transfer_msg(node2,key0,value0)']
25     : -1-------------1-----
25     : ['owner(node1,key0)', 'transfer_msg(node1,key0,value0)']
26     : 1-----------1--------
26     : ['owner(node0,key0)', 'transfer_msg(node0,key0,value0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,KEY0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
108 (*) : ------------1-------1
108     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value2)']
109     : ------------1----1---
109     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value2)']
110     : ---------------1----1
110     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value2)']
111     : --------------11-----
111     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)']
112     : -----------------11--
112     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)']
113     : --------------1---1--
113     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value0)']
114     : ------------1------1-
114     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value1)']
115     : ------------1---1----
115     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value1)']
116     : ---------------1---1-
116     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value1)']
117     : -------------1-1-----
117     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value0)']
118     : ----------------1-1--
118     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value0)']
119     : -------------1----1--
119     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value0)']
120     : -------------1------1
120     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value2)']
121     : -------------1---1---
121     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value2)']
122     : ----------------1---1
122     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value2)']
123     : --------------1-1----
123     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value1)']
124     : -----------------1-1-
124     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value1)']
125     : --------------1----1-
125     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value1)']
num_forall :   5
num_exists :   0
num_literals : 4
quantified form : forall KEY0,VALUE0,NODE1,VALUE1,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 9
num_suborbits: 1
126 (*) : --------------1-----1
126     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node2,key0,value2)']
127     : --------------1--1---
127     : ['transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value2)']
128     : -----------------1--1
128     : ['transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value2)']
129     : -------------1-----1-
129     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node2,key0,value1)']
130     : -------------1--1----
130     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node1,key0,value1)']
131     : ----------------1--1-
131     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node2,key0,value1)']
132     : ------------1-----1--
132     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node2,key0,value0)']
133     : ------------1--1-----
133     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node1,key0,value0)']
134     : ---------------1--1--
134     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node2,key0,value0)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall NODE0,VALUE0,KEY0,NODE1. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
135 (*) : ------------------1-1
135     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value2)']
136     : ---------------1-1---
136     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value2)']
137     : ------------1-1------
137     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value2)']
138     : ------------------11-
138     : ['transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)']
139     : ---------------11----
139     : ['transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)']
140     : ------------11-------
140     : ['transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)']
141     : -------------------11
141     : ['transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)']
142     : ----------------11---
142     : ['transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)']
143     : -------------11------
143     : ['transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1,KEY0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE0,KEY0,VALUE1) | VALUE0 = VALUE1
qcost : 7




=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
144 (*) : 11-------------------
144     : ['owner(node0,key0)', 'owner(node1,key0)']
145     : 1-1------------------
145     : ['owner(node0,key0)', 'owner(node2,key0)']
146     : -11------------------
146     : ['owner(node1,key0)', 'owner(node2,key0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall NODE0,KEY0,NODE1. ~owner(NODE0,KEY0) | ~owner(NODE1,KEY0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
165 (*) : --0--------1---------
165     : ['table(node2,key0,value2)', '~owner(node2,key0)']
166     : -0------1------------
166     : ['table(node1,key0,value2)', '~owner(node1,key0)']
167     : 0----1---------------
167     : ['table(node0,key0,value2)', '~owner(node0,key0)']
168     : --0-------1----------
168     : ['table(node2,key0,value1)', '~owner(node2,key0)']
169     : -0-----1-------------
169     : ['table(node1,key0,value1)', '~owner(node1,key0)']
170     : 0---1----------------
170     : ['table(node0,key0,value1)', '~owner(node0,key0)']
171     : --0------1-----------
171     : ['table(node2,key0,value0)', '~owner(node2,key0)']
172     : -0----1--------------
172     : ['table(node1,key0,value0)', '~owner(node1,key0)']
173     : 0--1-----------------
173     : ['table(node0,key0,value0)', '~owner(node0,key0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0)
qcost : 5




=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
192 (*) : ---11----------------
192     : ['table(node0,key0,value0)', 'table(node0,key0,value1)']
193     : ------11-------------
193     : ['table(node1,key0,value0)', 'table(node1,key0,value1)']
194     : ---------11----------
194     : ['table(node2,key0,value0)', 'table(node2,key0,value1)']
195     : ---1-1---------------
195     : ['table(node0,key0,value0)', 'table(node0,key0,value2)']
196     : ------1-1------------
196     : ['table(node1,key0,value0)', 'table(node1,key0,value2)']
197     : ---------1-1---------
197     : ['table(node2,key0,value0)', 'table(node2,key0,value2)']
198     : ----11---------------
198     : ['table(node0,key0,value1)', 'table(node0,key0,value2)']
199     : -------11------------
199     : ['table(node1,key0,value1)', 'table(node1,key0,value2)']
200     : ----------11---------
200     : ['table(node2,key0,value1)', 'table(node2,key0,value2)']
num_forall :   4
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE0,KEY0,VALUE1) | VALUE0 = VALUE1
qcost : 7



[QRM NOTE]: Time elapsed since start: 6.548 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 2202814 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

=============================================================================================


New level: 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]


Solution : [0, 1, 6, 7, 8, 9, 11, 13] has cost 53.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]

After backtrack at level 1
 pending : []
 solution : [0, 1, 6, 7, 8, 9, 11, 13]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 53

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 6, 7, 8, 9, 11, 13]

[MIN NOTE]: solution length: 8

invariant [invar_0] forall NODE0,VALUE0,KEY0,NODE1. ~transfer_msg(NODE1,KEY0,VALUE0) | ~owner(NODE0,KEY0) | NODE0 = NODE1 # qcost: 7

invariant [invar_1] forall VALUE0,KEY0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~owner(NODE0,KEY0) # qcost: 5

invariant [invar_6] forall KEY0,VALUE0,NODE1,VALUE1,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1) # qcost: 9

invariant [invar_7] forall NODE0,VALUE0,KEY0,NODE1. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE1,KEY0,VALUE0) | NODE0 = NODE1 # qcost: 7

invariant [invar_8] forall VALUE0,VALUE1,KEY0,NODE0. ~transfer_msg(NODE0,KEY0,VALUE0) | ~transfer_msg(NODE0,KEY0,VALUE1) | VALUE0 = VALUE1 # qcost: 7

invariant [invar_9] forall NODE0,KEY0,NODE1. ~owner(NODE0,KEY0) | ~owner(NODE1,KEY0) | NODE0 = NODE1 # qcost: 6

invariant [invar_11] forall VALUE0,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | owner(NODE0,KEY0) # qcost: 5

invariant [invar_13] forall VALUE0,VALUE1,KEY0,NODE0. ~table(NODE0,KEY0,VALUE0) | ~table(NODE0,KEY0,VALUE1) | VALUE0 = VALUE1 # qcost: 7

[MIN NOTE]: number of total invariants: 8

[MIN NOTE]: total qCost: 53




[QRM NOTE]: Time elapsed since start: 6.587 seconds

[QRM NOTE]: Time elapsed since last: 0.040 seconds

[QRM NOTE]: Peak memory: 2177329 bytes


*************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/sharded_kv.ivy: node=3,key=1,value=3]

*************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy -s node=4,key=1,value=3 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=4,key=1,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 28

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 72

ivy_to_cpp target=qrm sharded_kv.node_4_key_1_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_4_key_1_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_4_key_1_value_3.finite.cpp sharded_kv.node_4_key_1_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_4_key_1_value_3.finite.o sharded_kv.node_4_key_1_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.262 seconds

[QRM NOTE]: Time elapsed since last: 6.262 seconds

[QRM NOTE]: Peak memory: 1194512 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        29

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 25


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=4,key=1,value=3]

==================================================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1', 'node2', 'node3']
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'owner(node3,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'table(node3,key0,value0)', 'table(node3,key0,value1)', 'table(node3,key0,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)', 'transfer_msg(node3,key0,value0)', 'transfer_msg(node3,key0,value1)', 'transfer_msg(node3,key0,value2)']
representative states : 0, 16777216, 16781312, 1


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000000000
lex min decimal: 0
states:
0000000000000000000000000000




=== State Orbit 1 =====================
size : 4
repr state: 1000000000000000000000000000
lex min decimal: 16777216
states:
0010000000000000000000000000
0100000000000000000000000000
1000000000000000000000000000
0001000000000000000000000000




=== State Orbit 2 =====================
size : 12
repr state: 1000100000000000000000000000
lex min decimal: 16781312
states:
0010000000010000000000000000
0100000001000000000000000000
0100000010000000000000000000
1000001000000000000000000000
0001000000000001000000000000
0001000000000010000000000000
0001000000000100000000000000
0010000000001000000000000000
1000010000000000000000000000
0010000000100000000000000000
0100000100000000000000000000
1000100000000000000000000000




=== State Orbit 3 =====================
size : 12
repr state: 0000000000000000100000000000
lex min decimal: 1
states:
0000000000000000000000000010
0000000000000000000001000000
0000000000000000000000001000
0000000000000000000100000000
0000000000000000100000000000
0000000000000000010000000000
0000000000000000000000010000
0000000000000000000000000100
0000000000000000000000000001
0000000000000000001000000000
0000000000000000000000100000
0000000000000000000010000000



[QRM NOTE]: Time elapsed since start: 6.577 seconds

[QRM NOTE]: Time elapsed since last: 0.315 seconds

[QRM NOTE]: Peak memory: 1231435 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=4,key=1,value=3]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.150 seconds

[QRM NOTE]: Time elapsed since last: 0.573 seconds

[QRM NOTE]: Peak memory: 482115 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy -s node=3,key=2,value=3 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=2,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 42

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 72

[FW NOTE]: number of branching actions: 90

ivy_to_cpp target=qrm sharded_kv.node_3_key_2_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_3_key_2_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_3_key_2_value_3.finite.cpp sharded_kv.node_3_key_2_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_3_key_2_value_3.finite.o sharded_kv.node_3_key_2_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.348 seconds

[QRM NOTE]: Time elapsed since last: 6.348 seconds

[QRM NOTE]: Peak memory: 1195981 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 12

[FW NOTE]: number of total reachable states:        484

[FW NOTE]: number of dfs representative states:     22

[FW NOTE]: number of dfs non-representative states: 462


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=2,value=3]

==================================================================================================================================

sort: key=['key0', 'key1']
sort: value=['value0', 'value1', 'value2']
sort: node=['node0', 'node1', 'node2']
predicate: owner('node', 'key')
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node0,key1)', 'owner(node1,key0)', 'owner(node1,key1)', 'owner(node2,key0)', 'owner(node2,key1)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node0,key1,value0)', 'table(node0,key1,value1)', 'table(node0,key1,value2)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node1,key1,value0)', 'table(node1,key1,value1)', 'table(node1,key1,value2)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'table(node2,key1,value0)', 'table(node2,key1,value1)', 'table(node2,key1,value2)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node0,key1,value0)', 'transfer_msg(node0,key1,value1)', 'transfer_msg(node0,key1,value2)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node1,key1,value0)', 'transfer_msg(node1,key1,value1)', 'transfer_msg(node1,key1,value2)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)', 'transfer_msg(node2,key1,value0)', 'transfer_msg(node2,key1,value1)', 'transfer_msg(node2,key1,value2)']
representative states : 0, 206158430208, 68719476736, 412316860416, 206158692352, 68719476744, 68719738888, 9, 72, 68719739392, 412335734784, 412337831936, 68719739904, 10, 68719738896, 80, 206161051648, 206160789504, 68719477248, 412318957568, 68719738880, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000000000000000000000
lex min decimal: 0
states:
000000000000000000000000000000000000000000




=== State Orbit 1 =====================
size : 3
repr state: 110000000000000000000000000000000000000000
lex min decimal: 206158430208
states:
001100000000000000000000000000000000000000
000011000000000000000000000000000000000000
110000000000000000000000000000000000000000




=== State Orbit 2 =====================
size : 6
repr state: 100000000000000000000000000000000000000000
lex min decimal: 68719476736
states:
000001000000000000000000000000000000000000
001000000000000000000000000000000000000000
010000000000000000000000000000000000000000
000100000000000000000000000000000000000000
100000000000000000000000000000000000000000
000010000000000000000000000000000000000000




=== State Orbit 3 =====================
size : 6
repr state: 010010000000000000000000000000000000000000
lex min decimal: 412316860416
states:
100001000000000000000000000000000000000000
001001000000000000000000000000000000000000
100100000000000000000000000000000000000000
011000000000000000000000000000000000000000
000110000000000000000000000000000000000000
010010000000000000000000000000000000000000




=== State Orbit 4 =====================
size : 18
repr state: 110000100000000000000000000000000000000000
lex min decimal: 206158692352
states:
110000000010000000000000000000000000000000
110000100000000000000000000000000000000000
001100000000000100000000000000000000000000
000011000000000000000010000000000000000000
000011000000000000000100000000000000000000
110000010000000000000000000000000000000000
001100000000010000000000000000000000000000
000011000000000000001000000000000000000000
110000000001000000000000000000000000000000
110000000100000000000000000000000000000000
110000001000000000000000000000000000000000
000011000000000000010000000000000000000000
001100000000000001000000000000000000000000
000011000000000000100000000000000000000000
001100000000001000000000000000000000000000
000011000000000000000001000000000000000000
001100000000100000000000000000000000000000
001100000000000010000000000000000000000000




=== State Orbit 5 =====================
size : 18
repr state: 010000000000000000000000100000000000000000
lex min decimal: 68719476744
states:
000001000000000000000000000000000000100000
000100000000000000000000000000100000000000
010000000000000000000000100000000000000000
000010000000000000000000000000000000000100
000001000000000000000000000000000000001000
001000000000000000000000000000000001000000
000100000000000000000000000000001000000000
001000000000000000000000000000000100000000
000010000000000000000000000000000000000010
100000000000000000000000000001000000000000
000010000000000000000000000000000000000001
000001000000000000000000000000000000010000
000100000000000000000000000000010000000000
010000000000000000000000001000000000000000
001000000000000000000000000000000010000000
100000000000000000000000000100000000000000
010000000000000000000000010000000000000000
100000000000000000000000000010000000000000




=== State Orbit 6 =====================
size : 18
repr state: 010000000100000000000000100000000000000000
lex min decimal: 68719738888
states:
000100000000000100000000000000100000000000
100000010000000000000000000010000000000000
010000000100000000000000100000000000000000
000001000000000000000100000000000000100000
000001000000000000000010000000000000010000
010000000001000000000000001000000000000000
000100000000000001000000000000001000000000
001000000000001000000000000000000001000000
000001000000000000000001000000000000001000
010000000010000000000000010000000000000000
000010000000000000100000000000000000000100
100000100000000000000000000100000000000000
001000000000010000000000000000000010000000
100000001000000000000000000001000000000000
000010000000000000001000000000000000000001
000100000000000010000000000000010000000000
000010000000000000010000000000000000000010
001000000000100000000000000000000100000000




=== State Orbit 7 =====================
size : 9
repr state: 000000000000000000000000100100000000000000
lex min decimal: 9
states:
000000000000000000000000000000100100000000
000000000000000000000000100100000000000000
000000000000000000000000001001000000000000
000000000000000000000000000000010010000000
000000000000000000000000010010000000000000
000000000000000000000000000000001001000000
000000000000000000000000000000000000001001
000000000000000000000000000000000000100100
000000000000000000000000000000000000010010




=== State Orbit 8 =====================
size : 18
repr state: 000000000000000000000000100000000100000000
lex min decimal: 72
states:
000000000000000000000000000100100000000000
000000000000000000000000100000000000000100
000000000000000000000000010000000000000010
000000000000000000000000001000000001000000
000000000000000000000000000000000100100000
000000000000000000000000000001001000000000
000000000000000000000000000000010000000010
000000000000000000000000000000000010010000
000000000000000000000000000000000001001000
000000000000000000000000001000000000000001
000000000000000000000000000010000000010000
000000000000000000000000010000000010000000
000000000000000000000000000100000000100000
000000000000000000000000100000000100000000
000000000000000000000000000000100000000100
000000000000000000000000000001000000001000
000000000000000000000000000010010000000000
000000000000000000000000000000001000000001




=== State Orbit 9 =====================
size : 36
repr state: 100000100000000000000000000000000100000000
lex min decimal: 68719739392
states:
001000000000010000000000000000000000000010
100000001000000000000000000000000001000000
010000000100000000000000000000000000100000
000001000000000000000100100000000000000000
000100000000000001000000001000000000000000
010000000001000000000000000000001000000000
000001000000000000000001000000001000000000
100000010000000000000000000000000010000000
000010000000000000001000000001000000000000
000010000000000000100000000000000100000000
000100000000000010000000000000000000010000
000100000000000001000000000000000000001000
000001000000000000000100000000100000000000
001000000000010000000000000010000000000000
001000000000100000000000000000000000000100
001000000000100000000000000100000000000000
000010000000000000010000000000000010000000
001000000000001000000000000000000000000001
100000010000000000000000000000000000000010
000010000000000000010000000010000000000000
000001000000000000000001001000000000000000
000001000000000000000010000000010000000000
010000000010000000000000000000000000010000
010000000001000000000000000000000000001000
010000000010000000000000000000010000000000
100000100000000000000000000000000000000100
100000001000000000000000000000000000000001
100000100000000000000000000000000100000000
000010000000000000001000000000000001000000
000100000000000010000000010000000000000000
000100000000000100000000100000000000000000
000010000000000000100000000100000000000000
010000000100000000000000000000100000000000
000001000000000000000010010000000000000000
000100000000000100000000000000000000100000
001000000000001000000000000001000000000000




=== State Orbit 10 =====================
size : 18
repr state: 100100100000000100000000000000000000000000
lex min decimal: 412335734784
states:
100001100000000000000100000000000000000000
000110000000000100100000000000000000000000
010010000100000000100000000000000000000000
100001010000000000000010000000000000000000
011000000010010000000000000000000000000000
000110000000000001001000000000000000000000
100100010000000010000000000000000000000000
100100100000000100000000000000000000000000
000110000000000010010000000000000000000000
100001001000000000000001000000000000000000
001001000000010000000010000000000000000000
100100001000000001000000000000000000000000
010010000001000000001000000000000000000000
010010000010000000010000000000000000000000
001001000000001000000001000000000000000000
011000000100100000000000000000000000000000
011000000001001000000000000000000000000000
001001000000100000000100000000000000000000




=== State Orbit 11 =====================
size : 36
repr state: 100100010000000100000000000000000000000000
lex min decimal: 412337831936
states:
100100100000000001000000000000000000000000
000110000000000100010000000000000000000000
100100010000000001000000000000000000000000
010010000001000000010000000000000000000000
010010000010000000100000000000000000000000
100100010000000100000000000000000000000000
010010000010000000001000000000000000000000
010010000100000000010000000000000000000000
000110000000000001100000000000000000000000
001001000000010000000100000000000000000000
100001100000000000000001000000000000000000
011000000100010000000000000000000000000000
000110000000000010001000000000000000000000
100100001000000010000000000000000000000000
011000000010001000000000000000000000000000
100001100000000000000010000000000000000000
100100001000000100000000000000000000000000
010010000100000000001000000000000000000000
001001000000100000000010000000000000000000
100001001000000000000010000000000000000000
000110000000000100001000000000000000000000
100100100000000010000000000000000000000000
010010000001000000100000000000000000000000
001001000000001000000100000000000000000000
100001001000000000000100000000000000000000
011000000010100000000000000000000000000000
011000000001100000000000000000000000000000
001001000000100000000001000000000000000000
100001010000000000000001000000000000000000
001001000000001000000010000000000000000000
011000000001010000000000000000000000000000
000110000000000010100000000000000000000000
001001000000010000000001000000000000000000
011000000100001000000000000000000000000000
100001010000000000000100000000000000000000
000110000000000001010000000000000000000000




=== State Orbit 12 =====================
size : 72
repr state: 000100000000000100000000010000000000000000
lex min decimal: 68719739904
states:
010000000100000000000000000000001000000000
010000000100000000000000000000000000001000
001000000000100000000000000000000000000010
000100000000000001000000010000000000000000
000010000000000000100000000010000000000000
100000001000000000000000000000000100000000
000100000000000010000000001000000000000000
000001000000000000000001000000100000000000
000100000000000010000000000000000000001000
000001000000000000000010000000001000000000
010000000100000000000000000000010000000000
000001000000000000000001100000000000000000
010000000010000000000000000000000000001000
000100000000000001000000000000000000010000
001000000000001000000000000010000000000000
000010000000000000001000000000000100000000
100000010000000000000000000000000100000000
000010000000000000001000000000000010000000
010000000010000000000000000000001000000000
100000100000000000000000000000000000000010
001000000000010000000000000001000000000000
001000000000001000000000000100000000000000
100000100000000000000000000000000010000000
100000001000000000000000000000000010000000
010000000001000000000000000000100000000000
000010000000000000010000000000000100000000
001000000000010000000000000000000000000100
000001000000000000000010000000100000000000
001000000000100000000000000000000000000001
000100000000000100000000000000000000010000
100000100000000000000000000000000000000001
000010000000000000010000000100000000000000
000010000000000000001000000100000000000000
000100000000000001000000100000000000000000
000001000000000000000001010000000000000000
001000000000100000000000000010000000000000
000010000000000000010000000000000001000000
000001000000000000000100010000000000000000
000010000000000000010000000001000000000000
000100000000000010000000000000000000100000
000100000000000001000000000000000000100000
100000010000000000000000000000000000000001
100000001000000000000000000000000000000010
100000001000000000000000000000000000000100
001000000000001000000000000000000000000100
000001000000000000000100000000001000000000
000001000000000000000001000000010000000000
000010000000000000100000000000000001000000
001000000000010000000000000100000000000000
000010000000000000100000000000000010000000
000100000000000100000000010000000000000000
000001000000000000000100000000010000000000
000001000000000000000100001000000000000000
000100000000000010000000100000000000000000
010000000010000000000000000000100000000000
010000000001000000000000000000000000100000
010000000001000000000000000000010000000000
010000000001000000000000000000000000010000
000100000000000100000000000000000000001000
001000000000100000000000000001000000000000
000010000000000000100000000001000000000000
100000100000000000000000000000000001000000
100000010000000000000000000000000001000000
000010000000000000001000000010000000000000
000100000000000100000000001000000000000000
001000000000001000000000000000000000000010
010000000010000000000000000000000000100000
000001000000000000000010001000000000000000
001000000000010000000000000000000000000001
100000010000000000000000000000000000000100
000001000000000000000010100000000000000000
010000000100000000000000000000000000010000




=== State Orbit 13 =====================
size : 18
repr state: 000000000000000000000000010100000000000000
lex min decimal: 10
states:
000000000000000000000000000000000000100001
000000000000000000000000000000000000010001
000000000000000000000000000000000000010100
000000000000000000000000100010000000000000
000000000000000000000000000000000000100010
000000000000000000000000001010000000000000
000000000000000000000000010001000000000000
000000000000000000000000000000100010000000
000000000000000000000000000000010100000000
000000000000000000000000000000010001000000
000000000000000000000000000000001100000000
000000000000000000000000010100000000000000
000000000000000000000000001100000000000000
000000000000000000000000000000100001000000
000000000000000000000000000000000000001010
000000000000000000000000000000001010000000
000000000000000000000000000000000000001100
000000000000000000000000100001000000000000




=== State Orbit 14 =====================
size : 36
repr state: 100000010000000000000000000100000000000000
lex min decimal: 68719738896
states:
000001000000000000000010000000000000001000
000010000000000000100000000000000000000010
000100000000000001000000000000010000000000
001000000000001000000000000000000100000000
000001000000000000000010000000000000100000
000010000000000000010000000000000000000100
000001000000000000000100000000000000001000
010000000010000000000000100000000000000000
000001000000000000000100000000000000010000
000100000000000100000000000000001000000000
100000001000000000000000000100000000000000
000100000000000100000000000000010000000000
100000100000000000000000000010000000000000
000100000000000001000000000000100000000000
100000010000000000000000000001000000000000
000010000000000000001000000000000000000100
100000001000000000000000000010000000000000
001000000000010000000000000000000001000000
100000010000000000000000000100000000000000
010000000100000000000000010000000000000000
000001000000000000000001000000000000010000
001000000000010000000000000000000100000000
001000000000001000000000000000000010000000
010000000010000000000000001000000000000000
000001000000000000000001000000000000100000
010000000001000000000000010000000000000000
001000000000100000000000000000000010000000
000010000000000000010000000000000000000001
001000000000100000000000000000000001000000
000100000000000010000000000000100000000000
010000000001000000000000100000000000000000
100000100000000000000000000001000000000000
010000000100000000000000001000000000000000
000010000000000000001000000000000000000010
000100000000000010000000000000001000000000
000010000000000000100000000000000000000001




=== State Orbit 15 =====================
size : 36
repr state: 000000000000000000000000000100010000000000
lex min decimal: 80
states:
000000000000000000000000000000000001010000
000000000000000000000000000010000000001000
000000000000000000000000000001100000000000
000000000000000000000000000000001000000100
000000000000000000000000000000010000000100
000000000000000000000000000010000000100000
000000000000000000000000100000000010000000
000000000000000000000000100000000000000001
000000000000000000000000000100000000010000
000000000000000000000000000001010000000000
000000000000000000000000000000000100001000
000000000000000000000000000010100000000000
000000000000000000000000100000000001000000
000000000000000000000000000000000001100000
000000000000000000000000000000100000000010
000000000000000000000000001000000100000000
000000000000000000000000000100001000000000
000000000000000000000000010000000100000000
000000000000000000000000100000000000000010
000000000000000000000000010000000001000000
000000000000000000000000000100000000001000
000000000000000000000000001000000000000010
000000000000000000000000000000000010001000
000000000000000000000000000000001000000010
000000000000000000000000010000000000000001
000000000000000000000000001000000010000000
000000000000000000000000000001000000100000
000000000000000000000000000100010000000000
000000000000000000000000000001000000010000
000000000000000000000000000000010000000001
000000000000000000000000000000000100010000
000000000000000000000000000010001000000000
000000000000000000000000000000100000000001
000000000000000000000000010000000000000100
000000000000000000000000001000000000000100
000000000000000000000000000000000010100000




=== State Orbit 16 =====================
size : 18
repr state: 110000010100000000000000000000000000000000
lex min decimal: 206161051648
states:
110000010001000000000000000000000000000000
000011000000000000100001000000000000000000
000011000000000000001100000000000000000000
110000010100000000000000000000000000000000
001100000000100010000000000000000000000000
000011000000000000100010000000000000000000
110000001010000000000000000000000000000000
110000100010000000000000000000000000000000
000011000000000000001010000000000000000000
001100000000100001000000000000000000000000
001100000000001100000000000000000000000000
110000001100000000000000000000000000000000
110000100001000000000000000000000000000000
000011000000000000010001000000000000000000
001100000000001010000000000000000000000000
001100000000010001000000000000000000000000
000011000000000000010100000000000000000000
001100000000010100000000000000000000000000




=== State Orbit 17 =====================
size : 9
repr state: 110000100100000000000000000000000000000000
lex min decimal: 206160789504
states:
000011000000000000010010000000000000000000
001100000000001001000000000000000000000000
000011000000000000001001000000000000000000
001100000000010010000000000000000000000000
110000001001000000000000000000000000000000
110000010010000000000000000000000000000000
001100000000100100000000000000000000000000
000011000000000000100100000000000000000000
110000100100000000000000000000000000000000




=== State Orbit 18 =====================
size : 36
repr state: 010000000000000000000000000000100000000000
lex min decimal: 68719477248
states:
001000000000000000000000000100000000000000
000100000000000000000000001000000000000000
000100000000000000000000000000000000010000
010000000000000000000000000000010000000000
010000000000000000000000000000000000010000
010000000000000000000000000000000000100000
100000000000000000000000000000000100000000
000010000000000000000000000000000100000000
000001000000000000000000000000001000000000
000010000000000000000000000000000010000000
000001000000000000000000100000000000000000
010000000000000000000000000000001000000000
000010000000000000000000000001000000000000
001000000000000000000000000000000000000010
010000000000000000000000000000100000000000
001000000000000000000000000000000000000100
100000000000000000000000000000000010000000
000001000000000000000000000000100000000000
100000000000000000000000000000000000000100
000001000000000000000000010000000000000000
000100000000000000000000010000000000000000
000100000000000000000000000000000000001000
100000000000000000000000000000000000000010
001000000000000000000000000000000000000001
000001000000000000000000001000000000000000
001000000000000000000000000010000000000000
001000000000000000000000000001000000000000
000100000000000000000000100000000000000000
000010000000000000000000000100000000000000
000010000000000000000000000000000001000000
000010000000000000000000000010000000000000
000100000000000000000000000000000000100000
100000000000000000000000000000000001000000
100000000000000000000000000000000000000001
000001000000000000000000000000010000000000
010000000000000000000000000000000000001000




=== State Orbit 19 =====================
size : 36
repr state: 011000000000100000000000000000000000000000
lex min decimal: 412318957568
states:
100100010000000000000000000000000000000000
001001000000100000000000000000000000000000
000110000000000001000000000000000000000000
100100100000000000000000000000000000000000
011000000000010000000000000000000000000000
010010000000000000010000000000000000000000
100001010000000000000000000000000000000000
100100000000000010000000000000000000000000
100100000000000001000000000000000000000000
010010000000000000100000000000000000000000
100001001000000000000000000000000000000000
001001000000000000000001000000000000000000
011000000000100000000000000000000000000000
100100001000000000000000000000000000000000
010010000100000000000000000000000000000000
000110000000000000100000000000000000000000
100001000000000000000010000000000000000000
100100000000000100000000000000000000000000
010010000001000000000000000000000000000000
011000000010000000000000000000000000000000
000110000000000010000000000000000000000000
001001000000000000000100000000000000000000
011000000100000000000000000000000000000000
100001000000000000000100000000000000000000
100001000000000000000001000000000000000000
010010000010000000000000000000000000000000
000110000000000000001000000000000000000000
100001100000000000000000000000000000000000
010010000000000000001000000000000000000000
001001000000001000000000000000000000000000
001001000000010000000000000000000000000000
011000000001000000000000000000000000000000
011000000000001000000000000000000000000000
001001000000000000000010000000000000000000
000110000000000000010000000000000000000000
000110000000000100000000000000000000000000




=== State Orbit 20 =====================
size : 18
repr state: 100000100000000000000000000000000000000000
lex min decimal: 68719738880
states:
100000100000000000000000000000000000000000
010000000100000000000000000000000000000000
010000000001000000000000000000000000000000
000100000000000010000000000000000000000000
000100000000000001000000000000000000000000
000010000000000000001000000000000000000000
000001000000000000000001000000000000000000
000100000000000100000000000000000000000000
001000000000001000000000000000000000000000
000010000000000000010000000000000000000000
000001000000000000000010000000000000000000
000001000000000000000100000000000000000000
010000000010000000000000000000000000000000
000010000000000000100000000000000000000000
001000000000010000000000000000000000000000
100000001000000000000000000000000000000000
100000010000000000000000000000000000000000
001000000000100000000000000000000000000000




=== State Orbit 21 =====================
size : 18
repr state: 000000000000000000000000100000000000000000
lex min decimal: 1
states:
000000000000000000000000000000000000000100
000000000000000000000000000001000000000000
000000000000000000000000000100000000000000
000000000000000000000000010000000000000000
000000000000000000000000000000000001000000
000000000000000000000000000000000000100000
000000000000000000000000001000000000000000
000000000000000000000000000000000000000001
000000000000000000000000000000001000000000
000000000000000000000000100000000000000000
000000000000000000000000000010000000000000
000000000000000000000000000000010000000000
000000000000000000000000000000000000000010
000000000000000000000000000000000000001000
000000000000000000000000000000000000010000
000000000000000000000000000000100000000000
000000000000000000000000000000000100000000
000000000000000000000000000000000010000000



[QRM NOTE]: Time elapsed since start: 7.550 seconds

[QRM NOTE]: Time elapsed since last: 1.202 seconds

[QRM NOTE]: Peak memory: 1362103 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=2,value=3]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.838 seconds

[QRM NOTE]: Time elapsed since last: 1.288 seconds

[QRM NOTE]: Peak memory: 652793 bytes

python3 qrm.py ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy -s node=3,key=1,value=4 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym/ivy/sharded_kv.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=1,value=4]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 27

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 60

ivy_to_cpp target=qrm sharded_kv.node_3_key_1_value_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o sharded_kv.node_3_key_1_value_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 sharded_kv.node_3_key_1_value_4.finite.cpp sharded_kv.node_3_key_1_value_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared sharded_kv.node_3_key_1_value_4.finite.o sharded_kv.node_3_key_1_value_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.830 seconds

[QRM NOTE]: Time elapsed since last: 6.830 seconds

[QRM NOTE]: Peak memory: 1194979 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        28

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 24


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=1,value=4]

==================================================================================================================================

sort: key=['key0']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: node=['node0', 'node1', 'node2']
predicate: transfer_msg('node', 'key', 'value')
predicate: table('node', 'key', 'value')
predicate: owner('node', 'key')
interpreted atoms: {}
state atoms: ['owner(node0,key0)', 'owner(node1,key0)', 'owner(node2,key0)', 'table(node0,key0,value0)', 'table(node0,key0,value1)', 'table(node0,key0,value2)', 'table(node0,key0,value3)', 'table(node1,key0,value0)', 'table(node1,key0,value1)', 'table(node1,key0,value2)', 'table(node1,key0,value3)', 'table(node2,key0,value0)', 'table(node2,key0,value1)', 'table(node2,key0,value2)', 'table(node2,key0,value3)', 'transfer_msg(node0,key0,value0)', 'transfer_msg(node0,key0,value1)', 'transfer_msg(node0,key0,value2)', 'transfer_msg(node0,key0,value3)', 'transfer_msg(node1,key0,value0)', 'transfer_msg(node1,key0,value1)', 'transfer_msg(node1,key0,value2)', 'transfer_msg(node1,key0,value3)', 'transfer_msg(node2,key0,value0)', 'transfer_msg(node2,key0,value1)', 'transfer_msg(node2,key0,value2)', 'transfer_msg(node2,key0,value3)']
representative states : 0, 16777216, 16781312, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000000
lex min decimal: 0
states:
000000000000000000000000000




=== State Orbit 1 =====================
size : 3
repr state: 001000000000000000000000000
lex min decimal: 16777216
states:
001000000000000000000000000
010000000000000000000000000
100000000000000000000000000




=== State Orbit 2 =====================
size : 12
repr state: 001000000001000000000000000
lex min decimal: 16781312
states:
010000000010000000000000000
010000001000000000000000000
100001000000000000000000000
001000000000100000000000000
100010000000000000000000000
010000000100000000000000000
001000000000010000000000000
001000000001000000000000000
010000010000000000000000000
100000100000000000000000000
100100000000000000000000000
001000000000001000000000000




=== State Orbit 3 =====================
size : 12
repr state: 000000000000000100000000000
lex min decimal: 1
states:
000000000000000100000000000
000000000000000000000000010
000000000000000000000100000
000000000000000010000000000
000000000000000001000000000
000000000000000000000010000
000000000000000000000000001
000000000000000000000001000
000000000000000000000000100
000000000000000000100000000
000000000000000000010000000
000000000000000000001000000



[QRM NOTE]: Time elapsed since start: 7.111 seconds

[QRM NOTE]: Time elapsed since last: 0.280 seconds

[QRM NOTE]: Peak memory: 1231538 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: node=3,key=1,value=4]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.652 seconds

[QRM NOTE]: Time elapsed since last: 0.542 seconds

[QRM NOTE]: Peak memory: 482773 bytes


*********************************************************************

	[IVY_CHECK]: Ivy Check for Reachability Invariant

*********************************************************************


=================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy]

=================================================================================================

ivy_check complete=fo ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13

    The following action implementations are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 34: implementation of put
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 26: implementation of recv_transfer_msg
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 18: implementation of reshard

    The following initializers are present:
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 11: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11 ... PASS
        ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:put
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS
        (internal) ext:recv_transfer_msg
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS
        (internal) ext:reshard
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 52: invar_0 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 53: invar_1 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 54: invar_6 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 55: invar_7 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 56: invar_8 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 57: invar_9 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 58: invar_11 ... PASS
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 59: invar_13 ... PASS

    The following program assertions are treated as assumptions:
        in action reshard when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 19: assumption
        in action recv_transfer_msg when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 27: assumption
        in action put when called from the environment:
            ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy: line 35: assumption

OK
[IVY_CHECK RESULT]: PASS


*********************************************************************************

	[QRM]: ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy

*********************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/sharded_kv.node_3_key_1_value_3.0.ivy']

[CUTOFF]: node=3,key=1,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 122.171 seconds

[QRM NOTE]: Time elapsed since last: 122.171 seconds

