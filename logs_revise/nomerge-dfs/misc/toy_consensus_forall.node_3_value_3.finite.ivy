#lang ivy1.7

type node = {node0, node1, node2}
type quorum = {quorum__node0_node1, quorum__node0_node2, quorum__node1_node2}
type value = {value0, value1, value2}

relation member(N:node, Q:quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

relation voted(N:node)
relation vote(N:node, V:value)
relation decided(V:value)
function voting_quorum: quorum

after init {
    voted(N) := false;
    vote(N, V) := false;
    decided(V) := false;
}

action cast_vote(n: node, v: value) = {
    require ~voted(n);
    
    vote(n, v) := true;
    voted(n) := true;
}

action decide(v: value, q: quorum) = {
    require member(N,q) -> vote(N,v);
    
    decided(v) := true;
    voting_quorum := q;
}

export cast_vote
export decide

#invariant [safety] decided(V1) & decided(V2) -> V1 = V2

##invariant [manual_1] vote(N,V) -> voted(N)
##invariant [manual_2] vote(N, V1) & vote(N, V2) -> V1 = V2
##invariant [manual_3] decided(V) & member(N, voting_quorum) -> vote(N, V)

invariant [invar_8] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4
invariant [invar_1] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4
invariant [invar_2] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3
invariant [invar_12] forall NODE0,VALUE0,QUORUM0. vote(NODE0,VALUE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0) | ~decided(VALUE0) # qcost: 7

### For QRM DFS reachability ###

## Dependent relation axioms ##
axiom member(node0,quorum__node0_node1)
axiom member(node1,quorum__node0_node1)
axiom ~member(node2,quorum__node0_node1)
axiom member(node0,quorum__node0_node2)
axiom ~member(node1,quorum__node0_node2)
axiom member(node2,quorum__node0_node2)
axiom ~member(node0,quorum__node1_node2)
axiom member(node1,quorum__node1_node2)
axiom member(node2,quorum__node1_node2)

## Access actions ##
action get_voting_quorum returns(qrm_result: quorum) = {
    qrm_result := voting_quorum
}
export get_voting_quorum

action get_bool_voting_quorum(result: quorum) returns(qrm_result: bool) = {
    qrm_result := (voting_quorum = result)
}
export get_bool_voting_quorum

action get_decided(v0: value) returns(qrm_result: bool) = {
    qrm_result := decided(v0)
}
export get_decided

action get_bool_decided(v0: value, result: bool) returns(qrm_result: bool) = {
    qrm_result := (decided(v0) = result)
}
export get_bool_decided

action get_vote(n0: node, v1: value) returns(qrm_result: bool) = {
    qrm_result := vote(n0, v1)
}
export get_vote

action get_bool_vote(n0: node, v1: value, result: bool) returns(qrm_result: bool) = {
    qrm_result := (vote(n0, v1) = result)
}
export get_bool_vote

action get_member(n0: node, q1: quorum) returns(qrm_result: bool) = {
    qrm_result := member(n0, q1)
}
export get_member

action get_bool_member(n0: node, q1: quorum, result: bool) returns(qrm_result: bool) = {
    qrm_result := (member(n0, q1) = result)
}
export get_bool_member

action get_voted(n0: node) returns(qrm_result: bool) = {
    qrm_result := voted(n0)
}
export get_voted

action get_bool_voted(n0: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (voted(n0) = result)
}
export get_bool_voted

