#lang ivy1.7

# Source: https://github.com/sat-group/cfg-enum/blob/permissive/benchmarks/simple-de-lock.ivy

type node = {node0, node1, node2}

relation message(Src: node, Dst: node)
relation has_lock(N: node)

individual start_node: node

after init {
	message(Src, Dst) := false;
	has_lock(X) := X = start_node;
}

action send(src: node, dst: node) = {
    assume has_lock(src);
    message(src, dst) := true;
    has_lock(src) := false;
}

action recv(src: node, dst: node) = {
    assume message(src, dst);
    message(src, dst) := false;
    has_lock(dst) := true;
}

export send
export recv

#invariant X ~= Y -> ~(has_lock(X) & has_lock(Y))

##invariant [manual_1] ~(has_lock(X) & message(Y,Z))
##invariant [manual_2] ~message(X,Y) | ~message(Z,W) | X=Z
##invariant [manual_3] ~message(X,Y) | ~message(Z,W) | Y=W
##invariant [manual_4] forall A, B, C, D . ((((A) = (B)) & ((C) = (D))) | ((~(has_lock(A))) & (~(message(A, C)))) | (~(message(B, D))))

invariant [invar_1] forall NODE1,NODE0. ~message(NODE0,NODE0) | ~message(NODE0,NODE1) | NODE0 = NODE1 # qcost: 5
invariant [invar_2] forall NODE1,NODE0. ~message(NODE0,NODE1) | ~has_lock(NODE0) | NODE0 = NODE1 # qcost: 5
invariant [invar_3] forall NODE1,NODE0. ~message(NODE1,NODE0) | ~has_lock(NODE0) | NODE0 = NODE1 # qcost: 5
invariant [invar_4] forall NODE1,NODE0. ~message(NODE0,NODE0) | ~message(NODE1,NODE0) | NODE0 = NODE1 # qcost: 5
invariant [invar_5] forall NODE1,NODE0. ~message(NODE1,NODE0) | ~message(NODE0,NODE1) | NODE0 = NODE1 # qcost: 5
invariant [invar_7] exists NODE0. ~has_lock(NODE0) # qcost: 2
invariant [invar_8] forall NODE0. ~message(NODE0,NODE0) | ~has_lock(NODE0) # qcost: 3
invariant [invar_9] forall NODE1,NODE0. ~message(NODE1,NODE1) | ~has_lock(NODE0) | NODE0 = NODE1 # qcost: 5
invariant [invar_10] forall NODE1,NODE0. ~message(NODE0,NODE0) | ~message(NODE1,NODE1) | NODE0 = NODE1 # qcost: 5
invariant [invar_11] exists NODE1,NODE0. has_lock(NODE0) | message(NODE0,NODE1) # qcost: 4

### For QRM DFS reachability ###

## Dependent relation axioms ##

## Access actions ##
action get_has_lock(n0: node) returns(qrm_result: bool) = {
    qrm_result := has_lock(n0)
}
export get_has_lock

action get_bool_has_lock(n0: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (has_lock(n0) = result)
}
export get_bool_has_lock

action get_start_node returns(qrm_result: node) = {
    qrm_result := start_node
}
export get_start_node

action get_bool_start_node(result: node) returns(qrm_result: bool) = {
    qrm_result := (start_node = result)
}
export get_bool_start_node

action get_message(n0: node, n1: node) returns(qrm_result: bool) = {
    qrm_result := message(n0, n1)
}
export get_message

action get_bool_message(n0: node, n1: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (message(n0, n1) = result)
}
export get_bool_message

