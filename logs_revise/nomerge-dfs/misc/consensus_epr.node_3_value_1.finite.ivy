#lang ivy1.7

type node = {node0, node1, node2}
type value = {value0}
type quorum = {quorum__node0_node1, quorum__node0_node2, quorum__node1_node2}

relation member(N:node, Q:quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

relation vote_request_msg(N0:node, N1:node)
relation voted(N:node)
relation vote_msg(N0:node, N1:node)
relation votes(N0:node, N1:node)
relation leader(N:node)
relation decided(N:node, V:value)

relation chosen(N:node) = exists Q. forall Nv. member(Nv, Q) -> votes(N, Nv)

after init  {
	vote_request_msg(N1, N2) := false;
	voted(N) := false;
	vote_msg(N1, N2) := false;
	votes(N1, N2) := false;
	leader(N1) := false;
	decided(N, V) := false;
}

action send_request_vote(src: node, dst: node) = {
	vote_request_msg(src, dst) := true;
}

action send_vote(src: node, dst: node) = {
  require ~voted(src);
  require vote_request_msg(dst, src);
  
  vote_msg(src, dst) := true;
  voted(src) := true;
  vote_request_msg(src, dst) := *;
}

action recv_vote(n: node, sender: node) = {
  require vote_msg(sender, n);
  
  votes(n, sender) := true;
}

action become_leader(n: node) = {
  require chosen(n);
  
  leader(n) := true;
}

action decide(n: node, v: value) = {
  require leader(n);
  require ~decided(n, V);
  
  decided(n,v) := true;
}

export send_request_vote
export send_vote
export recv_vote
export become_leader
export decide

# safety property:
#invariant [safety] decided(N1, V1) & decided(N2, V2) -> V1 = V2

##invariant [manual_1] leader(N1) & leader(N2) -> N1 = N2
##invariant [manual_2] votes(N, N1) -> vote_msg(N1, N)
##invariant [manual_3] vote_msg(N, N1) & vote_msg(N, N2) -> N1 = N2
##invariant [manual_4] vote_msg(N, N1) -> voted(N)
##invariant [manual_5] exists Q. forall N, M. leader(N) & member(M, Q) -> votes(N, M)
##invariant [manual_6] decided(N, V) -> leader(N)

invariant [def_chosen] forall N. chosen(N) = (exists Q. (forall Nv. member(Nv,Q) -> votes(N,Nv))) # definition, qcost: 6
invariant [invar_37] forall NODE0. ~vote_msg(NODE0,NODE0) | voted(NODE0) # qcost: 3
invariant [invar_38] forall NODE1,NODE0. ~vote_msg(NODE0,NODE1) | voted(NODE0) | NODE0 = NODE1 # qcost: 5
invariant [invar_46] forall NODE1,NODE0. ~vote_msg(NODE0,NODE1) | ~vote_msg(NODE0,NODE0) | NODE0 = NODE1 # qcost: 5
invariant [invar_24] forall VALUE0,NODE0. leader(NODE0) | ~decided(NODE0,VALUE0) # qcost: 4
invariant [invar_62] forall NODE1,NODE0. ~voted(NODE0) | vote_msg(NODE0,NODE0) | vote_msg(NODE0,NODE1) | NODE0 = NODE1 # qcost: 6
invariant [invar_1] forall NODE0. ~votes(NODE0,NODE0) | vote_msg(NODE0,NODE0) # qcost: 3
invariant [invar_8] forall NODE1,NODE0. ~votes(NODE0,NODE1) | vote_msg(NODE1,NODE0) | NODE0 = NODE1 # qcost: 5
invariant [invar_14] forall NODE0. chosen(NODE0) | ~leader(NODE0) # qcost: 3
invariant [invar_61] forall NODE1,NODE0. vote_request_msg(NODE1,NODE0) | ~vote_msg(NODE0,NODE1) | vote_request_msg(NODE0,NODE1) | NODE0 = NODE1 # qcost: 6
invariant [invar_56] forall NODE1,NODE0. vote_request_msg(NODE1,NODE0) | ~vote_msg(NODE0,NODE1) | vote_msg(NODE1,NODE0) | NODE0 = NODE1 # qcost: 6

### For QRM DFS reachability ###

## Dependent relation axioms ##
axiom member(node0,quorum__node0_node1)
axiom member(node1,quorum__node0_node1)
axiom ~member(node2,quorum__node0_node1)
axiom member(node0,quorum__node0_node2)
axiom ~member(node1,quorum__node0_node2)
axiom member(node2,quorum__node0_node2)
axiom ~member(node0,quorum__node1_node2)
axiom member(node1,quorum__node1_node2)
axiom member(node2,quorum__node1_node2)

## Access actions ##
action get_vote_request_msg(n0: node, n1: node) returns(qrm_result: bool) = {
    qrm_result := vote_request_msg(n0, n1)
}
export get_vote_request_msg

action get_bool_vote_request_msg(n0: node, n1: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (vote_request_msg(n0, n1) = result)
}
export get_bool_vote_request_msg

action get_leader(n0: node) returns(qrm_result: bool) = {
    qrm_result := leader(n0)
}
export get_leader

action get_bool_leader(n0: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (leader(n0) = result)
}
export get_bool_leader

action get_votes(n0: node, n1: node) returns(qrm_result: bool) = {
    qrm_result := votes(n0, n1)
}
export get_votes

action get_bool_votes(n0: node, n1: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (votes(n0, n1) = result)
}
export get_bool_votes

action get_voted(n0: node) returns(qrm_result: bool) = {
    qrm_result := voted(n0)
}
export get_voted

action get_bool_voted(n0: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (voted(n0) = result)
}
export get_bool_voted

action get_member(n0: node, q1: quorum) returns(qrm_result: bool) = {
    qrm_result := member(n0, q1)
}
export get_member

action get_bool_member(n0: node, q1: quorum, result: bool) returns(qrm_result: bool) = {
    qrm_result := (member(n0, q1) = result)
}
export get_bool_member

action get_decided(n0: node, v1: value) returns(qrm_result: bool) = {
    qrm_result := decided(n0, v1)
}
export get_decided

action get_bool_decided(n0: node, v1: value, result: bool) returns(qrm_result: bool) = {
    qrm_result := (decided(n0, v1) = result)
}
export get_bool_decided

action get_chosen(n0: node) returns(qrm_result: bool) = {
    qrm_result := chosen(n0)
}
export get_chosen

action get_bool_chosen(n0: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (chosen(n0) = result)
}
export get_bool_chosen

action get_vote_msg(n0: node, n1: node) returns(qrm_result: bool) = {
    qrm_result := vote_msg(n0, n1)
}
export get_vote_msg

action get_bool_vote_msg(n0: node, n1: node, result: bool) returns(qrm_result: bool) = {
    qrm_result := (vote_msg(n0, n1) = result)
}
export get_bool_vote_msg

