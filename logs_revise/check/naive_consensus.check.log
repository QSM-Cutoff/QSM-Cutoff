
**********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/naive_consensus.ivy

**********************************************************************


****************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

****************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.ivy -s node=2,value=1 -f 1 -g -w -r -e -t -k -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

==========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 4

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 4

ivy_to_cpp target=qrm naive_consensus.node_2_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_2_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_2_value_1.finite.cpp naive_consensus.node_2_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_2_value_1.finite.o naive_consensus.node_2_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.832 seconds

[QRM NOTE]: Time elapsed since last: 6.832 seconds

[QRM NOTE]: Peak memory: 1176827 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        6

[FW NOTE]: number of dfs representative states:     5

[FW NOTE]: number of dfs non-representative states: 1


=================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

=================================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0']
sort: quorum=['quorum__node0_node1']
predicate: vote('node', 'value')
predicate: decide('quorum', 'value')
predicate: member('node', 'quorum')
predicate: decision('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decision(value0)', 'vote(node0,value0)', 'vote(node1,value0)']
representative states : 3, 7, 15, 47, 63


=== State Orbit 0 =====================
size : 1
repr state: 0000
lex min decimal: 3
states:
0000




=== State Orbit 1 =====================
size : 2
repr state: 0010
lex min decimal: 7
states:
0001
0010




=== State Orbit 2 =====================
size : 1
repr state: 0011
lex min decimal: 15
states:
0011




=== State Orbit 3 =====================
size : 1
repr state: 1011
lex min decimal: 47
states:
1011




=== State Orbit 4 =====================
size : 1
repr state: 1111
lex min decimal: 63
states:
1111



[QRM NOTE]: Time elapsed since start: 6.927 seconds

[QRM NOTE]: Time elapsed since last: 0.096 seconds

[QRM NOTE]: Peak memory: 1205513 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.933 seconds

[QRM NOTE]: Time elapsed since last: 0.006 seconds

[QRM NOTE]: Peak memory: 155304 bytes


=================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

=================================================================================================================


============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

============================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : 1--0
0     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
1     : 1-0-
1     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-0
2     : ['decision(value0)', '~vote(node1,value0)']
3     : -10-
3     : ['decision(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01--
4     : ['decision(value0)', '~decide(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 3

[PRIME NOTE]: number of orbits before merging: 3

[PRIME NOTE]: number of primes: 5

[QRM NOTE]: Time elapsed since start: 6.944 seconds

[QRM NOTE]: Time elapsed since last: 0.011 seconds

[QRM NOTE]: Peak memory: 1215790 bytes


======================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

======================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2]
 solution : []


Before reduction : 
 pending  : [0, 1, 2]
 solution : []

Essensial at level 0 : {0, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1)]

Covered at level 0 : {1}

After reduction : 
 pending  : []
 solution : [0, 2]


Before reduction : 
 pending  : []
 solution : [0, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 2]

[QRM NOTE]: Time elapsed since start: 6.948 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 169697 bytes


==========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

==========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : 1--0
0     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
1     : 1-0-
1     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'0$decide': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), Const('value0', EnumeratedSort('value', ('value0',))))], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))): [quorum$0$decide$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decide$1$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0, node$0$member$0$0]}

sig2const: {'quorum$0$decide$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), 'value$0$decide$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0',)): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0',)): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$0$member$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$decide$0$0; quorum$0$member$1$0', 'value$0$decide$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('quorum', ('quorum__node0_node1',)), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',))), 'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'member': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('quorum', ('quorum__node0_node1',)))}

sign_func_name2count:  {'0$decide': 1, '1$vote': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0',)): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0',)): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$0$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$decide$0; quorum$0$member$1': [quorum$0$decide$0$0; quorum$0$member$1$0]}

	identical_single_classes: {'quorum$0$decide$0; quorum$0$member$1': quorum$0$decide$0$0; quorum$0$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decide$1; value$1$vote$1': [value$0$decide$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decide$1; value$1$vote$1': value$0$decide$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decide(QUORUM0,VALUE0)', '~vote(NODE0,VALUE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decide(QUORUM0,VALUE0) | vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01--
4     : ['decision(value0)', '~decide(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~decide(quorum__node0_node1,value0)', 'decision(value0)']

sign_func_name2args: {'1$decide': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))): [quorum$1$decide$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$decide$1$0, value$0$decision$0$0]}

sig2const: {'quorum$1$decide$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), 'value$1$decide$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$decide$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$decide$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$decide$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$decide$1$0}

part_sig: ('quorum$1$decide$0$0', 'value$0$decision$0$0; value$1$decide$1$0')


---------- SigGenerator ----------

terms:  ['~decide(quorum__node0_node1,value0)', 'decision(value0)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',))), 'decision': (EnumeratedSort('value', ('value0',)),)}

sign_func_name2count:  {'1$decide': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$decide$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$decide$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$decide$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$decide$1$0}

	sort: quorum

	identical_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0]}

	identical_single_classes: {'quorum$1$decide$0': quorum$1$decide$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$decide$1': [value$0$decision$0$0; value$1$decide$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$decide$1': value$0$decision$0$0; value$1$decide$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~decide(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0. decide(QUORUM0,VALUE0) | ~decision(VALUE0)


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


====================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

====================================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : 1--0
0     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
1     : 1-0-
1     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall QUORUM0,NODE0,VALUE0. ~decide(QUORUM0,VALUE0) | vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0)
qcost : 6




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01--
4     : ['decision(value0)', '~decide(quorum__node0_node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall QUORUM0,VALUE0. decide(QUORUM0,VALUE0) | ~decision(VALUE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 7.094 seconds

[QRM NOTE]: Time elapsed since last: 0.146 seconds

[QRM NOTE]: Peak memory: 1936023 bytes


===================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

===================================================================================================


New level: 1
 pending : []
 solution : [0, 2]


Before reduction : 
 pending  : []
 solution : [0, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 2]


Solution : [0, 2] has cost 10.


Before backtrack at level 1
 pending : []
 solution : [0, 2]

After backtrack at level 1
 pending : []
 solution : [0, 2]


==================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

==================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 10

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 2]

[MIN NOTE]: solution length: 2

invariant [invar_0] forall QUORUM0,NODE0,VALUE0. ~decide(QUORUM0,VALUE0) | vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) # qcost: 6

invariant [invar_2] forall QUORUM0,VALUE0. decide(QUORUM0,VALUE0) | ~decision(VALUE0) # qcost: 4

[MIN NOTE]: number of total invariants: 2

[MIN NOTE]: total qCost: 10




[QRM NOTE]: Time elapsed since start: 7.138 seconds

[QRM NOTE]: Time elapsed since last: 0.044 seconds

[QRM NOTE]: Peak memory: 1925064 bytes


=====================================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

=====================================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.145 seconds

[QRM NOTE]: Time elapsed since last: 0.007 seconds

[QRM NOTE]: Peak memory: 879161 bytes


*******************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=2,value=1]

*******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -e -t -k -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: node=3,value=1]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 7

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 9

ivy_to_cpp target=qrm naive_consensus.node_3_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_3_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_3_value_1.finite.cpp naive_consensus.node_3_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_3_value_1.finite.o naive_consensus.node_3_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.170 seconds

[QRM NOTE]: Time elapsed since last: 7.170 seconds

[QRM NOTE]: Peak memory: 1183618 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        28

[FW NOTE]: number of dfs representative states:     12

[FW NOTE]: number of dfs non-representative states: 16


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: node=3,value=1]

==================================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decision('value',)
predicate: member('node', 'quorum')
predicate: decide('quorum', 'value')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node2,value0)', 'decide(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)']
representative states : 427, 939, 1963, 4011, 12203, 28587, 61355, 65451, 32683, 16299, 10155, 14251


=== State Orbit 0 =====================
size : 1
repr state: 0000000
lex min decimal: 427
states:
0000000




=== State Orbit 1 =====================
size : 3
repr state: 0000100
lex min decimal: 939
states:
0000010
0000100
0000001




=== State Orbit 2 =====================
size : 3
repr state: 0000110
lex min decimal: 1963
states:
0000101
0000110
0000011




=== State Orbit 3 =====================
size : 1
repr state: 0000111
lex min decimal: 4011
states:
0000111




=== State Orbit 4 =====================
size : 3
repr state: 1000111
lex min decimal: 12203
states:
0100111
0010111
1000111




=== State Orbit 5 =====================
size : 3
repr state: 1100111
lex min decimal: 28587
states:
0110111
1010111
1100111




=== State Orbit 6 =====================
size : 1
repr state: 1110111
lex min decimal: 61355
states:
1110111




=== State Orbit 7 =====================
size : 1
repr state: 1111111
lex min decimal: 65451
states:
1111111




=== State Orbit 8 =====================
size : 3
repr state: 1101111
lex min decimal: 32683
states:
1101111
1011111
0111111




=== State Orbit 9 =====================
size : 3
repr state: 1001111
lex min decimal: 16299
states:
0011111
0101111
1001111




=== State Orbit 10 =====================
size : 3
repr state: 1000110
lex min decimal: 10155
states:
1000110
0010011
0100101




=== State Orbit 11 =====================
size : 3
repr state: 1001110
lex min decimal: 14251
states:
1001110
0011011
0101101



[QRM NOTE]: Time elapsed since start: 7.267 seconds

[QRM NOTE]: Time elapsed since last: 0.097 seconds

[QRM NOTE]: Peak memory: 1222487 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: node=3,value=1]

=======================================================================================================================================================

Representatitive states in reachability not in Rmin

{32683, 16299, 14251}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.326 seconds

[QRM NOTE]: Time elapsed since last: 0.058 seconds

[QRM NOTE]: Peak memory: 206008 bytes

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy -s node=2,value=2 -f 2 -g -w -r -e -t -k -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: node=2,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 8

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 4

[FW NOTE]: number of branching actions: 8

ivy_to_cpp target=qrm naive_consensus.node_2_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_2_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_2_value_2.finite.cpp naive_consensus.node_2_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_2_value_2.finite.o naive_consensus.node_2_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.799 seconds

[QRM NOTE]: Time elapsed since last: 6.799 seconds

[QRM NOTE]: Peak memory: 1180123 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        13

[FW NOTE]: number of dfs representative states:     6

[FW NOTE]: number of dfs non-representative states: 7


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: node=2,value=2]

==================================================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1']
predicate: vote('node', 'value')
predicate: decide('quorum', 'value')
predicate: decision('value',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)', 'decision(value0)', 'decision(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)']
representative states : 3, 7, 23, 279, 343, 27


=== State Orbit 0 =====================
size : 1
repr state: 00000000
lex min decimal: 3
states:
00000000




=== State Orbit 1 =====================
size : 4
repr state: 00001000
lex min decimal: 7
states:
00000010
00001000
00000001
00000100




=== State Orbit 2 =====================
size : 2
repr state: 00001010
lex min decimal: 23
states:
00000101
00001010




=== State Orbit 3 =====================
size : 2
repr state: 10001010
lex min decimal: 279
states:
01000101
10001010




=== State Orbit 4 =====================
size : 2
repr state: 10101010
lex min decimal: 343
states:
10101010
01010101




=== State Orbit 5 =====================
size : 2
repr state: 00001001
lex min decimal: 27
states:
00001001
00000110



[QRM NOTE]: Time elapsed since start: 6.887 seconds

[QRM NOTE]: Time elapsed since last: 0.088 seconds

[QRM NOTE]: Peak memory: 1210727 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus.node_2_value_1.0.ivy: node=2,value=2]

=======================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 1023, binary: 11111111

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.903 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 168646 bytes

next size: node=3,value=2


****************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

****************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.ivy -s node=3,value=2 -f 1 -g -w -r -e -t -k -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

==========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 14

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 12

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm naive_consensus.node_3_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_3_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_3_value_2.finite.cpp naive_consensus.node_3_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_3_value_2.finite.o naive_consensus.node_3_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.493 seconds

[QRM NOTE]: Time elapsed since last: 7.493 seconds

[QRM NOTE]: Peak memory: 1186649 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        79

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 63


=================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

=================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: member('node', 'quorum')
predicate: decide('quorum', 'value')
predicate: decision('value',)
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)', 'decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)', 'decision(value0)', 'decision(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)']
representative states : 427, 939, 2987, 11179, 142251, 666539, 2763691, 2796459, 699307, 175019, 11691, 150443, 183211, 134059, 166827, 3499


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000
lex min decimal: 427
states:
00000000000000




=== State Orbit 1 =====================
size : 6
repr state: 00000000100000
lex min decimal: 939
states:
00000000000010
00000000001000
00000000000100
00000000100000
00000000000001
00000000010000




=== State Orbit 2 =====================
size : 6
repr state: 00000000101000
lex min decimal: 2987
states:
00000000010001
00000000000101
00000000101000
00000000100010
00000000010100
00000000001010




=== State Orbit 3 =====================
size : 2
repr state: 00000000101010
lex min decimal: 11179
states:
00000000101010
00000000010101




=== State Orbit 4 =====================
size : 6
repr state: 10000000101010
lex min decimal: 142251
states:
10000000101010
00100000101010
00010000010101
00001000101010
01000000010101
00000100010101




=== State Orbit 5 =====================
size : 6
repr state: 10100000101010
lex min decimal: 666539
states:
10001000101010
10100000101010
00101000101010
01010000010101
00010100010101
01000100010101




=== State Orbit 6 =====================
size : 2
repr state: 10101000101010
lex min decimal: 2763691
states:
10101000101010
01010100010101




=== State Orbit 7 =====================
size : 2
repr state: 10101010101010
lex min decimal: 2796459
states:
10101010101010
01010101010101




=== State Orbit 8 =====================
size : 6
repr state: 10100010101010
lex min decimal: 699307
states:
01000101010101
00010101010101
01010001010101
00101010101010
10001010101010
10100010101010




=== State Orbit 9 =====================
size : 6
repr state: 10000010101010
lex min decimal: 175019
states:
10000010101010
00010001010101
00001010101010
00100010101010
00000101010101
01000001010101




=== State Orbit 10 =====================
size : 6
repr state: 00000000101001
lex min decimal: 11691
states:
00000000100110
00000000011001
00000000010110
00000000101001
00000000011010
00000000100101




=== State Orbit 11 =====================
size : 6
repr state: 10000000101001
lex min decimal: 150443
states:
00010000011001
01000000010110
10000000101001
00001000011010
00000100100101
00100000100110




=== State Orbit 12 =====================
size : 6
repr state: 10000010101001
lex min decimal: 183211
states:
10000010101001
00000101100101
00010001011001
00100010100110
00001010011010
01000001010110




=== State Orbit 13 =====================
size : 6
repr state: 10000000101000
lex min decimal: 134059
states:
00100000100010
00001000001010
00000100000101
00010000010001
01000000010100
10000000101000




=== State Orbit 14 =====================
size : 6
repr state: 10000010101000
lex min decimal: 166827
states:
00010001010001
00100010100010
00000101000101
01000001010100
00001010001010
10000010101000




=== State Orbit 15 =====================
size : 6
repr state: 00000000100100
lex min decimal: 3499
states:
00000000010010
00000000001001
00000000011000
00000000100001
00000000100100
00000000000110



[QRM NOTE]: Time elapsed since start: 7.627 seconds

[QRM NOTE]: Time elapsed since last: 0.134 seconds

[QRM NOTE]: Peak memory: 1249053 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.629 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 211499 bytes


=================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

=================================================================================================================


============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

============================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : ------11------
0     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
1 (*) : 1------1------
1     : ['decide(quorum__node0_node1,value0)', 'decision(value1)']
2     : -1----1-------
2     : ['decide(quorum__node0_node1,value1)', 'decision(value0)']
3     : --1----1------
3     : ['decide(quorum__node0_node2,value0)', 'decision(value1)']
4     : ---1--1-------
4     : ['decide(quorum__node0_node2,value1)', 'decision(value0)']
5     : ----1--1------
5     : ['decide(quorum__node1_node2,value0)', 'decision(value1)']
6     : -----11-------
6     : ['decide(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 1
7 (*) : -----1------1-
7     : ['decide(quorum__node1_node2,value1)', 'vote(node2,value0)']
8     : ----1--------1
8     : ['decide(quorum__node1_node2,value0)', 'vote(node2,value1)']
9     : -----1----1---
9     : ['decide(quorum__node1_node2,value1)', 'vote(node1,value0)']
10     : ----1------1--
10     : ['decide(quorum__node1_node2,value0)', 'vote(node1,value1)']
11     : ---1--------1-
11     : ['decide(quorum__node0_node2,value1)', 'vote(node2,value0)']
12     : --1----------1
12     : ['decide(quorum__node0_node2,value0)', 'vote(node2,value1)']
13     : ---1----1-----
13     : ['decide(quorum__node0_node2,value1)', 'vote(node0,value0)']
14     : --1------1----
14     : ['decide(quorum__node0_node2,value0)', 'vote(node0,value1)']
15     : -1--------1---
15     : ['decide(quorum__node0_node1,value1)', 'vote(node1,value0)']
16     : 1----------1--
16     : ['decide(quorum__node0_node1,value0)', 'vote(node1,value1)']
17     : -1------1-----
17     : ['decide(quorum__node0_node1,value1)', 'vote(node0,value0)']
18     : 1--------1----
18     : ['decide(quorum__node0_node1,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 12
num_suborbits: 1
19 (*) : -----1-------0
19     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
20     : ----1-------0-
20     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
21     : -----1-----0--
21     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
22     : ----1-----0---
22     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
23     : ---1---------0
23     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
24     : --1---------0-
24     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
25     : ---1-----0----
25     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
26     : --1-----0-----
26     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
27     : -1---------0--
27     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
28     : 1---------0---
28     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
29     : -1-------0----
29     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
30     : 1-------0-----
30     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 9
num_suborbits: 2
31 (*) : 1----1--------
31     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node1_node2,value1)']
32     : -1--1---------
32     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node1_node2,value0)']
33     : --1--1--------
33     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node1_node2,value1)']
34     : ---11---------
34     : ['decide(quorum__node0_node2,value1)', 'decide(quorum__node1_node2,value0)']
35     : 1--1----------
35     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node2,value1)']
36     : -11-----------
36     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node2,value0)']
37 (*) : ----11--------
37     : ['decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)']
38     : --11----------
38     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)']
39     : 11------------
39     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
40 (*) : ----------11--
40     : ['vote(node1,value0)', 'vote(node1,value1)']
41     : ------------11
41     : ['vote(node2,value0)', 'vote(node2,value1)']
42     : --------11----
42     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
43 (*) : ------1----1-1
43     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
44     : -------1--1-1-
44     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
45     : ------1--1---1
45     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
46     : -------11---1-
46     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
47     : ------1--1-1--
47     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
48     : -------11-1---
48     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 1
49 (*) : ------1----10-
49     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
50     : -------1--1--0
50     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
51     : ------1---0--1
51     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
52     : -------1---01-
52     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
53     : ------1--1--0-
53     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
54     : -------11----0
54     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
55     : ------1-0----1
55     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
56     : -------1-0--1-
56     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
57     : ------1--10---
57     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
58     : -------11--0--
58     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
59     : ------1-0--1--
59     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
60     : -------1-01---
60     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
61 (*) : --0---1----1--
61     : ['decision(value0)', 'vote(node1,value1)', '~decide(quorum__node0_node2,value0)']
62     : ---0---1--1---
62     : ['decision(value1)', 'vote(node1,value0)', '~decide(quorum__node0_node2,value1)']
63     : 0-----1------1
63     : ['decision(value0)', 'vote(node2,value1)', '~decide(quorum__node0_node1,value0)']
64     : -0-----1----1-
64     : ['decision(value1)', 'vote(node2,value0)', '~decide(quorum__node0_node1,value1)']
65     : ----0-1--1----
65     : ['decision(value0)', 'vote(node0,value1)', '~decide(quorum__node1_node2,value0)']
66     : -----0-11-----
66     : ['decision(value1)', 'vote(node0,value0)', '~decide(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
67 (*) : ------1-0-0---
67     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
68     : -------1-0-0--
68     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
69     : ------1-0---0-
69     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
70     : -------1-0---0
70     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
71     : ------1---0-0-
71     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
72     : -------1---0-0
72     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
73 (*) : --0---1---0---
73     : ['decision(value0)', '~decide(quorum__node0_node2,value0)', '~vote(node1,value0)']
74     : ---0---1---0--
74     : ['decision(value1)', '~decide(quorum__node0_node2,value1)', '~vote(node1,value1)']
75     : 0-----1-----0-
75     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~vote(node2,value0)']
76     : -0-----1-----0
76     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~vote(node2,value1)']
77     : ----0-1-0-----
77     : ['decision(value0)', '~decide(quorum__node1_node2,value0)', '~vote(node0,value0)']
78     : -----0-1-0----
78     : ['decision(value1)', '~decide(quorum__node1_node2,value1)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
79 (*) : 0-0-0-1-------
79     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
80     : -0-0-0-1------
80     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 12

[PRIME NOTE]: number of orbits before merging: 13

[PRIME NOTE]: number of primes: 81

[QRM NOTE]: Time elapsed since start: 7.663 seconds

[QRM NOTE]: Time elapsed since last: 0.034 seconds

[QRM NOTE]: Peak memory: 1377509 bytes


======================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

======================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 solution : []

Essensial at level 0 : {11, 3, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

After removed
 coverage : [(0, 0), (1, 0), (2, 0), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1)]

Covered at level 0 : {0, 1, 2, 4, 6, 7, 8, 9, 10}

After reduction : 
 pending  : []
 solution : [11, 3, 5]


Before reduction : 
 pending  : []
 solution : [11, 3, 5]

Essensial at level 0 : set()

Before removed
 coverage : [(0, 0), (1, 0), (2, 0), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [11, 3, 5]

[QRM NOTE]: Time elapsed since start: 7.704 seconds

[QRM NOTE]: Time elapsed since last: 0.040 seconds

[QRM NOTE]: Peak memory: 347414 bytes


==========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

==========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
79 (*) : 0-0-0-1-------
79     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
80     : -0-0-0-1------
80     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)', 'decision(value0)']

sign_func_name2args: {'1$decide': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$decide$1$0, value$1$decide$1$1, value$1$decide$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$2]}

sig2const: {'quorum$1$decide$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$decide$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$decide$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$2': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

part_sig: ('quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2', 'value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2')


---------- SigGenerator ----------

terms:  ['~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)', 'decision(value0)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'1$decide': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

	sort: quorum

	identical_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$decide$1; value$1$decide$1; value$1$decide$1': [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$decide$1; value$1$decide$1; value$1$decide$1': value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~decide(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | decide(QUORUM0,VALUE0))


---------- Quantifier Inference: orbit 11 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 12
num_suborbits: 1
19 (*) : -----1-------0
19     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
20     : ----1-------0-
20     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
21     : -----1-----0--
21     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
22     : ----1-----0---
22     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
23     : ---1---------0
23     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
24     : --1---------0-
24     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
25     : ---1-----0----
25     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
26     : --1-----0-----
26     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
27     : -1---------0--
27     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
28     : 1---------0---
28     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
29     : -1-------0----
29     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
30     : 1-------0-----
30     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'0$decide': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$decide$0$0, quorum$0$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decide$1$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0]}

sig2const: {'quorum$0$decide$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$decide$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$decide$0$0; quorum$0$member$1$0', 'value$0$decide$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decide': 1, '1$vote': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$decide$0; quorum$0$member$1': [quorum$0$decide$0$0; quorum$0$member$1$0]}

	identical_single_classes: {'quorum$0$decide$0; quorum$0$member$1': quorum$0$decide$0$0; quorum$0$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decide$1; value$1$vote$1': [value$0$decide$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decide$1; value$1$vote$1': value$0$decide$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decide(QUORUM0,VALUE0)', 'member(NODE0,QUORUM0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | vote(NODE0,VALUE0)


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
40 (*) : ----------11--
40     : ['vote(node1,value0)', 'vote(node1,value1)']
41     : ------------11
41     : ['vote(node2,value0)', 'vote(node2,value1)']
42     : --------11----
42     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', 'vote(node1,value1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', 'vote(node1,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


====================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

====================================================================================================================


=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
79 (*) : 0-0-0-1-------
79     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
80     : -0-0-0-1------
80     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | decide(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 3 =====================
size : 12
num_suborbits: 1
19 (*) : -----1-------0
19     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
20     : ----1-------0-
20     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
21     : -----1-----0--
21     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
22     : ----1-----0---
22     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
23     : ---1---------0
23     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
24     : --1---------0-
24     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
25     : ---1-----0----
25     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
26     : --1-----0-----
26     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
27     : -1---------0--
27     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
28     : 1---------0---
28     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
29     : -1-------0----
29     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
30     : 1-------0-----
30     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,QUORUM0,NODE0. ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | vote(NODE0,VALUE0)
qcost : 6




=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
40 (*) : ----------11--
40     : ['vote(node1,value0)', 'vote(node1,value1)']
41     : ------------11
41     : ['vote(node2,value0)', 'vote(node2,value1)']
42     : --------11----
42     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3



[QRM NOTE]: Time elapsed since start: 7.911 seconds

[QRM NOTE]: Time elapsed since last: 0.207 seconds

[QRM NOTE]: Peak memory: 2137853 bytes


===================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

===================================================================================================


New level: 1
 pending : []
 solution : [11, 3, 5]


Before reduction : 
 pending  : []
 solution : [11, 3, 5]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [11, 3, 5]


Solution : [11, 3, 5] has cost 13.


Before backtrack at level 1
 pending : []
 solution : [11, 3, 5]

After backtrack at level 1
 pending : []
 solution : [11, 3, 5]


==================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

==================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 13

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [11, 3, 5]

[MIN NOTE]: solution length: 3

invariant [invar_11] forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | decide(QUORUM0,VALUE0)) # qcost: 4

invariant [invar_3] forall VALUE0,QUORUM0,NODE0. ~decide(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | vote(NODE0,VALUE0) # qcost: 6

invariant [invar_5] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

[MIN NOTE]: number of total invariants: 3

[MIN NOTE]: total qCost: 13




[QRM NOTE]: Time elapsed since start: 7.952 seconds

[QRM NOTE]: Time elapsed since last: 0.041 seconds

[QRM NOTE]: Peak memory: 2122462 bytes


=====================================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

=====================================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.037 seconds

[QRM NOTE]: Time elapsed since last: 0.085 seconds

[QRM NOTE]: Peak memory: 1084201 bytes


*******************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=2]

*******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy -s node=4,value=2 -f 2 -g -w -r -e -t -k -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: node=4,value=2]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 18

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 48

[FW NOTE]: number of branching actions: 24

ivy_to_cpp target=qrm naive_consensus.node_4_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_4_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_4_value_2.finite.cpp naive_consensus.node_4_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_4_value_2.finite.o naive_consensus.node_4_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.758 seconds

[QRM NOTE]: Time elapsed since last: 7.758 seconds

[QRM NOTE]: Peak memory: 1193202 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 9

[FW NOTE]: number of total reachable states:        173

[FW NOTE]: number of dfs representative states:     21

[FW NOTE]: number of dfs non-representative states: 152


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: node=4,value=2]

==================================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: decide('quorum', 'value')
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decision('value',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['decide(quorum__node0_node1_node2,value0)', 'decide(quorum__node0_node1_node2,value1)', 'decide(quorum__node0_node1_node3,value0)', 'decide(quorum__node0_node1_node3,value1)', 'decide(quorum__node0_node2_node3,value0)', 'decide(quorum__node0_node2_node3,value1)', 'decide(quorum__node1_node2_node3,value0)', 'decide(quorum__node1_node2_node3,value1)', 'decision(value0)', 'decision(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)']
representative states : 60855, 126391, 388535, 1437111, 5631415, 72740279, 341175735, 1414917559, 5709884855, 5726662071, 1431694775, 357952951, 89517495, 5696951, 76934583, 93711799, 68545975, 85323191, 1502647, 5959095, 454071


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000
lex min decimal: 60855
states:
000000000000000000




=== State Orbit 1 =====================
size : 8
repr state: 000000000010000000
lex min decimal: 126391
states:
000000000010000000
000000000000000100
000000000000000001
000000000000010000
000000000000100000
000000000000001000
000000000000000010
000000000001000000




=== State Orbit 2 =====================
size : 12
repr state: 000000000010100000
lex min decimal: 388535
states:
000000000000101000
000000000000010100
000000000010001000
000000000010000010
000000000010100000
000000000001010000
000000000000000101
000000000000001010
000000000001000001
000000000000100010
000000000001000100
000000000000010001




=== State Orbit 3 =====================
size : 8
repr state: 000000000010101000
lex min decimal: 1437111
states:
000000000000101010
000000000001010001
000000000000010101
000000000010101000
000000000010100010
000000000010001010
000000000001010100
000000000001000101




=== State Orbit 4 =====================
size : 2
repr state: 000000000010101010
lex min decimal: 5631415
states:
000000000001010101
000000000010101010




=== State Orbit 5 =====================
size : 8
repr state: 100000000010101010
lex min decimal: 72740279
states:
000000010001010101
000100000001010101
000001000001010101
000000100010101010
000010000010101010
001000000010101010
100000000010101010
010000000001010101




=== State Orbit 6 =====================
size : 12
repr state: 101000000010101010
lex min decimal: 341175735
states:
001000100010101010
010100000001010101
100010000010101010
010001000001010101
000100010001010101
000101000001010101
100000100010101010
000001010001010101
010000010001010101
101000000010101010
001010000010101010
000010100010101010




=== State Orbit 7 =====================
size : 8
repr state: 101010000010101010
lex min decimal: 1414917559
states:
101010000010101010
010001010001010101
001010100010101010
010100010001010101
000101010001010101
100010100010101010
101000100010101010
010101000001010101




=== State Orbit 8 =====================
size : 2
repr state: 101010100010101010
lex min decimal: 5709884855
states:
101010100010101010
010101010001010101




=== State Orbit 9 =====================
size : 2
repr state: 101010101010101010
lex min decimal: 5726662071
states:
010101010101010101
101010101010101010




=== State Orbit 10 =====================
size : 8
repr state: 101010001010101010
lex min decimal: 1431694775
states:
010101000101010101
001010101010101010
101000101010101010
010001010101010101
010100010101010101
101010001010101010
100010101010101010
000101010101010101




=== State Orbit 11 =====================
size : 12
repr state: 101000001010101010
lex min decimal: 357952951
states:
000100010101010101
100010001010101010
001000101010101010
001010001010101010
000010101010101010
101000001010101010
000001010101010101
100000101010101010
010001000101010101
010000010101010101
010100000101010101
000101000101010101




=== State Orbit 12 =====================
size : 8
repr state: 100000001010101010
lex min decimal: 89517495
states:
001000001010101010
000100000101010101
000001000101010101
000000010101010101
000000101010101010
010000000101010101
000010001010101010
100000001010101010




=== State Orbit 13 =====================
size : 8
repr state: 000000000010101001
lex min decimal: 5696951
states:
000000000001101010
000000000010101001
000000000001010110
000000000010011010
000000000001100101
000000000010010101
000000000001011001
000000000010100110




=== State Orbit 14 =====================
size : 8
repr state: 100000000010101001
lex min decimal: 76934583
states:
000000010010010101
010000000001010110
000100000001011001
000001000001100101
100000000010101001
001000000010100110
000010000010011010
000000100001101010




=== State Orbit 15 =====================
size : 8
repr state: 100000001010101001
lex min decimal: 93711799
states:
100000001010101001
001000001010100110
000100000101011001
000010001010011010
010000000101010110
000000010110010101
000001000101100101
000000101001101010




=== State Orbit 16 =====================
size : 8
repr state: 100000000010101000
lex min decimal: 68545975
states:
001000000010100010
000001000001000101
000000010000010101
100000000010101000
010000000001010100
000010000010001010
000000100000101010
000100000001010001




=== State Orbit 17 =====================
size : 8
repr state: 100000001010101000
lex min decimal: 85323191
states:
001000001010100010
000100000101010001
000010001010001010
000000101000101010
000000010100010101
010000000101010100
100000001010101000
000001000101000101




=== State Orbit 18 =====================
size : 24
repr state: 000000000010100100
lex min decimal: 1502647
states:
000000000001100010
000000000001011000
000000000010001001
000000000010100100
000000000001101000
000000000000011001
000000000010010010
000000000010010100
000000000000011010
000000000001001001
000000000000101001
000000000000010110
000000000001100001
000000000010100001
000000000010011000
000000000010000101
000000000000100101
000000000001010010
000000000001000110
000000000000100110
000000000010010001
000000000010000110
000000000001001010
000000000001100100




=== State Orbit 19 =====================
size : 6
repr state: 000000000010100101
lex min decimal: 5959095
states:
000000000001100110
000000000010100101
000000000010011001
000000000001101001
000000000010010110
000000000001011010




=== State Orbit 20 =====================
size : 12
repr state: 000000000010010000
lex min decimal: 454071
states:
000000000000000110
000000000001001000
000000000010000001
000000000001100000
000000000000100100
000000000001000010
000000000000100001
000000000010000100
000000000000001001
000000000000011000
000000000010010000
000000000000010010



[QRM NOTE]: Time elapsed since start: 8.135 seconds

[QRM NOTE]: Time elapsed since last: 0.377 seconds

[QRM NOTE]: Peak memory: 1282332 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: node=4,value=2]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.550 seconds

[QRM NOTE]: Time elapsed since last: 0.414 seconds

[QRM NOTE]: Peak memory: 328045 bytes

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -e -t -k -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: node=3,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 21

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 27

ivy_to_cpp target=qrm naive_consensus.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_3_value_3.finite.cpp naive_consensus.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_3_value_3.finite.o naive_consensus.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 8.229 seconds

[QRM NOTE]: Time elapsed since last: 8.229 seconds

[QRM NOTE]: Peak memory: 1191866 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        160

[FW NOTE]: number of dfs representative states:     17

[FW NOTE]: number of dfs non-representative states: 143


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: node=3,value=3]

==================================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decide('quorum', 'value')
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: decision('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node1,value2)', 'decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)', 'decide(quorum__node0_node2,value2)', 'decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)', 'decide(quorum__node1_node2,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)']
representative states : 427, 939, 5035, 37803, 2134955, 18912171, 153129899, 153392043, 19174315, 2397099, 38315, 2167723, 2429867, 2102187, 2364331, 5547, 43435


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000
lex min decimal: 427
states:
000000000000000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000100000000
lex min decimal: 939
states:
000000000000000010000
000000000000100000000
000000000000010000000
000000000000000100000
000000000000001000000
000000000000000001000
000000000000000000010
000000000000000000001
000000000000000000100




=== State Orbit 2 =====================
size : 9
repr state: 000000000000100100000
lex min decimal: 5035
states:
000000000000000100100
000000000000010000010
000000000000010010000
000000000000100000100
000000000000000010010
000000000000001001000
000000000000000001001
000000000000100100000
000000000000001000001




=== State Orbit 3 =====================
size : 3
repr state: 000000000000100100100
lex min decimal: 37803
states:
000000000000010010010
000000000000100100100
000000000000001001001




=== State Orbit 4 =====================
size : 9
repr state: 100000000000100100100
lex min decimal: 2134955
states:
000000100000100100100
100000000000100100100
000100000000100100100
010000000000010010010
000010000000010010010
000000010000010010010
000000001000001001001
001000000000001001001
000001000000001001001




=== State Orbit 5 =====================
size : 9
repr state: 100100000000100100100
lex min decimal: 18912171
states:
100100000000100100100
010000010000010010010
001001000000001001001
100000100000100100100
001000001000001001001
010010000000010010010
000010010000010010010
000100100000100100100
000001001000001001001




=== State Orbit 6 =====================
size : 3
repr state: 100100100000100100100
lex min decimal: 153129899
states:
010010010000010010010
100100100000100100100
001001001000001001001




=== State Orbit 7 =====================
size : 3
repr state: 100100100100100100100
lex min decimal: 153392043
states:
100100100100100100100
001001001001001001001
010010010010010010010




=== State Orbit 8 =====================
size : 9
repr state: 100100000100100100100
lex min decimal: 19174315
states:
000010010010010010010
000100100100100100100
000001001001001001001
010010000010010010010
010000010010010010010
001001000001001001001
100000100100100100100
001000001001001001001
100100000100100100100




=== State Orbit 9 =====================
size : 9
repr state: 100000000100100100100
lex min decimal: 2397099
states:
000000001001001001001
010000000010010010010
100000000100100100100
000100000100100100100
001000000001001001001
000000010010010010010
000000100100100100100
000001000001001001001
000010000010010010010




=== State Orbit 10 =====================
size : 18
repr state: 000000000000100100010
lex min decimal: 38315
states:
000000000000010001010
000000000000001100001
000000000000001010001
000000000000100100001
000000000000100001001
000000000000001100100
000000000000001001010
000000000000010100010
000000000000100001100
000000000000001010010
000000000000001001100
000000000000100010100
000000000000010100100
000000000000010010001
000000000000100100010
000000000000010010100
000000000000100010010
000000000000010001001




=== State Orbit 11 =====================
size : 18
repr state: 100000000000100100010
lex min decimal: 2167723
states:
010000000000010010001
100000000000100100001
000010000000010001010
000000010000001010010
001000000000001001100
000000100000001100100
010000000000010010100
000001000000001100001
000000100000010100100
000100000000100001100
000010000000010100010
000000010000100010010
000000001000100001001
000100000000100010100
000001000000001010001
000000001000010001001
001000000000001001010
100000000000100100010




=== State Orbit 12 =====================
size : 18
repr state: 100000000100100100010
lex min decimal: 2429867
states:
000100000100100001100
001000000001001001100
000000010010001010010
000000010010100010010
100000000100100100010
000100000100100010100
000000001001100001001
000000100100010100100
000010000010010100010
000001000001001010001
100000000100100100001
000000100100001100100
010000000010010010100
010000000010010010001
001000000001001001010
000010000010010001010
000001000001001100001
000000001001010001001




=== State Orbit 13 =====================
size : 9
repr state: 100000000000100100000
lex min decimal: 2102187
states:
010000000000010010000
000000100000000100100
100000000000100100000
000000001000000001001
000001000000001000001
001000000000001001000
000010000000010000010
000100000000100000100
000000010000000010010




=== State Orbit 14 =====================
size : 9
repr state: 100000000100100100000
lex min decimal: 2364331
states:
100000000100100100000
000001000001001000001
000000100100000100100
000000010010000010010
000100000100100000100
000010000010010000010
010000000010010010000
000000001001000001001
001000000001001001000




=== State Orbit 15 =====================
size : 18
repr state: 000000000000100010000
lex min decimal: 5547
states:
000000000000010001000
000000000000010100000
000000000000001000100
000000000000000001010
000000000000100000001
000000000000000100010
000000000000010000100
000000000000000001100
000000000000100010000
000000000000000010001
000000000000001000010
000000000000001100000
000000000000000010100
000000000000001010000
000000000000010000001
000000000000000100001
000000000000100000010
000000000000100001000




=== State Orbit 16 =====================
size : 6
repr state: 000000000000100010001
lex min decimal: 43435
states:
000000000000001100010
000000000000100001010
000000000000010001100
000000000000001010100
000000000000100010001
000000000000010100001



[QRM NOTE]: Time elapsed since start: 8.515 seconds

[QRM NOTE]: Time elapsed since last: 0.285 seconds

[QRM NOTE]: Peak memory: 1271479 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_2.0.ivy: node=3,value=3]

=======================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 460175275, binary: 011011011011011011011

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 8.664 seconds

[QRM NOTE]: Time elapsed since last: 0.149 seconds

[QRM NOTE]: Peak memory: 275961 bytes

next size: node=3,value=3


****************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

****************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.ivy -s node=3,value=3 -f 1 -g -w -r -e -t -k -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.024 seconds

[QRM NOTE]: Time elapsed since last: 0.024 seconds

[QRM NOTE]: Peak memory: 57340 bytes


=================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

=================================================================================================================


============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

============================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ------------------11-
0     : ['vote(node2,value0)', 'vote(node2,value1)']
1     : ------------------1-1
1     : ['vote(node2,value0)', 'vote(node2,value2)']
2     : -------------------11
2     : ['vote(node2,value1)', 'vote(node2,value2)']
3     : ---------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ---------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : ----------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ------------11-------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : --------1---------1--
9     : ['decide(quorum__node1_node2,value2)', 'vote(node2,value0)']
10     : -------1----------1--
10     : ['decide(quorum__node1_node2,value1)', 'vote(node2,value0)']
11     : --------1----------1-
11     : ['decide(quorum__node1_node2,value2)', 'vote(node2,value1)']
12     : ------1------------1-
12     : ['decide(quorum__node1_node2,value0)', 'vote(node2,value1)']
13     : -------1------------1
13     : ['decide(quorum__node1_node2,value1)', 'vote(node2,value2)']
14     : ------1-------------1
14     : ['decide(quorum__node1_node2,value0)', 'vote(node2,value2)']
15     : --------1------1-----
15     : ['decide(quorum__node1_node2,value2)', 'vote(node1,value0)']
16     : -------1-------1-----
16     : ['decide(quorum__node1_node2,value1)', 'vote(node1,value0)']
17     : --------1-------1----
17     : ['decide(quorum__node1_node2,value2)', 'vote(node1,value1)']
18     : ------1---------1----
18     : ['decide(quorum__node1_node2,value0)', 'vote(node1,value1)']
19     : -------1---------1---
19     : ['decide(quorum__node1_node2,value1)', 'vote(node1,value2)']
20     : ------1----------1---
20     : ['decide(quorum__node1_node2,value0)', 'vote(node1,value2)']
21     : -----1------------1--
21     : ['decide(quorum__node0_node2,value2)', 'vote(node2,value0)']
22     : ----1-------------1--
22     : ['decide(quorum__node0_node2,value1)', 'vote(node2,value0)']
23     : -----1-------------1-
23     : ['decide(quorum__node0_node2,value2)', 'vote(node2,value1)']
24     : ---1---------------1-
24     : ['decide(quorum__node0_node2,value0)', 'vote(node2,value1)']
25     : ----1---------------1
25     : ['decide(quorum__node0_node2,value1)', 'vote(node2,value2)']
26     : ---1----------------1
26     : ['decide(quorum__node0_node2,value0)', 'vote(node2,value2)']
27     : -----1------1--------
27     : ['decide(quorum__node0_node2,value2)', 'vote(node0,value0)']
28     : ----1-------1--------
28     : ['decide(quorum__node0_node2,value1)', 'vote(node0,value0)']
29     : -----1-------1-------
29     : ['decide(quorum__node0_node2,value2)', 'vote(node0,value1)']
30     : ---1---------1-------
30     : ['decide(quorum__node0_node2,value0)', 'vote(node0,value1)']
31     : ----1---------1------
31     : ['decide(quorum__node0_node2,value1)', 'vote(node0,value2)']
32     : ---1----------1------
32     : ['decide(quorum__node0_node2,value0)', 'vote(node0,value2)']
33     : --1------------1-----
33     : ['decide(quorum__node0_node1,value2)', 'vote(node1,value0)']
34     : -1-------------1-----
34     : ['decide(quorum__node0_node1,value1)', 'vote(node1,value0)']
35     : --1-------------1----
35     : ['decide(quorum__node0_node1,value2)', 'vote(node1,value1)']
36     : 1---------------1----
36     : ['decide(quorum__node0_node1,value0)', 'vote(node1,value1)']
37     : -1---------------1---
37     : ['decide(quorum__node0_node1,value1)', 'vote(node1,value2)']
38     : 1----------------1---
38     : ['decide(quorum__node0_node1,value0)', 'vote(node1,value2)']
39     : --1---------1--------
39     : ['decide(quorum__node0_node1,value2)', 'vote(node0,value0)']
40     : -1----------1--------
40     : ['decide(quorum__node0_node1,value1)', 'vote(node0,value0)']
41     : --1----------1-------
41     : ['decide(quorum__node0_node1,value2)', 'vote(node0,value1)']
42     : 1------------1-------
42     : ['decide(quorum__node0_node1,value0)', 'vote(node0,value1)']
43     : -1------------1------
43     : ['decide(quorum__node0_node1,value1)', 'vote(node0,value2)']
44     : 1-------------1------
44     : ['decide(quorum__node0_node1,value0)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 18
num_suborbits: 1
45 (*) : --1------1-----------
45     : ['decide(quorum__node0_node1,value2)', 'decision(value0)']
46     : -1-------1-----------
46     : ['decide(quorum__node0_node1,value1)', 'decision(value0)']
47     : --1-------1----------
47     : ['decide(quorum__node0_node1,value2)', 'decision(value1)']
48     : 1---------1----------
48     : ['decide(quorum__node0_node1,value0)', 'decision(value1)']
49     : -1---------1---------
49     : ['decide(quorum__node0_node1,value1)', 'decision(value2)']
50     : 1----------1---------
50     : ['decide(quorum__node0_node1,value0)', 'decision(value2)']
51     : -----1---1-----------
51     : ['decide(quorum__node0_node2,value2)', 'decision(value0)']
52     : ----1----1-----------
52     : ['decide(quorum__node0_node2,value1)', 'decision(value0)']
53     : -----1----1----------
53     : ['decide(quorum__node0_node2,value2)', 'decision(value1)']
54     : ---1------1----------
54     : ['decide(quorum__node0_node2,value0)', 'decision(value1)']
55     : ----1------1---------
55     : ['decide(quorum__node0_node2,value1)', 'decision(value2)']
56     : ---1-------1---------
56     : ['decide(quorum__node0_node2,value0)', 'decision(value2)']
57     : --------11-----------
57     : ['decide(quorum__node1_node2,value2)', 'decision(value0)']
58     : -------1-1-----------
58     : ['decide(quorum__node1_node2,value1)', 'decision(value0)']
59     : --------1-1----------
59     : ['decide(quorum__node1_node2,value2)', 'decision(value1)']
60     : ------1---1----------
60     : ['decide(quorum__node1_node2,value0)', 'decision(value1)']
61     : -------1---1---------
61     : ['decide(quorum__node1_node2,value1)', 'decision(value2)']
62     : ------1----1---------
62     : ['decide(quorum__node1_node2,value0)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
63 (*) : ---------1-1---------
63     : ['decision(value0)', 'decision(value2)']
64     : ---------11----------
64     : ['decision(value0)', 'decision(value1)']
65     : ----------11---------
65     : ['decision(value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
66 (*) : ------1--------0-----
66     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
67     : -------1--------0----
67     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
68     : --------1--------0---
68     : ['decide(quorum__node1_node2,value2)', '~vote(node1,value2)']
69     : ------1-----------0--
69     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
70     : -------1-----------0-
70     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
71     : --------1-----------0
71     : ['decide(quorum__node1_node2,value2)', '~vote(node2,value2)']
72     : ---1--------0--------
72     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
73     : ----1--------0-------
73     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
74     : -----1--------0------
74     : ['decide(quorum__node0_node2,value2)', '~vote(node0,value2)']
75     : ---1--------------0--
75     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
76     : ----1--------------0-
76     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
77     : -----1--------------0
77     : ['decide(quorum__node0_node2,value2)', '~vote(node2,value2)']
78     : 1-----------0--------
78     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
79     : -1-----------0-------
79     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
80     : --1-----------0------
80     : ['decide(quorum__node0_node1,value2)', '~vote(node0,value2)']
81     : 1--------------0-----
81     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
82     : -1--------------0----
82     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
83     : --1--------------0---
83     : ['decide(quorum__node0_node1,value2)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 27
num_suborbits: 2
84 (*) : --1---1--------------
84     : ['decide(quorum__node0_node1,value2)', 'decide(quorum__node1_node2,value0)']
85     : -1----1--------------
85     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node1_node2,value0)']
86     : --1----1-------------
86     : ['decide(quorum__node0_node1,value2)', 'decide(quorum__node1_node2,value1)']
87     : 1------1-------------
87     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node1_node2,value1)']
88     : -1------1------------
88     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node1_node2,value2)']
89     : 1-------1------------
89     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node1_node2,value2)']
90     : -----11--------------
90     : ['decide(quorum__node0_node2,value2)', 'decide(quorum__node1_node2,value0)']
91     : ----1-1--------------
91     : ['decide(quorum__node0_node2,value1)', 'decide(quorum__node1_node2,value0)']
92     : -----1-1-------------
92     : ['decide(quorum__node0_node2,value2)', 'decide(quorum__node1_node2,value1)']
93     : ---1---1-------------
93     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node1_node2,value1)']
94     : ----1---1------------
94     : ['decide(quorum__node0_node2,value1)', 'decide(quorum__node1_node2,value2)']
95     : ---1----1------------
95     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node1_node2,value2)']
96     : --11-----------------
96     : ['decide(quorum__node0_node1,value2)', 'decide(quorum__node0_node2,value0)']
97     : -1-1-----------------
97     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node2,value0)']
98     : --1-1----------------
98     : ['decide(quorum__node0_node1,value2)', 'decide(quorum__node0_node2,value1)']
99     : 1---1----------------
99     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node2,value1)']
100     : -1---1---------------
100     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node2,value2)']
101     : 1----1---------------
101     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node2,value2)']
102 (*) : ------1-1------------
102     : ['decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value2)']
103     : ------11-------------
103     : ['decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)']
104     : -------11------------
104     : ['decide(quorum__node1_node2,value1)', 'decide(quorum__node1_node2,value2)']
105     : ---1-1---------------
105     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value2)']
106     : ---11----------------
106     : ['decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)']
107     : ----11---------------
107     : ['decide(quorum__node0_node2,value1)', 'decide(quorum__node0_node2,value2)']
108     : 1-1------------------
108     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value2)']
109     : 11-------------------
109     : ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)']
110     : -11------------------
110     : ['decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
111 (*) : -----0-----1----1----
111     : ['decision(value2)', 'vote(node1,value1)', '~decide(quorum__node0_node2,value2)']
112     : ----0-----1------1---
112     : ['decision(value1)', 'vote(node1,value2)', '~decide(quorum__node0_node2,value1)']
113     : -----0-----1---1-----
113     : ['decision(value2)', 'vote(node1,value0)', '~decide(quorum__node0_node2,value2)']
114     : ---0-----1-------1---
114     : ['decision(value0)', 'vote(node1,value2)', '~decide(quorum__node0_node2,value0)']
115     : ----0-----1----1-----
115     : ['decision(value1)', 'vote(node1,value0)', '~decide(quorum__node0_node2,value1)']
116     : ---0-----1------1----
116     : ['decision(value0)', 'vote(node1,value1)', '~decide(quorum__node0_node2,value0)']
117     : --0--------1-------1-
117     : ['decision(value2)', 'vote(node2,value1)', '~decide(quorum__node0_node1,value2)']
118     : -0--------1---------1
118     : ['decision(value1)', 'vote(node2,value2)', '~decide(quorum__node0_node1,value1)']
119     : --0--------1------1--
119     : ['decision(value2)', 'vote(node2,value0)', '~decide(quorum__node0_node1,value2)']
120     : 0--------1----------1
120     : ['decision(value0)', 'vote(node2,value2)', '~decide(quorum__node0_node1,value0)']
121     : -0--------1-------1--
121     : ['decision(value1)', 'vote(node2,value0)', '~decide(quorum__node0_node1,value1)']
122     : 0--------1---------1-
122     : ['decision(value0)', 'vote(node2,value1)', '~decide(quorum__node0_node1,value0)']
123     : --------0--1-1-------
123     : ['decision(value2)', 'vote(node0,value1)', '~decide(quorum__node1_node2,value2)']
124     : -------0--1---1------
124     : ['decision(value1)', 'vote(node0,value2)', '~decide(quorum__node1_node2,value1)']
125     : --------0--11--------
125     : ['decision(value2)', 'vote(node0,value0)', '~decide(quorum__node1_node2,value2)']
126     : ------0--1----1------
126     : ['decision(value0)', 'vote(node0,value2)', '~decide(quorum__node1_node2,value0)']
127     : -------0--1-1--------
127     : ['decision(value1)', 'vote(node0,value0)', '~decide(quorum__node1_node2,value1)']
128     : ------0--1---1-------
128     : ['decision(value0)', 'vote(node0,value1)', '~decide(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
129 (*) : -----------1--0-1----
129     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
130     : ----------1--0---1---
130     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
131     : -----------1--01-----
131     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
132     : ---------1--0----1---
132     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
133     : ----------1--0-1-----
133     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
134     : ---------1--0---1----
134     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
135     : -----------1--0----1-
135     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
136     : ----------1--0------1
136     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
137     : -----------1--0---1--
137     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
138     : ---------1--0-------1
138     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
139     : ----------1--0----1--
139     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
140     : ---------1--0------1-
140     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
141     : -----------1-1---0---
141     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
142     : ----------1---1-0----
142     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
143     : -----------11----0---
143     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
144     : ---------1----10-----
144     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
145     : ----------1-1---0----
145     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
146     : ---------1---1-0-----
146     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
147     : -----------1-----0-1-
147     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
148     : ----------1-----0---1
148     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
149     : -----------1-----01--
149     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
150     : ---------1-----0----1
150     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
151     : ----------1-----0-1--
151     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
152     : ---------1-----0---1-
152     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
153     : -----------1-1------0
153     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
154     : ----------1---1----0-
154     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
155     : -----------11-------0
155     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
156     : ---------1----1---0--
156     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
157     : ----------1-1------0-
157     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
158     : ---------1---1----0--
158     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
159     : -----------1----1---0
159     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
160     : ----------1------1-0-
160     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
161     : -----------1---1----0
161     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
162     : ---------1-------10--
162     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
163     : ----------1----1---0-
163     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
164     : ---------1------1-0--
164     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 36
num_suborbits: 2
165 (*) : -----------1-1--1----
165     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
166     : ----------1---1--1---
166     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
167     : -----------11--1-----
167     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
168     : ---------1----1--1---
168     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
169     : ----------1-1--1-----
169     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
170     : ---------1---1--1----
170     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
171     : -----------1-1-----1-
171     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
172     : ----------1---1-----1
172     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
173     : -----------11-----1--
173     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
174     : ---------1----1-----1
174     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
175     : ----------1-1-----1--
175     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
176     : ---------1---1-----1-
176     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
177     : -----------1----1--1-
177     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
178     : ----------1------1--1
178     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
179     : -----------1---1--1--
179     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
180     : ---------1-------1--1
180     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
181     : ----------1----1--1--
181     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
182     : ---------1------1--1-
182     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
183 (*) : -----------11---1----
183     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
184     : ----------1-1----1---
184     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
185     : -----------1-1-1-----
185     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
186     : ---------1---1---1---
186     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
187     : ----------1---11-----
187     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
188     : ---------1----1-1----
188     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
189     : -----------11------1-
189     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
190     : ----------1-1-------1
190     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
191     : -----------1-1----1--
191     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
192     : ---------1---1------1
192     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
193     : ----------1---1---1--
193     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
194     : ---------1----1----1-
194     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
195     : -----------1---1---1-
195     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
196     : ----------1----1----1
196     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
197     : -----------1----1-1--
197     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
198     : ---------1------1---1
198     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
199     : ----------1------11--
199     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
200     : ---------1-------1-1-
200     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
201 (*) : -----0-----1-----0---
201     : ['decision(value2)', '~decide(quorum__node0_node2,value2)', '~vote(node1,value2)']
202     : ----0-----1-----0----
202     : ['decision(value1)', '~decide(quorum__node0_node2,value1)', '~vote(node1,value1)']
203     : ---0-----1-----0-----
203     : ['decision(value0)', '~decide(quorum__node0_node2,value0)', '~vote(node1,value0)']
204     : --0--------1--------0
204     : ['decision(value2)', '~decide(quorum__node0_node1,value2)', '~vote(node2,value2)']
205     : -0--------1--------0-
205     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~vote(node2,value1)']
206     : 0--------1--------0--
206     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~vote(node2,value0)']
207     : --------0--1--0------
207     : ['decision(value2)', '~decide(quorum__node1_node2,value2)', '~vote(node0,value2)']
208     : -------0--1--0-------
208     : ['decision(value1)', '~decide(quorum__node1_node2,value1)', '~vote(node0,value1)']
209     : ------0--1--0--------
209     : ['decision(value0)', '~decide(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
210 (*) : -----------1--0--0---
210     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
211     : ----------1--0--0----
211     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
212     : ---------1--0--0-----
212     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
213     : -----------1--0-----0
213     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
214     : ----------1--0-----0-
214     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
215     : ---------1--0-----0--
215     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
216     : -----------1-----0--0
216     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
217     : ----------1-----0--0-
217     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
218     : ---------1-----0--0--
218     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
219 (*) : --0--0--0--1---------
219     : ['decision(value2)', '~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)']
220     : -0--0--0--1----------
220     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
221     : 0--0--0--1-----------
221     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 12

[PRIME NOTE]: number of orbits before merging: 14

[PRIME NOTE]: number of primes: 222

[QRM NOTE]: Time elapsed since start: 0.089 seconds

[QRM NOTE]: Time elapsed since last: 0.065 seconds

[QRM NOTE]: Peak memory: 1387130 bytes


======================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

======================================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 solution : []

Essensial at level 0 : {0, 11, 4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, 0), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1)]

Covered at level 0 : {1, 2, 3, 5, 6, 7, 8, 9, 10}

After reduction : 
 pending  : []
 solution : [0, 11, 4]


Before reduction : 
 pending  : []
 solution : [0, 11, 4]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, 0), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 4]

[QRM NOTE]: Time elapsed since start: 0.124 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 351764 bytes


==========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

==========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ------------------11-
0     : ['vote(node2,value0)', 'vote(node2,value1)']
1     : ------------------1-1
1     : ['vote(node2,value0)', 'vote(node2,value2)']
2     : -------------------11
2     : ['vote(node2,value1)', 'vote(node2,value2)']
3     : ---------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ---------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : ----------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ------------11-------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', 'vote(node2,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE1,VALUE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
219 (*) : --0--0--0--1---------
219     : ['decision(value2)', '~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)']
220     : -0--0--0--1----------
220     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
221     : 0--0--0--1-----------
221     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)', 'decision(value2)']

sign_func_name2args: {'1$decide': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$decide$1$0, value$1$decide$1$1, value$1$decide$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$decide$0$2]}

sig2const: {'quorum$1$decide$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$decide$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$decide$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$decide$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

part_sig: ('quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2', 'value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2')


---------- SigGenerator ----------

terms:  ['~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)', 'decision(value2)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$decide': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$decide$0$0 | quorum$1$decide$0$1 | quorum$1$decide$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

	sort: quorum

	identical_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$decide$0': [quorum$1$decide$0$0, quorum$1$decide$0$1, quorum$1$decide$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$decide$1; value$1$decide$1; value$1$decide$1': [value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$decide$1; value$1$decide$1; value$1$decide$1': value$0$decision$0$0; value$1$decide$1$0; value$1$decide$1$1; value$1$decide$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~decide(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. decide(QUORUM0,VALUE0) | ~decision(VALUE0))


---------- Quantifier Inference: orbit 11 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
66 (*) : ------1--------0-----
66     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
67     : -------1--------0----
67     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
68     : --------1--------0---
68     : ['decide(quorum__node1_node2,value2)', '~vote(node1,value2)']
69     : ------1-----------0--
69     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
70     : -------1-----------0-
70     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
71     : --------1-----------0
71     : ['decide(quorum__node1_node2,value2)', '~vote(node2,value2)']
72     : ---1--------0--------
72     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
73     : ----1--------0-------
73     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
74     : -----1--------0------
74     : ['decide(quorum__node0_node2,value2)', '~vote(node0,value2)']
75     : ---1--------------0--
75     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
76     : ----1--------------0-
76     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
77     : -----1--------------0
77     : ['decide(quorum__node0_node2,value2)', '~vote(node2,value2)']
78     : 1-----------0--------
78     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
79     : -1-----------0-------
79     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
80     : --1-----------0------
80     : ['decide(quorum__node0_node1,value2)', '~vote(node0,value2)']
81     : 1--------------0-----
81     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
82     : -1--------------0----
82     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
83     : --1--------------0---
83     : ['decide(quorum__node0_node1,value2)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)', 'member(node1,quorum__node1_node2)']

sign_func_name2args: {'0$decide': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$decide$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decide$1$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0]}

sig2const: {'quorum$0$decide$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$decide$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$decide$0$0; quorum$0$member$1$0', 'value$0$decide$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)', 'member(node1,quorum__node1_node2)']

func_name2symbol:  {'decide': Const('decide', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decide': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decide': 1, '1$vote': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$decide$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decide$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$decide$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decide$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$decide$0; quorum$0$member$1': [quorum$0$decide$0$0; quorum$0$member$1$0]}

	identical_single_classes: {'quorum$0$decide$0; quorum$0$member$1': quorum$0$decide$0$0; quorum$0$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decide$1; value$1$vote$1': [value$0$decide$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decide$1; value$1$vote$1': value$0$decide$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decide': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'member(NODE0,QUORUM0)', 'decide(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM0,VALUE0. vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~decide(QUORUM0,VALUE0)


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


====================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

====================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ------------------11-
0     : ['vote(node2,value0)', 'vote(node2,value1)']
1     : ------------------1-1
1     : ['vote(node2,value0)', 'vote(node2,value2)']
2     : -------------------11
2     : ['vote(node2,value1)', 'vote(node2,value2)']
3     : ---------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ---------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : ----------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ------------11-------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall NODE0,VALUE1,VALUE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
219 (*) : --0--0--0--1---------
219     : ['decision(value2)', '~decide(quorum__node0_node1,value2)', '~decide(quorum__node0_node2,value2)', '~decide(quorum__node1_node2,value2)']
220     : -0--0--0--1----------
220     : ['decision(value1)', '~decide(quorum__node0_node1,value1)', '~decide(quorum__node0_node2,value1)', '~decide(quorum__node1_node2,value1)']
221     : 0--0--0--1-----------
221     : ['decision(value0)', '~decide(quorum__node0_node1,value0)', '~decide(quorum__node0_node2,value0)', '~decide(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. decide(QUORUM0,VALUE0) | ~decision(VALUE0))
qcost : 4




=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
66 (*) : ------1--------0-----
66     : ['decide(quorum__node1_node2,value0)', '~vote(node1,value0)']
67     : -------1--------0----
67     : ['decide(quorum__node1_node2,value1)', '~vote(node1,value1)']
68     : --------1--------0---
68     : ['decide(quorum__node1_node2,value2)', '~vote(node1,value2)']
69     : ------1-----------0--
69     : ['decide(quorum__node1_node2,value0)', '~vote(node2,value0)']
70     : -------1-----------0-
70     : ['decide(quorum__node1_node2,value1)', '~vote(node2,value1)']
71     : --------1-----------0
71     : ['decide(quorum__node1_node2,value2)', '~vote(node2,value2)']
72     : ---1--------0--------
72     : ['decide(quorum__node0_node2,value0)', '~vote(node0,value0)']
73     : ----1--------0-------
73     : ['decide(quorum__node0_node2,value1)', '~vote(node0,value1)']
74     : -----1--------0------
74     : ['decide(quorum__node0_node2,value2)', '~vote(node0,value2)']
75     : ---1--------------0--
75     : ['decide(quorum__node0_node2,value0)', '~vote(node2,value0)']
76     : ----1--------------0-
76     : ['decide(quorum__node0_node2,value1)', '~vote(node2,value1)']
77     : -----1--------------0
77     : ['decide(quorum__node0_node2,value2)', '~vote(node2,value2)']
78     : 1-----------0--------
78     : ['decide(quorum__node0_node1,value0)', '~vote(node0,value0)']
79     : -1-----------0-------
79     : ['decide(quorum__node0_node1,value1)', '~vote(node0,value1)']
80     : --1-----------0------
80     : ['decide(quorum__node0_node1,value2)', '~vote(node0,value2)']
81     : 1--------------0-----
81     : ['decide(quorum__node0_node1,value0)', '~vote(node1,value0)']
82     : -1--------------0----
82     : ['decide(quorum__node0_node1,value1)', '~vote(node1,value1)']
83     : --1--------------0---
83     : ['decide(quorum__node0_node1,value2)', '~vote(node1,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall NODE0,QUORUM0,VALUE0. vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~decide(QUORUM0,VALUE0)
qcost : 6



[QRM NOTE]: Time elapsed since start: 0.429 seconds

[QRM NOTE]: Time elapsed since last: 0.305 seconds

[QRM NOTE]: Peak memory: 2153476 bytes


===================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

===================================================================================================


New level: 1
 pending : []
 solution : [0, 11, 4]


Before reduction : 
 pending  : []
 solution : [0, 11, 4]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 4]


Solution : [0, 11, 4] has cost 16.


Before backtrack at level 1
 pending : []
 solution : [0, 11, 4]

After backtrack at level 1
 pending : []
 solution : [0, 11, 4]


==================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

==================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 16

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 11, 4]

[MIN NOTE]: solution length: 3

invariant [invar_0] forall NODE0,VALUE1,VALUE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_11] forall VALUE0. (exists QUORUM0. decide(QUORUM0,VALUE0) | ~decision(VALUE0)) # qcost: 4

invariant [invar_4] forall NODE0,QUORUM0,VALUE0. vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~decide(QUORUM0,VALUE0) # qcost: 6

[MIN NOTE]: number of total invariants: 3

[MIN NOTE]: total qCost: 16




[QRM NOTE]: Time elapsed since start: 0.499 seconds

[QRM NOTE]: Time elapsed since last: 0.071 seconds

[QRM NOTE]: Peak memory: 2133205 bytes


=====================================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

=====================================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.756 seconds

[QRM NOTE]: Time elapsed since last: 0.256 seconds

[QRM NOTE]: Peak memory: 1130256 bytes


*******************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/naive_consensus.ivy: node=3,value=3]

*******************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy -s node=4,value=3 -f 2 -g -w -r -e -t -k -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: node=4,value=3]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 27

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 36

ivy_to_cpp target=qrm naive_consensus.node_4_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_4_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_4_value_3.finite.cpp naive_consensus.node_4_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_4_value_3.finite.o naive_consensus.node_4_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.749 seconds

[QRM NOTE]: Time elapsed since last: 6.749 seconds

[QRM NOTE]: Peak memory: 1204870 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 9

[FW NOTE]: number of total reachable states:        418

[FW NOTE]: number of dfs representative states:     23

[FW NOTE]: number of dfs non-representative states: 395


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: node=4,value=3]

==================================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: decide('quorum', 'value')
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['decide(quorum__node0_node1_node2,value0)', 'decide(quorum__node0_node1_node2,value1)', 'decide(quorum__node0_node1_node2,value2)', 'decide(quorum__node0_node1_node3,value0)', 'decide(quorum__node0_node1_node3,value1)', 'decide(quorum__node0_node1_node3,value2)', 'decide(quorum__node0_node2_node3,value0)', 'decide(quorum__node0_node2_node3,value1)', 'decide(quorum__node0_node2_node3,value2)', 'decide(quorum__node1_node2_node3,value0)', 'decide(quorum__node1_node2_node3,value1)', 'decide(quorum__node1_node2_node3,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)']
representative states : 60855, 126391, 650679, 4844983, 38399415, 2185883063, 19365752247, 156804705719, 1256316333495, 1256584768951, 157073141175, 19634187703, 2454318519, 38464951, 2219437495, 2487872951, 2152328631, 2420764087, 4910519, 38989239, 39120311, 716215, 5565879


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000000
lex min decimal: 60855
states:
000000000000000000000000000




=== State Orbit 1 =====================
size : 12
repr state: 000000000000000100000000000
lex min decimal: 126391
states:
000000000000000100000000000
000000000000000000000100000
000000000000000000001000000
000000000000000000000000100
000000000000000000000000001
000000000000000000000010000
000000000000000010000000000
000000000000000000000000010
000000000000000000000001000
000000000000000000010000000
000000000000000001000000000
000000000000000000100000000




=== State Orbit 2 =====================
size : 18
repr state: 000000000000000100100000000
lex min decimal: 650679
states:
000000000000000100000100000
000000000000000000001001000
000000000000000000100000100
000000000000000010000000010
000000000000000000100100000
000000000000000001000001000
000000000000000001001000000
000000000000000000010010000
000000000000000000000010010
000000000000000010010000000
000000000000000010000010000
000000000000000001000000001
000000000000000100100000000
000000000000000100000000100
000000000000000000010000010
000000000000000000000001001
000000000000000000000100100
000000000000000000001000001




=== State Orbit 3 =====================
size : 12
repr state: 000000000000000100100100000
lex min decimal: 4844983
states:
000000000000000001001000001
000000000000000010000010010
000000000000000001000001001
000000000000000100100100000
000000000000000010010000010
000000000000000100000100100
000000000000000000010010010
000000000000000001001001000
000000000000000100100000100
000000000000000000100100100
000000000000000000001001001
000000000000000010010010000




=== State Orbit 4 =====================
size : 3
repr state: 000000000000000100100100100
lex min decimal: 38399415
states:
000000000000000100100100100
000000000000000001001001001
000000000000000010010010010




=== State Orbit 5 =====================
size : 12
repr state: 100000000000000100100100100
lex min decimal: 2185883063
states:
000010000000000010010010010
000001000000000001001001001
000000000010000010010010010
000000001000000001001001001
000100000000000100100100100
000000100000000100100100100
000000010000000010010010010
100000000000000100100100100
000000000100000100100100100
000000000001000001001001001
010000000000000010010010010
001000000000000001001001001




=== State Orbit 6 =====================
size : 18
repr state: 100100000000000100100100100
lex min decimal: 19365752247
states:
000000001001000001001001001
010000000010000010010010010
000100000100000100100100100
000010000010000010010010010
000010010000000010010010010
010010000000000010010010010
010000010000000010010010010
001000000001000001001001001
000100100000000100100100100
000000100100000100100100100
100100000000000100100100100
001001000000000001001001001
001000001000000001001001001
100000100000000100100100100
000001001000000001001001001
000000010010000010010010010
000001000001000001001001001
100000000100000100100100100




=== State Orbit 7 =====================
size : 12
repr state: 100100100000000100100100100
lex min decimal: 156804705719
states:
100100000100000100100100100
001001000001000001001001001
001000001001000001001001001
010010000010000010010010010
100100100000000100100100100
000010010010000010010010010
010000010010000010010010010
000001001001000001001001001
000100100100000100100100100
100000100100000100100100100
001001001000000001001001001
010010010000000010010010010




=== State Orbit 8 =====================
size : 3
repr state: 100100100100000100100100100
lex min decimal: 1256316333495
states:
010010010010000010010010010
001001001001000001001001001
100100100100000100100100100




=== State Orbit 9 =====================
size : 3
repr state: 100100100100100100100100100
lex min decimal: 1256584768951
states:
010010010010010010010010010
001001001001001001001001001
100100100100100100100100100




=== State Orbit 10 =====================
size : 12
repr state: 100100100000100100100100100
lex min decimal: 157073141175
states:
001000001001001001001001001
001001001000001001001001001
100100100000100100100100100
100100000100100100100100100
010010010000010010010010010
001001000001001001001001001
010010000010010010010010010
010000010010010010010010010
000100100100100100100100100
000001001001001001001001001
000010010010010010010010010
100000100100100100100100100




=== State Orbit 11 =====================
size : 18
repr state: 100100000000100100100100100
lex min decimal: 19634187703
states:
001000000001001001001001001
010000000010010010010010010
000000100100100100100100100
000001000001001001001001001
001000001000001001001001001
000010010000010010010010010
100000100000100100100100100
100100000000100100100100100
010010000000010010010010010
000000001001001001001001001
000100000100100100100100100
000010000010010010010010010
010000010000010010010010010
000001001000001001001001001
100000000100100100100100100
000000010010010010010010010
000100100000100100100100100
001001000000001001001001001




=== State Orbit 12 =====================
size : 12
repr state: 100000000000100100100100100
lex min decimal: 2454318519
states:
000001000000001001001001001
001000000000001001001001001
000100000000100100100100100
000010000000010010010010010
000000100000100100100100100
000000010000010010010010010
000000000001001001001001001
000000000010010010010010010
000000000100100100100100100
010000000000010010010010010
000000001000001001001001001
100000000000100100100100100




=== State Orbit 13 =====================
size : 24
repr state: 000000000000000100100100010
lex min decimal: 38464951
states:
000000000000000001010010010
000000000000000001001001010
000000000000000001001010001
000000000000000010001010010
000000000000000010010001010
000000000000000010100010010
000000000000000001001100001
000000000000000100100100010
000000000000000010010010001
000000000000000100100100001
000000000000000010010010100
000000000000000010010100010
000000000000000001100100100
000000000000000100001001001
000000000000000001001001100
000000000000000100100001100
000000000000000100010100100
000000000000000001010001001
000000000000000100001100100
000000000000000010001001001
000000000000000100100010100
000000000000000001100001001
000000000000000100010010010
000000000000000010100100100




=== State Orbit 14 =====================
size : 24
repr state: 100000000000000100100100010
lex min decimal: 2219437495
states:
000000001000000001010001001
000000000010000100010010010
000000010000000010100010010
000000000001000100001001001
010000000000000010010010001
000001000000000001001010001
000000100000000100001100100
000010000000000010010001010
000000000001000010001001001
100000000000000100100100001
000000001000000001100001001
001000000000000001001001100
000000000100000001100100100
000000000010000001010010010
000100000000000100100010100
000100000000000100100001100
000000000100000010100100100
001000000000000001001001010
000010000000000010010100010
000000010000000010001010010
010000000000000010010010100
000001000000000001001100001
100000000000000100100100010
000000100000000100010100100




=== State Orbit 15 =====================
size : 24
repr state: 100000000000100100100100010
lex min decimal: 2487872951
states:
100000000000100100100100010
000010000000010010010001010
000100000000100100100001100
000000000100100010100100100
001000000000001001001001100
000010000000010010010100010
000000001000001001010001001
000000000100100001100100100
000000010000010010001010010
000000001000001001100001001
000000100000100100001100100
000001000000001001001010001
000000010000010010100010010
000001000000001001001100001
000000000001001010001001001
000000000010010100010010010
100000000000100100100100001
010000000000010010010010100
001000000000001001001001010
000000100000100100010100100
000100000000100100100010100
010000000000010010010010001
000000000010010001010010010
000000000001001100001001001




=== State Orbit 16 =====================
size : 12
repr state: 100000000000000100100100000
lex min decimal: 2152328631
states:
000000100000000100000100100
000000000010000000010010010
100000000000000100100100000
010000000000000010010010000
001000000000000001001001000
000001000000000001001000001
000000010000000010000010010
000000000001000000001001001
000010000000000010010000010
000000001000000001000001001
000100000000000100100000100
000000000100000000100100100




=== State Orbit 17 =====================
size : 12
repr state: 100000000000100100100100000
lex min decimal: 2420764087
states:
000001000000001001001000001
000000001000001001000001001
010000000000010010010010000
100000000000100100100100000
000100000000100100100000100
000000000001001000001001001
001000000000001001001001000
000000100000100100000100100
000000010000010010000010010
000010000000010010010000010
000000000010010000010010010
000000000100100000100100100




=== State Orbit 18 =====================
size : 72
repr state: 000000000000000100100010000
lex min decimal: 4910519
states:
000000000000000010000001001
000000000000000100010000100
000000000000000001100001000
000000000000000010100000010
000000000000000100001000100
000000000000000100000001100
000000000000000010000001010
000000000000000001000010001
000000000000000001001000010
000000000000000010001000010
000000000000000000010010100
000000000000000000001100001
000000000000000100100010000
000000000000000100100001000
000000000000000100000100001
000000000000000010001001000
000000000000000001001010000
000000000000000001000001010
000000000000000100000100010
000000000000000100001100000
000000000000000010000010001
000000000000000010000100010
000000000000000001001100000
000000000000000100001001000
000000000000000000010010001
000000000000000000100010100
000000000000000010001000001
000000000000000000001010001
000000000000000000100001100
000000000000000000100010010
000000000000000001000001100
000000000000000001010000010
000000000000000001100100000
000000000000000000010100010
000000000000000000010100100
000000000000000001100000100
000000000000000100010000010
000000000000000010100100000
000000000000000100000001001
000000000000000100100000010
000000000000000010000100100
000000000000000001010001000
000000000000000001000100100
000000000000000100010100000
000000000000000000001100100
000000000000000010100000100
000000000000000010010000100
000000000000000010000010100
000000000000000000100100010
000000000000000001000010010
000000000000000010100010000
000000000000000100100000001
000000000000000001010010000
000000000000000000001001100
000000000000000100000010100
000000000000000100000010010
000000000000000001001000100
000000000000000010010100000
000000000000000000100100001
000000000000000100001000001
000000000000000000001001010
000000000000000000001010010
000000000000000001010000001
000000000000000001000100001
000000000000000100010010000
000000000000000000100001001
000000000000000010010001000
000000000000000010010000001
000000000000000000010001010
000000000000000000010001001
000000000000000001100000001
000000000000000010001010000




=== State Orbit 19 =====================
size : 18
repr state: 000000000000000100100010010
lex min decimal: 38989239
states:
000000000000000010001001010
000000000000000010001010001
000000000000000100010100010
000000000000000100100001001
000000000000000010010001001
000000000000000001100001100
000000000000000100010010100
000000000000000001001010010
000000000000000001010001010
000000000000000001100100001
000000000000000100001100001
000000000000000010100100010
000000000000000100100010010
000000000000000001010010001
000000000000000010100010100
000000000000000100001001100
000000000000000010010100100
000000000000000001001100100




=== State Orbit 20 =====================
size : 36
repr state: 000000000000000100100010001
lex min decimal: 39120311
states:
000000000000000001001010100
000000000000000010010100001
000000000000000100100010001
000000000000000100010001100
000000000000000100010001010
000000000000000010100001001
000000000000000100001010100
000000000000000001010100001
000000000000000001100100010
000000000000000001010001100
000000000000000001100010001
000000000000000010100010001
000000000000000010100100001
000000000000000100100001010
000000000000000100001010001
000000000000000100010100001
000000000000000010001010100
000000000000000010100001100
000000000000000001100010010
000000000000000010100001010
000000000000000001010100010
000000000000000010010001100
000000000000000001100010100
000000000000000001001100010
000000000000000010001100010
000000000000000010001001100
000000000000000001010100100
000000000000000100010010001
000000000000000001010010100
000000000000000010001100001
000000000000000010001100100
000000000000000100001010010
000000000000000100010001001
000000000000000001100001010
000000000000000100001100010
000000000000000100001001010




=== State Orbit 21 =====================
size : 36
repr state: 000000000000000100010000000
lex min decimal: 716215
states:
000000000000000001000000010
000000000000000000010000001
000000000000000000010001000
000000000000000010000000001
000000000000000100000000001
000000000000000000010000100
000000000000000000100000010
000000000000000100010000000
000000000000000100000010000
000000000000000001000010000
000000000000000001010000000
000000000000000000010100000
000000000000000000000010001
000000000000000000000100001
000000000000000000000010100
000000000000000000001100000
000000000000000000000001100
000000000000000000000001010
000000000000000010000100000
000000000000000000100001000
000000000000000010100000000
000000000000000000100010000
000000000000000001000000100
000000000000000010001000000
000000000000000000100000001
000000000000000100000000010
000000000000000000001000100
000000000000000000001000010
000000000000000100001000000
000000000000000010000001000
000000000000000001000100000
000000000000000001100000000
000000000000000000001010000
000000000000000010000000100
000000000000000000000100010
000000000000000100000001000




=== State Orbit 22 =====================
size : 24
repr state: 000000000000000100010001000
lex min decimal: 5565879
states:
000000000000000001010100000
000000000000000100001000010
000000000000000000100010001
000000000000000100010001000
000000000000000010001100000
000000000000000010100000001
000000000000000001100000010
000000000000000001000100010
000000000000000010000100001
000000000000000010100001000
000000000000000000001010100
000000000000000001010000100
000000000000000000100001010
000000000000000001000010100
000000000000000100010000001
000000000000000000010001100
000000000000000010001000100
000000000000000000001100010
000000000000000000010100001
000000000000000100000010001
000000000000000100001010000
000000000000000100000001010
000000000000000010000001100
000000000000000001100010000



[QRM NOTE]: Time elapsed since start: 8.176 seconds

[QRM NOTE]: Time elapsed since last: 1.427 seconds

[QRM NOTE]: Peak memory: 1360187 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: node=4,value=3]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 9.558 seconds

[QRM NOTE]: Time elapsed since last: 1.383 seconds

[QRM NOTE]: Peak memory: 463474 bytes

python3 qrm.py ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -e -t -k -v 5 -w -l ivybench/sym_quorum/ivy/naive_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


===========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: node=3,value=4]

===========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 28

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 36

ivy_to_cpp target=qrm naive_consensus.node_3_value_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o naive_consensus.node_3_value_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 naive_consensus.node_3_value_4.finite.cpp naive_consensus.node_3_value_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared naive_consensus.node_3_value_4.finite.o naive_consensus.node_3_value_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.833 seconds

[QRM NOTE]: Time elapsed since last: 6.833 seconds

[QRM NOTE]: Peak memory: 1203604 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        277

[FW NOTE]: number of dfs representative states:     17

[FW NOTE]: number of dfs non-representative states: 260


==================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: node=3,value=4]

==================================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decision('value',)
predicate: decide('quorum', 'value')
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decide(quorum__node0_node1,value0)', 'decide(quorum__node0_node1,value1)', 'decide(quorum__node0_node1,value2)', 'decide(quorum__node0_node1,value3)', 'decide(quorum__node0_node2,value0)', 'decide(quorum__node0_node2,value1)', 'decide(quorum__node0_node2,value2)', 'decide(quorum__node0_node2,value3)', 'decide(quorum__node1_node2,value0)', 'decide(quorum__node1_node2,value1)', 'decide(quorum__node1_node2,value2)', 'decide(quorum__node1_node2,value3)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'decision(value3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)']
representative states : 427, 939, 9131, 140203, 33694635, 570565547, 9160500139, 9162597291, 572662699, 35791787, 140715, 33825707, 35922859, 33563563, 35660715, 9643, 149931


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000000000
lex min decimal: 427
states:
0000000000000000000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000000100000000000
lex min decimal: 939
states:
0000000000000000000010000000
0000000000000000000000000100
0000000000000000000000001000
0000000000000000000000010000
0000000000000000000000000001
0000000000000000100000000000
0000000000000000010000000000
0000000000000000000001000000
0000000000000000000000000010
0000000000000000000100000000
0000000000000000000000100000
0000000000000000001000000000




=== State Orbit 2 =====================
size : 12
repr state: 0000000000000000100010000000
lex min decimal: 9131
states:
0000000000000000000000010001
0000000000000000001000000010
0000000000000000001000100000
0000000000000000010001000000
0000000000000000000010001000
0000000000000000000100000001
0000000000000000000001000100
0000000000000000000100010000
0000000000000000010000000100
0000000000000000100010000000
0000000000000000100000001000
0000000000000000000000100010




=== State Orbit 3 =====================
size : 4
repr state: 0000000000000000100010001000
lex min decimal: 140203
states:
0000000000000000100010001000
0000000000000000000100010001
0000000000000000010001000100
0000000000000000001000100010




=== State Orbit 4 =====================
size : 12
repr state: 1000000000000000100010001000
lex min decimal: 33694635
states:
1000000000000000100010001000
0001000000000000000100010001
0000010000000000010001000100
0000000001000000010001000100
0000000010000000100010001000
0000100000000000100010001000
0100000000000000010001000100
0000000100000000000100010001
0000000000010000000100010001
0000000000100000001000100010
0010000000000000001000100010
0000001000000000001000100010




=== State Orbit 5 =====================
size : 12
repr state: 1000100000000000100010001000
lex min decimal: 570565547
states:
0010001000000000001000100010
0010000000100000001000100010
0000000100010000000100010001
0000100010000000100010001000
0000001000100000001000100010
0001000000010000000100010001
0000010001000000010001000100
0100010000000000010001000100
1000100000000000100010001000
0100000001000000010001000100
0001000100000000000100010001
1000000010000000100010001000




=== State Orbit 6 =====================
size : 4
repr state: 1000100010000000100010001000
lex min decimal: 9160500139
states:
0010001000100000001000100010
1000100010000000100010001000
0001000100010000000100010001
0100010001000000010001000100




=== State Orbit 7 =====================
size : 4
repr state: 1000100010001000100010001000
lex min decimal: 9162597291
states:
0010001000100010001000100010
0100010001000100010001000100
1000100010001000100010001000
0001000100010001000100010001




=== State Orbit 8 =====================
size : 12
repr state: 1000100000001000100010001000
lex min decimal: 572662699
states:
0000001000100010001000100010
1000000010001000100010001000
0010000000100010001000100010
0010001000000010001000100010
0001000000010001000100010001
0100000001000100010001000100
0000010001000100010001000100
1000100000001000100010001000
0100010000000100010001000100
0000100010001000100010001000
0001000100000001000100010001
0000000100010001000100010001




=== State Orbit 9 =====================
size : 12
repr state: 1000000000001000100010001000
lex min decimal: 35791787
states:
0000001000000010001000100010
0000000100000001000100010001
0000000010001000100010001000
0000000001000100010001000100
0000000000100010001000100010
0001000000000001000100010001
0010000000000010001000100010
1000000000001000100010001000
0000000000010001000100010001
0100000000000100010001000100
0000100000001000100010001000
0000010000000100010001000100




=== State Orbit 10 =====================
size : 36
repr state: 0000000000000000100010000100
lex min decimal: 140715
states:
0000000000000000000100100010
0000000000000000100001000100
0000000000000000100000101000
0000000000000000010000100100
0000000000000000000101000001
0000000000000000010001000001
0000000000000000001000010010
0000000000000000100010000100
0000000000000000001001000010
0000000000000000000110000001
0000000000000000010000100010
0000000000000000001000101000
0000000000000000100000010001
0000000000000000000100011000
0000000000000000001000010001
0000000000000000010001001000
0000000000000000100001001000
0000000000000000010010000100
0000000000000000100010000010
0000000000000000000101000100
0000000000000000010001000010
0000000000000000100000100010
0000000000000000010000010100
0000000000000000001010000010
0000000000000000001000100001
0000000000000000000110001000
0000000000000000010000010001
0000000000000000001000100100
0000000000000000100010000001
0000000000000000010010001000
0000000000000000000100010010
0000000000000000000100100001
0000000000000000001001000100
0000000000000000001010001000
0000000000000000100000011000
0000000000000000000100010100




=== State Orbit 11 =====================
size : 36
repr state: 1000000000000000100010000100
lex min decimal: 33825707
states:
0000000000010000010000010001
0001000000000000000100011000
0000000000010000100000010001
0000001000000000001001000010
0000000010000000010010001000
0000000010000000000110001000
0100000000000000010001000001
0000000001000000001001000100
0000000001000000100001000100
0000000001000000000101000100
0100000000000000010001001000
1000000000000000100010000010
0000000000100000000100100010
0010000000000000001000101000
0000010000000000010000010100
0000001000000000001000010010
0000000100000000000110000001
0000000100000000000101000001
1000000000000000100010000001
0100000000000000010001000010
0000100000000000100000011000
1000000000000000100010000100
0000000100000000000100100001
0010000000000000001000100001
0000100000000000100001001000
0000010000000000010000100100
0000001000000000001010000010
0000000000010000001000010001
0000100000000000100000101000
0000000010000000001010001000
0000000000100000100000100010
0001000000000000000100010010
0001000000000000000100010100
0000010000000000010010000100
0010000000000000001000100100
0000000000100000010000100010




=== State Orbit 12 =====================
size : 36
repr state: 1000000000001000100010000100
lex min decimal: 35922859
states:
0001000000000001000100010010
0000000010001000010010001000
0000000000100010000100100010
0010000000000010001000100100
0000000001000100001001000100
0000000001000100100001000100
0100000000000100010001000010
0000001000000010001000010010
0000010000000100010000010100
0000100000001000100001001000
0000000100000001000100100001
0010000000000010001000100001
0100000000000100010001000001
0000010000000100010000100100
1000000000001000100010000010
0001000000000001000100011000
0000000000100010100000100010
0000100000001000100000101000
0010000000000010001000101000
1000000000001000100010000001
1000000000001000100010000100
0000001000000010001001000010
0000000000010001001000010001
0000000000010001010000010001
0000000100000001000101000001
0000000010001000000110001000
0000100000001000100000011000
0000000010001000001010001000
0000010000000100010010000100
0000000000100010010000100010
0100000000000100010001001000
0001000000000001000100010100
0000000000010001100000010001
0000000001000100000101000100
0000001000000010001010000010
0000000100000001000110000001




=== State Orbit 13 =====================
size : 12
repr state: 1000000000000000100010000000
lex min decimal: 33563563
states:
0000000100000000000100000001
1000000000000000100010000000
0010000000000000001000100000
0100000000000000010001000000
0000000000100000000000100010
0001000000000000000100010000
0000000010000000000010001000
0000100000000000100000001000
0000000001000000000001000100
0000000000010000000000010001
0000010000000000010000000100
0000001000000000001000000010




=== State Orbit 14 =====================
size : 12
repr state: 1000000000001000100010000000
lex min decimal: 35660715
states:
0001000000000001000100010000
0000100000001000100000001000
0000000000100010000000100010
0000000000010001000000010001
0010000000000010001000100000
1000000000001000100010000000
0000001000000010001000000010
0000000100000001000100000001
0000000001000100000001000100
0000000010001000000010001000
0000010000000100010000000100
0100000000000100010001000000




=== State Orbit 15 =====================
size : 36
repr state: 0000000000000000100001000000
lex min decimal: 9643
states:
0000000000000000100000000100
0000000000000000000100100000
0000000000000000100000100000
0000000000000000000010000010
0000000000000000000000100100
0000000000000000000000010100
0000000000000000000000010010
0000000000000000100000000010
0000000000000000001010000000
0000000000000000010000100000
0000000000000000001000010000
0000000000000000100001000000
0000000000000000000110000000
0000000000000000000101000000
0000000000000000000000011000
0000000000000000100000000001
0000000000000000000000100001
0000000000000000010010000000
0000000000000000010000010000
0000000000000000000001000001
0000000000000000000100000010
0000000000000000000001001000
0000000000000000010000000010
0000000000000000000010000001
0000000000000000001000000100
0000000000000000000000101000
0000000000000000000010000100
0000000000000000001001000000
0000000000000000010000000001
0000000000000000001000000001
0000000000000000000100001000
0000000000000000000100000100
0000000000000000010000001000
0000000000000000001000001000
0000000000000000100000010000
0000000000000000000001000010




=== State Orbit 16 =====================
size : 24
repr state: 0000000000000000100001000010
lex min decimal: 149931
states:
0000000000000000001010000100
0000000000000000000100101000
0000000000000000100001000010
0000000000000000010000100001
0000000000000000100000010100
0000000000000000100001000001
0000000000000000010010000010
0000000000000000001010000001
0000000000000000000101001000
0000000000000000001001001000
0000000000000000010000011000
0000000000000000001000011000
0000000000000000010010000001
0000000000000000001001000001
0000000000000000000110000100
0000000000000000010000101000
0000000000000000100000010010
0000000000000000100000100100
0000000000000000000101000010
0000000000000000000110000010
0000000000000000100000100001
0000000000000000010000010010
0000000000000000000100100100
0000000000000000001000010100



[QRM NOTE]: Time elapsed since start: 8.157 seconds

[QRM NOTE]: Time elapsed since last: 1.324 seconds

[QRM NOTE]: Peak memory: 1312501 bytes


=======================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: node=3,value=4]

=======================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 9.310 seconds

[QRM NOTE]: Time elapsed since last: 1.154 seconds

[QRM NOTE]: Peak memory: 369572 bytes


*********************************************************************

	[IVY_CHECK]: Ivy Check for Reachability Invariant

*********************************************************************


=======================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy]

=======================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 12: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_4

    The following action implementations are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 20: implementation of cast_vote
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 25: implementation of collect_votes
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 30: implementation of learn_value

    The following initializers are present:
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 14: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
        ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_4 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_4 ... PASS
        (internal) ext:collect_votes
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_4 ... PASS
        (internal) ext:learn_value
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 46: invar_0 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 47: invar_11 ... PASS
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 48: invar_4 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 21: assumption
        in action collect_votes when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 26: assumption
        in action learn_value when called from the environment:
            ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy: line 31: assumption

OK
[IVY_CHECK RESULT]: PASS


***************************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy

***************************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/naive_consensus.node_3_value_3.0.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 95.468 seconds

[QRM NOTE]: Time elapsed since last: 95.468 seconds

