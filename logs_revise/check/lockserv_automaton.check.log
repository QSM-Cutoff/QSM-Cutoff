
******************************************************************

	[QRM]: ivybench/sym/ivy/lockserv_automaton.ivy

******************************************************************


****************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

****************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.ivy -s node=1 -f 1 -g -w -r -e -t -k -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==============================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

==============================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 1

[FW NOTE]: number of branching actions: 5

ivy_to_cpp target=qrm lockserv_automaton.node_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lockserv_automaton.node_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lockserv_automaton.node_1.finite.cpp lockserv_automaton.node_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lockserv_automaton.node_1.finite.o lockserv_automaton.node_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.372 seconds

[QRM NOTE]: Time elapsed since last: 7.372 seconds

[QRM NOTE]: Peak memory: 1180083 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        8

[FW NOTE]: number of dfs representative states:     8

[FW NOTE]: number of dfs non-representative states: 0


=====================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

=====================================================================================================

sort: node=['node0']
predicate: holds_lock('node',)
predicate: held()
predicate: unlock_msg('node',)
predicate: lock_msg('node',)
predicate: grant_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'held()', 'holds_lock(node0)', 'lock_msg(node0)', 'unlock_msg(node0)']
representative states : 0, 2, 24, 26, 14, 11, 12, 9


=== State Orbit 0 =====================
size : 1
repr state: 00000
lex min decimal: 0
states:
00000




=== State Orbit 1 =====================
size : 1
repr state: 00010
lex min decimal: 2
states:
00010




=== State Orbit 2 =====================
size : 1
repr state: 11000
lex min decimal: 24
states:
11000




=== State Orbit 3 =====================
size : 1
repr state: 11010
lex min decimal: 26
states:
11010




=== State Orbit 4 =====================
size : 1
repr state: 01110
lex min decimal: 14
states:
01110




=== State Orbit 5 =====================
size : 1
repr state: 01011
lex min decimal: 11
states:
01011




=== State Orbit 6 =====================
size : 1
repr state: 01100
lex min decimal: 12
states:
01100




=== State Orbit 7 =====================
size : 1
repr state: 01001
lex min decimal: 9
states:
01001



[QRM NOTE]: Time elapsed since start: 7.462 seconds

[QRM NOTE]: Time elapsed since last: 0.090 seconds

[QRM NOTE]: Peak memory: 1210150 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.467 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 160696 bytes


=====================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

=====================================================================================================


================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1---1
0     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -0--1
1     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : --1-1
2     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 10---
3     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : -01--
4     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 1-1--
5     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 010-0
6     : ['held()', '~grant_msg(node0)', '~holds_lock(node0)', '~unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 7

[PRIME NOTE]: number of orbits before merging: 7

[PRIME NOTE]: number of primes: 7

[QRM NOTE]: Time elapsed since start: 7.476 seconds

[QRM NOTE]: Time elapsed since last: 0.009 seconds

[QRM NOTE]: Peak memory: 1228951 bytes


==========================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

==========================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6]
 solution : []

Essensial at level 0 : {0, 1, 2, 3, 4, 5, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]

[QRM NOTE]: Time elapsed since start: 7.478 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 181425 bytes


==============================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

==============================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1---1
0     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'unlock_msg(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'unlock_msg(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -0--1
1     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'unlock_msg(node0)']

sign_func_name2args: {'1$held': [[]], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$unlock_msg$0$0}

part_sig: ('node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'unlock_msg(node0)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'held': [], 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'1$held': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~unlock_msg(NODE0) | held


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : --1-1
2     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'unlock_msg(node0)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'unlock_msg(node0)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0',)),), 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE0)


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 10---
3     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', '~held']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '1$held': [[]]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$grant_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0}

part_sig: ('node$0$grant_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', '~held']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'held': Const('held', BooleanSort())}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'held': []}

sign_func_name2count:  {'0$grant_msg': 1, '1$held': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '1$held': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | held


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : -01--
4     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'holds_lock(node0)']

sign_func_name2args: {'1$held': [[]], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0}

part_sig: ('node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'holds_lock(node0)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'held': [], 'holds_lock': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'1$held': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~holds_lock(NODE0) | held


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 1-1--
5     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'holds_lock(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'holds_lock(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'holds_lock': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0)


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 010-0
6     : ['held()', '~grant_msg(node0)', '~holds_lock(node0)', '~unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~grant_msg(node0)', 'held', '~holds_lock(node0)', '~unlock_msg(node0)']

sign_func_name2args: {'1$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$held': [[]], '1$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '1$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0]}

sig2const: {'node$1$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$1$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$1$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0}

part_sig: ('node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['~grant_msg(node0)', 'held', '~holds_lock(node0)', '~unlock_msg(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'held': [], 'holds_lock': (EnumeratedSort('node', ('node0',)),), 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'1$grant_msg': 1, '0$held': 1, '1$holds_lock': 1, '1$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0]}

	identical_single_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$held': [[]], '1$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '1$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~holds_lock(NODE0)', '~unlock_msg(NODE0)', '~grant_msg(NODE0)', 'held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. holds_lock(NODE0) | unlock_msg(NODE0) | grant_msg(NODE0) | ~held


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

========================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1---1
0     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -0--1
1     : ['unlock_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~unlock_msg(NODE0) | held
qcost : 3




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : --1-1
2     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 10---
3     : ['grant_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | held
qcost : 3




=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : -01--
4     : ['holds_lock(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~holds_lock(NODE0) | held
qcost : 3




=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 1-1--
5     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 010-0
6     : ['held()', '~grant_msg(node0)', '~holds_lock(node0)', '~unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 4
quantified form : forall NODE0. holds_lock(NODE0) | unlock_msg(NODE0) | grant_msg(NODE0) | ~held
qcost : 5



[QRM NOTE]: Time elapsed since start: 7.693 seconds

[QRM NOTE]: Time elapsed since last: 0.216 seconds

[QRM NOTE]: Peak memory: 1944137 bytes


=======================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

=======================================================================================


New level: 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]


Solution : [0, 1, 2, 3, 4, 5, 6] has cost 23.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6]


======================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

======================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 23

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 2, 3, 4, 5, 6]

[MIN NOTE]: solution length: 7

invariant [invar_0] forall NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_1] forall NODE0. ~unlock_msg(NODE0) | held # qcost: 3

invariant [invar_2] forall NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_3] forall NODE0. ~grant_msg(NODE0) | held # qcost: 3

invariant [invar_4] forall NODE0. ~holds_lock(NODE0) | held # qcost: 3

invariant [invar_5] forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0) # qcost: 3

invariant [invar_6] forall NODE0. holds_lock(NODE0) | unlock_msg(NODE0) | grant_msg(NODE0) | ~held # qcost: 5

[MIN NOTE]: number of total invariants: 7

[MIN NOTE]: total qCost: 23




[QRM NOTE]: Time elapsed since start: 7.741 seconds

[QRM NOTE]: Time elapsed since last: 0.048 seconds

[QRM NOTE]: Peak memory: 1933397 bytes


=========================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

=========================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.752 seconds

[QRM NOTE]: Time elapsed since last: 0.011 seconds

[QRM NOTE]: Peak memory: 887584 bytes


*******************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

*******************************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.node_1.0.ivy -s node=2 -f 2 -g -w -r -e -t -k -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.node_1.0.ivy: node=2]

=======================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 9

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 10

ivy_to_cpp target=qrm lockserv_automaton.node_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lockserv_automaton.node_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lockserv_automaton.node_2.finite.cpp lockserv_automaton.node_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lockserv_automaton.node_2.finite.o lockserv_automaton.node_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.736 seconds

[QRM NOTE]: Time elapsed since last: 6.736 seconds

[QRM NOTE]: Peak memory: 1182386 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 6

[FW NOTE]: number of total reachable states:        28

[FW NOTE]: number of dfs representative states:     15

[FW NOTE]: number of dfs non-representative states: 13


==============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.node_1.0.ivy: node=2]

==============================================================================================================

sort: node=['node0', 'node1']
predicate: unlock_msg('node',)
predicate: grant_msg('node',)
predicate: holds_lock('node',)
predicate: held()
predicate: lock_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'grant_msg(node1)', 'held()', 'holds_lock(node0)', 'holds_lock(node1)', 'lock_msg(node0)', 'lock_msg(node1)', 'unlock_msg(node0)', 'unlock_msg(node1)']
representative states : 0, 4, 12, 200, 204, 92, 77, 88, 70, 192, 196, 84, 69, 80, 65


=== State Orbit 0 =====================
size : 1
repr state: 000000000
lex min decimal: 0
states:
000000000




=== State Orbit 1 =====================
size : 2
repr state: 000001000
lex min decimal: 4
states:
000000100
000001000




=== State Orbit 2 =====================
size : 1
repr state: 000001100
lex min decimal: 12
states:
000001100




=== State Orbit 3 =====================
size : 2
repr state: 101000100
lex min decimal: 200
states:
011001000
101000100




=== State Orbit 4 =====================
size : 2
repr state: 101001100
lex min decimal: 204
states:
011001100
101001100




=== State Orbit 5 =====================
size : 2
repr state: 001101100
lex min decimal: 92
states:
001101100
001011100




=== State Orbit 6 =====================
size : 2
repr state: 001001110
lex min decimal: 77
states:
001001101
001001110




=== State Orbit 7 =====================
size : 2
repr state: 001100100
lex min decimal: 88
states:
001011000
001100100




=== State Orbit 8 =====================
size : 2
repr state: 001000110
lex min decimal: 70
states:
001001001
001000110




=== State Orbit 9 =====================
size : 2
repr state: 101000000
lex min decimal: 192
states:
011000000
101000000




=== State Orbit 10 =====================
size : 2
repr state: 101001000
lex min decimal: 196
states:
101001000
011000100




=== State Orbit 11 =====================
size : 2
repr state: 001101000
lex min decimal: 84
states:
001010100
001101000




=== State Orbit 12 =====================
size : 2
repr state: 001001010
lex min decimal: 69
states:
001001010
001000101




=== State Orbit 13 =====================
size : 2
repr state: 001100000
lex min decimal: 80
states:
001100000
001010000




=== State Orbit 14 =====================
size : 2
repr state: 001000010
lex min decimal: 65
states:
001000010
001000001



[QRM NOTE]: Time elapsed since start: 6.824 seconds

[QRM NOTE]: Time elapsed since last: 0.087 seconds

[QRM NOTE]: Peak memory: 1220615 bytes


===================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lockserv_automaton.node_1.0.ivy: node=2]

===================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 460, binary: 111001100

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.842 seconds

[QRM NOTE]: Time elapsed since last: 0.018 seconds

[QRM NOTE]: Peak memory: 179963 bytes

next size: node=2


****************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

****************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.ivy -s node=2 -f 1 -g -w -r -e -t -k -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.022 seconds

[QRM NOTE]: Time elapsed since last: 0.022 seconds

[QRM NOTE]: Peak memory: 6252 bytes


=====================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

=====================================================================================================


================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

================================================================================================


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 2
0 (*) : ---1----1
0     : ['holds_lock(node0)', 'unlock_msg(node1)']
1     : ----1--1-
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
8 (*) : ----1---1
8     : ['holds_lock(node1)', 'unlock_msg(node1)']
9     : ---1---1-
9     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 4
num_suborbits: 2
2 (*) : 1-------1
2     : ['grant_msg(node0)', 'unlock_msg(node1)']
3     : -1-----1-
3     : ['grant_msg(node1)', 'unlock_msg(node0)']
4 (*) : -1------1
4     : ['grant_msg(node1)', 'unlock_msg(node1)']
5     : 1------1-
5     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
6 (*) : --0-----1
6     : ['unlock_msg(node1)', '~held()']
7     : --0----1-
7     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
10 (*) : -------11
10     : ['unlock_msg(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
11 (*) : ---11----
11     : ['holds_lock(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 2
12 (*) : 1--1-----
12     : ['grant_msg(node0)', 'holds_lock(node0)']
13     : -1--1----
13     : ['grant_msg(node1)', 'holds_lock(node1)']
14 (*) : 1---1----
14     : ['grant_msg(node0)', 'holds_lock(node1)']
15     : -1-1-----
15     : ['grant_msg(node1)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
16 (*) : 11-------
16     : ['grant_msg(node0)', 'grant_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
17 (*) : -10------
17     : ['grant_msg(node1)', '~held()']
18     : 1-0------
18     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
19 (*) : --0-1----
19     : ['holds_lock(node1)', '~held()']
20     : --01-----
20     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
21 (*) : 00100--00
21     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 13

[PRIME NOTE]: number of primes: 22

[QRM NOTE]: Time elapsed since start: 0.036 seconds

[QRM NOTE]: Time elapsed since last: 0.014 seconds

[QRM NOTE]: Peak memory: 1106056 bytes


==========================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

==========================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 solution : []

Essensial at level 0 : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

[QRM NOTE]: Time elapsed since start: 0.038 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 58489 bytes


==============================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

==============================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 2
0 (*) : ---1----1
0     : ['holds_lock(node0)', 'unlock_msg(node1)']
1     : ----1--1-
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
8 (*) : ----1---1
8     : ['holds_lock(node1)', 'unlock_msg(node1)']
9     : ---1---1-
9     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', 'unlock_msg(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~holds_lock(NODE0) | ~unlock_msg(NODE1)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 4
num_suborbits: 2
2 (*) : 1-------1
2     : ['grant_msg(node0)', 'unlock_msg(node1)']
3     : -1-----1-
3     : ['grant_msg(node1)', 'unlock_msg(node0)']
4 (*) : -1------1
4     : ['grant_msg(node1)', 'unlock_msg(node1)']
5     : 1------1-
5     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE1)', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~unlock_msg(NODE1) | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
6 (*) : --0-----1
6     : ['unlock_msg(node1)', '~held()']
7     : --0----1-
7     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'unlock_msg(node1)']

sign_func_name2args: {'1$held': [[]], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0}

part_sig: ('node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'unlock_msg(node1)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'held': [], 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$held': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~held', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. held | ~unlock_msg(NODE0)


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
10 (*) : -------11
10     : ['unlock_msg(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['unlock_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$1]}

sig2const: {'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

part_sig: ('node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1',)


---------- SigGenerator ----------

terms:  ['unlock_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$unlock_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~unlock_msg(NODE0)


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
11 (*) : ---11----
11     : ['holds_lock(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'holds_lock(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$1]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

part_sig: ('node$0$holds_lock$0$0 | node$0$holds_lock$0$1',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'holds_lock(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$holds_lock': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~holds_lock(NODE0)


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 2
12 (*) : 1--1-----
12     : ['grant_msg(node0)', 'holds_lock(node0)']
13     : -1--1----
13     : ['grant_msg(node1)', 'holds_lock(node1)']
14 (*) : 1---1----
14     : ['grant_msg(node0)', 'holds_lock(node1)']
15     : -1-1-----
15     : ['grant_msg(node1)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'holds_lock(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'holds_lock(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$holds_lock': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$holds_lock$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'holds_lock(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$holds_lock': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE1)', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~holds_lock(NODE1) | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
16 (*) : 11-------
16     : ['grant_msg(node0)', 'grant_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'grant_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$1]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

part_sig: ('node$0$grant_msg$0$0 | node$0$grant_msg$0$1',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'grant_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
17 (*) : -10------
17     : ['grant_msg(node1)', '~held()']
18     : 1-0------
18     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', '~held']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$held': [[]]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0}

part_sig: ('node$0$grant_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', '~held']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'held': Const('held', BooleanSort())}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'held': []}

sign_func_name2count:  {'0$grant_msg': 1, '1$held': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$held': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['~held', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. held | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 7 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
19 (*) : --0-1----
19     : ['holds_lock(node1)', '~held()']
20     : --01-----
20     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'holds_lock(node1)']

sign_func_name2args: {'1$held': [[]], '0$holds_lock': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0}

part_sig: ('node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'holds_lock(node1)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'held': [], 'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$held': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~holds_lock(NODE0) | held


---------- Quantifier Inference: orbit 8 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
21 (*) : 00100--00
21     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~grant_msg(node0)', '~grant_msg(node1)', 'held', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']

sign_func_name2args: {'1$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$held': [[]], '1$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1]}

sig2const: {'node$1$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1}

part_sig: ('node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1',)


---------- SigGenerator ----------

terms:  ['~grant_msg(node0)', '~grant_msg(node1)', 'held', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'held': [], 'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$grant_msg': 2, '0$held': 1, '1$holds_lock': 2, '1$unlock_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1}

	sort: node

	identical_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0, node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$held': [[]], '1$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['held', '~grant_msg(NODE0)', '~unlock_msg(NODE0)', '~holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~held | grant_msg(NODE0) | unlock_msg(NODE0) | holds_lock(NODE0)


---------- Quantifier Inference: orbit 9 ----------

[QI_CHECK RESULT]: PASS


========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

========================================================================================================


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 2
0 (*) : ---1----1
0     : ['holds_lock(node0)', 'unlock_msg(node1)']
1     : ----1--1-
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
8 (*) : ----1---1
8     : ['holds_lock(node1)', 'unlock_msg(node1)']
9     : ---1---1-
9     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,NODE1. ~holds_lock(NODE0) | ~unlock_msg(NODE1)
qcost : 4




=== Prime Orbit 1 =====================
size : 4
num_suborbits: 2
2 (*) : 1-------1
2     : ['grant_msg(node0)', 'unlock_msg(node1)']
3     : -1-----1-
3     : ['grant_msg(node1)', 'unlock_msg(node0)']
4 (*) : -1------1
4     : ['grant_msg(node1)', 'unlock_msg(node1)']
5     : 1------1-
5     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,NODE1. ~unlock_msg(NODE1) | ~grant_msg(NODE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
6 (*) : --0-----1
6     : ['unlock_msg(node1)', '~held()']
7     : --0----1-
7     : ['unlock_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. held | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
10 (*) : -------11
10     : ['unlock_msg(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~unlock_msg(NODE0)
qcost : 2




=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
11 (*) : ---11----
11     : ['holds_lock(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~holds_lock(NODE0)
qcost : 2




=== Prime Orbit 5 =====================
size : 4
num_suborbits: 2
12 (*) : 1--1-----
12     : ['grant_msg(node0)', 'holds_lock(node0)']
13     : -1--1----
13     : ['grant_msg(node1)', 'holds_lock(node1)']
14 (*) : 1---1----
14     : ['grant_msg(node0)', 'holds_lock(node1)']
15     : -1-1-----
15     : ['grant_msg(node1)', 'holds_lock(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,NODE1. ~holds_lock(NODE1) | ~grant_msg(NODE0)
qcost : 4




=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
16 (*) : 11-------
16     : ['grant_msg(node0)', 'grant_msg(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~grant_msg(NODE0)
qcost : 2




=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
17 (*) : -10------
17     : ['grant_msg(node1)', '~held()']
18     : 1-0------
18     : ['grant_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. held | ~grant_msg(NODE0)
qcost : 3




=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
19 (*) : --0-1----
19     : ['holds_lock(node1)', '~held()']
20     : --01-----
20     : ['holds_lock(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~holds_lock(NODE0) | held
qcost : 3




=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
21 (*) : 00100--00
21     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']
num_forall :   0
num_exists :   1
num_literals : 4
quantified form : exists NODE0. ~held | grant_msg(NODE0) | unlock_msg(NODE0) | holds_lock(NODE0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.349 seconds

[QRM NOTE]: Time elapsed since last: 0.311 seconds

[QRM NOTE]: Peak memory: 1852891 bytes


=======================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

=======================================================================================


New level: 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] has cost 32.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


======================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

======================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 32

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

[MIN NOTE]: solution length: 10

invariant [invar_0] forall NODE0,NODE1. ~holds_lock(NODE0) | ~unlock_msg(NODE1) # qcost: 4

invariant [invar_1] forall NODE0,NODE1. ~unlock_msg(NODE1) | ~grant_msg(NODE0) # qcost: 4

invariant [invar_2] forall NODE0. held | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_3] exists NODE0. ~unlock_msg(NODE0) # qcost: 2

invariant [invar_4] exists NODE0. ~holds_lock(NODE0) # qcost: 2

invariant [invar_5] forall NODE0,NODE1. ~holds_lock(NODE1) | ~grant_msg(NODE0) # qcost: 4

invariant [invar_6] exists NODE0. ~grant_msg(NODE0) # qcost: 2

invariant [invar_7] forall NODE0. held | ~grant_msg(NODE0) # qcost: 3

invariant [invar_8] forall NODE0. ~holds_lock(NODE0) | held # qcost: 3

invariant [invar_9] exists NODE0. ~held | grant_msg(NODE0) | unlock_msg(NODE0) | holds_lock(NODE0) # qcost: 5

[MIN NOTE]: number of total invariants: 10

[MIN NOTE]: total qCost: 32




[QRM NOTE]: Time elapsed since start: 0.411 seconds

[QRM NOTE]: Time elapsed since last: 0.062 seconds

[QRM NOTE]: Peak memory: 1833223 bytes


=========================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

=========================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.439 seconds

[QRM NOTE]: Time elapsed since last: 0.028 seconds

[QRM NOTE]: Peak memory: 790611 bytes


*******************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

*******************************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.node_2.0.ivy -s node=3 -f 2 -g -w -r -e -t -k -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.node_2.0.ivy: node=3]

=======================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 13

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 15

ivy_to_cpp target=qrm lockserv_automaton.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lockserv_automaton.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lockserv_automaton.node_3.finite.cpp lockserv_automaton.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lockserv_automaton.node_3.finite.o lockserv_automaton.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.067 seconds

[QRM NOTE]: Time elapsed since last: 7.067 seconds

[QRM NOTE]: Peak memory: 1184660 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        80

[FW NOTE]: number of dfs representative states:     22

[FW NOTE]: number of dfs non-representative states: 58


==============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.node_2.0.ivy: node=3]

==============================================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: holds_lock('node',)
predicate: unlock_msg('node',)
predicate: held()
predicate: grant_msg('node',)
predicate: lock_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'grant_msg(node1)', 'grant_msg(node2)', 'held()', 'holds_lock(node0)', 'holds_lock(node1)', 'holds_lock(node2)', 'lock_msg(node0)', 'lock_msg(node1)', 'lock_msg(node2)', 'unlock_msg(node0)', 'unlock_msg(node1)', 'unlock_msg(node2)']
representative states : 0, 8, 24, 56, 1584, 1592, 632, 569, 624, 540, 1552, 1560, 600, 537, 592, 522, 1536, 1544, 584, 521, 576, 513


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000
lex min decimal: 0
states:
0000000000000




=== State Orbit 1 =====================
size : 3
repr state: 0000000100000
lex min decimal: 8
states:
0000000001000
0000000010000
0000000100000




=== State Orbit 2 =====================
size : 3
repr state: 0000000110000
lex min decimal: 24
states:
0000000110000
0000000011000
0000000101000




=== State Orbit 3 =====================
size : 1
repr state: 0000000111000
lex min decimal: 56
states:
0000000111000




=== State Orbit 4 =====================
size : 3
repr state: 1001000011000
lex min decimal: 1584
states:
0101000101000
0011000110000
1001000011000




=== State Orbit 5 =====================
size : 3
repr state: 1001000111000
lex min decimal: 1592
states:
1001000111000
0101000111000
0011000111000




=== State Orbit 6 =====================
size : 3
repr state: 0001100111000
lex min decimal: 632
states:
0001100111000
0001010111000
0001001111000




=== State Orbit 7 =====================
size : 3
repr state: 0001000111100
lex min decimal: 569
states:
0001000111010
0001000111001
0001000111100




=== State Orbit 8 =====================
size : 3
repr state: 0001100011000
lex min decimal: 624
states:
0001100011000
0001010101000
0001001110000




=== State Orbit 9 =====================
size : 3
repr state: 0001000011100
lex min decimal: 540
states:
0001000101010
0001000011100
0001000110001




=== State Orbit 10 =====================
size : 6
repr state: 1001000010000
lex min decimal: 1552
states:
1001000010000
1001000001000
0011000100000
0101000001000
0011000010000
0101000100000




=== State Orbit 11 =====================
size : 6
repr state: 1001000110000
lex min decimal: 1560
states:
0101000110000
0011000011000
1001000110000
1001000101000
0101000011000
0011000101000




=== State Orbit 12 =====================
size : 6
repr state: 0001100110000
lex min decimal: 600
states:
0001001101000
0001010011000
0001100101000
0001010110000
0001001011000
0001100110000




=== State Orbit 13 =====================
size : 6
repr state: 0001000110100
lex min decimal: 537
states:
0001000110010
0001000011010
0001000101001
0001000011001
0001000101100
0001000110100




=== State Orbit 14 =====================
size : 6
repr state: 0001100010000
lex min decimal: 592
states:
0001010001000
0001100010000
0001010100000
0001100001000
0001001010000
0001001100000




=== State Orbit 15 =====================
size : 6
repr state: 0001000010100
lex min decimal: 522
states:
0001000100010
0001000001010
0001000010100
0001000010001
0001000100001
0001000001100




=== State Orbit 16 =====================
size : 3
repr state: 1001000000000
lex min decimal: 1536
states:
1001000000000
0011000000000
0101000000000




=== State Orbit 17 =====================
size : 3
repr state: 1001000100000
lex min decimal: 1544
states:
0011000001000
1001000100000
0101000010000




=== State Orbit 18 =====================
size : 3
repr state: 0001100100000
lex min decimal: 584
states:
0001010010000
0001100100000
0001001001000




=== State Orbit 19 =====================
size : 3
repr state: 0001000100100
lex min decimal: 521
states:
0001000001001
0001000010010
0001000100100




=== State Orbit 20 =====================
size : 3
repr state: 0001100000000
lex min decimal: 576
states:
0001001000000
0001100000000
0001010000000




=== State Orbit 21 =====================
size : 3
repr state: 0001000000100
lex min decimal: 513
states:
0001000000100
0001000000010
0001000000001



[QRM NOTE]: Time elapsed since start: 7.178 seconds

[QRM NOTE]: Time elapsed since last: 0.112 seconds

[QRM NOTE]: Peak memory: 1245800 bytes


===================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lockserv_automaton.node_2.0.ivy: node=3]

===================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 3640, binary: 0111000111000

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.264 seconds

[QRM NOTE]: Time elapsed since last: 0.086 seconds

[QRM NOTE]: Peak memory: 214698 bytes

next size: node=3


****************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

****************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.ivy -s node=3 -f 1 -g -w -r -e -t -k -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.031 seconds

[QRM NOTE]: Time elapsed since last: 0.031 seconds

[QRM NOTE]: Peak memory: 21180 bytes


=====================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

=====================================================================================================


================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 2
0 (*) : ------1---1--
0     : ['holds_lock(node2)', 'unlock_msg(node0)']
1     : -----1----1--
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
2     : ------1----1-
2     : ['holds_lock(node2)', 'unlock_msg(node1)']
3     : ----1------1-
3     : ['holds_lock(node0)', 'unlock_msg(node1)']
4     : -----1------1
4     : ['holds_lock(node1)', 'unlock_msg(node2)']
5     : ----1-------1
5     : ['holds_lock(node0)', 'unlock_msg(node2)']
42 (*) : ----1-----1--
42     : ['holds_lock(node0)', 'unlock_msg(node0)']
43     : -----1-----1-
43     : ['holds_lock(node1)', 'unlock_msg(node1)']
44     : ------1-----1
44     : ['holds_lock(node2)', 'unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 2
6 (*) : -1----1------
6     : ['grant_msg(node1)', 'holds_lock(node2)']
7     : --1--1-------
7     : ['grant_msg(node2)', 'holds_lock(node1)']
8     : 1-----1------
8     : ['grant_msg(node0)', 'holds_lock(node2)']
9     : --1-1--------
9     : ['grant_msg(node2)', 'holds_lock(node0)']
10     : 1----1-------
10     : ['grant_msg(node0)', 'holds_lock(node1)']
11     : -1--1--------
11     : ['grant_msg(node1)', 'holds_lock(node0)']
12 (*) : --1---1------
12     : ['grant_msg(node2)', 'holds_lock(node2)']
13     : -1---1-------
13     : ['grant_msg(node1)', 'holds_lock(node1)']
14     : 1---1--------
14     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
15 (*) : ---0--1------
15     : ['holds_lock(node2)', '~held()']
16     : ---0-1-------
16     : ['holds_lock(node1)', '~held()']
17     : ---01--------
17     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
18 (*) : ----1-1------
18     : ['holds_lock(node0)', 'holds_lock(node2)']
19     : ----11-------
19     : ['holds_lock(node0)', 'holds_lock(node1)']
20     : -----11------
20     : ['holds_lock(node1)', 'holds_lock(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 9
num_suborbits: 2
21 (*) : -1--------1--
21     : ['grant_msg(node1)', 'unlock_msg(node0)']
22     : --1-------1--
22     : ['grant_msg(node2)', 'unlock_msg(node0)']
23     : 1----------1-
23     : ['grant_msg(node0)', 'unlock_msg(node1)']
24     : --1--------1-
24     : ['grant_msg(node2)', 'unlock_msg(node1)']
25     : 1-----------1
25     : ['grant_msg(node0)', 'unlock_msg(node2)']
26     : -1----------1
26     : ['grant_msg(node1)', 'unlock_msg(node2)']
27 (*) : -1---------1-
27     : ['grant_msg(node1)', 'unlock_msg(node1)']
28     : --1---------1
28     : ['grant_msg(node2)', 'unlock_msg(node2)']
29     : 1---------1--
29     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
30 (*) : ----------11-
30     : ['unlock_msg(node0)', 'unlock_msg(node1)']
31     : ----------1-1
31     : ['unlock_msg(node0)', 'unlock_msg(node2)']
32     : -----------11
32     : ['unlock_msg(node1)', 'unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
33 (*) : 11-----------
33     : ['grant_msg(node0)', 'grant_msg(node1)']
34     : 1-1----------
34     : ['grant_msg(node0)', 'grant_msg(node2)']
35     : -11----------
35     : ['grant_msg(node1)', 'grant_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
36 (*) : --10---------
36     : ['grant_msg(node2)', '~held()']
37     : -1-0---------
37     : ['grant_msg(node1)', '~held()']
38     : 1--0---------
38     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
39 (*) : ---0-------1-
39     : ['unlock_msg(node1)', '~held()']
40     : ---0--------1
40     : ['unlock_msg(node2)', '~held()']
41     : ---0------1--
41     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
45 (*) : 0001000---000
45     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 13

[PRIME NOTE]: number of primes: 46

[QRM NOTE]: Time elapsed since start: 0.057 seconds

[QRM NOTE]: Time elapsed since last: 0.026 seconds

[QRM NOTE]: Peak memory: 1157049 bytes


==========================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

==========================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 solution : []

Essensial at level 0 : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

[QRM NOTE]: Time elapsed since start: 0.058 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 110226 bytes


==============================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

==============================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 2
0 (*) : ------1---1--
0     : ['holds_lock(node2)', 'unlock_msg(node0)']
1     : -----1----1--
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
2     : ------1----1-
2     : ['holds_lock(node2)', 'unlock_msg(node1)']
3     : ----1------1-
3     : ['holds_lock(node0)', 'unlock_msg(node1)']
4     : -----1------1
4     : ['holds_lock(node1)', 'unlock_msg(node2)']
5     : ----1-------1
5     : ['holds_lock(node0)', 'unlock_msg(node2)']
42 (*) : ----1-----1--
42     : ['holds_lock(node0)', 'unlock_msg(node0)']
43     : -----1-----1-
43     : ['holds_lock(node1)', 'unlock_msg(node1)']
44     : ------1-----1
44     : ['holds_lock(node2)', 'unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node2)', 'unlock_msg(node0)']

sign_func_name2args: {'0$holds_lock': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'unlock_msg(node0)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node2)', 'unlock_msg(node0)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', 'unlock_msg(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE1)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 2
6 (*) : -1----1------
6     : ['grant_msg(node1)', 'holds_lock(node2)']
7     : --1--1-------
7     : ['grant_msg(node2)', 'holds_lock(node1)']
8     : 1-----1------
8     : ['grant_msg(node0)', 'holds_lock(node2)']
9     : --1-1--------
9     : ['grant_msg(node2)', 'holds_lock(node0)']
10     : 1----1-------
10     : ['grant_msg(node0)', 'holds_lock(node1)']
11     : -1--1--------
11     : ['grant_msg(node1)', 'holds_lock(node0)']
12 (*) : --1---1------
12     : ['grant_msg(node2)', 'holds_lock(node2)']
13     : -1---1-------
13     : ['grant_msg(node1)', 'holds_lock(node1)']
14     : 1---1--------
14     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'holds_lock(node2)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$holds_lock': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$holds_lock$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node2)', 'holds_lock(node2)']

sign_func_name2args: {'0$grant_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$holds_lock': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$holds_lock$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', 'holds_lock(node2)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$holds_lock': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'holds_lock(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE1)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
15 (*) : ---0--1------
15     : ['holds_lock(node2)', '~held()']
16     : ---0-1-------
16     : ['holds_lock(node1)', '~held()']
17     : ---01--------
17     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'holds_lock(node2)']

sign_func_name2args: {'1$held': [[]], '0$holds_lock': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0}

part_sig: ('node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'holds_lock(node2)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'held': [], 'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$held': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~holds_lock(NODE0) | held


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
18 (*) : ----1-1------
18     : ['holds_lock(node0)', 'holds_lock(node2)']
19     : ----11-------
19     : ['holds_lock(node0)', 'holds_lock(node1)']
20     : -----11------
20     : ['holds_lock(node1)', 'holds_lock(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'holds_lock(node2)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$1]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$holds_lock$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

part_sig: ('node$0$holds_lock$0$0 | node$0$holds_lock$0$1',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'holds_lock(node2)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$holds_lock': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', 'holds_lock(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~holds_lock(NODE0) | ~holds_lock(NODE1) | NODE0 = NODE1


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 9
num_suborbits: 2
21 (*) : -1--------1--
21     : ['grant_msg(node1)', 'unlock_msg(node0)']
22     : --1-------1--
22     : ['grant_msg(node2)', 'unlock_msg(node0)']
23     : 1----------1-
23     : ['grant_msg(node0)', 'unlock_msg(node1)']
24     : --1--------1-
24     : ['grant_msg(node2)', 'unlock_msg(node1)']
25     : 1-----------1
25     : ['grant_msg(node0)', 'unlock_msg(node2)']
26     : -1----------1
26     : ['grant_msg(node1)', 'unlock_msg(node2)']
27 (*) : -1---------1-
27     : ['grant_msg(node1)', 'unlock_msg(node1)']
28     : --1---------1
28     : ['grant_msg(node2)', 'unlock_msg(node2)']
29     : 1---------1--
29     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'unlock_msg(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', 'unlock_msg(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE1)', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~unlock_msg(NODE1) | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
30 (*) : ----------11-
30     : ['unlock_msg(node0)', 'unlock_msg(node1)']
31     : ----------1-1
31     : ['unlock_msg(node0)', 'unlock_msg(node2)']
32     : -----------11
32     : ['unlock_msg(node1)', 'unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['unlock_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$1]}

sig2const: {'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

part_sig: ('node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1',)


---------- SigGenerator ----------

terms:  ['unlock_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$unlock_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', 'unlock_msg(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~unlock_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
33 (*) : 11-----------
33     : ['grant_msg(node0)', 'grant_msg(node1)']
34     : 1-1----------
34     : ['grant_msg(node0)', 'grant_msg(node2)']
35     : -11----------
35     : ['grant_msg(node1)', 'grant_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'grant_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$1]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

part_sig: ('node$0$grant_msg$0$0 | node$0$grant_msg$0$1',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'grant_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'grant_msg(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~grant_msg(NODE0) | ~grant_msg(NODE1) | NODE0 = NODE1


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
36 (*) : --10---------
36     : ['grant_msg(node2)', '~held()']
37     : -1-0---------
37     : ['grant_msg(node1)', '~held()']
38     : 1--0---------
38     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node2)', '~held']

sign_func_name2args: {'0$grant_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$held': [[]]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0}

part_sig: ('node$0$grant_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node2)', '~held']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'held': Const('held', BooleanSort())}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'held': []}

sign_func_name2count:  {'0$grant_msg': 1, '1$held': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$held': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | held


---------- Quantifier Inference: orbit 7 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
39 (*) : ---0-------1-
39     : ['unlock_msg(node1)', '~held()']
40     : ---0--------1
40     : ['unlock_msg(node2)', '~held()']
41     : ---0------1--
41     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'unlock_msg(node1)']

sign_func_name2args: {'1$held': [[]], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0}

part_sig: ('node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'unlock_msg(node1)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'held': [], 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$held': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~unlock_msg(NODE0) | held


---------- Quantifier Inference: orbit 8 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
45 (*) : 0001000---000
45     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', 'held', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']

sign_func_name2args: {'1$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$held': [[]], '1$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$grant_msg$0$2, node$1$holds_lock$0$2, node$1$unlock_msg$0$2]}

sig2const: {'node$1$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$grant_msg$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$holds_lock$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$unlock_msg$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1, node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1 | node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2}

part_sig: ('node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1 | node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2',)


---------- SigGenerator ----------

terms:  ['~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', 'held', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'held': [], 'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$grant_msg': 3, '0$held': 1, '1$holds_lock': 3, '1$unlock_msg': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1, node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1 | node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2}

	sort: node

	identical_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1, node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0, node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1, node$1$grant_msg$0$2, node$1$holds_lock$0$2, node$1$unlock_msg$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$held': [[]], '1$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~grant_msg(NODE0)', '~unlock_msg(NODE0)', '~holds_lock(NODE0)', 'held']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. grant_msg(NODE0) | unlock_msg(NODE0) | holds_lock(NODE0) | ~held


---------- Quantifier Inference: orbit 9 ----------

[QI_CHECK RESULT]: PASS


========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

========================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 2
0 (*) : ------1---1--
0     : ['holds_lock(node2)', 'unlock_msg(node0)']
1     : -----1----1--
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
2     : ------1----1-
2     : ['holds_lock(node2)', 'unlock_msg(node1)']
3     : ----1------1-
3     : ['holds_lock(node0)', 'unlock_msg(node1)']
4     : -----1------1
4     : ['holds_lock(node1)', 'unlock_msg(node2)']
5     : ----1-------1
5     : ['holds_lock(node0)', 'unlock_msg(node2)']
42 (*) : ----1-----1--
42     : ['holds_lock(node0)', 'unlock_msg(node0)']
43     : -----1-----1-
43     : ['holds_lock(node1)', 'unlock_msg(node1)']
44     : ------1-----1
44     : ['holds_lock(node2)', 'unlock_msg(node2)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE1,NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE1)
qcost : 4




=== Prime Orbit 1 =====================
size : 9
num_suborbits: 2
6 (*) : -1----1------
6     : ['grant_msg(node1)', 'holds_lock(node2)']
7     : --1--1-------
7     : ['grant_msg(node2)', 'holds_lock(node1)']
8     : 1-----1------
8     : ['grant_msg(node0)', 'holds_lock(node2)']
9     : --1-1--------
9     : ['grant_msg(node2)', 'holds_lock(node0)']
10     : 1----1-------
10     : ['grant_msg(node0)', 'holds_lock(node1)']
11     : -1--1--------
11     : ['grant_msg(node1)', 'holds_lock(node0)']
12 (*) : --1---1------
12     : ['grant_msg(node2)', 'holds_lock(node2)']
13     : -1---1-------
13     : ['grant_msg(node1)', 'holds_lock(node1)']
14     : 1---1--------
14     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE1,NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE1)
qcost : 4




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
15 (*) : ---0--1------
15     : ['holds_lock(node2)', '~held()']
16     : ---0-1-------
16     : ['holds_lock(node1)', '~held()']
17     : ---01--------
17     : ['holds_lock(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~holds_lock(NODE0) | held
qcost : 3




=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
18 (*) : ----1-1------
18     : ['holds_lock(node0)', 'holds_lock(node2)']
19     : ----11-------
19     : ['holds_lock(node0)', 'holds_lock(node1)']
20     : -----11------
20     : ['holds_lock(node1)', 'holds_lock(node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE1,NODE0. ~holds_lock(NODE0) | ~holds_lock(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 4 =====================
size : 9
num_suborbits: 2
21 (*) : -1--------1--
21     : ['grant_msg(node1)', 'unlock_msg(node0)']
22     : --1-------1--
22     : ['grant_msg(node2)', 'unlock_msg(node0)']
23     : 1----------1-
23     : ['grant_msg(node0)', 'unlock_msg(node1)']
24     : --1--------1-
24     : ['grant_msg(node2)', 'unlock_msg(node1)']
25     : 1-----------1
25     : ['grant_msg(node0)', 'unlock_msg(node2)']
26     : -1----------1
26     : ['grant_msg(node1)', 'unlock_msg(node2)']
27 (*) : -1---------1-
27     : ['grant_msg(node1)', 'unlock_msg(node1)']
28     : --1---------1
28     : ['grant_msg(node2)', 'unlock_msg(node2)']
29     : 1---------1--
29     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE1,NODE0. ~unlock_msg(NODE1) | ~grant_msg(NODE0)
qcost : 4




=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
30 (*) : ----------11-
30     : ['unlock_msg(node0)', 'unlock_msg(node1)']
31     : ----------1-1
31     : ['unlock_msg(node0)', 'unlock_msg(node2)']
32     : -----------11
32     : ['unlock_msg(node1)', 'unlock_msg(node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE1,NODE0. ~unlock_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
33 (*) : 11-----------
33     : ['grant_msg(node0)', 'grant_msg(node1)']
34     : 1-1----------
34     : ['grant_msg(node0)', 'grant_msg(node2)']
35     : -11----------
35     : ['grant_msg(node1)', 'grant_msg(node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE1,NODE0. ~grant_msg(NODE0) | ~grant_msg(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
36 (*) : --10---------
36     : ['grant_msg(node2)', '~held()']
37     : -1-0---------
37     : ['grant_msg(node1)', '~held()']
38     : 1--0---------
38     : ['grant_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | held
qcost : 3




=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
39 (*) : ---0-------1-
39     : ['unlock_msg(node1)', '~held()']
40     : ---0--------1
40     : ['unlock_msg(node2)', '~held()']
41     : ---0------1--
41     : ['unlock_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~unlock_msg(NODE0) | held
qcost : 3




=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
45 (*) : 0001000---000
45     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']
num_forall :   0
num_exists :   1
num_literals : 4
quantified form : exists NODE0. grant_msg(NODE0) | unlock_msg(NODE0) | holds_lock(NODE0) | ~held
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.395 seconds

[QRM NOTE]: Time elapsed since last: 0.337 seconds

[QRM NOTE]: Peak memory: 1921081 bytes


=======================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

=======================================================================================


New level: 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] has cost 41.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


======================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

======================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 41

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

[MIN NOTE]: solution length: 10

invariant [invar_0] forall NODE1,NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE1) # qcost: 4

invariant [invar_1] forall NODE1,NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE1) # qcost: 4

invariant [invar_2] forall NODE0. ~holds_lock(NODE0) | held # qcost: 3

invariant [invar_3] forall NODE1,NODE0. ~holds_lock(NODE0) | ~holds_lock(NODE1) | NODE0 = NODE1 # qcost: 5

invariant [invar_4] forall NODE1,NODE0. ~unlock_msg(NODE1) | ~grant_msg(NODE0) # qcost: 4

invariant [invar_5] forall NODE1,NODE0. ~unlock_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1 # qcost: 5

invariant [invar_6] forall NODE1,NODE0. ~grant_msg(NODE0) | ~grant_msg(NODE1) | NODE0 = NODE1 # qcost: 5

invariant [invar_7] forall NODE0. ~grant_msg(NODE0) | held # qcost: 3

invariant [invar_8] forall NODE0. ~unlock_msg(NODE0) | held # qcost: 3

invariant [invar_9] exists NODE0. grant_msg(NODE0) | unlock_msg(NODE0) | holds_lock(NODE0) | ~held # qcost: 5

[MIN NOTE]: number of total invariants: 10

[MIN NOTE]: total qCost: 41




[QRM NOTE]: Time elapsed since start: 0.473 seconds

[QRM NOTE]: Time elapsed since last: 0.078 seconds

[QRM NOTE]: Peak memory: 1894544 bytes


=========================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

=========================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.552 seconds

[QRM NOTE]: Time elapsed since last: 0.079 seconds

[QRM NOTE]: Peak memory: 870468 bytes


*******************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

*******************************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy -s node=4 -f 2 -g -w -r -e -t -k -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: node=4]

=======================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 24

[FW NOTE]: number of branching actions: 20

ivy_to_cpp target=qrm lockserv_automaton.node_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lockserv_automaton.node_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lockserv_automaton.node_4.finite.cpp lockserv_automaton.node_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lockserv_automaton.node_4.finite.o lockserv_automaton.node_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.810 seconds

[QRM NOTE]: Time elapsed since last: 7.810 seconds

[QRM NOTE]: Peak memory: 1187570 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 8

[FW NOTE]: number of total reachable states:        208

[FW NOTE]: number of dfs representative states:     29

[FW NOTE]: number of dfs non-representative states: 179


==============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: node=4]

==============================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
predicate: lock_msg('node',)
predicate: grant_msg('node',)
predicate: holds_lock('node',)
predicate: unlock_msg('node',)
predicate: held()
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'grant_msg(node1)', 'grant_msg(node2)', 'grant_msg(node3)', 'held()', 'holds_lock(node0)', 'holds_lock(node1)', 'holds_lock(node2)', 'holds_lock(node3)', 'lock_msg(node0)', 'lock_msg(node1)', 'lock_msg(node2)', 'lock_msg(node3)', 'unlock_msg(node0)', 'unlock_msg(node1)', 'unlock_msg(node2)', 'unlock_msg(node3)']
representative states : 0, 16, 48, 112, 240, 12512, 12528, 4592, 4337, 4576, 4216, 12384, 12400, 4464, 4209, 4448, 4148, 12320, 12336, 4400, 4145, 4384, 4114, 12288, 12304, 4368, 4113, 4352, 4097


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000000
lex min decimal: 0
states:
00000000000000000




=== State Orbit 1 =====================
size : 4
repr state: 00000000010000000
lex min decimal: 16
states:
00000000000100000
00000000000010000
00000000001000000
00000000010000000




=== State Orbit 2 =====================
size : 6
repr state: 00000000011000000
lex min decimal: 48
states:
00000000011000000
00000000000110000
00000000001010000
00000000001100000
00000000010010000
00000000010100000




=== State Orbit 3 =====================
size : 4
repr state: 00000000011100000
lex min decimal: 112
states:
00000000010110000
00000000001110000
00000000011010000
00000000011100000




=== State Orbit 4 =====================
size : 1
repr state: 00000000011110000
lex min decimal: 240
states:
00000000011110000




=== State Orbit 5 =====================
size : 4
repr state: 10001000001110000
lex min decimal: 12512
states:
00101000011010000
00011000011100000
01001000010110000
10001000001110000




=== State Orbit 6 =====================
size : 4
repr state: 10001000011110000
lex min decimal: 12528
states:
00101000011110000
00011000011110000
01001000011110000
10001000011110000




=== State Orbit 7 =====================
size : 4
repr state: 00001100011110000
lex min decimal: 4592
states:
00001000111110000
00001001011110000
00001010011110000
00001100011110000




=== State Orbit 8 =====================
size : 4
repr state: 00001000011111000
lex min decimal: 4337
states:
00001000011110010
00001000011110001
00001000011110100
00001000011111000




=== State Orbit 9 =====================
size : 4
repr state: 00001100001110000
lex min decimal: 4576
states:
00001001011010000
00001100001110000
00001000111100000
00001010010110000




=== State Orbit 10 =====================
size : 4
repr state: 00001000001111000
lex min decimal: 4216
states:
00001000010110100
00001000001111000
00001000011100001
00001000011010010




=== State Orbit 11 =====================
size : 12
repr state: 10001000001100000
lex min decimal: 12384
states:
01001000010010000
01001000000110000
00101000011000000
10001000000110000
00101000010010000
00011000011000000
00011000010100000
00011000001100000
01001000010100000
00101000001010000
10001000001010000
10001000001100000




=== State Orbit 12 =====================
size : 12
repr state: 10001000011100000
lex min decimal: 12400
states:
10001000011010000
01001000011100000
01001000011010000
00011000011010000
00101000011100000
10001000011100000
01001000001110000
00011000001110000
00011000010110000
10001000010110000
00101000010110000
00101000001110000




=== State Orbit 13 =====================
size : 12
repr state: 00001100011100000
lex min decimal: 4464
states:
00001100010110000
00001001011100000
00001010011100000
00001000101110000
00001010001110000
00001000111010000
00001010011010000
00001100011100000
00001100011010000
00001001010110000
00001001001110000
00001000110110000




=== State Orbit 14 =====================
size : 12
repr state: 00001000011101000
lex min decimal: 4209
states:
00001000011011000
00001000010110001
00001000011101000
00001000011100100
00001000011010100
00001000010110010
00001000001110010
00001000001110001
00001000001110100
00001000011100010
00001000011010001
00001000010111000




=== State Orbit 15 =====================
size : 12
repr state: 00001100001100000
lex min decimal: 4448
states:
00001001001010000
00001100001100000
00001000101100000
00001010000110000
00001001010010000
00001100000110000
00001000110100000
00001000111000000
00001001011000000
00001010010010000
00001100001010000
00001010010100000




=== State Orbit 16 =====================
size : 12
repr state: 00001000001101000
lex min decimal: 4148
states:
00001000010010010
00001000010010100
00001000000110100
00001000001011000
00001000001010010
00001000010100001
00001000001100001
00001000001101000
00001000011000010
00001000010100100
00001000000111000
00001000011000001




=== State Orbit 17 =====================
size : 12
repr state: 10001000001000000
lex min decimal: 12320
states:
01001000010000000
00101000010000000
01001000000100000
00011000001000000
10001000000010000
10001000001000000
00101000001000000
00101000000010000
00011000010000000
00011000000100000
10001000000100000
01001000000010000




=== State Orbit 18 =====================
size : 12
repr state: 10001000011000000
lex min decimal: 12336
states:
00011000000110000
01001000001010000
00011000001010000
00101000010100000
00101000001100000
00101000000110000
10001000010010000
10001000010100000
01001000011000000
01001000001100000
10001000011000000
00011000010010000




=== State Orbit 19 =====================
size : 12
repr state: 00001100011000000
lex min decimal: 4400
states:
00001000100110000
00001010001010000
00001001000110000
00001100010100000
00001001010100000
00001000101010000
00001100010010000
00001010001100000
00001010011000000
00001001001100000
00001100011000000
00001000110010000




=== State Orbit 20 =====================
size : 12
repr state: 00001000011001000
lex min decimal: 4145
states:
00001000000110001
00001000001100100
00001000001010100
00001000010100010
00001000010011000
00001000001010001
00001000010010001
00001000011000100
00001000010101000
00001000000110010
00001000001100010
00001000011001000




=== State Orbit 21 =====================
size : 12
repr state: 00001100001000000
lex min decimal: 4384
states:
00001001000010000
00001000101000000
00001001001000000
00001010010000000
00001100000010000
00001010000100000
00001000110000000
00001100001000000
00001001010000000
00001010000010000
00001000100100000
00001100000100000




=== State Orbit 22 =====================
size : 12
repr state: 00001000001001000
lex min decimal: 4114
states:
00001000000100100
00001000001001000
00001000010000100
00001000010000010
00001000000100001
00001000001000010
00001000001000001
00001000000011000
00001000010000001
00001000000010100
00001000000101000
00001000000010010




=== State Orbit 23 =====================
size : 4
repr state: 10001000000000000
lex min decimal: 12288
states:
00011000000000000
01001000000000000
00101000000000000
10001000000000000




=== State Orbit 24 =====================
size : 4
repr state: 10001000010000000
lex min decimal: 12304
states:
00011000000010000
01001000001000000
00101000000100000
10001000010000000




=== State Orbit 25 =====================
size : 4
repr state: 00001100010000000
lex min decimal: 4368
states:
00001100010000000
00001001000100000
00001000100010000
00001010001000000




=== State Orbit 26 =====================
size : 4
repr state: 00001000010001000
lex min decimal: 4113
states:
00001000001000100
00001000000100010
00001000010001000
00001000000010001




=== State Orbit 27 =====================
size : 4
repr state: 00001100000000000
lex min decimal: 4352
states:
00001000100000000
00001010000000000
00001001000000000
00001100000000000




=== State Orbit 28 =====================
size : 4
repr state: 00001000000001000
lex min decimal: 4097
states:
00001000000000010
00001000000000100
00001000000001000
00001000000000001



[QRM NOTE]: Time elapsed since start: 8.038 seconds

[QRM NOTE]: Time elapsed since last: 0.227 seconds

[QRM NOTE]: Peak memory: 1263417 bytes


===================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: node=4]

===================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.255 seconds

[QRM NOTE]: Time elapsed since last: 0.217 seconds

[QRM NOTE]: Peak memory: 301764 bytes


*********************************************************************

	[IVY_CHECK]: Ivy Check for Reachability Invariant

*********************************************************************


===========================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy]

===========================================================================================

ivy_check complete=fo ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9

    The following action implementations are present:
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 27: implementation of lock
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 47: implementation of recv_grant
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 38: implementation of recv_lock
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 54: implementation of recv_unlock
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 31: implementation of unlock

    The following initializers are present:
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 18: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:lock
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
        (internal) ext:recv_grant
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
        (internal) ext:recv_lock
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
        (internal) ext:recv_unlock
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
        (internal) ext:unlock
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS

    The following program assertions are treated as assumptions:
        in action unlock when called from the environment:
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 32: assumption
        in action recv_lock when called from the environment:
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 39: assumption
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 40: assumption
        in action recv_grant when called from the environment:
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 48: assumption
        in action recv_unlock when called from the environment:
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 55: assumption

OK
[IVY_CHECK RESULT]: PASS


***************************************************************************

	[QRM]: ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy

***************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy']

[CUTOFF]: node=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 53.233 seconds

[QRM NOTE]: Time elapsed since last: 53.233 seconds

