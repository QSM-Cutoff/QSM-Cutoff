
********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall.ivy: node=3]

====================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm firewall.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_3.finite.cpp firewall.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_3.finite.o firewall.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 8.428 seconds

[QRM NOTE]: Time elapsed since last: 8.428 seconds

[QRM NOTE]: Peak memory: 1177575 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        68

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 52


===========================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall.ivy: node=3]

===========================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: sent('node', 'node')
predicate: internal('node',)
predicate: allowed_in('node',)
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)']
representative states : 0, 3584, 1536, 512, 7176, 7240, 7242, 7246, 7178, 7182, 7180, 5128, 14528, 14532, 14564, 5130


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000111000000000
lex min decimal: 3584
states:
000111000000000




=== State Orbit 2 =====================
size : 3
repr state: 000110000000000
lex min decimal: 1536
states:
000011000000000
000101000000000
000110000000000




=== State Orbit 3 =====================
size : 3
repr state: 000010000000000
lex min decimal: 512
states:
000010000000000
000001000000000
000100000000000




=== State Orbit 4 =====================
size : 6
repr state: 001110001000000
lex min decimal: 7176
states:
100011000000100
100011000100000
001110001000000
001110000001000
010101000000010
010101010000000




=== State Orbit 5 =====================
size : 3
repr state: 001110001001000
lex min decimal: 7240
states:
001110001001000
100011000100100
010101010000010




=== State Orbit 6 =====================
size : 6
repr state: 001110001001100
lex min decimal: 7242
states:
010101010001010
001110001001100
001110001001010
100011010100100
100011001100100
010101010100010




=== State Orbit 7 =====================
size : 3
repr state: 001110001001110
lex min decimal: 7246
states:
010101010101010
001110001001110
100011011100100




=== State Orbit 8 =====================
size : 6
repr state: 001110001000100
lex min decimal: 7178
states:
100011001000100
001110001000100
010101010100000
100011010100000
010101000001010
001110000001010




=== State Orbit 9 =====================
size : 6
repr state: 001110001000110
lex min decimal: 7182
states:
001110000001110
001110001000110
100011011000100
010101010101000
100011011100000
010101000101010




=== State Orbit 10 =====================
size : 6
repr state: 001110001000010
lex min decimal: 7180
states:
100011001100000
010101000100010
001110001000010
001110000001100
010101010001000
100011010000100




=== State Orbit 11 =====================
size : 6
repr state: 100010000100000
lex min decimal: 5128
states:
010001000000010
100001000000100
001010000001000
100010000100000
010100010000000
001100001000000




=== State Orbit 12 =====================
size : 3
repr state: 101010000101000
lex min decimal: 14528
states:
101010000101000
011100011000000
110001000000110




=== State Orbit 13 =====================
size : 6
repr state: 101010010101000
lex min decimal: 14532
states:
110001001000110
011100011100000
110001000001110
101010000101010
011100011000100
101010010101000




=== State Orbit 14 =====================
size : 3
repr state: 101010010101010
lex min decimal: 14564
states:
011100011100100
110001001001110
101010010101010




=== State Orbit 15 =====================
size : 6
repr state: 100010010100000
lex min decimal: 5130
states:
001010000001010
100001001000100
010001000001010
001100001000100
100010010100000
010100010100000



[QRM NOTE]: Time elapsed since start: 8.559 seconds

[QRM NOTE]: Time elapsed since last: 0.131 seconds

[QRM NOTE]: Peak memory: 1227719 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 8.563 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 190799 bytes


===========================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall.ivy: node=3]

===========================================================================================


======================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall.ivy: node=3]

======================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
6 (*) : ---11--1-------
6     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
7     : ---1-1--1------
7     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
8     : ---11----1-----
8     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
9     : ----11-----1---
9     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
10     : ---1-1------1--
10     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
11     : ----11-------1-
11     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
12 (*) : ---00--1-------
12     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
13     : ---0-0--1------
13     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
14     : ---00----1-----
14     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
15     : ----00-----1---
15     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
16     : ---0-0------1--
16     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
17     : ----00-------1-
17     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 8
num_suborbits: 2
18 (*) : -------11--1---
18     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
19     : -------11----1-
19     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
20     : --------11-1---
20     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
21     : ---------1-11--
21     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
22     : -------1----11-
22     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
23     : ---------1--11-
23     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
72 (*) : --------11---1-
72     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
73     : -------1---11--
73     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
24 (*) : -0--0--1-------
24     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
25     : --0--0--1------
25     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
26     : 0--0-----1-----
26     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
27     : --0--0-----1---
27     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
28     : 0--0--------1--
28     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
29     : -0--0--------1-
29     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
66 (*) : 0--0---1-------
66     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
67     : 0--0----1------
67     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
68     : -0--0----1-----
68     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
69     : -0--0------1---
69     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
70     : --0--0------1--
70     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
71     : --0--0-------1-
71     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
30 (*) : -1-0---1-------
30     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
31     : --10----1------
31     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
32     : 1---0----1-----
32     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
33     : --1-0------1---
33     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
34     : 1----0------1--
34     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
35     : -1---0-------1-
35     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
54 (*) : 1---0--1-------
54     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
55     : 1----0--1------
55     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
56     : -1-0-----1-----
56     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
57     : -1---0-----1---
57     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
58     : --10--------1--
58     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
59     : --1-0--------1-
59     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
36 (*) : -0-1---1-------
36     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
37     : --01----1------
37     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
38     : 0---1----1-----
38     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
39     : --0-1------1---
39     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
40     : 0----1------1--
40     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
41     : -0---1-------1-
41     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
42 (*) : 0---1--1-------
42     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
43     : 0----1--1------
43     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
44     : -0-1-----1-----
44     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
45     : -0---1-----1---
45     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
46     : --01--------1--
46     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
47     : --0-1--------1-
47     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
48 (*) : 11-----1-------
48     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
49     : 1-1-----1------
49     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
50     : 11-------1-----
50     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
51     : -11--------1---
51     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
52     : 1-1---------1--
52     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
53     : -11----------1-
53     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
60 (*) : 00-----1-------
60     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
61     : 0-0-----1------
61     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
62     : 00-------1-----
62     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
63     : -00--------1---
63     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
64     : 0-0---------1--
64     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
65     : -00----------1-
65     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : -11-----0------
74     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
75     : -11----0-------
75     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
76     : 1-1--------0---
76     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
77     : 1-1------0-----
77     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
78     : 11-----------0-
78     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
79     : 11----------0--
79     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -1-----0-----0-
80     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
81     : --1-----0--0---
81     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
82     : 1--------0--0--
82     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : -1---0-0-------
83     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
84     : --1-0---0------
84     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
85     : 1----0---0-----
85     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
86     : --10-------0---
86     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
87     : 1---0-------0--
87     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
88     : -1-0---------0-
88     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
89 (*) : -1-0-0---------
89     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
90     : --100----------
90     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
91     : 1---00---------
91     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -110-----------
92     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
93     : 1-1-0----------
93     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
94     : 11---0---------
94     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 3
96 (*) : -10---------10-
96     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
97     : -01------1-0---
97     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
98     : 1-0---------01-
98     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
99     : 0-1----10------
99     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
100     : 10-------0-1---
100     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
101     : 01-----01------
101     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
108 (*) : 01-----0----1--
108     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
109     : 0-1-----01-----
109     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
110     : 10-------0---1-
110     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
111     : -01----1---0---
111     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
112     : 1-0--------10--
112     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
113     : -10-----1----0-
113     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
120 (*) : 01------0---1--
120     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
121     : 0-1----0-1-----
121     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
122     : 10---------0-1-
122     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
123     : -01----1-0-----
123     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
124     : 1-0--------1-0-
124     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
125     : -10-----1---0--
125     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
102 (*) : -1------0---10-
102     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
103     : --1----0-1-0---
103     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
104     : 1----------001-
104     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
105     : --1----100-----
105     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
106     : 1--------0-1-0-
106     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
107     : -1-----01---0--
107     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 3
114 (*) : -1-1---0----1--
114     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
115     : --11----01-----
115     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
116     : 1---1----0---1-
116     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
117     : --1-1--1---0---
117     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
118     : 1----1-----10--
118     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
119     : -1---1--1----0-
119     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
126 (*) : -1-1----0---1--
126     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
127     : --11---0-1-----
127     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
128     : 1---1------0-1-
128     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
129     : --1-1--1-0-----
129     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
130     : 1----1-----1-0-
130     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
131     : -1---1--1---0--
131     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
180 (*) : -1-1---01------
180     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
181     : --11---10------
181     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
182     : 1---1----0-1---
182     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
183     : --1-1----1-0---
183     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
184     : 1----1------01-
184     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
185     : -1---1------10-
185     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
132 (*) : ---1----0--01--
132     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
133     : ---1---0-1---0-
133     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
134     : ----1---0--0-1-
134     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
135     : ----1--1-0--0--
135     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
136     : -----1-0---1-0-
136     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
137     : -----1--10--0--
137     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
138 (*) : ---10---0---1--
138     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
139     : ---1-0-0-1-----
139     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
140     : ---01------0-1-
140     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
141     : ----10-1-0-----
141     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
142     : ---0-1-----1-0-
142     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
143     : ----01--1---0--
143     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
144 (*) : 0-------0--01--
144     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
145     : 0------0-1---0-
145     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
146     : -0------0--0-1-
146     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
147     : -0-----1-0--0--
147     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
148     : --0----0---1-0-
148     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
149     : --0-----10--0--
149     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
150 (*) : 0---0---0---1--
150     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
151     : 0----0-0-1-----
151     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
152     : -0-0-------0-1-
152     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
153     : -0---0-1-0-----
153     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
154     : --00-------1-0-
154     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
155     : --0-0---1---0--
155     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 24
num_suborbits: 4
156 (*) : -10-----11-----
156     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
157     : -01----1----1--
157     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
158     : 1-0----1---1---
158     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
159     : 0-1------1---1-
159     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
160     : 10------1----1-
160     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
161     : 01---------11--
161     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
168 (*) : -10----11------
168     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
169     : -01----11------
169     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
170     : 1-0------1-1---
170     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
171     : 0-1------1-1---
171     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
172     : 10----------11-
172     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
173     : 01----------11-
173     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
174 (*) : 01------1----1-
174     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
175     : 0-1----1---1---
175     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
176     : 10---------11--
176     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
177     : -01-----11-----
177     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
178     : 1-0------1---1-
178     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
179     : -10----1----1--
179     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
210 (*) : -10------1--1--
210     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
211     : -01------1--1--
211     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
212     : 1-0----1-----1-
212     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
213     : 0-1----1-----1-
213     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
214     : 10------1--1---
214     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
215     : 01------1--1---
215     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 24
num_suborbits: 4
162 (*) : -1-----011-----
162     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
163     : --1----10---1--
163     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
164     : 1------1-0-1---
164     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
165     : --1------1-0-1-
165     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
166     : 1-------1---01-
166     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
167     : -1---------110-
167     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
198 (*) : -1------1---01-
198     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
199     : --1----1-0-1---
199     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
200     : 1----------110-
200     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
201     : --1----011-----
201     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
202     : 1--------1-0-1-
202     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
203     : -1-----10---1--
203     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
216 (*) : -1-----0-1--1--
216     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
217     : --1-----01--1--
217     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
218     : 1------1-0---1-
218     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
219     : --1----1---0-1-
219     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
220     : 1-------1--10--
220     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
221     : -1------1--1-0-
221     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
222 (*) : -1------01--1--
222     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
223     : --1----0-1--1--
223     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
224     : 1------1---0-1-
224     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
225     : --1----1-0---1-
225     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
226     : 1-------1--1-0-
226     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
227     : -1------1--10--
227     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
186 (*) : -1-1----1----1-
186     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
187     : --11---1---1---
187     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
188     : 1---1------11--
188     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
189     : --1-1---11-----
189     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
190     : 1----1---1---1-
190     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
191     : -1---1-1----1--
191     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
204 (*) : -1-1--------11-
204     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
205     : --11-----1-1---
205     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
206     : 1---1-------11-
206     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
207     : --1-1--11------
207     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
208     : 1----1---1-1---
208     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
209     : -1---1-11------
209     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
330 (*) : 1---1---1----1-
330     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
331     : 1----1-1---1---
331     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
332     : -1-1-------11--
332     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
333     : -1---1--11-----
333     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
334     : --11-----1---1-
334     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
335     : --1-1--1----1--
335     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
336 (*) : --11---1-----1-
336     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
337     : -1-1----1--1---
337     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
338     : --1-1----1--1--
338     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
339     : 1---1---1--1---
339     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
340     : -1---1---1--1--
340     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
341     : 1----1-1-----1-
341     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
192 (*) : -1-0----1---0--
192     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
193     : --10---1-0-----
193     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
194     : 1---0------1-0-
194     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
195     : --1-0--0-1-----
195     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
196     : 1----0-----0-1-
196     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
197     : -1---0--0---1--
197     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 12
num_suborbits: 2
228 (*) : 0------10---1--
228     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
229     : 0------011-----
229     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
230     : -0-------1-0-1-
230     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
231     : -0-----1-0-1---
231     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
232     : --0--------110-
232     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
233     : --0-----1---01-
233     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
258 (*) : 0-------01--1--
258     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
259     : 0------0-1--1--
259     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
260     : -0-----1---0-1-
260     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
261     : -0-----1-0---1-
261     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
262     : --0-----1--1-0-
262     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
263     : --0-----1--10--
263     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 24
num_suborbits: 4
234 (*) : ----0--10---1--
234     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
235     : -----0-011-----
235     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
236     : ---0-----1-0-1-
236     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
237     : -----0-1-0-1---
237     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
238     : ---0-------110-
238     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
239     : ----0---1---01-
239     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
246 (*) : ----0---01--1--
246     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
247     : -----0-0-1--1--
247     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
248     : ---0---1---0-1-
248     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
249     : -----0-1-0---1-
249     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
250     : ---0----1--1-0-
250     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
251     : ----0---1--10--
251     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
288 (*) : ----0--0-1--1--
288     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
289     : -----0--01--1--
289     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
290     : ---0---1-0---1-
290     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
291     : -----0-1---0-1-
291     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
292     : ---0----1--10--
292     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
293     : ----0---1--1-0-
293     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
294 (*) : ----0--011-----
294     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
295     : -----0-10---1--
295     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
296     : ---0---1-0-1---
296     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
297     : -----0---1-0-1-
297     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
298     : ---0----1---01-
298     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
299     : ----0------110-
299     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 2
240 (*) : ---1---10---1--
240     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
241     : ---1---011-----
241     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
242     : ----1----1-0-1-
242     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
243     : ----1--1-0-1---
243     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
244     : -----1-----110-
244     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
245     : -----1--1---01-
245     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
252 (*) : ---1----01--1--
252     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
253     : ---1---0-1--1--
253     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
254     : ----1--1---0-1-
254     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
255     : ----1--1-0---1-
255     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
256     : -----1--1--1-0-
256     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
257     : -----1--1--10--
257     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 24
num_suborbits: 4
264 (*) : --0-0--1----1--
264     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
265     : -0---0--11-----
265     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
266     : --00-----1---1-
266     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
267     : 0----0-1---1---
267     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
268     : -0-0-------11--
268     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
269     : 0---0---1----1-
269     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
276 (*) : -0-0--------11-
276     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
277     : --00-----1-1---
277     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
278     : 0---0-------11-
278     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
279     : --0-0--11------
279     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
280     : 0----0---1-1---
280     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
281     : -0---0-11------
281     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
282 (*) : --0-0----1--1--
282     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
283     : -0---0---1--1--
283     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
284     : --00---1-----1-
284     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
285     : 0----0-1-----1-
285     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
286     : -0-0----1--1---
286     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
287     : 0---0---1--1---
287     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
318 (*) : -0-0----1----1-
318     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
319     : --00---1---1---
319     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
320     : 0---0------11--
320     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
321     : --0-0---11-----
321     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
322     : 0----0---1---1-
322     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
323     : -0---0-1----1--
323     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 24
num_suborbits: 4
270 (*) : ---01-------11-
270     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
271     : ---0-1---1-1---
271     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
272     : ---10-------11-
272     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
273     : ----01-11------
273     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
274     : ---1-0---1-1---
274     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
275     : ----10-11------
275     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
312 (*) : ---01---1----1-
312     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
313     : ---0-1-1---1---
313     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
314     : ---10------11--
314     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
315     : ----01--11-----
315     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
316     : ---1-0---1---1-
316     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
317     : ----10-1----1--
317     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
324 (*) : ---10---1----1-
324     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
325     : ---1-0-1---1---
325     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
326     : ---01------11--
326     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
327     : ----10--11-----
327     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
328     : ---0-1---1---1-
328     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
329     : ----01-1----1--
329     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
342 (*) : ---01---1--1---
342     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
343     : ---0-1-1-----1-
343     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
344     : ---10---1--1---
344     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
345     : ----01---1--1--
345     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
346     : ---1-0-1-----1-
346     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
347     : ----10---1--1--
347     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
300 (*) : ----0--0-1---0-
300     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
301     : -----0--0--01--
301     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
302     : ---0---1-0--0--
302     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
303     : -----0--0--0-1-
303     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
304     : ---0----10--0--
304     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
305     : ----0--0---1-0-
305     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
306 (*) : ---00---1---0--
306     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
307     : ---0-0-1-0-----
307     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
308     : ---00------1-0-
308     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
309     : ----00-0-1-----
309     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
310     : ---0-0-----0-1-
310     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
311     : ----00--0---1--
311     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 62

[PRIME NOTE]: number of primes: 348

[QRM NOTE]: Time elapsed since start: 8.654 seconds

[QRM NOTE]: Time elapsed since last: 0.091 seconds

[QRM NOTE]: Peak memory: 1556650 bytes


================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall.ivy: node=3]

================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {0, 11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 576), (32, 128), (33, 256)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 576), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 576), (32, 128), (33, 256)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]

[QRM NOTE]: Time elapsed since start: 8.673 seconds

[QRM NOTE]: Time elapsed since last: 0.019 seconds

[QRM NOTE]: Peak memory: 495962 bytes


====================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall.ivy: node=3]

====================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node2,node2)']

sign_func_name2args: {'0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node2,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -1-----0-----0-
80     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
81     : --1-----0--0---
81     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
82     : 1--------0--0--
82     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1}

	identical_multi_classes: {'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'internal(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
6 (*) : ---11--1-------
6     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
7     : ---1-1--1------
7     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
8     : ---11----1-----
8     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
9     : ----11-----1---
9     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
10     : ---1-1------1--
10     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
11     : ----11-------1-
11     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$0': [node$0$internal$0$0; node$0$sent$0$0], 'node$0$internal$0; node$0$sent$1': [node$0$internal$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$0': node$0$internal$0$0; node$0$sent$0$0, 'node$0$internal$0; node$0$sent$1': node$0$internal$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'sent(NODE0,NODE1)', 'internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~internal(NODE0) | ~sent(NODE0,NODE1) | ~internal(NODE1) | NODE0 = NODE1


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
12 (*) : ---00--1-------
12     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
13     : ---0-0--1------
13     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
14     : ---00----1-----
14     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
15     : ----00-----1---
15     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
16     : ---0-0------1--
16     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
17     : ----00-------1-
17     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node1)', 'sent(node0,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node1)', 'sent(node0,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$0], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$0, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~internal(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1


=== Prime Orbit 4 =====================
size : 8
num_suborbits: 2
18 (*) : -------11--1---
18     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
19     : -------11----1-
19     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
20     : --------11-1---
20     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
21     : ---------1-11--
21     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
22     : -------1----11-
22     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
23     : ---------1--11-
23     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
72 (*) : --------11---1-
72     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
73     : -------1---11--
73     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$2], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1, node$0$sent$1$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$0$2; node$0$sent$1$0, node$0$sent$1$1; node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$0$sent$1$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$2, node$0$sent$0$2; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2; node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1 | node$0$sent$1$2}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$0; node$0$sent$1': [node$0$sent$0$2; node$0$sent$1$0], 'node$0$sent$1': [node$0$sent$1$1, node$0$sent$1$2]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$2; node$0$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$1, node$0$sent$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', 'sent(NODE2,NODE4)', 'sent(NODE1,NODE3)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE1,NODE0,NODE2,NODE3. ~sent(NODE0,NODE2) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
24 (*) : -0--0--1-------
24     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
25     : --0--0--1------
25     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
26     : 0--0-----1-----
26     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
27     : --0--0-----1---
27     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
28     : 0--0--------1--
28     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
29     : -0--0--------1-
29     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
66 (*) : 0--0---1-------
66     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
67     : 0--0----1------
67     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
68     : -0--0----1-----
68     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
69     : -0--0------1---
69     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
70     : --0--0------1--
70     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
71     : --0--0-------1-
71     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node1)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node0)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node1)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~internal(NODE2)', '~allowed_in(NODE2)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | internal(NODE2) | allowed_in(NODE2) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
30 (*) : -1-0---1-------
30     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
31     : --10----1------
31     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
32     : 1---0----1-----
32     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
33     : --1-0------1---
33     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
34     : 1----0------1--
34     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
35     : -1---0-------1-
35     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
54 (*) : 1---0--1-------
54     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
55     : 1----0--1------
55     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
56     : -1-0-----1-----
56     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
57     : -1---0-----1---
57     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
58     : --10--------1--
58     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
59     : --1-0--------1-
59     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', 'sent(node0,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node1)', 'sent(node0,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE3)', 'allowed_in(NODE0)', 'sent(NODE1,NODE2)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. internal(NODE3) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
36 (*) : -0-1---1-------
36     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
37     : --01----1------
37     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
38     : 0---1----1-----
38     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
39     : --0-1------1---
39     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
40     : 0----1------1--
40     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
41     : -0---1-------1-
41     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
42 (*) : 0---1--1-------
42     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
43     : 0----1--1------
43     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
44     : -0-1-----1-----
44     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
45     : -0---1-----1---
45     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
46     : --01--------1--
46     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
47     : --0-1--------1-
47     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'internal(node0)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'internal(node1)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'internal(node0)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', '~allowed_in(NODE3)', 'sent(NODE1,NODE2)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. ~internal(NODE0) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
48 (*) : 11-----1-------
48     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
49     : 1-1-----1------
49     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
50     : 11-------1-----
50     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
51     : -11--------1---
51     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
52     : 1-1---------1--
52     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
53     : -11----------1-
53     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$sent$0': [node$0$allowed_in$0$0; node$0$sent$0$0], 'node$0$allowed_in$0; node$0$sent$1': [node$0$allowed_in$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$sent$0': node$0$allowed_in$0$0; node$0$sent$0$0, 'node$0$allowed_in$0; node$0$sent$1': node$0$allowed_in$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', 'allowed_in(NODE0)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~sent(NODE0,NODE1) | ~allowed_in(NODE0) | ~allowed_in(NODE1) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
60 (*) : 00-----1-------
60     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
61     : 0-0-----1------
61     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
62     : 00-------1-----
62     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
63     : -00--------1---
63     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
64     : 0-0---------1--
64     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
65     : -00----------1-
65     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~allowed_in(node1)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~allowed_in(node1)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$0], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$0, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : -11-----0------
74     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
75     : -11----0-------
75     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
76     : 1-1--------0---
76     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
77     : 1-1------0-----
77     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
78     : 11-----------0-
78     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
79     : 11----------0--
79     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$1; node$1$sent$1$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$1; node$1$sent$1$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'allowed_in(NODE0)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | ~allowed_in(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : -1---0-0-------
83     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
84     : --1-0---0------
84     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
85     : 1----0---0-----
85     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
86     : --10-------0---
86     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
87     : 1---0-------0--
87     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
88     : -1-0---------0-
88     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE2,NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
89 (*) : -1-0-0---------
89     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
90     : --100----------
90     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
91     : 1---00---------
91     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE0)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -110-----------
92     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
93     : 1-1-0----------
93     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
94     : 11---0---------
94     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 2, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$2]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 3
96 (*) : -10---------10-
96     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
97     : -01------1-0---
97     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
98     : 1-0---------01-
98     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
99     : 0-1----10------
99     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
100     : 10-------0-1---
100     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
101     : 01-----01------
101     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
108 (*) : 01-----0----1--
108     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
109     : 0-1-----01-----
109     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
110     : 10-------0---1-
110     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
111     : -01----1---0---
111     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
112     : 1-0--------10--
112     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
113     : -10-----1----0-
113     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
120 (*) : 01------0---1--
120     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
121     : 0-1----0-1-----
121     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
122     : 10---------0-1-
122     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
123     : -01----1-0-----
123     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
124     : 1-0--------1-0-
124     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
125     : -10-----1---0--
125     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node2,node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', '~sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node2,node0)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$allowed_in': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$sent$0': [node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$sent$0': node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE3,NODE4)', 'allowed_in(NODE0)', '~allowed_in(NODE3)', 'sent(NODE1,NODE2)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE1,NODE0,NODE2,NODE3. sent(NODE3,NODE4) | ~allowed_in(NODE0) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
102 (*) : -1------0---10-
102     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
103     : --1----0-1-0---
103     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
104     : 1----------001-
104     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
105     : --1----100-----
105     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
106     : 1--------0-1-0-
106     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
107     : -1-----01---0--
107     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node2)', 'sent(node2,node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$0$1, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$1, node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node2)', 'sent(node2,node0)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$1, node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$1], 'node$0$sent$0; node$1$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$1, 'node$0$sent$0; node$1$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', '~sent(NODE1,NODE0)', 'allowed_in(NODE0)', 'sent(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | sent(NODE1,NODE0) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 3
114 (*) : -1-1---0----1--
114     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
115     : --11----01-----
115     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
116     : 1---1----0---1-
116     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
117     : --1-1--1---0---
117     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
118     : 1----1-----10--
118     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
119     : -1---1--1----0-
119     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
126 (*) : -1-1----0---1--
126     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
127     : --11---0-1-----
127     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
128     : 1---1------0-1-
128     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
129     : --1-1--1-0-----
129     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
130     : 1----1-----1-0-
130     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
131     : -1---1--1---0--
131     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
180 (*) : -1-1---01------
180     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
181     : --11---10------
181     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
182     : 1---1----0-1---
182     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
183     : --1-1----1-0---
183     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
184     : 1----1------01-
184     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
185     : -1---1------10-
185     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node1)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0; node$1$sent$0': [node$0$internal$0$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0; node$1$sent$0': node$0$internal$0$0; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE4)', 'allowed_in(NODE0)', 'internal(NODE1)', 'sent(NODE2,NODE3)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE1,NODE0,NODE2,NODE3. sent(NODE1,NODE4) | ~allowed_in(NODE0) | ~internal(NODE1) | ~sent(NODE2,NODE3) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
132 (*) : ---1----0--01--
132     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
133     : ---1---0-1---0-
133     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
134     : ----1---0--0-1-
134     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
135     : ----1--1-0--0--
135     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
136     : -----1-0---1-0-
136     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
137     : -----1--10--0--
137     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'sent(NODE1,NODE0)', '~sent(NODE2,NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE2,NODE1) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
138 (*) : ---10---0---1--
138     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
139     : ---1-0-0-1-----
139     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
140     : ---01------0-1-
140     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
141     : ----10-1-0-----
141     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
142     : ---0-1-----1-0-
142     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
143     : ----01--1---0--
143     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~internal(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'sent(NODE1,NODE0)', '~internal(NODE2)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~internal(NODE0) | ~sent(NODE1,NODE0) | internal(NODE2) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
144 (*) : 0-------0--01--
144     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
145     : 0------0-1---0-
145     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
146     : -0------0--0-1-
146     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
147     : -0-----1-0--0--
147     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
148     : --0----0---1-0-
148     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
149     : --0-----10--0--
149     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~sent(NODE1,NODE0)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
150 (*) : 0---0---0---1--
150     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
151     : 0----0-0-1-----
151     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
152     : -0-0-------0-1-
152     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
153     : -0---0-1-0-----
153     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
154     : --00-------1-0-
154     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
155     : --0-0---1---0--
155     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~sent(NODE1,NODE0)', '~internal(NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | internal(NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 23 =====================
size : 24
num_suborbits: 4
156 (*) : -10-----11-----
156     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
157     : -01----1----1--
157     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
158     : 1-0----1---1---
158     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
159     : 0-1------1---1-
159     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
160     : 10------1----1-
160     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
161     : 01---------11--
161     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
168 (*) : -10----11------
168     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
169     : -01----11------
169     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
170     : 1-0------1-1---
170     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
171     : 0-1------1-1---
171     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
172     : 10----------11-
172     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
173     : 01----------11-
173     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
174 (*) : 01------1----1-
174     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
175     : 0-1----1---1---
175     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
176     : 10---------11--
176     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
177     : -01-----11-----
177     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
178     : 1-0------1---1-
178     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
179     : -10----1----1--
179     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
210 (*) : -10------1--1--
210     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
211     : -01------1--1--
211     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
212     : 1-0----1-----1-
212     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
213     : 0-1----1-----1-
213     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
214     : 10------1--1---
214     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
215     : 01------1--1---
215     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$allowed_in': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$allowed_in': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE5)', 'allowed_in(NODE0)', 'sent(NODE1,NODE3)', 'sent(NODE2,NODE4)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. allowed_in(NODE5) | ~allowed_in(NODE0) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE1 = NODE4 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2))


=== Prime Orbit 24 =====================
size : 24
num_suborbits: 4
162 (*) : -1-----011-----
162     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
163     : --1----10---1--
163     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
164     : 1------1-0-1---
164     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
165     : --1------1-0-1-
165     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
166     : 1-------1---01-
166     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
167     : -1---------110-
167     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
198 (*) : -1------1---01-
198     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
199     : --1----1-0-1---
199     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
200     : 1----------110-
200     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
201     : --1----011-----
201     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
202     : 1--------1-0-1-
202     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
203     : -1-----10---1--
203     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
216 (*) : -1-----0-1--1--
216     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
217     : --1-----01--1--
217     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
218     : 1------1-0---1-
218     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
219     : --1----1---0-1-
219     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
220     : 1-------1--10--
220     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
221     : -1------1--1-0-
221     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
222 (*) : -1------01--1--
222     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
223     : --1----0-1--1--
223     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
224     : 1------1---0-1-
224     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
225     : --1----1-0---1-
225     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
226     : 1-------1--1-0-
226     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
227     : -1------1--10--
227     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$sent$0': node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE5,NODE6)', 'allowed_in(NODE0)', 'sent(NODE1,NODE3)', 'sent(NODE2,NODE4)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE6,NODE3. sent(NODE5,NODE6) | ~allowed_in(NODE0) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE6 | NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE6 | NODE2 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE6 | NODE0 ~= NODE1 | NODE3 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE6 | NODE3 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2))


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
186 (*) : -1-1----1----1-
186     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
187     : --11---1---1---
187     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
188     : 1---1------11--
188     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
189     : --1-1---11-----
189     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
190     : 1----1---1---1-
190     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
191     : -1---1-1----1--
191     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
204 (*) : -1-1--------11-
204     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
205     : --11-----1-1---
205     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
206     : 1---1-------11-
206     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
207     : --1-1--11------
207     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
208     : 1----1---1-1---
208     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
209     : -1---1-11------
209     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
330 (*) : 1---1---1----1-
330     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
331     : 1----1-1---1---
331     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
332     : -1-1-------11--
332     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
333     : -1---1--11-----
333     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
334     : --11-----1---1-
334     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
335     : --1-1--1----1--
335     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
336 (*) : --11---1-----1-
336     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
337     : -1-1----1--1---
337     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
338     : --1-1----1--1--
338     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
339     : 1---1---1--1---
339     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
340     : -1---1---1--1--
340     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
341     : 1----1-1-----1-
341     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0': node$0$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE3,NODE5)', 'allowed_in(NODE0)', 'internal(NODE1)', 'sent(NODE2,NODE4)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. ~sent(NODE3,NODE5) | ~allowed_in(NODE0) | ~internal(NODE1) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE1 = NODE4 | NODE0 = NODE1))


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
192 (*) : -1-0----1---0--
192     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
193     : --10---1-0-----
193     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
194     : 1---0------1-0-
194     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
195     : --1-0--0-1-----
195     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
196     : 1----0-----0-1-
196     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
197     : -1---0--0---1--
197     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'allowed_in(NODE0)', 'sent(NODE1,NODE2)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 27 =====================
size : 12
num_suborbits: 2
228 (*) : 0------10---1--
228     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
229     : 0------011-----
229     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
230     : -0-------1-0-1-
230     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
231     : -0-----1-0-1---
231     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
232     : --0--------110-
232     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
233     : --0-----1---01-
233     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
258 (*) : 0-------01--1--
258     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
259     : 0------0-1--1--
259     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
260     : -0-----1---0-1-
260     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
261     : -0-----1-0---1-
261     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
262     : --0-----1--1-0-
262     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
263     : --0-----1--10--
263     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', '~allowed_in(NODE3)', 'sent(NODE1,NODE3)', '~sent(NODE3,NODE1)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. ~sent(NODE0,NODE2) | allowed_in(NODE3) | ~sent(NODE1,NODE3) | sent(NODE3,NODE1) | ((NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 28 =====================
size : 24
num_suborbits: 4
234 (*) : ----0--10---1--
234     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
235     : -----0-011-----
235     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
236     : ---0-----1-0-1-
236     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
237     : -----0-1-0-1---
237     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
238     : ---0-------110-
238     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
239     : ----0---1---01-
239     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
246 (*) : ----0---01--1--
246     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
247     : -----0-0-1--1--
247     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
248     : ---0---1---0-1-
248     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
249     : -----0-1-0---1-
249     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
250     : ---0----1--1-0-
250     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
251     : ----0---1--10--
251     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
288 (*) : ----0--0-1--1--
288     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
289     : -----0--01--1--
289     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
290     : ---0---1-0---1-
290     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
291     : -----0-1---0-1-
291     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
292     : ---0----1--10--
292     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
293     : ----0---1--1-0-
293     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
294 (*) : ----0--011-----
294     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
295     : -----0-10---1--
295     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
296     : ---0---1-0-1---
296     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
297     : -----0---1-0-1-
297     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
298     : ---0----1---01-
298     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
299     : ----0------110-
299     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1; node$1$sent$0$0, node$1$internal$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$1; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$sent$1': node$0$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$1; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE4)', 'sent(NODE0,NODE2)', 'sent(NODE1,NODE3)', '~sent(NODE3,NODE5)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. internal(NODE4) | ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | sent(NODE3,NODE5) | ((NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE0 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 2
240 (*) : ---1---10---1--
240     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
241     : ---1---011-----
241     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
242     : ----1----1-0-1-
242     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
243     : ----1--1-0-1---
243     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
244     : -----1-----110-
244     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
245     : -----1--1---01-
245     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
252 (*) : ---1----01--1--
252     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
253     : ---1---0-1--1--
253     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
254     : ----1--1---0-1-
254     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
255     : ----1--1-0---1-
255     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
256     : -----1--1--1-0-
256     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
257     : -----1--1--10--
257     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', '~sent(NODE0,NODE2)', 'sent(NODE2,NODE0)', 'sent(NODE1,NODE3)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. ~internal(NODE0) | sent(NODE0,NODE2) | ~sent(NODE2,NODE0) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE1 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 30 =====================
size : 24
num_suborbits: 4
264 (*) : --0-0--1----1--
264     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
265     : -0---0--11-----
265     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
266     : --00-----1---1-
266     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
267     : 0----0-1---1---
267     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
268     : -0-0-------11--
268     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
269     : 0---0---1----1-
269     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
276 (*) : -0-0--------11-
276     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
277     : --00-----1-1---
277     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
278     : 0---0-------11-
278     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
279     : --0-0--11------
279     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
280     : 0----0---1-1---
280     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
281     : -0---0-11------
281     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
282 (*) : --0-0----1--1--
282     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
283     : -0---0---1--1--
283     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
284     : --00---1-----1-
284     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
285     : 0----0-1-----1-
285     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
286     : -0-0----1--1---
286     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
287     : 0---0---1--1---
287     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
318 (*) : -0-0----1----1-
318     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
319     : --00---1---1---
319     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
320     : 0---0------11--
320     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
321     : --0-0---11-----
321     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
322     : 0----0---1---1-
322     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
323     : -0---0-1----1--
323     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$allowed_in$0': node$1$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', '~allowed_in(NODE4)', 'sent(NODE1,NODE3)', '~internal(NODE5)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. ~sent(NODE0,NODE2) | allowed_in(NODE4) | ~sent(NODE1,NODE3) | internal(NODE5) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 31 =====================
size : 24
num_suborbits: 4
270 (*) : ---01-------11-
270     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
271     : ---0-1---1-1---
271     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
272     : ---10-------11-
272     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
273     : ----01-11------
273     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
274     : ---1-0---1-1---
274     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
275     : ----10-11------
275     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
312 (*) : ---01---1----1-
312     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
313     : ---0-1-1---1---
313     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
314     : ---10------11--
314     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
315     : ----01--11-----
315     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
316     : ---1-0---1---1-
316     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
317     : ----10-1----1--
317     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
324 (*) : ---10---1----1-
324     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
325     : ---1-0-1---1---
325     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
326     : ---01------11--
326     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
327     : ----10--11-----
327     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
328     : ---0-1---1---1-
328     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
329     : ----01-1----1--
329     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
342 (*) : ---01---1--1---
342     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
343     : ---0-1-1-----1-
343     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
344     : ---10---1--1---
344     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
345     : ----01---1--1--
345     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
346     : ---1-0-1-----1-
346     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
347     : ----10---1--1--
347     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'sent(NODE2,NODE4)', 'sent(NODE1,NODE3)', '~internal(NODE5)']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. ~internal(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | internal(NODE5) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE2 = NODE4 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
300 (*) : ----0--0-1---0-
300     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
301     : -----0--0--01--
301     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
302     : ---0---1-0--0--
302     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
303     : -----0--0--0-1-
303     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
304     : ---0----10--0--
304     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
305     : ----0--0---1-0-
305     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~sent(NODE1,NODE0)', '~internal(NODE0)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | internal(NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
306 (*) : ---00---1---0--
306     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
307     : ---0-0-1-0-----
307     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
308     : ---00------1-0-
308     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
309     : ----00-0-1-----
309     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
310     : ---0-0-----0-1-
310     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
311     : ----00--0---1--
311     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~sent(NODE1,NODE0)', '~internal(NODE0)', '~internal(NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | internal(NODE0) | internal(NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


==============================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall.ivy: node=3]

==============================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -1-----0-----0-
80     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
81     : --1-----0--0---
81     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
82     : 1--------0--0--
82     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   1
num_exists :   1
num_literals : 4
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 6




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
6 (*) : ---11--1-------
6     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
7     : ---1-1--1------
7     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
8     : ---11----1-----
8     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
9     : ----11-----1---
9     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
10     : ---1-1------1--
10     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
11     : ----11-------1-
11     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
num_forall :   2
num_exists :   0
num_literals : 5
quantified form : forall NODE1,NODE0. ~internal(NODE0) | ~sent(NODE0,NODE1) | ~internal(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
12 (*) : ---00--1-------
12     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
13     : ---0-0--1------
13     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
14     : ---00----1-----
14     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
15     : ----00-----1---
15     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
16     : ---0-0------1--
16     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
17     : ----00-------1-
17     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
num_forall :   2
num_exists :   0
num_literals : 5
quantified form : forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 4 =====================
size : 8
num_suborbits: 2
18 (*) : -------11--1---
18     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
19     : -------11----1-
19     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
20     : --------11-1---
20     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
21     : ---------1-11--
21     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
22     : -------1----11-
22     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
23     : ---------1--11-
23     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
72 (*) : --------11---1-
72     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
73     : -------1---11--
73     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 23
quantified form : forall NODE4,NODE1,NODE0,NODE2,NODE3. ~sent(NODE0,NODE2) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 28




=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
24 (*) : -0--0--1-------
24     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
25     : --0--0--1------
25     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
26     : 0--0-----1-----
26     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
27     : --0--0-----1---
27     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
28     : 0--0--------1--
28     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
29     : -0--0--------1-
29     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
66 (*) : 0--0---1-------
66     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
67     : 0--0----1------
67     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
68     : -0--0----1-----
68     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
69     : -0--0------1---
69     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
70     : --0--0------1--
70     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
71     : --0--0-------1-
71     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   3
num_exists :   0
num_literals : 11
quantified form : forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | internal(NODE2) | allowed_in(NODE2) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))
qcost : 14




=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
30 (*) : -1-0---1-------
30     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
31     : --10----1------
31     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
32     : 1---0----1-----
32     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
33     : --1-0------1---
33     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
34     : 1----0------1--
34     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
35     : -1---0-------1-
35     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
54 (*) : 1---0--1-------
54     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
55     : 1----0--1------
55     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
56     : -1-0-----1-----
56     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
57     : -1---0-----1---
57     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
58     : --10--------1--
58     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
59     : --1-0--------1-
59     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
num_forall :   4
num_exists :   0
num_literals : 15
quantified form : forall NODE1,NODE3,NODE0,NODE2. internal(NODE3) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 19




=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
36 (*) : -0-1---1-------
36     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
37     : --01----1------
37     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
38     : 0---1----1-----
38     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
39     : --0-1------1---
39     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
40     : 0----1------1--
40     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
41     : -0---1-------1-
41     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
42 (*) : 0---1--1-------
42     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
43     : 0----1--1------
43     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
44     : -0-1-----1-----
44     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
45     : -0---1-----1---
45     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
46     : --01--------1--
46     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
47     : --0-1--------1-
47     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
num_forall :   4
num_exists :   0
num_literals : 15
quantified form : forall NODE1,NODE3,NODE0,NODE2. ~internal(NODE0) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 19




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
48 (*) : 11-----1-------
48     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
49     : 1-1-----1------
49     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
50     : 11-------1-----
50     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
51     : -11--------1---
51     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
52     : 1-1---------1--
52     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
53     : -11----------1-
53     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
num_forall :   2
num_exists :   0
num_literals : 5
quantified form : forall NODE1,NODE0. ~sent(NODE0,NODE1) | ~allowed_in(NODE0) | ~allowed_in(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
60 (*) : 00-----1-------
60     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
61     : 0-0-----1------
61     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
62     : 00-------1-----
62     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
63     : -00--------1---
63     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
64     : 0-0---------1--
64     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
65     : -00----------1-
65     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
num_forall :   2
num_exists :   0
num_literals : 5
quantified form : forall NODE1,NODE0. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : -11-----0------
74     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
75     : -11----0-------
75     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
76     : 1-1--------0---
76     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
77     : 1-1------0-----
77     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
78     : 11-----------0-
78     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
79     : 11----------0--
79     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 9
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | ~allowed_in(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 12




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : -1---0-0-------
83     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
84     : --1-0---0------
84     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
85     : 1----0---0-----
85     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
86     : --10-------0---
86     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
87     : 1---0-------0--
87     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
88     : -1-0---------0-
88     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 9
quantified form : forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 12




=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
89 (*) : -1-0-0---------
89     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
90     : --100----------
90     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
91     : 1---00---------
91     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 4
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))
qcost : 6




=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -110-----------
92     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
93     : 1-1-0----------
93     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
94     : 11---0---------
94     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 4
quantified form : forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))
qcost : 6




=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 16 =====================
size : 18
num_suborbits: 3
96 (*) : -10---------10-
96     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
97     : -01------1-0---
97     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
98     : 1-0---------01-
98     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
99     : 0-1----10------
99     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
100     : 10-------0-1---
100     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
101     : 01-----01------
101     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
108 (*) : 01-----0----1--
108     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
109     : 0-1-----01-----
109     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
110     : 10-------0---1-
110     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
111     : -01----1---0---
111     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
112     : 1-0--------10--
112     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
113     : -10-----1----0-
113     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
120 (*) : 01------0---1--
120     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
121     : 0-1----0-1-----
121     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
122     : 10---------0-1-
122     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
123     : -01----1-0-----
123     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
124     : 1-0--------1-0-
124     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
125     : -10-----1---0--
125     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 34
quantified form : forall NODE4,NODE1,NODE0,NODE2,NODE3. sent(NODE3,NODE4) | ~allowed_in(NODE0) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 39




=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
102 (*) : -1------0---10-
102     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
103     : --1----0-1-0---
103     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
104     : 1----------001-
104     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
105     : --1----100-----
105     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
106     : 1--------0-1-0-
106     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
107     : -1-----01---0--
107     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 10
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | sent(NODE1,NODE0) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 18 =====================
size : 18
num_suborbits: 3
114 (*) : -1-1---0----1--
114     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
115     : --11----01-----
115     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
116     : 1---1----0---1-
116     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
117     : --1-1--1---0---
117     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
118     : 1----1-----10--
118     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
119     : -1---1--1----0-
119     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
126 (*) : -1-1----0---1--
126     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
127     : --11---0-1-----
127     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
128     : 1---1------0-1-
128     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
129     : --1-1--1-0-----
129     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
130     : 1----1-----1-0-
130     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
131     : -1---1--1---0--
131     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
180 (*) : -1-1---01------
180     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
181     : --11---10------
181     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
182     : 1---1----0-1---
182     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
183     : --1-1----1-0---
183     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
184     : 1----1------01-
184     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
185     : -1---1------10-
185     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
num_forall :   5
num_exists :   0
num_literals : 34
quantified form : forall NODE4,NODE1,NODE0,NODE2,NODE3. sent(NODE1,NODE4) | ~allowed_in(NODE0) | ~internal(NODE1) | ~sent(NODE2,NODE3) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 39




=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
132 (*) : ---1----0--01--
132     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
133     : ---1---0-1---0-
133     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
134     : ----1---0--0-1-
134     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
135     : ----1--1-0--0--
135     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
136     : -----1-0---1-0-
136     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
137     : -----1--10--0--
137     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 10
quantified form : forall NODE1,NODE0,NODE2. ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE2,NODE1) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
138 (*) : ---10---0---1--
138     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
139     : ---1-0-0-1-----
139     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
140     : ---01------0-1-
140     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
141     : ----10-1-0-----
141     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
142     : ---0-1-----1-0-
142     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
143     : ----01--1---0--
143     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 10
quantified form : forall NODE1,NODE0,NODE2. ~internal(NODE0) | ~sent(NODE1,NODE0) | internal(NODE2) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
144 (*) : 0-------0--01--
144     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
145     : 0------0-1---0-
145     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
146     : -0------0--0-1-
146     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
147     : -0-----1-0--0--
147     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
148     : --0----0---1-0-
148     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
149     : --0-----10--0--
149     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 10
quantified form : forall NODE1,NODE0,NODE2. allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
150 (*) : 0---0---0---1--
150     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
151     : 0----0-0-1-----
151     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
152     : -0-0-------0-1-
152     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
153     : -0---0-1-0-----
153     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
154     : --00-------1-0-
154     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
155     : --0-0---1---0--
155     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 10
quantified form : forall NODE1,NODE0,NODE2. allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | internal(NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 23 =====================
size : 24
num_suborbits: 4
156 (*) : -10-----11-----
156     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
157     : -01----1----1--
157     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
158     : 1-0----1---1---
158     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
159     : 0-1------1---1-
159     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
160     : 10------1----1-
160     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
161     : 01---------11--
161     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
168 (*) : -10----11------
168     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
169     : -01----11------
169     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
170     : 1-0------1-1---
170     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
171     : 0-1------1-1---
171     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
172     : 10----------11-
172     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
173     : 01----------11-
173     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
174 (*) : 01------1----1-
174     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
175     : 0-1----1---1---
175     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
176     : 10---------11--
176     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
177     : -01-----11-----
177     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
178     : 1-0------1---1-
178     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
179     : -10----1----1--
179     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
210 (*) : -10------1--1--
210     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
211     : -01------1--1--
211     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
212     : 1-0----1-----1-
212     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
213     : 0-1----1-----1-
213     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
214     : 10------1--1---
214     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
215     : 01------1--1---
215     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
num_forall :   6
num_exists :   0
num_literals : 52
quantified form : forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. allowed_in(NODE5) | ~allowed_in(NODE0) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE1 = NODE4 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2))
qcost : 58




=== Prime Orbit 24 =====================
size : 24
num_suborbits: 4
162 (*) : -1-----011-----
162     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
163     : --1----10---1--
163     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
164     : 1------1-0-1---
164     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
165     : --1------1-0-1-
165     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
166     : 1-------1---01-
166     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
167     : -1---------110-
167     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
198 (*) : -1------1---01-
198     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
199     : --1----1-0-1---
199     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
200     : 1----------110-
200     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
201     : --1----011-----
201     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
202     : 1--------1-0-1-
202     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
203     : -1-----10---1--
203     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
216 (*) : -1-----0-1--1--
216     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
217     : --1-----01--1--
217     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
218     : 1------1-0---1-
218     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
219     : --1----1---0-1-
219     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
220     : 1-------1--10--
220     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
221     : -1------1--1-0-
221     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
222 (*) : -1------01--1--
222     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
223     : --1----0-1--1--
223     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
224     : 1------1---0-1-
224     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
225     : --1----1-0---1-
225     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
226     : 1-------1--1-0-
226     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
227     : -1------1--10--
227     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   7
num_exists :   0
num_literals : 60
quantified form : forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE6,NODE3. sent(NODE5,NODE6) | ~allowed_in(NODE0) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE6 | NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE6 | NODE2 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE6 | NODE0 ~= NODE1 | NODE3 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE6 | NODE3 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2))
qcost : 67




=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
186 (*) : -1-1----1----1-
186     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
187     : --11---1---1---
187     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
188     : 1---1------11--
188     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
189     : --1-1---11-----
189     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
190     : 1----1---1---1-
190     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
191     : -1---1-1----1--
191     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
204 (*) : -1-1--------11-
204     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
205     : --11-----1-1---
205     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
206     : 1---1-------11-
206     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
207     : --1-1--11------
207     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
208     : 1----1---1-1---
208     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
209     : -1---1-11------
209     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
330 (*) : 1---1---1----1-
330     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
331     : 1----1-1---1---
331     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
332     : -1-1-------11--
332     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
333     : -1---1--11-----
333     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
334     : --11-----1---1-
334     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
335     : --1-1--1----1--
335     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
336 (*) : --11---1-----1-
336     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
337     : -1-1----1--1---
337     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
338     : --1-1----1--1--
338     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
339     : 1---1---1--1---
339     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
340     : -1---1---1--1--
340     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
341     : 1----1-1-----1-
341     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
num_forall :   6
num_exists :   0
num_literals : 52
quantified form : forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. ~sent(NODE3,NODE5) | ~allowed_in(NODE0) | ~internal(NODE1) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE1 = NODE4 | NODE0 = NODE1))
qcost : 58




=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
192 (*) : -1-0----1---0--
192     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
193     : --10---1-0-----
193     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
194     : 1---0------1-0-
194     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
195     : --1-0--0-1-----
195     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
196     : 1----0-----0-1-
196     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
197     : -1---0--0---1--
197     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 10
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 27 =====================
size : 12
num_suborbits: 2
228 (*) : 0------10---1--
228     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
229     : 0------011-----
229     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
230     : -0-------1-0-1-
230     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
231     : -0-----1-0-1---
231     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
232     : --0--------110-
232     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
233     : --0-----1---01-
233     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
258 (*) : 0-------01--1--
258     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
259     : 0------0-1--1--
259     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
260     : -0-----1---0-1-
260     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
261     : -0-----1-0---1-
261     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
262     : --0-----1--1-0-
262     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
263     : --0-----1--10--
263     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   4
num_exists :   0
num_literals : 20
quantified form : forall NODE1,NODE3,NODE0,NODE2. ~sent(NODE0,NODE2) | allowed_in(NODE3) | ~sent(NODE1,NODE3) | sent(NODE3,NODE1) | ((NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 24




=== Prime Orbit 28 =====================
size : 24
num_suborbits: 4
234 (*) : ----0--10---1--
234     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
235     : -----0-011-----
235     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
236     : ---0-----1-0-1-
236     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
237     : -----0-1-0-1---
237     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
238     : ---0-------110-
238     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
239     : ----0---1---01-
239     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
246 (*) : ----0---01--1--
246     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
247     : -----0-0-1--1--
247     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
248     : ---0---1---0-1-
248     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
249     : -----0-1-0---1-
249     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
250     : ---0----1--1-0-
250     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
251     : ----0---1--10--
251     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
288 (*) : ----0--0-1--1--
288     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
289     : -----0--01--1--
289     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
290     : ---0---1-0---1-
290     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
291     : -----0-1---0-1-
291     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
292     : ---0----1--10--
292     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
293     : ----0---1--1-0-
293     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
294 (*) : ----0--011-----
294     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
295     : -----0-10---1--
295     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
296     : ---0---1-0-1---
296     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
297     : -----0---1-0-1-
297     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
298     : ---0----1---01-
298     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
299     : ----0------110-
299     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   6
num_exists :   0
num_literals : 52
quantified form : forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. internal(NODE4) | ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | sent(NODE3,NODE5) | ((NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE0 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 58




=== Prime Orbit 29 =====================
size : 12
num_suborbits: 2
240 (*) : ---1---10---1--
240     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
241     : ---1---011-----
241     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
242     : ----1----1-0-1-
242     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
243     : ----1--1-0-1---
243     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
244     : -----1-----110-
244     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
245     : -----1--1---01-
245     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
252 (*) : ---1----01--1--
252     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
253     : ---1---0-1--1--
253     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
254     : ----1--1---0-1-
254     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
255     : ----1--1-0---1-
255     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
256     : -----1--1--1-0-
256     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
257     : -----1--1--10--
257     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   4
num_exists :   0
num_literals : 20
quantified form : forall NODE1,NODE3,NODE0,NODE2. ~internal(NODE0) | sent(NODE0,NODE2) | ~sent(NODE2,NODE0) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE1 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 24




=== Prime Orbit 30 =====================
size : 24
num_suborbits: 4
264 (*) : --0-0--1----1--
264     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
265     : -0---0--11-----
265     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
266     : --00-----1---1-
266     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
267     : 0----0-1---1---
267     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
268     : -0-0-------11--
268     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
269     : 0---0---1----1-
269     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
276 (*) : -0-0--------11-
276     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
277     : --00-----1-1---
277     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
278     : 0---0-------11-
278     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
279     : --0-0--11------
279     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
280     : 0----0---1-1---
280     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
281     : -0---0-11------
281     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
282 (*) : --0-0----1--1--
282     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
283     : -0---0---1--1--
283     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
284     : --00---1-----1-
284     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
285     : 0----0-1-----1-
285     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
286     : -0-0----1--1---
286     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
287     : 0---0---1--1---
287     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
318 (*) : -0-0----1----1-
318     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
319     : --00---1---1---
319     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
320     : 0---0------11--
320     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
321     : --0-0---11-----
321     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
322     : 0----0---1---1-
322     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
323     : -0---0-1----1--
323     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
num_forall :   6
num_exists :   0
num_literals : 52
quantified form : forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. ~sent(NODE0,NODE2) | allowed_in(NODE4) | ~sent(NODE1,NODE3) | internal(NODE5) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE2 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 58




=== Prime Orbit 31 =====================
size : 24
num_suborbits: 4
270 (*) : ---01-------11-
270     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
271     : ---0-1---1-1---
271     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
272     : ---10-------11-
272     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
273     : ----01-11------
273     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
274     : ---1-0---1-1---
274     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
275     : ----10-11------
275     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
312 (*) : ---01---1----1-
312     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
313     : ---0-1-1---1---
313     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
314     : ---10------11--
314     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
315     : ----01--11-----
315     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
316     : ---1-0---1---1-
316     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
317     : ----10-1----1--
317     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
324 (*) : ---10---1----1-
324     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
325     : ---1-0-1---1---
325     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
326     : ---01------11--
326     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
327     : ----10--11-----
327     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
328     : ---0-1---1---1-
328     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
329     : ----01-1----1--
329     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
342 (*) : ---01---1--1---
342     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
343     : ---0-1-1-----1-
343     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
344     : ---10---1--1---
344     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
345     : ----01---1--1--
345     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
346     : ---1-0-1-----1-
346     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
347     : ----10---1--1--
347     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
num_forall :   6
num_exists :   0
num_literals : 52
quantified form : forall NODE4,NODE1,NODE0,NODE2,NODE5,NODE3. ~internal(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | internal(NODE5) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE2 = NODE4 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 58




=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
300 (*) : ----0--0-1---0-
300     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
301     : -----0--0--01--
301     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
302     : ---0---1-0--0--
302     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
303     : -----0--0--0-1-
303     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
304     : ---0----10--0--
304     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
305     : ----0--0---1-0-
305     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 10
quantified form : forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | internal(NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
306 (*) : ---00---1---0--
306     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
307     : ---0-0-1-0-----
307     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
308     : ---00------1-0-
308     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
309     : ----00-0-1-----
309     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
310     : ---0-0-----0-1-
310     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
311     : ----00--0---1--
311     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 10
quantified form : forall NODE1,NODE0,NODE2. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | internal(NODE0) | internal(NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13



[QRM NOTE]: Time elapsed since start: 10.757 seconds

[QRM NOTE]: Time elapsed since last: 2.084 seconds

[QRM NOTE]: Peak memory: 2416508 bytes


=============================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall.ivy: node=3]

=============================================================================


New level: 1
 pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 576), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 576), (32, 128), (33, 256)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]


Solution : [0, 11] has cost 8.


Decide in level 1 among pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 576), (32, 128), (33, 256)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]


New level: 2
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 576), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, 640), (6, 264), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 112), (17, 64), (18, 72), (19, 64), (20, 128), (21, 128), (22, 256), (23, 256), (24, 160), (25, 102), (26, 128), (27, 384), (28, 420), (29, 192), (30, 576), (31, 288), (32, 128), (33, 256)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]


Solution : [0, 11, 1] has cost 11.


Decide in level 2 among pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, 640), (6, 264), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 112), (17, 64), (18, 72), (19, 64), (20, 128), (21, 128), (22, 256), (23, 256), (24, 160), (25, 102), (26, 128), (27, 384), (28, 420), (29, 192), (30, 576), (31, 288), (32, 128), (33, 256)]

Decide 5 with phase True at level 2

After decision at level 2
 pending : [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 5]


New level: 3
 pending : [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, 640), (6, 264), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 112), (17, 64), (18, 72), (19, 64), (20, 128), (21, 128), (22, 256), (23, 256), (24, 160), (25, 102), (26, 128), (27, 384), (28, 420), (29, 192), (30, 576), (31, 288), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 96), (31, 112), (32, 0), (33, 32)]

Covered at level 3 : {32}

After reduction : 
 pending  : [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 96), (31, 112), (32, 0), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 3 among pending : [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [2, 3, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4]


New level: 4
 pending : [2, 3, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4]


Before reduction : 
 pending  : [2, 3, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 3, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4]


Solution : [0, 11, 1, 5, 4] has cost 53.


Decide in level 4 among pending : [2, 3, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [2, 3, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13]


New level: 5
 pending : [2, 3, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13]


Before reduction : 
 pending  : [2, 3, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, 0), (15, 0), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Covered at level 5 : {14, 15}

After reduction : 
 pending  : [2, 3, 6, 7, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13]


Before reduction : 
 pending  : [2, 3, 6, 7, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, 0), (15, 0), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 3, 6, 7, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13]


Solution : [0, 11, 1, 5, 4, 13] has cost 59.


Decide in level 5 among pending : [2, 3, 6, 7, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Decide 2 with phase True at level 5

After decision at level 5
 pending : [3, 6, 7, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


New level: 6
 pending : [3, 6, 7, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before reduction : 
 pending  : [3, 6, 7, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 6 : {7, 9, 19, 21, 27, 29}

After reduction : 
 pending  : [3, 6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before reduction : 
 pending  : [3, 6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [3, 6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Solution : [0, 11, 1, 5, 4, 13, 2] has cost 66.


Decide in level 6 among pending : [3, 6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 3 with phase True at level 6

After decision at level 6
 pending : [6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 3]


New level: 7
 pending : [6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 3]


Before reduction : 
 pending  : [6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 7 : {33, 6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 3]


Solution : [0, 11, 1, 5, 4, 13, 2, 3] has cost 73.


Before backtrack at level 7
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 2, 3]

After backtrack at level 7
 pending : [6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 3]


Invert decision for 3 at level 6


New level: 7
 pending : [6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before reduction : 
 pending  : [6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Solution : [0, 11, 1, 5, 4, 13, 2] has cost 66.


Decide in level 7 among pending : [6, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 6 with phase True at level 7

After decision at level 7
 pending : [8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 6]


New level: 8
 pending : [8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 6]


Before reduction : 
 pending  : [8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 8 : {33, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 6]


Solution : [0, 11, 1, 5, 4, 13, 2, 6] has cost 85.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 2, 6]

After backtrack at level 8
 pending : [8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 6]


Invert decision for 6 at level 7


New level: 8
 pending : [8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before reduction : 
 pending  : [8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Solution : [0, 11, 1, 5, 4, 13, 2] has cost 66.


Decide in level 8 among pending : [8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 8]


New level: 9
 pending : [10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 8]


Before reduction : 
 pending  : [10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 8]


Solution : [0, 11, 1, 5, 4, 13, 2, 8] has cost 73.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 2, 8]

After backtrack at level 9
 pending : [10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before reduction : 
 pending  : [10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Solution : [0, 11, 1, 5, 4, 13, 2] has cost 66.


Decide in level 9 among pending : [10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 10 with phase True at level 9

After decision at level 9
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 10]


New level: 10
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 10]


Before reduction : 
 pending  : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 10]


Solution : [0, 11, 1, 5, 4, 13, 2, 10] has cost 78.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 2, 10]

After backtrack at level 10
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2, 10]


Invert decision for 10 at level 9


New level: 10
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before reduction : 
 pending  : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]

Essensial at level 10 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 2, 12]


Solution : [0, 11, 1, 5, 4, 13, 2, 12] has cost 78.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 2, 12]

After backtrack at level 10
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before backtrack at level 9
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33]
 solution : [0, 11, 1, 5, 4, 13, 2]

After backtrack at level 9
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before backtrack at level 8
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10]
 solution : [0, 11, 1, 5, 4, 13, 2]

After backtrack at level 8
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before backtrack at level 7
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8]
 solution : [0, 11, 1, 5, 4, 13, 2]

After backtrack at level 7
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 13, 2]


Before backtrack at level 6
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 13, 2]

After backtrack at level 6
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 2]


Invert decision for 2 at level 5


New level: 6
 pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13]


Before reduction : 
 pending  : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13]


Solution : [0, 11, 1, 5, 4, 13] has cost 59.


Decide in level 6 among pending : [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Decide 20 with phase True at level 6

After decision at level 6
 pending : [12, 16, 17, 18, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 20]


New level: 7
 pending : [12, 16, 17, 18, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 20]


Before reduction : 
 pending  : [12, 16, 17, 18, 22, 23, 24, 25, 26, 28, 30, 31, 33, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 20]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, 0), (23, 10), (24, 2), (25, 16), (26, 0), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 0)]

Covered at level 7 : {33, 26, 22}

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 20]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 20]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, 0), (23, 10), (24, 2), (25, 16), (26, 0), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, -1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 20]


Solution : [0, 11, 1, 5, 4, 13, 20] has cost 72.


Decide in level 7 among pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 7, 9, 19, 21, 27, 29, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, -1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, -1)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 7]


New level: 8
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 7]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 9, 19, 21, 27, 29, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, -1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, 0), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 8 : {9, 19, 21, 27, 29}

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 7]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, 0), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 7]


Solution : [0, 11, 1, 5, 4, 13, 20, 7] has cost 91.


Before backtrack at level 8
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 7]

After backtrack at level 8
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 13, 20, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 13, 20]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 13, 20]

Essensial at level 8 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 8 : {27, 29, 19, 21}

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 9]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 9]


Solution : [0, 11, 1, 5, 4, 13, 20, 9] has cost 79.


Before backtrack at level 8
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3]
 solution : [0, 11, 1, 5, 4, 13, 20, 9]

After backtrack at level 8
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 13, 20]


Before backtrack at level 7
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 13, 20]

After backtrack at level 7
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29, 22, 26, 33, 7]
 solution : [0, 11, 1, 5, 4, 13, 20]


Invert decision for 20 at level 6


New level: 7
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29, 22, 26, 33, 7]
 solution : [0, 11, 1, 5, 4, 13]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29, 22, 26, 33, 7]
 solution : [0, 11, 1, 5, 4, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29, 22, 26, 33, 7]
 solution : [0, 11, 1, 5, 4, 13]


Solution : [0, 11, 1, 5, 4, 13] has cost 59.


Decide in level 7 among pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 9, 19, 21, 27, 29, 22, 26, 33, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 19, 21, 27, 29, 22, 26, 33, 7]
 solution : [0, 11, 1, 5, 4, 13, 9]


New level: 8
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 19, 21, 27, 29, 22, 26, 33, 7]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 19, 21, 27, 29, 22, 26, 33, 7]
 solution : [0, 11, 1, 5, 4, 13, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 8 : {7, 19, 21, 27, 29}

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Solution : [0, 11, 1, 5, 4, 13, 9] has cost 66.


Decide in level 8 among pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 8, 6, 3, 22, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 8]


New level: 9
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 8]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 3, 6, 10, 12, 16, 17, 18, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 8]


Solution : [0, 11, 1, 5, 4, 13, 9, 8] has cost 73.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 9, 8]

After backtrack at level 9
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 6, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Solution : [0, 11, 1, 5, 4, 13, 9] has cost 66.


Decide in level 9 among pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 6, 3, 22, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 6]


New level: 10
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 6]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 3, 10, 12, 16, 17, 18, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 6]


Solution : [0, 11, 1, 5, 4, 13, 9, 6] has cost 85.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 9, 6]

After backtrack at level 10
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 3, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Solution : [0, 11, 1, 5, 4, 13, 9] has cost 66.


Decide in level 10 among pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 3, 22, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 3]


New level: 11
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 3]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 10, 12, 16, 17, 18, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 3]


Solution : [0, 11, 1, 5, 4, 13, 9, 3] has cost 73.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 9, 3]

After backtrack at level 11
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Solution : [0, 11, 1, 5, 4, 13, 9] has cost 66.


Decide in level 11 among pending : [12, 16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 12]


New level: 12
 pending : [16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 12]


Before reduction : 
 pending  : [16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 10, 16, 17, 18, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 12]


Solution : [0, 11, 1, 5, 4, 13, 9, 12] has cost 78.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 9, 12]

After backtrack at level 12
 pending : [16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before reduction : 
 pending  : [16, 17, 18, 23, 24, 25, 28, 30, 31, 10, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 17, 18, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 13, 9, 10]


Solution : [0, 11, 1, 5, 4, 13, 9, 10] has cost 78.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 13, 9, 10]

After backtrack at level 12
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before backtrack at level 11
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33]
 solution : [0, 11, 1, 5, 4, 13, 9]

After backtrack at level 11
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before backtrack at level 10
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 13, 9]

After backtrack at level 10
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before backtrack at level 9
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 13, 9]

After backtrack at level 9
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6]
 solution : [0, 11, 1, 5, 4, 13, 9]


Before backtrack at level 8
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6]
 solution : [0, 11, 1, 5, 4, 13, 9]

After backtrack at level 8
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 19, 21, 27, 29, 7, 8]
 solution : [0, 11, 1, 5, 4, 13, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 19, 21, 27, 29, 7, 8]
 solution : [0, 11, 1, 5, 4, 13]


Before reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 19, 21, 27, 29, 7, 8]
 solution : [0, 11, 1, 5, 4, 13]

Essensial at level 8 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 8 : {27, 29, 19, 21}

After reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8]
 solution : [0, 11, 1, 5, 4, 13, 7]


Before reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8]
 solution : [0, 11, 1, 5, 4, 13, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8]
 solution : [0, 11, 1, 5, 4, 13, 7]


Solution : [0, 11, 1, 5, 4, 13, 7] has cost 78.


Before backtrack at level 8
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8]
 solution : [0, 11, 1, 5, 4, 13, 7]

After backtrack at level 8
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 13]


Before backtrack at level 7
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 13]

After backtrack at level 7
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 13]


Before backtrack at level 6
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 13]

After backtrack at level 6
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20]
 solution : [0, 11, 1, 5, 4, 13]


Before backtrack at level 5
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20]
 solution : [0, 11, 1, 5, 4, 13]

After backtrack at level 5
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20, 14, 15, 2]
 solution : [0, 11, 1, 5, 4]


Before reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20, 14, 15, 2]
 solution : [0, 11, 1, 5, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, 1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20, 14, 15, 2]
 solution : [0, 11, 1, 5, 4]


Solution : [0, 11, 1, 5, 4] has cost 53.


Decide in level 5 among pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 22, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20, 14, 15, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Decide 22 with phase True at level 5

After decision at level 5
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 22]


New level: 6
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 22]


Before reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 20, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, 128), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, 0), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Covered at level 6 : {20}

After reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 22]


Before reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, 0), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 22]


Solution : [0, 11, 1, 5, 4, 22] has cost 66.


Decide in level 6 among pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 3, 6, 8, 7, 19, 21, 27, 29, 9, 14, 15, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Decide 3 with phase True at level 6

After decision at level 6
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 6, 8, 7, 19, 21, 27, 29, 9, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]


New level: 7
 pending : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 6, 8, 7, 19, 21, 27, 29, 9, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]


Before reduction : 
 pending  : [10, 16, 17, 18, 23, 24, 25, 28, 30, 31, 26, 33, 12, 6, 8, 7, 19, 21, 27, 29, 9, 14, 15, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 2), (17, 0), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, 0), (25, 2), (26, 0), (27, 3), (28, 0), (29, 3), (30, 2), (31, 2), (32, -1), (33, 0)]

Covered at level 7 : {33, 6, 8, 10, 12, 14, 15, 17, 24, 26, 28}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 7, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 7, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 2), (17, 0), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, 0), (25, 2), (26, 0), (27, 3), (28, 0), (29, 3), (30, 2), (31, 2), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 7, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]


Solution : [0, 11, 1, 5, 4, 22, 3] has cost 73.


Decide in level 7 among pending : [16, 18, 23, 25, 30, 31, 7, 19, 21, 27, 29, 9, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3, 7]


New level: 8
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3, 7]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 8 : {2, 9, 16, 18, 19, 21, 23, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 3, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 3, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 3, 7]


Solution : [0, 11, 1, 5, 4, 22, 3, 7] has cost 92.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 3, 7]

After backtrack at level 8
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]


Solution : [0, 11, 1, 5, 4, 22, 3] has cost 73.


Decide in level 8 among pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 2]
 solution : [0, 11, 1, 5, 4, 22, 3, 9]


New level: 9
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 2]
 solution : [0, 11, 1, 5, 4, 22, 3, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 2]
 solution : [0, 11, 1, 5, 4, 22, 3, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 9 : {2, 16, 18, 19, 21, 23, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 3, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 3, 9]


Solution : [0, 11, 1, 5, 4, 22, 3, 9] has cost 80.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 3, 9]

After backtrack at level 9
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 2]
 solution : [0, 11, 1, 5, 4, 22, 3, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 2]
 solution : [0, 11, 1, 5, 4, 22, 3]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 9 : {16, 18, 19, 21, 23, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 3, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 3, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 3, 2]


Solution : [0, 11, 1, 5, 4, 22, 3, 2] has cost 80.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 3, 2]

After backtrack at level 9
 pending : [2, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 22, 3]


Before backtrack at level 8
 pending : [2, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 22, 3]

After backtrack at level 8
 pending : [2, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 3]


Before backtrack at level 7
 pending : [2, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 3]

After backtrack at level 7
 pending : [2, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15, 7]
 solution : [0, 11, 1, 5, 4, 22, 3]


Invert decision for 3 at level 6


New level: 7
 pending : [2, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15, 7]
 solution : [0, 11, 1, 5, 4, 22]


Before reduction : 
 pending  : [2, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15, 7]
 solution : [0, 11, 1, 5, 4, 22]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15, 7]
 solution : [0, 11, 1, 5, 4, 22]


Solution : [0, 11, 1, 5, 4, 22] has cost 66.


Decide in level 7 among pending : [2, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15, 7]
 solution : [0, 11, 1, 5, 4, 22, 2]


New level: 8
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15, 7]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15, 7]
 solution : [0, 11, 1, 5, 4, 22, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 0), (8, 128), (9, 0), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 8 : {7, 9, 19, 21, 27, 29}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 0), (8, 128), (9, 0), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Solution : [0, 11, 1, 5, 4, 22, 2] has cost 73.


Decide in level 8 among pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 6, 8, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Decide 6 with phase True at level 8

After decision at level 8
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 6]


New level: 9
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 6]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 8, 10, 12, 14, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 6]


Solution : [0, 11, 1, 5, 4, 22, 2, 6] has cost 92.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 2, 6]

After backtrack at level 9
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 6]


Invert decision for 6 at level 8


New level: 9
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Solution : [0, 11, 1, 5, 4, 22, 2] has cost 73.


Decide in level 9 among pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 8]


New level: 10
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 8]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 10, 12, 14, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 8]


Solution : [0, 11, 1, 5, 4, 22, 2, 8] has cost 80.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 2, 8]

After backtrack at level 10
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 14, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Solution : [0, 11, 1, 5, 4, 22, 2] has cost 73.


Decide in level 10 among pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Decide 14 with phase True at level 10

After decision at level 10
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 14]


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 14]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 0), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 0)]

Covered at level 11 : {33, 26, 15}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 12]
 solution : [0, 11, 1, 5, 4, 22, 2, 14]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 12]
 solution : [0, 11, 1, 5, 4, 22, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 0), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 12]
 solution : [0, 11, 1, 5, 4, 22, 2, 14]


Solution : [0, 11, 1, 5, 4, 22, 2, 14] has cost 79.


Before backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 12]
 solution : [0, 11, 1, 5, 4, 22, 2, 14]

After backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 14]


Invert decision for 14 at level 10


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Solution : [0, 11, 1, 5, 4, 22, 2] has cost 73.


Decide in level 11 among pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 12, 26, 33, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 10]


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 10]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 12, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 10]


Solution : [0, 11, 1, 5, 4, 22, 2, 10] has cost 85.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 2, 10]

After backtrack at level 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]

Essensial at level 12 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 2, 12]


Solution : [0, 11, 1, 5, 4, 22, 2, 12] has cost 85.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 2, 12]

After backtrack at level 12
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before backtrack at level 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 2]

After backtrack at level 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10]
 solution : [0, 11, 1, 5, 4, 22, 2]

After backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 14]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before backtrack at level 9
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 14]
 solution : [0, 11, 1, 5, 4, 22, 2]

After backtrack at level 9
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 14, 8]
 solution : [0, 11, 1, 5, 4, 22, 2]


Before backtrack at level 8
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 14, 8]
 solution : [0, 11, 1, 5, 4, 22, 2]

After backtrack at level 8
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 14, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 14, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 14, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 14, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22]


Solution : [0, 11, 1, 5, 4, 22] has cost 66.


Decide in level 8 among pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 14, 8, 19, 21, 27, 29, 9, 7, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 14]


New level: 9
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 14]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 10, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 0), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 0)]

Covered at level 9 : {33, 26, 15}

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 14]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 0), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, -1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 19, 21, 27, 29, 9, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 14]


Solution : [0, 11, 1, 5, 4, 22, 14] has cost 72.


Decide in level 9 among pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 19, 21, 27, 29, 9, 7, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, -1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, -1)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 19, 21, 27, 29, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 9]


New level: 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 19, 21, 27, 29, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 9]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 19, 21, 27, 29, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, -1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 10 : {7, 19, 21, 27, 29}

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 9]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 9]


Solution : [0, 11, 1, 5, 4, 22, 14, 9] has cost 79.


Before backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 9]

After backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 22, 14, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 22, 14]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 22, 14]

Essensial at level 10 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 10 : {27, 29, 19, 21}

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 7]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 7]


Solution : [0, 11, 1, 5, 4, 22, 14, 7] has cost 91.


Before backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6]
 solution : [0, 11, 1, 5, 4, 22, 14, 7]

After backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 7, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 22, 14]


Before backtrack at level 9
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 7, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 22, 14]

After backtrack at level 9
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 7, 19, 21, 27, 29, 26, 33, 15, 9]
 solution : [0, 11, 1, 5, 4, 22, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 7, 19, 21, 27, 29, 26, 33, 15, 9]
 solution : [0, 11, 1, 5, 4, 22]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 7, 19, 21, 27, 29, 26, 33, 15, 9]
 solution : [0, 11, 1, 5, 4, 22]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, -1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 7, 19, 21, 27, 29, 26, 33, 15, 9]
 solution : [0, 11, 1, 5, 4, 22]


Solution : [0, 11, 1, 5, 4, 22] has cost 66.


Decide in level 9 among pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 8, 6, 7, 19, 21, 27, 29, 26, 33, 15, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 6, 7, 19, 21, 27, 29, 26, 33, 15, 9]
 solution : [0, 11, 1, 5, 4, 22, 8]


New level: 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 6, 7, 19, 21, 27, 29, 26, 33, 15, 9]
 solution : [0, 11, 1, 5, 4, 22, 8]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 6, 7, 19, 21, 27, 29, 26, 33, 15, 9]
 solution : [0, 11, 1, 5, 4, 22, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 128), (8, -1), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 2), (17, 0), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, 0), (25, 2), (26, 0), (27, 3), (28, 0), (29, 3), (30, 2), (31, 2), (32, -1), (33, 0)]

Covered at level 10 : {33, 6, 10, 12, 15, 17, 24, 26, 28}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 7, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 8]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 7, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 128), (8, -1), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 2), (17, 0), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, 0), (25, 2), (26, 0), (27, 3), (28, 0), (29, 3), (30, 2), (31, 2), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 7, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 8]


Solution : [0, 11, 1, 5, 4, 22, 8] has cost 73.


Decide in level 10 among pending : [16, 18, 23, 25, 30, 31, 7, 19, 21, 27, 29, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 8, 7]


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 8, 7]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 8, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 11 : {9, 16, 18, 19, 21, 23, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 8, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 8, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 8, 7]


Solution : [0, 11, 1, 5, 4, 22, 8, 7] has cost 92.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 8, 7]

After backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 8, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 8]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22, 8]

Essensial at level 11 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 11 : {16, 18, 19, 21, 23, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 8, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 8, 9]


Solution : [0, 11, 1, 5, 4, 22, 8, 9] has cost 80.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 8, 9]

After backtrack at level 11
 pending : [9, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 22, 8]


Before backtrack at level 10
 pending : [9, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 22, 8]

After backtrack at level 10
 pending : [9, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 12, 17, 24, 28, 10, 6, 26, 33, 15, 7]
 solution : [0, 11, 1, 5, 4, 22, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [9, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 12, 17, 24, 28, 10, 6, 26, 33, 15, 7]
 solution : [0, 11, 1, 5, 4, 22]


Before reduction : 
 pending  : [9, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 12, 17, 24, 28, 10, 6, 26, 33, 15, 7]
 solution : [0, 11, 1, 5, 4, 22]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 12, 17, 24, 28, 10, 6, 26, 33, 15, 7]
 solution : [0, 11, 1, 5, 4, 22]


Solution : [0, 11, 1, 5, 4, 22] has cost 66.


Decide in level 10 among pending : [9, 16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 12, 17, 24, 28, 10, 6, 26, 33, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 12, 17, 24, 28, 10, 6, 26, 33, 15, 7]
 solution : [0, 11, 1, 5, 4, 22, 9]


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 12, 17, 24, 28, 10, 6, 26, 33, 15, 7]
 solution : [0, 11, 1, 5, 4, 22, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 12, 17, 24, 28, 10, 6, 26, 33, 15, 7]
 solution : [0, 11, 1, 5, 4, 22, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 0), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 11 : {7, 19, 21, 27, 29}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 6, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 6, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 0), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 6, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]


Solution : [0, 11, 1, 5, 4, 22, 9] has cost 73.


Decide in level 11 among pending : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 6, 26, 33, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9, 6]


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9, 6]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 10, 12, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 9, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 9, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 9, 6]


Solution : [0, 11, 1, 5, 4, 22, 9, 6] has cost 92.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 9, 6]

After backtrack at level 12
 pending : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]


Solution : [0, 11, 1, 5, 4, 22, 9] has cost 73.


Decide in level 12 among pending : [16, 18, 23, 25, 30, 31, 12, 17, 24, 28, 10, 26, 33, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Decide 12 with phase True at level 12

After decision at level 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9, 12]


New level: 13
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9, 12]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 10, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 9, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 9, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 9, 12]


Solution : [0, 11, 1, 5, 4, 22, 9, 12] has cost 85.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 9, 12]

After backtrack at level 13
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9, 12]


Invert decision for 12 at level 12


New level: 13
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]

Essensial at level 13 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 9, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 9, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 22, 9, 10]


Solution : [0, 11, 1, 5, 4, 22, 9, 10] has cost 85.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 5, 4, 22, 9, 10]

After backtrack at level 13
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]


Before backtrack at level 12
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 22, 9]

After backtrack at level 12
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12]
 solution : [0, 11, 1, 5, 4, 22, 9]


Before backtrack at level 11
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12]
 solution : [0, 11, 1, 5, 4, 22, 9]

After backtrack at level 11
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 19, 21, 27, 29, 7, 6]
 solution : [0, 11, 1, 5, 4, 22, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 19, 21, 27, 29, 7, 6]
 solution : [0, 11, 1, 5, 4, 22]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 19, 21, 27, 29, 7, 6]
 solution : [0, 11, 1, 5, 4, 22]

Essensial at level 11 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 11 : {27, 29, 19, 21}

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6]
 solution : [0, 11, 1, 5, 4, 22, 7]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6]
 solution : [0, 11, 1, 5, 4, 22, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6]
 solution : [0, 11, 1, 5, 4, 22, 7]


Solution : [0, 11, 1, 5, 4, 22, 7] has cost 85.


Before backtrack at level 11
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6]
 solution : [0, 11, 1, 5, 4, 22, 7]

After backtrack at level 11
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 22]


Before backtrack at level 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 22]

After backtrack at level 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22]


Before backtrack at level 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 22]

After backtrack at level 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8]
 solution : [0, 11, 1, 5, 4, 22]


Before backtrack at level 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8]
 solution : [0, 11, 1, 5, 4, 22]

After backtrack at level 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8, 14]
 solution : [0, 11, 1, 5, 4, 22]


Before backtrack at level 7
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8, 14]
 solution : [0, 11, 1, 5, 4, 22]

After backtrack at level 7
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8, 14, 2]
 solution : [0, 11, 1, 5, 4, 22]


Before backtrack at level 6
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8, 14, 2]
 solution : [0, 11, 1, 5, 4, 22]

After backtrack at level 6
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8, 14, 2, 20, 3]
 solution : [0, 11, 1, 5, 4, 22]


Invert decision for 22 at level 5


New level: 6
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8, 14, 2, 20, 3]
 solution : [0, 11, 1, 5, 4]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8, 14, 2, 20, 3]
 solution : [0, 11, 1, 5, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8, 14, 2, 20, 3]
 solution : [0, 11, 1, 5, 4]


Solution : [0, 11, 1, 5, 4] has cost 53.


Decide in level 6 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 6, 7, 19, 21, 27, 29, 9, 8, 14, 2, 20, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 7, 19, 21, 27, 29, 9, 8, 14, 2, 20, 3]
 solution : [0, 11, 1, 5, 4, 6]


New level: 7
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 7, 19, 21, 27, 29, 9, 8, 14, 2, 20, 3]
 solution : [0, 11, 1, 5, 4, 6]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 7, 19, 21, 27, 29, 9, 8, 14, 2, 20, 3]
 solution : [0, 11, 1, 5, 4, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 6), (17, 2), (18, 6), (19, 32), (20, 128), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, 0), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, 0)]

Covered at level 7 : {33, 3, 8, 10, 12, 14, 15, 26}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 7, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 7, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 6), (17, 2), (18, 6), (19, 32), (20, 128), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, 0), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 2), (18, 6), (19, 32), (20, 128), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, -1), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 7, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6]


Solution : [0, 11, 1, 5, 4, 6] has cost 72.


Decide in level 7 among pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 7, 19, 21, 27, 29, 9, 2, 20]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 2), (18, 6), (19, 32), (20, 128), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, -1), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, -1)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6, 7]


New level: 8
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6, 7]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 2), (18, 6), (19, 32), (20, 128), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, -1), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 8 : {2, 9, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 6, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 6, 7]


Solution : [0, 11, 1, 5, 4, 6, 7] has cost 91.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 5, 4, 6, 7]

After backtrack at level 8
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 2), (18, 6), (19, 32), (20, 32), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, -1), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 9, 2, 20]
 solution : [0, 11, 1, 5, 4, 6]


Solution : [0, 11, 1, 5, 4, 6] has cost 72.


Decide in level 8 among pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 9, 2, 20]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 2), (18, 6), (19, 32), (20, 32), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, -1), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, -1)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 2, 20]
 solution : [0, 11, 1, 5, 4, 6, 9]


New level: 9
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 2, 20]
 solution : [0, 11, 1, 5, 4, 6, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 2, 20]
 solution : [0, 11, 1, 5, 4, 6, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 2), (18, 6), (19, 32), (20, 32), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, -1), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 9 : {2, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 6, 9]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 6, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 6, 9]


Solution : [0, 11, 1, 5, 4, 6, 9] has cost 79.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 4, 6, 9]

After backtrack at level 9
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 2, 20]
 solution : [0, 11, 1, 5, 4, 6, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 2, 20]
 solution : [0, 11, 1, 5, 4, 6]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 2, 20]
 solution : [0, 11, 1, 5, 4, 6]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 9 : {16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 6, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 6, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 6, 2]


Solution : [0, 11, 1, 5, 4, 6, 2] has cost 79.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 4, 6, 2]

After backtrack at level 9
 pending : [2, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20]
 solution : [0, 11, 1, 5, 4, 6]


Before backtrack at level 8
 pending : [2, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20]
 solution : [0, 11, 1, 5, 4, 6]

After backtrack at level 8
 pending : [2, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9]
 solution : [0, 11, 1, 5, 4, 6]


Before backtrack at level 7
 pending : [2, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9]
 solution : [0, 11, 1, 5, 4, 6]

After backtrack at level 7
 pending : [2, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9, 10, 26, 33, 15, 12, 8, 14, 3, 7]
 solution : [0, 11, 1, 5, 4, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [2, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9, 10, 26, 33, 15, 12, 8, 14, 3, 7]
 solution : [0, 11, 1, 5, 4]


Before reduction : 
 pending  : [2, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9, 10, 26, 33, 15, 12, 8, 14, 3, 7]
 solution : [0, 11, 1, 5, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9, 10, 26, 33, 15, 12, 8, 14, 3, 7]
 solution : [0, 11, 1, 5, 4]


Solution : [0, 11, 1, 5, 4] has cost 53.


Decide in level 7 among pending : [2, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9, 10, 26, 33, 15, 12, 8, 14, 3, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9, 10, 26, 33, 15, 12, 8, 14, 3, 7]
 solution : [0, 11, 1, 5, 4, 2]


New level: 8
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9, 10, 26, 33, 15, 12, 8, 14, 3, 7]
 solution : [0, 11, 1, 5, 4, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 20, 9, 10, 26, 33, 15, 12, 8, 14, 3, 7]
 solution : [0, 11, 1, 5, 4, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, 0), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 8 : {7, 9, 19, 21, 27, 29}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 8, 14, 3]
 solution : [0, 11, 1, 5, 4, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 8, 14, 3]
 solution : [0, 11, 1, 5, 4, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, 0), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 8, 14, 3]
 solution : [0, 11, 1, 5, 4, 2]


Solution : [0, 11, 1, 5, 4, 2] has cost 60.


Decide in level 8 among pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 8, 14, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 14, 3]
 solution : [0, 11, 1, 5, 4, 2, 8]


New level: 9
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 14, 3]
 solution : [0, 11, 1, 5, 4, 2, 8]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 14, 3]
 solution : [0, 11, 1, 5, 4, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 3, 10, 12, 14, 15, 16, 17, 18, 20, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 8]


Solution : [0, 11, 1, 5, 4, 2, 8] has cost 67.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 4, 2, 8]

After backtrack at level 9
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 14, 3]
 solution : [0, 11, 1, 5, 4, 2, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 14, 3]
 solution : [0, 11, 1, 5, 4, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 14, 3]
 solution : [0, 11, 1, 5, 4, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 14, 3]
 solution : [0, 11, 1, 5, 4, 2]


Solution : [0, 11, 1, 5, 4, 2] has cost 60.


Decide in level 9 among pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 14, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Decide 14 with phase True at level 9

After decision at level 9
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 3]
 solution : [0, 11, 1, 5, 4, 2, 14]


New level: 10
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 3]
 solution : [0, 11, 1, 5, 4, 2, 14]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 15, 12, 3]
 solution : [0, 11, 1, 5, 4, 2, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 10 : {15}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 2, 14]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 2, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 2, 14]


Solution : [0, 11, 1, 5, 4, 2, 14] has cost 66.


Decide in level 10 among pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14, 3]


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14, 3]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 10, 12, 16, 17, 18, 20, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 14, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 14, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 14, 3]


Solution : [0, 11, 1, 5, 4, 2, 14, 3] has cost 73.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 4, 2, 14, 3]

After backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14]


Solution : [0, 11, 1, 5, 4, 2, 14] has cost 66.


Decide in level 11 among pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 10, 26, 33, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14, 10]


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14, 10]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 12, 16, 17, 18, 20, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 14, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 14, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 14, 10]


Solution : [0, 11, 1, 5, 4, 2, 14, 10] has cost 78.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 2, 14, 10]

After backtrack at level 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 2, 14]

Essensial at level 12 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 17, 18, 20, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 14, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 14, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 14, 12]


Solution : [0, 11, 1, 5, 4, 2, 14, 12] has cost 78.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 2, 14, 12]

After backtrack at level 12
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33]
 solution : [0, 11, 1, 5, 4, 2, 14]


Before backtrack at level 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33]
 solution : [0, 11, 1, 5, 4, 2, 14]

After backtrack at level 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10]
 solution : [0, 11, 1, 5, 4, 2, 14]


Before backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10]
 solution : [0, 11, 1, 5, 4, 2, 14]

After backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15, 3]
 solution : [0, 11, 1, 5, 4, 2, 14]


Invert decision for 14 at level 9


New level: 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15, 3]
 solution : [0, 11, 1, 5, 4, 2]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15, 3]
 solution : [0, 11, 1, 5, 4, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15, 3]
 solution : [0, 11, 1, 5, 4, 2]


Solution : [0, 11, 1, 5, 4, 2] has cost 60.


Decide in level 10 among pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2, 3]


New level: 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2, 3]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 10, 12, 15, 16, 17, 18, 20, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 3]


Solution : [0, 11, 1, 5, 4, 2, 3] has cost 67.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 4, 2, 3]

After backtrack at level 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2]


Solution : [0, 11, 1, 5, 4, 2] has cost 60.


Decide in level 11 among pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2, 12]


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2, 12]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 10, 15, 16, 17, 18, 20, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 12]


Solution : [0, 11, 1, 5, 4, 2, 12] has cost 72.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 2, 12]

After backtrack at level 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 2]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 15, 16, 17, 18, 20, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 2, 10]


Solution : [0, 11, 1, 5, 4, 2, 10] has cost 72.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 2, 10]

After backtrack at level 12
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 2]


Before backtrack at level 11
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 2]

After backtrack at level 11
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12]
 solution : [0, 11, 1, 5, 4, 2]


Before backtrack at level 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12]
 solution : [0, 11, 1, 5, 4, 2]

After backtrack at level 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12, 3]
 solution : [0, 11, 1, 5, 4, 2]


Before backtrack at level 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12, 3]
 solution : [0, 11, 1, 5, 4, 2]

After backtrack at level 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12, 3, 14]
 solution : [0, 11, 1, 5, 4, 2]


Before backtrack at level 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12, 3, 14]
 solution : [0, 11, 1, 5, 4, 2]

After backtrack at level 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4]


Solution : [0, 11, 1, 5, 4] has cost 53.


Decide in level 8 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 20, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Decide 20 with phase True at level 8

After decision at level 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4, 20]


New level: 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4, 20]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, 128), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4, 20]


Solution : [0, 11, 1, 5, 4, 20] has cost 66.


Decide in level 9 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 3, 14, 19, 21, 27, 29, 9, 7, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4, 20, 3]


New level: 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4, 20, 3]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 14, 19, 21, 27, 29, 9, 7, 8]
 solution : [0, 11, 1, 5, 4, 20, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 2), (17, 0), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, 0), (25, 2), (26, 0), (27, 3), (28, 0), (29, 3), (30, 2), (31, 2), (32, -1), (33, 0)]

Covered at level 10 : {33, 8, 10, 12, 14, 15, 17, 24, 26, 28}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 7]
 solution : [0, 11, 1, 5, 4, 20, 3]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 7]
 solution : [0, 11, 1, 5, 4, 20, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 2), (17, 0), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, 0), (25, 2), (26, 0), (27, 3), (28, 0), (29, 3), (30, 2), (31, 2), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 7]
 solution : [0, 11, 1, 5, 4, 20, 3]


Solution : [0, 11, 1, 5, 4, 20, 3] has cost 73.


Before backtrack at level 10
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 7]
 solution : [0, 11, 1, 5, 4, 20, 3]

After backtrack at level 10
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 7, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 7, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 7, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 8), (20, -1), (21, 8), (22, -1), (23, 2), (24, -1), (25, 2), (26, -1), (27, 3), (28, -1), (29, 3), (30, 2), (31, 2), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 7, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20]


Solution : [0, 11, 1, 5, 4, 20] has cost 66.


Decide in level 10 among pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 9, 7, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 7, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 9]


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 7, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 19, 21, 27, 29, 7, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 2), (18, 10), (19, 8), (20, -1), (21, 8), (22, -1), (23, 10), (24, 2), (25, 16), (26, 1), (27, 3), (28, 2), (29, 3), (30, 16), (31, 10), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 11 : {7, 19, 21, 27, 29}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 9]


Solution : [0, 11, 1, 5, 4, 20, 9] has cost 73.


Before backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 9]

After backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 20, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 20]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 20]

Essensial at level 11 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 11 : {27, 29, 19, 21}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 7]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, 0), (28, 2), (29, 0), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 7]


Solution : [0, 11, 1, 5, 4, 20, 7] has cost 85.


Before backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8]
 solution : [0, 11, 1, 5, 4, 20, 7]

After backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 7, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 20]


Before backtrack at level 10
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 7, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 20]

After backtrack at level 10
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 7, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 20]


Before backtrack at level 9
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 7, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 20]

After backtrack at level 9
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 20]


Invert decision for 20 at level 8


New level: 9
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, 2), (25, 4), (26, 1), (27, -1), (28, 2), (29, -1), (30, 4), (31, 4), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4]


Solution : [0, 11, 1, 5, 4] has cost 53.


Decide in level 9 among pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 14, 8, 7, 19, 21, 27, 29, 9, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Decide 14 with phase True at level 9

After decision at level 9
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 14]


New level: 10
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 14]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 15, 12, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Covered at level 10 : {15}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 14]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 7, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 14]


Solution : [0, 11, 1, 5, 4, 14] has cost 59.


Decide in level 10 among pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 7, 19, 21, 27, 29, 9, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 14, 7]


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 14, 7]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 19, 21, 27, 29, 9, 3]
 solution : [0, 11, 1, 5, 4, 14, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 1), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 11 : {9, 19, 21, 27, 29}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3]
 solution : [0, 11, 1, 5, 4, 14, 7]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3]
 solution : [0, 11, 1, 5, 4, 14, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3]
 solution : [0, 11, 1, 5, 4, 14, 7]


Solution : [0, 11, 1, 5, 4, 14, 7] has cost 78.


Before backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3]
 solution : [0, 11, 1, 5, 4, 14, 7]

After backtrack at level 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 14, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 14]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 14]

Essensial at level 11 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 11 : {27, 29, 19, 21}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3]
 solution : [0, 11, 1, 5, 4, 14, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3]
 solution : [0, 11, 1, 5, 4, 14, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3]
 solution : [0, 11, 1, 5, 4, 14, 9]


Solution : [0, 11, 1, 5, 4, 14, 9] has cost 66.


Decide in level 11 among pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 8, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 14, 9, 8]


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 14, 9, 8]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 14, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 3, 10, 12, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 8]


Solution : [0, 11, 1, 5, 4, 14, 9, 8] has cost 73.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 14, 9, 8]

After backtrack at level 12
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 14, 9, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 14, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 14, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 3]
 solution : [0, 11, 1, 5, 4, 14, 9]


Solution : [0, 11, 1, 5, 4, 14, 9] has cost 66.


Decide in level 12 among pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9, 3]


New level: 13
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9, 3]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 10, 12, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 3]


Solution : [0, 11, 1, 5, 4, 14, 9, 3] has cost 73.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 5, 4, 14, 9, 3]

After backtrack at level 13
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9]


Solution : [0, 11, 1, 5, 4, 14, 9] has cost 66.


Decide in level 13 among pending : [16, 18, 23, 25, 30, 31, 10, 17, 24, 28, 26, 33, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9, 10]


New level: 14
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9, 10]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 1), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 12, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 10]


Solution : [0, 11, 1, 5, 4, 14, 9, 10] has cost 78.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 5, 4, 14, 9, 10]

After backtrack at level 14
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12]
 solution : [0, 11, 1, 5, 4, 14, 9]

Essensial at level 14 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 14, 9, 12]


Solution : [0, 11, 1, 5, 4, 14, 9, 12] has cost 78.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 5, 4, 14, 9, 12]

After backtrack at level 14
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33]
 solution : [0, 11, 1, 5, 4, 14, 9]


Before backtrack at level 13
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33]
 solution : [0, 11, 1, 5, 4, 14, 9]

After backtrack at level 13
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10]
 solution : [0, 11, 1, 5, 4, 14, 9]


Before backtrack at level 12
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10]
 solution : [0, 11, 1, 5, 4, 14, 9]

After backtrack at level 12
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 3]
 solution : [0, 11, 1, 5, 4, 14, 9]


Before backtrack at level 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 3]
 solution : [0, 11, 1, 5, 4, 14, 9]

After backtrack at level 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 3, 9, 19, 21, 27, 29, 8]
 solution : [0, 11, 1, 5, 4, 14]


Before backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 3, 9, 19, 21, 27, 29, 8]
 solution : [0, 11, 1, 5, 4, 14]

After backtrack at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 3, 9, 19, 21, 27, 29, 8, 15, 7]
 solution : [0, 11, 1, 5, 4, 14]


Invert decision for 14 at level 9


New level: 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 3, 9, 19, 21, 27, 29, 8, 15, 7]
 solution : [0, 11, 1, 5, 4]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 3, 9, 19, 21, 27, 29, 8, 15, 7]
 solution : [0, 11, 1, 5, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 3, 9, 19, 21, 27, 29, 8, 15, 7]
 solution : [0, 11, 1, 5, 4]


Solution : [0, 11, 1, 5, 4] has cost 53.


Decide in level 10 among pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 3, 9, 19, 21, 27, 29, 8, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 9, 19, 21, 27, 29, 8, 15, 7]
 solution : [0, 11, 1, 5, 4, 3]


New level: 11
 pending : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 9, 19, 21, 27, 29, 8, 15, 7]
 solution : [0, 11, 1, 5, 4, 3]


Before reduction : 
 pending  : [12, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 9, 19, 21, 27, 29, 8, 15, 7]
 solution : [0, 11, 1, 5, 4, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 6), (17, 2), (18, 6), (19, 32), (20, -1), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, 0), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, 0)]

Covered at level 11 : {33, 8, 10, 12, 15, 26}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 9, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 3]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 9, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 6), (17, 2), (18, 6), (19, 32), (20, -1), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, 0), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 2), (18, 6), (19, 32), (20, -1), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, -1), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 9, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 3]


Solution : [0, 11, 1, 5, 4, 3] has cost 60.


Decide in level 11 among pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 9, 19, 21, 27, 29, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 2), (18, 6), (19, 32), (20, -1), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, -1), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, -1)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 3, 9]


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 3, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 3, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 2), (18, 6), (19, 32), (20, -1), (21, 32), (22, -1), (23, 6), (24, 2), (25, 6), (26, -1), (27, 9), (28, 2), (29, 9), (30, 6), (31, 6), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 12 : {7, 16, 17, 18, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 3, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 3, 9]


Solution : [0, 11, 1, 5, 4, 3, 9] has cost 67.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 3, 9]

After backtrack at level 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 3, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 3]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 7]
 solution : [0, 11, 1, 5, 4, 3]

Essensial at level 12 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 12 : {16, 17, 18, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 3, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 3, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 3, 7]


Solution : [0, 11, 1, 5, 4, 3, 7] has cost 79.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 4, 3, 7]

After backtrack at level 12
 pending : [7, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 3]


Before backtrack at level 11
 pending : [7, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29]
 solution : [0, 11, 1, 5, 4, 3]

After backtrack at level 11
 pending : [7, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 12, 26, 33, 10, 8, 15, 9]
 solution : [0, 11, 1, 5, 4, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [7, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 12, 26, 33, 10, 8, 15, 9]
 solution : [0, 11, 1, 5, 4]


Before reduction : 
 pending  : [7, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 12, 26, 33, 10, 8, 15, 9]
 solution : [0, 11, 1, 5, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [7, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 12, 26, 33, 10, 8, 15, 9]
 solution : [0, 11, 1, 5, 4]


Solution : [0, 11, 1, 5, 4] has cost 53.


Decide in level 11 among pending : [7, 16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 12, 26, 33, 10, 8, 15, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 12, 26, 33, 10, 8, 15, 9]
 solution : [0, 11, 1, 5, 4, 7]


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 12, 26, 33, 10, 8, 15, 9]
 solution : [0, 11, 1, 5, 4, 7]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 19, 21, 27, 29, 12, 26, 33, 10, 8, 15, 9]
 solution : [0, 11, 1, 5, 4, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 24), (17, 8), (18, 20), (19, 32), (20, -1), (21, 32), (22, -1), (23, 24), (24, 8), (25, 24), (26, 4), (27, 9), (28, 8), (29, 9), (30, 24), (31, 24), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, 0), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 12 : {9, 19, 21, 27, 29}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15]
 solution : [0, 11, 1, 5, 4, 7]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15]
 solution : [0, 11, 1, 5, 4, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, 0), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15]
 solution : [0, 11, 1, 5, 4, 7]


Solution : [0, 11, 1, 5, 4, 7] has cost 72.


Before backtrack at level 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15]
 solution : [0, 11, 1, 5, 4, 7]

After backtrack at level 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15, 19, 21, 27, 29, 9]
 solution : [0, 11, 1, 5, 4]

Essensial at level 12 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 12 : {27, 29, 19, 21}

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15]
 solution : [0, 11, 1, 5, 4, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15]
 solution : [0, 11, 1, 5, 4, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, 0), (20, -1), (21, 0), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, 0), (28, 2), (29, 0), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15]
 solution : [0, 11, 1, 5, 4, 9]


Solution : [0, 11, 1, 5, 4, 9] has cost 60.


Decide in level 12 among pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 8, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9, 8]


New level: 13
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9, 8]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 10, 12, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 9, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 9, 8]


Solution : [0, 11, 1, 5, 4, 9, 8] has cost 67.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 5, 4, 9, 8]

After backtrack at level 13
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9]


Solution : [0, 11, 1, 5, 4, 9] has cost 60.


Decide in level 13 among pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 12, 26, 33, 10, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

Decide 12 with phase True at level 13

After decision at level 13
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9, 12]


New level: 14
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9, 12]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 5), (17, 2), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, 2), (25, 5), (26, 4), (27, -1), (28, 2), (29, -1), (30, 5), (31, 6), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 10, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 9, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 9, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 9, 12]


Solution : [0, 11, 1, 5, 4, 9, 12] has cost 72.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 5, 4, 9, 12]

After backtrack at level 14
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9, 12]


Invert decision for 12 at level 13


New level: 14
 pending : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9]


Before reduction : 
 pending  : [16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 10, 15]
 solution : [0, 11, 1, 5, 4, 9]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 15, 16, 17, 18, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 9, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 9, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 4, 9, 10]


Solution : [0, 11, 1, 5, 4, 9, 10] has cost 72.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 5, 4, 9, 10]

After backtrack at level 14
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 9]


Before backtrack at level 13
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15]
 solution : [0, 11, 1, 5, 4, 9]

After backtrack at level 13
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12]
 solution : [0, 11, 1, 5, 4, 9]


Before backtrack at level 12
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12]
 solution : [0, 11, 1, 5, 4, 9]

After backtrack at level 12
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8]
 solution : [0, 11, 1, 5, 4]


Before backtrack at level 11
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8]
 solution : [0, 11, 1, 5, 4]

After backtrack at level 11
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7]
 solution : [0, 11, 1, 5, 4]


Before backtrack at level 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7]
 solution : [0, 11, 1, 5, 4]

After backtrack at level 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3]
 solution : [0, 11, 1, 5, 4]


Before backtrack at level 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3]
 solution : [0, 11, 1, 5, 4]

After backtrack at level 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14]
 solution : [0, 11, 1, 5, 4]


Before backtrack at level 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14]
 solution : [0, 11, 1, 5, 4]

After backtrack at level 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20]
 solution : [0, 11, 1, 5, 4]


Before backtrack at level 7
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20]
 solution : [0, 11, 1, 5, 4]

After backtrack at level 7
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2]
 solution : [0, 11, 1, 5, 4]


Before backtrack at level 6
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2]
 solution : [0, 11, 1, 5, 4]

After backtrack at level 6
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6]
 solution : [0, 11, 1, 5, 4]


Before backtrack at level 5
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6]
 solution : [0, 11, 1, 5, 4]

After backtrack at level 5
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 4]


Before backtrack at level 4
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 4]

After backtrack at level 4
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22, 13]
 solution : [0, 11, 1, 5, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22, 13]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22, 13]
 solution : [0, 11, 1, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22, 13]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 4 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22, 13]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13]


New level: 5
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 15, 12, 9, 19, 21, 27, 29, 8, 7, 3, 14, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, 256), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, 0), (15, 0), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 5 : {14, 15}

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 27, 29, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 27, 29, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, 0), (15, 0), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 27, 29, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13]


Solution : [0, 11, 1, 5, 13] has cost 31.


Decide in level 5 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 27, 29, 8, 7, 3, 20, 2, 6, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 8)]

Decide 27 with phase True at level 5

After decision at level 5
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 29, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13, 27]


New level: 6
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 29, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13, 27]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 29, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13, 27]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, 0), (30, 72), (31, 69), (32, -1), (33, 1)]

Covered at level 6 : {29}

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13, 27]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13, 27]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, 0), (30, 72), (31, 69), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13, 27]


Solution : [0, 11, 1, 5, 13, 27] has cost 55.


Decide in level 6 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 9, 19, 21, 8, 7, 3, 20, 2, 6, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

Decide 9 with phase True at level 6

After decision at level 6
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 19, 21, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


New level: 7
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 19, 21, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 19, 21, 8, 7, 3, 20, 2, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 7 : {2, 19, 21, 7}

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 8, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 8, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 8, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Solution : [0, 11, 1, 5, 13, 27, 9] has cost 62.


Decide in level 7 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 8, 3, 20, 6, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 8]


New level: 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 8]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 8 : {33, 3, 6, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 9, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 9, 8]


Solution : [0, 11, 1, 5, 13, 27, 9, 8] has cost 69.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 5, 13, 27, 9, 8]

After backtrack at level 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 3, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Solution : [0, 11, 1, 5, 13, 27, 9] has cost 62.


Decide in level 8 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 3, 20, 6, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 3 with phase True at level 8

After decision at level 8
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 3]


New level: 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 3]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 6, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 9, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 9, 3]


Solution : [0, 11, 1, 5, 13, 27, 9, 3] has cost 69.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 13, 27, 9, 3]

After backtrack at level 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 3]


Invert decision for 3 at level 8


New level: 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 6, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Solution : [0, 11, 1, 5, 13, 27, 9] has cost 62.


Decide in level 9 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 6, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 6]


New level: 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 6]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 9, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 9, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 9, 6]


Solution : [0, 11, 1, 5, 13, 27, 9, 6] has cost 81.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 5, 13, 27, 9, 6]

After backtrack at level 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Solution : [0, 11, 1, 5, 13, 27, 9] has cost 62.


Decide in level 10 among pending : [10, 16, 18, 23, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 23 with phase True at level 10

After decision at level 10
 pending : [10, 16, 18, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 23]


New level: 11
 pending : [10, 16, 18, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 23]


Before reduction : 
 pending  : [10, 16, 18, 25, 30, 31, 17, 24, 28, 26, 33, 12, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 23]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 23]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 23]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 23]


Solution : [0, 11, 1, 5, 13, 27, 9, 23] has cost 120.


Before backtrack at level 11
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 23]

After backtrack at level 11
 pending : [10, 12, 16, 18, 25, 30, 31, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 23]


Invert decision for 23 at level 10


New level: 11
 pending : [10, 12, 16, 18, 25, 30, 31, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before reduction : 
 pending  : [10, 12, 16, 18, 25, 30, 31, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 16, 18, 25, 30, 31, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Solution : [0, 11, 1, 5, 13, 27, 9] has cost 62.


Decide in level 11 among pending : [10, 12, 16, 18, 25, 30, 31, 17, 24, 28, 26, 33, 20, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 31 with phase True at level 11

After decision at level 11
 pending : [10, 12, 16, 18, 25, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 31]


New level: 12
 pending : [10, 12, 16, 18, 25, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 31]


Before reduction : 
 pending  : [10, 12, 16, 18, 25, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 31]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 31]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 31]


Solution : [0, 11, 1, 5, 13, 27, 9, 31] has cost 120.


Before backtrack at level 12
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 31]

After backtrack at level 12
 pending : [10, 12, 16, 18, 25, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 31]


Invert decision for 31 at level 11


New level: 12
 pending : [10, 12, 16, 18, 25, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before reduction : 
 pending  : [10, 12, 16, 18, 25, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 16, 18, 25, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Solution : [0, 11, 1, 5, 13, 27, 9] has cost 62.


Decide in level 12 among pending : [10, 12, 16, 18, 25, 30, 17, 24, 28, 26, 33, 20, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

Decide 25 with phase True at level 12

After decision at level 12
 pending : [10, 12, 16, 18, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 25]


New level: 13
 pending : [10, 12, 16, 18, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 25]


Before reduction : 
 pending  : [10, 12, 16, 18, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 13 : {33, 16, 17, 18, 20, 22, 24, 26, 28, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 25]


Solution : [0, 11, 1, 5, 13, 27, 9, 25] has cost 120.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 25]

After backtrack at level 13
 pending : [10, 12, 16, 18, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9, 25]


Invert decision for 25 at level 12


New level: 13
 pending : [10, 12, 16, 18, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before reduction : 
 pending  : [10, 12, 16, 18, 30, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]

Essensial at level 13 : {30}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 13 : {33, 16, 17, 18, 20, 22, 24, 26, 28}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 30]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 30]


Solution : [0, 11, 1, 5, 13, 27, 9, 30] has cost 120.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 9, 30]

After backtrack at level 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before backtrack at level 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 9]

After backtrack at level 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before backtrack at level 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 9]

After backtrack at level 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before backtrack at level 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 27, 9]

After backtrack at level 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before backtrack at level 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 9]

After backtrack at level 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before backtrack at level 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 27, 9]

After backtrack at level 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3]
 solution : [0, 11, 1, 5, 13, 27, 9]


Before backtrack at level 7
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3]
 solution : [0, 11, 1, 5, 13, 27, 9]

After backtrack at level 7
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 2, 8]
 solution : [0, 11, 1, 5, 13, 27, 9]


Invert decision for 9 at level 6


New level: 7
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 2, 8]
 solution : [0, 11, 1, 5, 13, 27]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 2, 8]
 solution : [0, 11, 1, 5, 13, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 2, 8]
 solution : [0, 11, 1, 5, 13, 27]


Solution : [0, 11, 1, 5, 13, 27] has cost 55.


Decide in level 7 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 2, 8]
 solution : [0, 11, 1, 5, 13, 27, 7]


New level: 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 2, 8]
 solution : [0, 11, 1, 5, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 2, 8]
 solution : [0, 11, 1, 5, 13, 27, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 8 : {2, 19, 21}

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 7]


Solution : [0, 11, 1, 5, 13, 27, 7] has cost 74.


Before backtrack at level 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 7]

After backtrack at level 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8, 19, 21, 2]
 solution : [0, 11, 1, 5, 13, 27, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8, 19, 21, 2]
 solution : [0, 11, 1, 5, 13, 27]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8, 19, 21, 2]
 solution : [0, 11, 1, 5, 13, 27]

Essensial at level 8 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 8 : {19, 21}

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]


Solution : [0, 11, 1, 5, 13, 27, 2] has cost 62.


Decide in level 8 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 6 with phase True at level 8

After decision at level 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2, 6]


New level: 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2, 6]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 3, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 2, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 2, 6]


Solution : [0, 11, 1, 5, 13, 27, 2, 6] has cost 81.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 13, 27, 2, 6]

After backtrack at level 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2, 6]


Invert decision for 6 at level 8


New level: 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]


Solution : [0, 11, 1, 5, 13, 27, 2] has cost 62.


Decide in level 9 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 27, 2, 3]


New level: 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 27, 2, 3]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 27, 2, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 2, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 2, 3]


Solution : [0, 11, 1, 5, 13, 27, 2, 3] has cost 69.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 5, 13, 27, 2, 3]

After backtrack at level 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 27, 2, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]


Solution : [0, 11, 1, 5, 13, 27, 2] has cost 62.


Decide in level 10 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 2, 8]


New level: 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 2, 8]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 2, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 2, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 27, 2, 8]


Solution : [0, 11, 1, 5, 13, 27, 2, 8] has cost 69.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 13, 27, 2, 8]

After backtrack at level 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 2, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 2]


Solution : [0, 11, 1, 5, 13, 27, 2] has cost 62.


Decide in level 11 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 23 with phase True at level 11

After decision at level 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 27, 2, 23]


New level: 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 27, 2, 23]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 27, 2, 23]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 23]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 23]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 23]


Solution : [0, 11, 1, 5, 13, 27, 2, 23] has cost 120.


Before backtrack at level 12
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 23]

After backtrack at level 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 27, 2, 23]


Invert decision for 23 at level 11


New level: 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 27, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 27, 2]


Solution : [0, 11, 1, 5, 13, 27, 2] has cost 62.


Decide in level 12 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 31 with phase True at level 12

After decision at level 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2, 31]


New level: 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2, 31]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2, 31]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 13 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 31]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 31]


Solution : [0, 11, 1, 5, 13, 27, 2, 31] has cost 120.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 31]

After backtrack at level 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2, 31]


Invert decision for 31 at level 12


New level: 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2]


Solution : [0, 11, 1, 5, 13, 27, 2] has cost 62.


Decide in level 13 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

Decide 30 with phase True at level 13

After decision at level 13
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2, 30]


New level: 14
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2, 30]


Before reduction : 
 pending  : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2, 30]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 30]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 30]


Solution : [0, 11, 1, 5, 13, 27, 2, 30] has cost 120.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 30]

After backtrack at level 14
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2, 30]


Invert decision for 30 at level 13


New level: 14
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before reduction : 
 pending  : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 27, 2]

Essensial at level 14 : {25}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 16, 17, 18, 20, 22, 24, 26, 28}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 25]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 25]


Solution : [0, 11, 1, 5, 13, 27, 2, 25] has cost 120.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 27, 2, 25]

After backtrack at level 14
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before backtrack at level 13
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 27, 2]

After backtrack at level 13
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before backtrack at level 12
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 27, 2]

After backtrack at level 12
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before backtrack at level 11
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 27, 2]

After backtrack at level 11
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before backtrack at level 10
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 27, 2]

After backtrack at level 10
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before backtrack at level 9
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 27, 2]

After backtrack at level 9
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3]
 solution : [0, 11, 1, 5, 13, 27, 2]


Before backtrack at level 8
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3]
 solution : [0, 11, 1, 5, 13, 27, 2]

After backtrack at level 8
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6]
 solution : [0, 11, 1, 5, 13, 27]


Before backtrack at level 7
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6]
 solution : [0, 11, 1, 5, 13, 27]

After backtrack at level 7
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7]
 solution : [0, 11, 1, 5, 13, 27]


Before backtrack at level 6
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7]
 solution : [0, 11, 1, 5, 13, 27]

After backtrack at level 6
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 29, 9]
 solution : [0, 11, 1, 5, 13, 27]


Invert decision for 27 at level 5


New level: 6
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 29, 9]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 29, 9]
 solution : [0, 11, 1, 5, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 29, 9]
 solution : [0, 11, 1, 5, 13]


Solution : [0, 11, 1, 5, 13] has cost 31.


Decide in level 6 among pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 29, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 8)]

Decide 29 with phase True at level 6

After decision at level 6
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 9]
 solution : [0, 11, 1, 5, 13, 29]


New level: 7
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 9]
 solution : [0, 11, 1, 5, 13, 29]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 9]
 solution : [0, 11, 1, 5, 13, 29]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 9]
 solution : [0, 11, 1, 5, 13, 29]


Solution : [0, 11, 1, 5, 13, 29] has cost 55.


Decide in level 7 among pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 2, 19, 21, 6, 7, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 19, 21, 6, 7, 9]
 solution : [0, 11, 1, 5, 13, 29, 2]


New level: 8
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 19, 21, 6, 7, 9]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 19, 21, 6, 7, 9]
 solution : [0, 11, 1, 5, 13, 29, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 8 : {9, 19, 21, 7}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]


Solution : [0, 11, 1, 5, 13, 29, 2] has cost 62.


Decide in level 8 among pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2, 8]


New level: 9
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2, 8]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 3, 6, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 2, 8]


Solution : [0, 11, 1, 5, 13, 29, 2, 8] has cost 69.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 5, 13, 29, 2, 8]

After backtrack at level 9
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 3, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]


Solution : [0, 11, 1, 5, 13, 29, 2] has cost 62.


Decide in level 9 among pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 3, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 29, 2, 3]


New level: 10
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 29, 2, 3]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 29, 2, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 6, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 2, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 2, 3]


Solution : [0, 11, 1, 5, 13, 29, 2, 3] has cost 69.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 5, 13, 29, 2, 3]

After backtrack at level 10
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 29, 2, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]


Solution : [0, 11, 1, 5, 13, 29, 2] has cost 62.


Decide in level 10 among pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 2, 6]


New level: 11
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 2, 6]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 2, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 2, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 2, 6]


Solution : [0, 11, 1, 5, 13, 29, 2, 6] has cost 81.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 13, 29, 2, 6]

After backtrack at level 11
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 2, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 2]


Solution : [0, 11, 1, 5, 13, 29, 2] has cost 62.


Decide in level 11 among pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 23 with phase True at level 11

After decision at level 11
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 29, 2, 23]


New level: 12
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 29, 2, 23]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 29, 2, 23]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 23]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 23]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 23]


Solution : [0, 11, 1, 5, 13, 29, 2, 23] has cost 120.


Before backtrack at level 12
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 23]

After backtrack at level 12
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 29, 2, 23]


Invert decision for 23 at level 11


New level: 12
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 29, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 29, 2]


Solution : [0, 11, 1, 5, 13, 29, 2] has cost 62.


Decide in level 12 among pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 31 with phase True at level 12

After decision at level 12
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2, 31]


New level: 13
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2, 31]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2, 31]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 13 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 31]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 31]


Solution : [0, 11, 1, 5, 13, 29, 2, 31] has cost 120.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 31]

After backtrack at level 13
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2, 31]


Invert decision for 31 at level 12


New level: 13
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2]


Solution : [0, 11, 1, 5, 13, 29, 2] has cost 62.


Decide in level 13 among pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

Decide 25 with phase True at level 13

After decision at level 13
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2, 25]


New level: 14
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2, 25]


Before reduction : 
 pending  : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2, 25]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 16, 17, 18, 20, 22, 24, 26, 28, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 25]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 25]


Solution : [0, 11, 1, 5, 13, 29, 2, 25] has cost 120.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 25]

After backtrack at level 14
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2, 25]


Invert decision for 25 at level 13


New level: 14
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before reduction : 
 pending  : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 2]

Essensial at level 14 : {30}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 16, 17, 18, 20, 22, 24, 26, 28}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 30]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 30]


Solution : [0, 11, 1, 5, 13, 29, 2, 30] has cost 120.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 2, 30]

After backtrack at level 14
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before backtrack at level 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 29, 2]

After backtrack at level 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before backtrack at level 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 2]

After backtrack at level 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before backtrack at level 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 29, 2]

After backtrack at level 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before backtrack at level 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 2]

After backtrack at level 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before backtrack at level 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6]
 solution : [0, 11, 1, 5, 13, 29, 2]

After backtrack at level 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3]
 solution : [0, 11, 1, 5, 13, 29, 2]


Before backtrack at level 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3]
 solution : [0, 11, 1, 5, 13, 29, 2]

After backtrack at level 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 9, 8]
 solution : [0, 11, 1, 5, 13, 29, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 9, 8]
 solution : [0, 11, 1, 5, 13, 29]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 9, 8]
 solution : [0, 11, 1, 5, 13, 29]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 9, 8]
 solution : [0, 11, 1, 5, 13, 29]


Solution : [0, 11, 1, 5, 13, 29] has cost 55.


Decide in level 8 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 7, 9, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 9, 8]
 solution : [0, 11, 1, 5, 13, 29, 7]


New level: 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 9, 8]
 solution : [0, 11, 1, 5, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 19, 21, 9, 8]
 solution : [0, 11, 1, 5, 13, 29, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 24), (17, 2), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 11), (25, 72), (26, 1), (27, -1), (28, 10), (29, -1), (30, 72), (31, 69), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 9 : {9, 19, 21}

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 7]


Solution : [0, 11, 1, 5, 13, 29, 7] has cost 74.


Before backtrack at level 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 7]

After backtrack at level 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8, 19, 21, 9]
 solution : [0, 11, 1, 5, 13, 29, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8, 19, 21, 9]
 solution : [0, 11, 1, 5, 13, 29]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8, 19, 21, 9]
 solution : [0, 11, 1, 5, 13, 29]

Essensial at level 9 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 9 : {19, 21}

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, 0), (20, 1), (21, 0), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]


Solution : [0, 11, 1, 5, 13, 29, 9] has cost 62.


Decide in level 9 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 6, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9, 6]


New level: 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9, 6]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 3, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 9, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 9, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 9, 6]


Solution : [0, 11, 1, 5, 13, 29, 9, 6] has cost 81.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 5, 13, 29, 9, 6]

After backtrack at level 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]


Solution : [0, 11, 1, 5, 13, 29, 9] has cost 62.


Decide in level 10 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 29, 9, 3]


New level: 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 29, 9, 3]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 29, 9, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 8, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 9, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 9, 3]


Solution : [0, 11, 1, 5, 13, 29, 9, 3] has cost 69.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 13, 29, 9, 3]

After backtrack at level 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 29, 9, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]


Solution : [0, 11, 1, 5, 13, 29, 9] has cost 62.


Decide in level 11 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 9, 8]


New level: 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 9, 8]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 10, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 29, 9, 8]


Solution : [0, 11, 1, 5, 13, 29, 9, 8] has cost 69.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 13, 29, 9, 8]

After backtrack at level 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 9, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 9]


Solution : [0, 11, 1, 5, 13, 29, 9] has cost 62.


Decide in level 12 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31, 23]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 23 with phase True at level 12

After decision at level 12
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 29, 9, 23]


New level: 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 29, 9, 23]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 29, 9, 23]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, 22), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 23]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 23]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 23]


Solution : [0, 11, 1, 5, 13, 29, 9, 23] has cost 120.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 23]

After backtrack at level 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 29, 9, 23]


Invert decision for 23 at level 12


New level: 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 29, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]
 solution : [0, 11, 1, 5, 13, 29, 9]


Solution : [0, 11, 1, 5, 13, 29, 9] has cost 62.


Decide in level 13 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

Decide 31 with phase True at level 13

After decision at level 13
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9, 31]


New level: 14
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9, 31]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9, 31]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, 21), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 31]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 31]


Solution : [0, 11, 1, 5, 13, 29, 9, 31] has cost 120.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 31]

After backtrack at level 14
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9, 31]


Invert decision for 31 at level 13


New level: 14
 pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9]


Solution : [0, 11, 1, 5, 13, 29, 9] has cost 62.


Decide in level 14 among pending : [10, 12, 30, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

Decide 30 with phase True at level 14

After decision at level 14
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9, 30]


New level: 15
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9, 30]


Before reduction : 
 pending  : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9, 30]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 5), (17, 2), (18, 6), (19, -1), (20, 1), (21, -1), (22, 1), (23, -1), (24, 11), (25, 17), (26, 1), (27, -1), (28, 10), (29, -1), (30, 17), (31, -1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 15 : {33, 16, 17, 18, 20, 22, 24, 25, 26, 28}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 30]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 30]


Solution : [0, 11, 1, 5, 13, 29, 9, 30] has cost 120.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 30]

After backtrack at level 15
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9, 30]


Invert decision for 30 at level 14


New level: 15
 pending : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before reduction : 
 pending  : [10, 12, 16, 18, 17, 24, 28, 26, 33, 20, 22, 25]
 solution : [0, 11, 1, 5, 13, 29, 9]

Essensial at level 15 : {25}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 15 : {33, 16, 17, 18, 20, 22, 24, 26, 28}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 25]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 25]


Solution : [0, 11, 1, 5, 13, 29, 9, 25] has cost 120.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 29, 9, 25]

After backtrack at level 15
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before backtrack at level 14
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22]
 solution : [0, 11, 1, 5, 13, 29, 9]

After backtrack at level 14
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before backtrack at level 13
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30]
 solution : [0, 11, 1, 5, 13, 29, 9]

After backtrack at level 13
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before backtrack at level 12
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31]
 solution : [0, 11, 1, 5, 13, 29, 9]

After backtrack at level 12
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before backtrack at level 11
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23]
 solution : [0, 11, 1, 5, 13, 29, 9]

After backtrack at level 11
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before backtrack at level 10
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8]
 solution : [0, 11, 1, 5, 13, 29, 9]

After backtrack at level 10
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3]
 solution : [0, 11, 1, 5, 13, 29, 9]


Before backtrack at level 9
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3]
 solution : [0, 11, 1, 5, 13, 29, 9]

After backtrack at level 9
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6]
 solution : [0, 11, 1, 5, 13, 29]


Before backtrack at level 8
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6]
 solution : [0, 11, 1, 5, 13, 29]

After backtrack at level 8
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7]
 solution : [0, 11, 1, 5, 13, 29]


Before backtrack at level 7
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7]
 solution : [0, 11, 1, 5, 13, 29]

After backtrack at level 7
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13, 29]


Invert decision for 29 at level 6


New level: 7
 pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, 168), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13]


Solution : [0, 11, 1, 5, 13] has cost 31.


Decide in level 7 among pending : [10, 12, 25, 16, 18, 17, 24, 28, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, 168), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Decide 28 with phase True at level 7

After decision at level 7
 pending : [10, 12, 25, 16, 18, 17, 24, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13, 28]


New level: 8
 pending : [10, 12, 25, 16, 18, 17, 24, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13, 28]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 17, 24, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, 168), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 16), (17, 0), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 64), (24, 0), (25, 40), (26, 1), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 1)]

Covered at level 8 : {24, 17}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13, 28]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 16), (17, 0), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 64), (24, 0), (25, 40), (26, 1), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 16), (17, -1), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 64), (24, -1), (25, 40), (26, 1), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13, 28]


Solution : [0, 11, 1, 5, 13, 28] has cost 89.


Before backtrack at level 8
 pending : [10, 12, 25, 16, 18, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2]
 solution : [0, 11, 1, 5, 13, 28]

After backtrack at level 8
 pending : [10, 12, 25, 16, 18, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 28]


Invert decision for 28 at level 7


New level: 8
 pending : [10, 12, 25, 16, 18, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 16), (17, -1), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 64), (24, -1), (25, 40), (26, 1), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13]


Solution : [0, 11, 1, 5, 13] has cost 31.


Decide in level 8 among pending : [10, 12, 25, 16, 18, 26, 33, 20, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Decide 20 with phase True at level 8

After decision at level 8
 pending : [10, 12, 25, 16, 18, 26, 33, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 20]


New level: 9
 pending : [10, 12, 25, 16, 18, 26, 33, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 20]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 26, 33, 22, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, 0), (23, 52), (24, 73), (25, 64), (26, 0), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 0)]

Covered at level 9 : {33, 26, 22}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 20]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, 0), (23, 52), (24, 73), (25, 64), (26, 0), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, 52), (24, 73), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 20]


Solution : [0, 11, 1, 5, 13, 20] has cost 44.


Decide in level 9 among pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 9, 19, 21, 6, 7, 2, 17, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, 52), (24, 73), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 20, 9]


New level: 10
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 19, 21, 6, 7, 2, 17, 24]
 solution : [0, 11, 1, 5, 13, 20, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, 52), (24, 73), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 10 : {2, 19, 21, 7}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 20, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 20, 9]


Solution : [0, 11, 1, 5, 13, 20, 9] has cost 51.


Decide in level 10 among pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 24 with phase True at level 10

After decision at level 10
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 24]


New level: 11
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 24]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 24]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 11 : {17}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 20, 9, 24]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 20, 9, 24]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 20, 9, 24]


Solution : [0, 11, 1, 5, 13, 20, 9, 24] has cost 118.


Before backtrack at level 11
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 20, 9, 24]

After backtrack at level 11
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 24]


Invert decision for 24 at level 10


New level: 11
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Solution : [0, 11, 1, 5, 13, 20, 9] has cost 51.


Decide in level 11 among pending : [10, 12, 25, 16, 18, 30, 31, 23, 8, 3, 6, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 8]


New level: 12
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 8]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 12 : {3, 6, 10, 12, 16, 17, 18, 23, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 9, 8]


Solution : [0, 11, 1, 5, 13, 20, 9, 8] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 13, 20, 9, 8]

After backtrack at level 12
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Solution : [0, 11, 1, 5, 13, 20, 9] has cost 51.


Decide in level 12 among pending : [10, 12, 25, 16, 18, 30, 31, 23, 3, 6, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 3]


New level: 13
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 3]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 13 : {6, 10, 12, 16, 17, 18, 23, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 9, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 9, 3]


Solution : [0, 11, 1, 5, 13, 20, 9, 3] has cost 58.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 5, 13, 20, 9, 3]

After backtrack at level 13
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 6, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Solution : [0, 11, 1, 5, 13, 20, 9] has cost 51.


Decide in level 13 among pending : [10, 12, 25, 16, 18, 30, 31, 23, 6, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 6]


New level: 14
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 6]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 14 : {10, 12, 16, 17, 18, 23, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 9, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 9, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 9, 6]


Solution : [0, 11, 1, 5, 13, 20, 9, 6] has cost 70.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 5, 13, 20, 9, 6]

After backtrack at level 14
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [10, 12, 25, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Solution : [0, 11, 1, 5, 13, 20, 9] has cost 51.


Decide in level 14 among pending : [10, 12, 25, 16, 18, 30, 31, 23, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 25 with phase True at level 14

After decision at level 14
 pending : [10, 12, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 25]


New level: 15
 pending : [10, 12, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 25]


Before reduction : 
 pending  : [10, 12, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 25]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 15 : {16, 17, 18, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 25]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 25]


Solution : [0, 11, 1, 5, 13, 20, 9, 25] has cost 109.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 25]

After backtrack at level 15
 pending : [10, 12, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 25]


Invert decision for 25 at level 14


New level: 15
 pending : [10, 12, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before reduction : 
 pending  : [10, 12, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 16, 18, 30, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Solution : [0, 11, 1, 5, 13, 20, 9] has cost 51.


Decide in level 15 among pending : [10, 12, 16, 18, 30, 31, 23, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 30 with phase True at level 15

After decision at level 15
 pending : [10, 12, 16, 18, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 30]


New level: 16
 pending : [10, 12, 16, 18, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 30]


Before reduction : 
 pending  : [10, 12, 16, 18, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 30]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 16 : {16, 17, 18, 23, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 30]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 30]


Solution : [0, 11, 1, 5, 13, 20, 9, 30] has cost 109.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 30]

After backtrack at level 16
 pending : [10, 12, 16, 18, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 30]


Invert decision for 30 at level 15


New level: 16
 pending : [10, 12, 16, 18, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before reduction : 
 pending  : [10, 12, 16, 18, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 13), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 16, 18, 31, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Solution : [0, 11, 1, 5, 13, 20, 9] has cost 51.


Decide in level 16 among pending : [10, 12, 16, 18, 31, 23, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 13), (32, -1), (33, -1)]

Decide 23 with phase True at level 16

After decision at level 16
 pending : [10, 12, 16, 18, 31, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 23]


New level: 17
 pending : [10, 12, 16, 18, 31, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 23]


Before reduction : 
 pending  : [10, 12, 16, 18, 31, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 23]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 17 : {16, 17, 18, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 23]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 23]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 23]


Solution : [0, 11, 1, 5, 13, 20, 9, 23] has cost 109.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 23]

After backtrack at level 17
 pending : [10, 12, 16, 18, 31, 17]
 solution : [0, 11, 1, 5, 13, 20, 9, 23]


Invert decision for 23 at level 16


New level: 17
 pending : [10, 12, 16, 18, 31, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before reduction : 
 pending  : [10, 12, 16, 18, 31, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]

Essensial at level 17 : {31}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {16, 17, 18}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 31]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 31]


Solution : [0, 11, 1, 5, 13, 20, 9, 31] has cost 109.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 9, 31]

After backtrack at level 17
 pending : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before backtrack at level 16
 pending : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 9]

After backtrack at level 16
 pending : [10, 12, 31, 16, 18, 17, 23]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before backtrack at level 15
 pending : [10, 12, 31, 16, 18, 17, 23]
 solution : [0, 11, 1, 5, 13, 20, 9]

After backtrack at level 15
 pending : [10, 12, 31, 16, 18, 17, 23, 30]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before backtrack at level 14
 pending : [10, 12, 31, 16, 18, 17, 23, 30]
 solution : [0, 11, 1, 5, 13, 20, 9]

After backtrack at level 14
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before backtrack at level 13
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25]
 solution : [0, 11, 1, 5, 13, 20, 9]

After backtrack at level 13
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before backtrack at level 12
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6]
 solution : [0, 11, 1, 5, 13, 20, 9]

After backtrack at level 12
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before backtrack at level 11
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3]
 solution : [0, 11, 1, 5, 13, 20, 9]

After backtrack at level 11
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 20, 9]


Before backtrack at level 10
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 20, 9]

After backtrack at level 10
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 19, 21, 7, 2, 24]
 solution : [0, 11, 1, 5, 13, 20, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 19, 21, 7, 2, 24]
 solution : [0, 11, 1, 5, 13, 20]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 19, 21, 7, 2, 24]
 solution : [0, 11, 1, 5, 13, 20]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, 52), (24, 73), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 19, 21, 7, 2, 24]
 solution : [0, 11, 1, 5, 13, 20]


Solution : [0, 11, 1, 5, 13, 20] has cost 44.


Decide in level 10 among pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 19, 21, 7, 2, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, 52), (24, 73), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 19, 21, 2, 24]
 solution : [0, 11, 1, 5, 13, 20, 7]


New level: 11
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 19, 21, 2, 24]
 solution : [0, 11, 1, 5, 13, 20, 7]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 19, 21, 2, 24]
 solution : [0, 11, 1, 5, 13, 20, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, 52), (24, 73), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 14), (24, 11), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 11 : {2, 19, 21}

After reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24]
 solution : [0, 11, 1, 5, 13, 20, 7]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24]
 solution : [0, 11, 1, 5, 13, 20, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 14), (24, 11), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, 11), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24]
 solution : [0, 11, 1, 5, 13, 20, 7]


Solution : [0, 11, 1, 5, 13, 20, 7] has cost 63.


Before backtrack at level 11
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24]
 solution : [0, 11, 1, 5, 13, 20, 7]

After backtrack at level 11
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24, 19, 21, 2]
 solution : [0, 11, 1, 5, 13, 20, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24, 19, 21, 2]
 solution : [0, 11, 1, 5, 13, 20]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24, 19, 21, 2]
 solution : [0, 11, 1, 5, 13, 20]

Essensial at level 11 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, 11), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 11 : {19, 21}

After reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24]
 solution : [0, 11, 1, 5, 13, 20, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24]
 solution : [0, 11, 1, 5, 13, 20, 2]


Solution : [0, 11, 1, 5, 13, 20, 2] has cost 51.


Decide in level 11 among pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 24 with phase True at level 11

After decision at level 11
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 20, 2, 24]


New level: 12
 pending : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 20, 2, 24]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 30, 25, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 20, 2, 24]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 12 : {17}

After reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 20, 2, 24]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 20, 2, 24]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 20, 2, 24]


Solution : [0, 11, 1, 5, 13, 20, 2, 24] has cost 118.


Before backtrack at level 12
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 20, 2, 24]

After backtrack at level 12
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 6, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 24]


Invert decision for 24 at level 11


New level: 12
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 6, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 6, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, -1), (20, -1), (21, -1), (22, -1), (23, 5), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 6, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Solution : [0, 11, 1, 5, 13, 20, 2] has cost 51.


Decide in level 12 among pending : [10, 12, 31, 16, 18, 23, 30, 25, 6, 3, 8, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 6]


New level: 13
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 6]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 13 : {3, 8, 10, 12, 16, 17, 18, 23, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 2, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 2, 6]


Solution : [0, 11, 1, 5, 13, 20, 2, 6] has cost 70.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 5, 13, 20, 2, 6]

After backtrack at level 13
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Solution : [0, 11, 1, 5, 13, 20, 2] has cost 51.


Decide in level 13 among pending : [10, 12, 31, 16, 18, 23, 30, 25, 3, 8, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 3]


New level: 14
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 3]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 14 : {8, 10, 12, 16, 17, 18, 23, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 2, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 2, 3]


Solution : [0, 11, 1, 5, 13, 20, 2, 3] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 5, 13, 20, 2, 3]

After backtrack at level 14
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 8, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Solution : [0, 11, 1, 5, 13, 20, 2] has cost 51.


Decide in level 14 among pending : [10, 12, 31, 16, 18, 23, 30, 25, 8, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 8]


New level: 15
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 8]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 15 : {10, 12, 16, 17, 18, 23, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 2, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 20, 2, 8]


Solution : [0, 11, 1, 5, 13, 20, 2, 8] has cost 58.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 5, 13, 20, 2, 8]

After backtrack at level 15
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [10, 12, 31, 16, 18, 23, 30, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 30, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Solution : [0, 11, 1, 5, 13, 20, 2] has cost 51.


Decide in level 15 among pending : [10, 12, 31, 16, 18, 23, 30, 25, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Decide 30 with phase True at level 15

After decision at level 15
 pending : [10, 12, 31, 16, 18, 23, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 30]


New level: 16
 pending : [10, 12, 31, 16, 18, 23, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 30]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 30]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 16 : {16, 17, 18, 23, 25, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 30]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 30]


Solution : [0, 11, 1, 5, 13, 20, 2, 30] has cost 109.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 30]

After backtrack at level 16
 pending : [10, 12, 31, 16, 18, 23, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 30]


Invert decision for 30 at level 15


New level: 16
 pending : [10, 12, 31, 16, 18, 23, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 13), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 25, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Solution : [0, 11, 1, 5, 13, 20, 2] has cost 51.


Decide in level 16 among pending : [10, 12, 31, 16, 18, 23, 25, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 13), (32, -1), (33, -1)]

Decide 25 with phase True at level 16

After decision at level 16
 pending : [10, 12, 31, 16, 18, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 25]


New level: 17
 pending : [10, 12, 31, 16, 18, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 25]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 25]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 17 : {16, 17, 18, 23, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 25]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 25]


Solution : [0, 11, 1, 5, 13, 20, 2, 25] has cost 109.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 25]

After backtrack at level 17
 pending : [10, 12, 31, 16, 18, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 25]


Invert decision for 25 at level 16


New level: 17
 pending : [10, 12, 31, 16, 18, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 13), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 23, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Solution : [0, 11, 1, 5, 13, 20, 2] has cost 51.


Decide in level 17 among pending : [10, 12, 31, 16, 18, 23, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 13), (32, -1), (33, -1)]

Decide 23 with phase True at level 17

After decision at level 17
 pending : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 23]


New level: 18
 pending : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 23]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 23]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 14), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 18 : {16, 17, 18, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 23]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 23]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 23]


Solution : [0, 11, 1, 5, 13, 20, 2, 23] has cost 109.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 23]

After backtrack at level 18
 pending : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 2, 23]


Invert decision for 23 at level 17


New level: 18
 pending : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]

Essensial at level 18 : {31}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {16, 17, 18}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 31]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 31]


Solution : [0, 11, 1, 5, 13, 20, 2, 31] has cost 109.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 20, 2, 31]

After backtrack at level 18
 pending : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before backtrack at level 17
 pending : [10, 12, 31, 16, 18, 17]
 solution : [0, 11, 1, 5, 13, 20, 2]

After backtrack at level 17
 pending : [10, 12, 31, 16, 18, 17, 23]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before backtrack at level 16
 pending : [10, 12, 31, 16, 18, 17, 23]
 solution : [0, 11, 1, 5, 13, 20, 2]

After backtrack at level 16
 pending : [10, 12, 31, 16, 18, 17, 23, 25]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before backtrack at level 15
 pending : [10, 12, 31, 16, 18, 17, 23, 25]
 solution : [0, 11, 1, 5, 13, 20, 2]

After backtrack at level 15
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before backtrack at level 14
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30]
 solution : [0, 11, 1, 5, 13, 20, 2]

After backtrack at level 14
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before backtrack at level 13
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8]
 solution : [0, 11, 1, 5, 13, 20, 2]

After backtrack at level 13
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before backtrack at level 12
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3]
 solution : [0, 11, 1, 5, 13, 20, 2]

After backtrack at level 12
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 20, 2]


Before backtrack at level 11
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 20, 2]

After backtrack at level 11
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6, 2, 19, 21, 24]
 solution : [0, 11, 1, 5, 13, 20]


Before backtrack at level 10
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6, 2, 19, 21, 24]
 solution : [0, 11, 1, 5, 13, 20]

After backtrack at level 10
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7]
 solution : [0, 11, 1, 5, 13, 20]


Before backtrack at level 9
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7]
 solution : [0, 11, 1, 5, 13, 20]

After backtrack at level 9
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7, 26, 33, 22, 9]
 solution : [0, 11, 1, 5, 13, 20]


Invert decision for 20 at level 8


New level: 9
 pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7, 26, 33, 22, 9]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7, 26, 33, 22, 9]
 solution : [0, 11, 1, 5, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7, 26, 33, 22, 9]
 solution : [0, 11, 1, 5, 13]


Solution : [0, 11, 1, 5, 13] has cost 31.


Decide in level 9 among pending : [10, 12, 31, 16, 18, 17, 23, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7, 26, 33, 22, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Decide 23 with phase True at level 9

After decision at level 9
 pending : [10, 12, 31, 16, 18, 17, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7, 26, 33, 22, 9]
 solution : [0, 11, 1, 5, 13, 23]


New level: 10
 pending : [10, 12, 31, 16, 18, 17, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7, 26, 33, 22, 9]
 solution : [0, 11, 1, 5, 13, 23]


Before reduction : 
 pending  : [10, 12, 31, 16, 18, 17, 25, 30, 8, 3, 6, 2, 19, 21, 24, 7, 26, 33, 22, 9]
 solution : [0, 11, 1, 5, 13, 23]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, -1), (6, 1), (7, 128), (8, 1), (9, 128), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 32), (20, -1), (21, 32), (22, 1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 16, 17, 18, 24, 25, 26, 30, 31}

After reduction : 
 pending  : [10, 12, 8, 3, 6, 2, 19, 21, 7, 22, 9]
 solution : [0, 11, 1, 5, 13, 23]


Before reduction : 
 pending  : [10, 12, 8, 3, 6, 2, 19, 21, 7, 22, 9]
 solution : [0, 11, 1, 5, 13, 23]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, -1), (6, 1), (7, 128), (8, 1), (9, 128), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 32), (20, -1), (21, 32), (22, 1), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, -1), (6, 1), (7, 128), (8, 1), (9, 128), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 16), (20, -1), (21, 16), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 8, 3, 6, 2, 19, 21, 7, 22, 9]
 solution : [0, 11, 1, 5, 13, 23]


Solution : [0, 11, 1, 5, 13, 23] has cost 89.


Before backtrack at level 10
 pending : [10, 12, 8, 3, 6, 2, 19, 21, 7, 22, 9]
 solution : [0, 11, 1, 5, 13, 23]

After backtrack at level 10
 pending : [10, 12, 8, 3, 6, 2, 19, 21, 7, 22, 9, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13, 23]


Invert decision for 23 at level 9


New level: 10
 pending : [10, 12, 8, 3, 6, 2, 19, 21, 7, 22, 9, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 12, 8, 3, 6, 2, 19, 21, 7, 22, 9, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, -1), (6, 1), (7, 128), (8, 1), (9, 128), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 16), (20, -1), (21, 16), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, 128), (23, -1), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 8, 3, 6, 2, 19, 21, 7, 22, 9, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13]


Solution : [0, 11, 1, 5, 13] has cost 31.


Decide in level 10 among pending : [10, 12, 8, 3, 6, 2, 19, 21, 7, 22, 9, 31, 16, 18, 17, 25, 30, 24, 26, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, 128), (23, -1), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Decide 2 with phase True at level 10

After decision at level 10
 pending : [10, 12, 8, 3, 6, 19, 21, 7, 22, 9, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13, 2]


New level: 11
 pending : [10, 12, 8, 3, 6, 19, 21, 7, 22, 9, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13, 2]


Before reduction : 
 pending  : [10, 12, 8, 3, 6, 19, 21, 7, 22, 9, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, 128), (23, -1), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, 0), (20, -1), (21, 0), (22, 8), (23, -1), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 11 : {9, 19, 21, 7}

After reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13, 2]


Before reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, 0), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, 0), (20, -1), (21, 0), (22, 8), (23, -1), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 17, 25, 30, 24, 26, 33]
 solution : [0, 11, 1, 5, 13, 2]


Solution : [0, 11, 1, 5, 13, 2] has cost 38.


Decide in level 11 among pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 17, 25, 30, 24, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 24 with phase True at level 11

After decision at level 11
 pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 17, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 24]


New level: 12
 pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 17, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 24]


Before reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 17, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 24]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 3), (17, 0), (18, 4), (19, -1), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

Covered at level 12 : {17}

After reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 24]


Before reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 24]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 3), (17, 0), (18, 4), (19, -1), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 3), (17, -1), (18, 4), (19, -1), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 24]


Solution : [0, 11, 1, 5, 13, 2, 24] has cost 105.


Before backtrack at level 12
 pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 24]

After backtrack at level 12
 pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33, 17]
 solution : [0, 11, 1, 5, 13, 2, 24]


Invert decision for 24 at level 11


New level: 12
 pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33, 17]
 solution : [0, 11, 1, 5, 13, 2]


Before reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33, 17]
 solution : [0, 11, 1, 5, 13, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 3), (17, -1), (18, 4), (19, -1), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33, 17]
 solution : [0, 11, 1, 5, 13, 2]


Solution : [0, 11, 1, 5, 13, 2] has cost 38.


Decide in level 12 among pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 17 with phase True at level 12

After decision at level 12
 pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


New level: 13
 pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Solution : [0, 11, 1, 5, 13, 2, 17] has cost 51.


Decide in level 13 among pending : [10, 12, 8, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [10, 12, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 8]


New level: 14
 pending : [10, 12, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 8]


Before reduction : 
 pending  : [10, 12, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 3, 6, 10, 12, 16, 18, 22, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 17, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 17, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 17, 8]


Solution : [0, 11, 1, 5, 13, 2, 17, 8] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 5, 13, 2, 17, 8]

After backtrack at level 14
 pending : [10, 12, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [10, 12, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before reduction : 
 pending  : [10, 12, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Solution : [0, 11, 1, 5, 13, 2, 17] has cost 51.


Decide in level 14 among pending : [10, 12, 3, 6, 22, 31, 16, 18, 25, 30, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Decide 3 with phase True at level 14

After decision at level 14
 pending : [10, 12, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 3]


New level: 15
 pending : [10, 12, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 3]


Before reduction : 
 pending  : [10, 12, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 10, 12, 16, 18, 22, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 17, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 17, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 17, 3]


Solution : [0, 11, 1, 5, 13, 2, 17, 3] has cost 58.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 5, 13, 2, 17, 3]

After backtrack at level 15
 pending : [10, 12, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 3]


Invert decision for 3 at level 14


New level: 15
 pending : [10, 12, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before reduction : 
 pending  : [10, 12, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 6, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Solution : [0, 11, 1, 5, 13, 2, 17] has cost 51.


Decide in level 15 among pending : [10, 12, 6, 22, 31, 16, 18, 25, 30, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Decide 6 with phase True at level 15

After decision at level 15
 pending : [10, 12, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 6]


New level: 16
 pending : [10, 12, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 6]


Before reduction : 
 pending  : [10, 12, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 10, 12, 16, 18, 22, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 17, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 17, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 17, 6]


Solution : [0, 11, 1, 5, 13, 2, 17, 6] has cost 70.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 5, 13, 2, 17, 6]

After backtrack at level 16
 pending : [10, 12, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 6]


Invert decision for 6 at level 15


New level: 16
 pending : [10, 12, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before reduction : 
 pending  : [10, 12, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 22, 31, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Solution : [0, 11, 1, 5, 13, 2, 17] has cost 51.


Decide in level 16 among pending : [10, 12, 22, 31, 16, 18, 25, 30, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Decide 31 with phase True at level 16

After decision at level 16
 pending : [10, 12, 22, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 31]


New level: 17
 pending : [10, 12, 22, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 31]


Before reduction : 
 pending  : [10, 12, 22, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 31]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 17 : {33, 16, 18, 22, 25, 26, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 31]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 31]


Solution : [0, 11, 1, 5, 13, 2, 17, 31] has cost 109.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 31]

After backtrack at level 17
 pending : [10, 12, 22, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 31]


Invert decision for 31 at level 16


New level: 17
 pending : [10, 12, 22, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before reduction : 
 pending  : [10, 12, 22, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 22, 16, 18, 25, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Solution : [0, 11, 1, 5, 13, 2, 17] has cost 51.


Decide in level 17 among pending : [10, 12, 22, 16, 18, 25, 30, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 4)]

Decide 25 with phase True at level 17

After decision at level 17
 pending : [10, 12, 22, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 25]


New level: 18
 pending : [10, 12, 22, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 25]


Before reduction : 
 pending  : [10, 12, 22, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 25]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 18 : {33, 16, 18, 22, 26, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 25]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 25]


Solution : [0, 11, 1, 5, 13, 2, 17, 25] has cost 109.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 25]

After backtrack at level 18
 pending : [10, 12, 22, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17, 25]


Invert decision for 25 at level 17


New level: 18
 pending : [10, 12, 22, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before reduction : 
 pending  : [10, 12, 22, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]

Essensial at level 18 : {30}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 18 : {33, 16, 18, 22, 26}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 30]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 30]


Solution : [0, 11, 1, 5, 13, 2, 17, 30] has cost 109.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 17, 30]

After backtrack at level 18
 pending : [10, 12, 30, 22, 16, 18, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before backtrack at level 17
 pending : [10, 12, 30, 22, 16, 18, 26, 33]
 solution : [0, 11, 1, 5, 13, 2, 17]

After backtrack at level 17
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before backtrack at level 16
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 17]

After backtrack at level 16
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before backtrack at level 15
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 2, 17]

After backtrack at level 15
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 6]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before backtrack at level 14
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 6]
 solution : [0, 11, 1, 5, 13, 2, 17]

After backtrack at level 14
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 6, 3]
 solution : [0, 11, 1, 5, 13, 2, 17]


Before backtrack at level 13
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 6, 3]
 solution : [0, 11, 1, 5, 13, 2, 17]

After backtrack at level 13
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 2, 17]


Invert decision for 17 at level 12


New level: 13
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 2]


Before reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 2]


Solution : [0, 11, 1, 5, 13, 2] has cost 38.


Decide in level 13 among pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 6, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 3, 8]
 solution : [0, 11, 1, 5, 13, 2, 6]


New level: 14
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 3, 8]
 solution : [0, 11, 1, 5, 13, 2, 6]


Before reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 3, 8]
 solution : [0, 11, 1, 5, 13, 2, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 3, 8, 10, 12, 16, 18, 22, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 6]


Solution : [0, 11, 1, 5, 13, 2, 6] has cost 57.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 5, 13, 2, 6]

After backtrack at level 14
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 3, 8]
 solution : [0, 11, 1, 5, 13, 2, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 3, 8]
 solution : [0, 11, 1, 5, 13, 2]


Before reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 3, 8]
 solution : [0, 11, 1, 5, 13, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 3, 8]
 solution : [0, 11, 1, 5, 13, 2]


Solution : [0, 11, 1, 5, 13, 2] has cost 38.


Decide in level 14 among pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 3 with phase True at level 14

After decision at level 14
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 8]
 solution : [0, 11, 1, 5, 13, 2, 3]


New level: 15
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 8]
 solution : [0, 11, 1, 5, 13, 2, 3]


Before reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 8]
 solution : [0, 11, 1, 5, 13, 2, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 8, 10, 12, 16, 18, 22, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 3]


Solution : [0, 11, 1, 5, 13, 2, 3] has cost 45.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 5, 13, 2, 3]

After backtrack at level 15
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 8]
 solution : [0, 11, 1, 5, 13, 2, 3]


Invert decision for 3 at level 14


New level: 15
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 8]
 solution : [0, 11, 1, 5, 13, 2]


Before reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 8]
 solution : [0, 11, 1, 5, 13, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 8]
 solution : [0, 11, 1, 5, 13, 2]


Solution : [0, 11, 1, 5, 13, 2] has cost 38.


Decide in level 15 among pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 2, 8]


New level: 16
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 2, 8]


Before reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 10, 12, 16, 18, 22, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 2, 8]


Solution : [0, 11, 1, 5, 13, 2, 8] has cost 45.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 5, 13, 2, 8]

After backtrack at level 16
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 2, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 2]


Before reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 2]


Solution : [0, 11, 1, 5, 13, 2] has cost 38.


Decide in level 16 among pending : [10, 12, 30, 22, 16, 18, 26, 33, 25, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 31 with phase True at level 16

After decision at level 16
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 31]


New level: 17
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 31]


Before reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 31]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 17 : {33, 16, 18, 22, 25, 26, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 31]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 31]


Solution : [0, 11, 1, 5, 13, 2, 31] has cost 96.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 31]

After backtrack at level 17
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 31]


Invert decision for 31 at level 16


New level: 17
 pending : [10, 12, 30, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2]


Before reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 30, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2]


Solution : [0, 11, 1, 5, 13, 2] has cost 38.


Decide in level 17 among pending : [10, 12, 30, 22, 16, 18, 26, 33, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Decide 30 with phase True at level 17

After decision at level 17
 pending : [10, 12, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 30]


New level: 18
 pending : [10, 12, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 30]


Before reduction : 
 pending  : [10, 12, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 30]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 18 : {33, 16, 18, 22, 25, 26}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 30]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 30]


Solution : [0, 11, 1, 5, 13, 2, 30] has cost 96.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 30]

After backtrack at level 18
 pending : [10, 12, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2, 30]


Invert decision for 30 at level 17


New level: 18
 pending : [10, 12, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2]


Before reduction : 
 pending  : [10, 12, 22, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 2]

Essensial at level 18 : {25}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 18 : {33, 16, 18, 22, 26}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 25]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 25]


Solution : [0, 11, 1, 5, 13, 2, 25] has cost 96.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 2, 25]

After backtrack at level 18
 pending : [10, 12, 25, 22, 16, 18, 26, 33]
 solution : [0, 11, 1, 5, 13, 2]


Before backtrack at level 17
 pending : [10, 12, 25, 22, 16, 18, 26, 33]
 solution : [0, 11, 1, 5, 13, 2]

After backtrack at level 17
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30]
 solution : [0, 11, 1, 5, 13, 2]


Before backtrack at level 16
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30]
 solution : [0, 11, 1, 5, 13, 2]

After backtrack at level 16
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31]
 solution : [0, 11, 1, 5, 13, 2]


Before backtrack at level 15
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31]
 solution : [0, 11, 1, 5, 13, 2]

After backtrack at level 15
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8]
 solution : [0, 11, 1, 5, 13, 2]


Before backtrack at level 14
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8]
 solution : [0, 11, 1, 5, 13, 2]

After backtrack at level 14
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3]
 solution : [0, 11, 1, 5, 13, 2]


Before backtrack at level 13
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3]
 solution : [0, 11, 1, 5, 13, 2]

After backtrack at level 13
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 2]


Before backtrack at level 12
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3, 6]
 solution : [0, 11, 1, 5, 13, 2]

After backtrack at level 12
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 2]


Before backtrack at level 11
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17]
 solution : [0, 11, 1, 5, 13, 2]

After backtrack at level 11
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13, 2]


Invert decision for 2 at level 10


New level: 11
 pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, 128), (23, -1), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13]


Solution : [0, 11, 1, 5, 13] has cost 31.


Decide in level 11 among pending : [10, 12, 25, 22, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, 128), (23, -1), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Decide 22 with phase True at level 11

After decision at level 11
 pending : [10, 12, 25, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13, 22]


New level: 12
 pending : [10, 12, 25, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13, 22]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 26, 33, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13, 22]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, 128), (23, -1), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 73), (25, 64), (26, 0), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 0)]

Covered at level 12 : {33, 26}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13, 22]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13, 22]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 73), (25, 64), (26, 0), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 73), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]
 solution : [0, 11, 1, 5, 13, 22]


Solution : [0, 11, 1, 5, 13, 22] has cost 44.


Decide in level 12 among pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 19, 21, 7, 9, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 73), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

Decide 7 with phase True at level 12

After decision at level 12
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 19, 21, 9, 24]
 solution : [0, 11, 1, 5, 13, 22, 7]


New level: 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 19, 21, 9, 24]
 solution : [0, 11, 1, 5, 13, 22, 7]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 19, 21, 9, 24]
 solution : [0, 11, 1, 5, 13, 22, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 73), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, 0), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 13 : {9, 19, 21}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 22, 7]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 22, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, 0), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 22, 7]


Solution : [0, 11, 1, 5, 13, 22, 7] has cost 63.


Before backtrack at level 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 22, 7]

After backtrack at level 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 19, 21, 9]
 solution : [0, 11, 1, 5, 13, 22, 7]


Invert decision for 7 at level 12


New level: 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 19, 21, 9]
 solution : [0, 11, 1, 5, 13, 22]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 19, 21, 9]
 solution : [0, 11, 1, 5, 13, 22]

Essensial at level 13 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 13 : {19, 21}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 22, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 22, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 22, 9]


Solution : [0, 11, 1, 5, 13, 22, 9] has cost 51.


Before backtrack at level 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24]
 solution : [0, 11, 1, 5, 13, 22, 9]

After backtrack at level 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 9, 19, 21]
 solution : [0, 11, 1, 5, 13, 22]


Before backtrack at level 12
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 9, 19, 21]
 solution : [0, 11, 1, 5, 13, 22]

After backtrack at level 12
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13, 22]


Invert decision for 22 at level 11


New level: 12
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 4), (17, 2), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 73), (25, 16), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13]


Solution : [0, 11, 1, 5, 13] has cost 31.


Decide in level 12 among pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 24, 9, 19, 21, 26, 33, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Decide 24 with phase True at level 12

After decision at level 12
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13, 24]


New level: 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13, 24]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 17, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13, 24]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, 128), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 16), (17, 0), (18, 16), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, -1), (25, 40), (26, 1), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 1)]

Covered at level 13 : {17}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13, 24]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13, 24]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 16), (17, 0), (18, 16), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, -1), (25, 40), (26, 1), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 16), (17, -1), (18, 16), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, -1), (25, 40), (26, 1), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13, 24]


Solution : [0, 11, 1, 5, 13, 24] has cost 98.


Before backtrack at level 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 9, 19, 21, 26, 33, 7]
 solution : [0, 11, 1, 5, 13, 24]

After backtrack at level 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 9, 19, 21, 26, 33, 7, 17]
 solution : [0, 11, 1, 5, 13, 24]


Invert decision for 24 at level 12


New level: 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 9, 19, 21, 26, 33, 7, 17]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 9, 19, 21, 26, 33, 7, 17]
 solution : [0, 11, 1, 5, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 16), (17, -1), (18, 16), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, -1), (25, 40), (26, 1), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, -1), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 9, 19, 21, 26, 33, 7, 17]
 solution : [0, 11, 1, 5, 13]


Solution : [0, 11, 1, 5, 13] has cost 31.


Decide in level 13 among pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 9, 19, 21, 26, 33, 7, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, -1), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 19, 21, 26, 33, 7, 17]
 solution : [0, 11, 1, 5, 13, 9]


New level: 14
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 19, 21, 26, 33, 7, 17]
 solution : [0, 11, 1, 5, 13, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 19, 21, 26, 33, 7, 17]
 solution : [0, 11, 1, 5, 13, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 128), (8, 32), (9, 128), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 52), (17, 64), (18, 66), (19, 32), (20, -1), (21, 32), (22, -1), (23, -1), (24, -1), (25, 96), (26, 8), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 14 : {19, 21, 7}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33, 17]
 solution : [0, 11, 1, 5, 13, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33, 17]
 solution : [0, 11, 1, 5, 13, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33, 17]
 solution : [0, 11, 1, 5, 13, 9]


Solution : [0, 11, 1, 5, 13, 9] has cost 38.


Decide in level 14 among pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 17 with phase True at level 14

After decision at level 14
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 17]


New level: 15
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 17]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 17]


Solution : [0, 11, 1, 5, 13, 9, 17] has cost 51.


Before backtrack at level 15
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 17]

After backtrack at level 15
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 17]


Invert decision for 17 at level 14


New level: 15
 pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Solution : [0, 11, 1, 5, 13, 9] has cost 38.


Decide in level 15 among pending : [10, 12, 25, 16, 18, 30, 31, 8, 3, 6, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [10, 12, 25, 16, 18, 30, 31, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 8]


New level: 16
 pending : [10, 12, 25, 16, 18, 30, 31, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 8]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 3, 6, 10, 12, 16, 18, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 9, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 9, 8]


Solution : [0, 11, 1, 5, 13, 9, 8] has cost 45.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 5, 13, 9, 8]

After backtrack at level 16
 pending : [10, 12, 25, 16, 18, 30, 31, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [10, 12, 25, 16, 18, 30, 31, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 3, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Solution : [0, 11, 1, 5, 13, 9] has cost 38.


Decide in level 16 among pending : [10, 12, 25, 16, 18, 30, 31, 3, 6, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 3 with phase True at level 16

After decision at level 16
 pending : [10, 12, 25, 16, 18, 30, 31, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 3]


New level: 17
 pending : [10, 12, 25, 16, 18, 30, 31, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 3]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 6, 10, 12, 16, 18, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 9, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 9, 3]


Solution : [0, 11, 1, 5, 13, 9, 3] has cost 45.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 5, 13, 9, 3]

After backtrack at level 17
 pending : [10, 12, 25, 16, 18, 30, 31, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 3]


Invert decision for 3 at level 16


New level: 17
 pending : [10, 12, 25, 16, 18, 30, 31, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 6, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Solution : [0, 11, 1, 5, 13, 9] has cost 38.


Decide in level 17 among pending : [10, 12, 25, 16, 18, 30, 31, 6, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 6 with phase True at level 17

After decision at level 17
 pending : [10, 12, 25, 16, 18, 30, 31, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 6]


New level: 18
 pending : [10, 12, 25, 16, 18, 30, 31, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 6]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 10, 12, 16, 18, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 9, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 9, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 13, 9, 6]


Solution : [0, 11, 1, 5, 13, 9, 6] has cost 57.


Before backtrack at level 18
 pending : []
 solution : [0, 11, 1, 5, 13, 9, 6]

After backtrack at level 18
 pending : [10, 12, 25, 16, 18, 30, 31, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 6]


Invert decision for 6 at level 17


New level: 18
 pending : [10, 12, 25, 16, 18, 30, 31, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 31, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Solution : [0, 11, 1, 5, 13, 9] has cost 38.


Decide in level 18 among pending : [10, 12, 25, 16, 18, 30, 31, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 31 with phase True at level 18

After decision at level 18
 pending : [10, 12, 25, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 31]


New level: 19
 pending : [10, 12, 25, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 31]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 31]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 19 : {33, 16, 18, 25, 26, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 31]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 31]


Solution : [0, 11, 1, 5, 13, 9, 31] has cost 96.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 31]

After backtrack at level 19
 pending : [10, 12, 25, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 31]


Invert decision for 31 at level 18


New level: 19
 pending : [10, 12, 25, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Solution : [0, 11, 1, 5, 13, 9] has cost 38.


Decide in level 19 among pending : [10, 12, 25, 16, 18, 30, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Decide 25 with phase True at level 19

After decision at level 19
 pending : [10, 12, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 25]


New level: 20
 pending : [10, 12, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 25]


Before reduction : 
 pending  : [10, 12, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 25]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 20 : {33, 16, 18, 26, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 25]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 25]


Solution : [0, 11, 1, 5, 13, 9, 25] has cost 96.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 25]

After backtrack at level 20
 pending : [10, 12, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9, 25]


Invert decision for 25 at level 19


New level: 20
 pending : [10, 12, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Before reduction : 
 pending  : [10, 12, 16, 18, 30, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]

Essensial at level 20 : {30}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 20 : {16, 33, 18, 26}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 30]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 30]


Solution : [0, 11, 1, 5, 13, 9, 30] has cost 96.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 11, 1, 5, 13, 9, 30]

After backtrack at level 20
 pending : [10, 12, 30, 16, 18, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]


Before backtrack at level 19
 pending : [10, 12, 30, 16, 18, 26, 33]
 solution : [0, 11, 1, 5, 13, 9]

After backtrack at level 19
 pending : [10, 12, 30, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 9]


Before backtrack at level 18
 pending : [10, 12, 30, 16, 18, 26, 33, 25]
 solution : [0, 11, 1, 5, 13, 9]

After backtrack at level 18
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 9]


Before backtrack at level 17
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 13, 9]

After backtrack at level 17
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6]
 solution : [0, 11, 1, 5, 13, 9]


Before backtrack at level 16
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6]
 solution : [0, 11, 1, 5, 13, 9]

After backtrack at level 16
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3]
 solution : [0, 11, 1, 5, 13, 9]


Before backtrack at level 15
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3]
 solution : [0, 11, 1, 5, 13, 9]

After backtrack at level 15
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 9]


Before backtrack at level 14
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8]
 solution : [0, 11, 1, 5, 13, 9]

After backtrack at level 14
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 19, 21, 7, 17]
 solution : [0, 11, 1, 5, 13, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 19, 21, 7, 17]
 solution : [0, 11, 1, 5, 13]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 19, 21, 7, 17]
 solution : [0, 11, 1, 5, 13]

Essensial at level 14 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 14 : {19, 21}

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 7]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 7]


Solution : [0, 11, 1, 5, 13, 7] has cost 50.


Before backtrack at level 14
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17]
 solution : [0, 11, 1, 5, 13, 7]

After backtrack at level 14
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21]
 solution : [0, 11, 1, 5, 13]


Before backtrack at level 13
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21]
 solution : [0, 11, 1, 5, 13]

After backtrack at level 13
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9]
 solution : [0, 11, 1, 5, 13]


Before backtrack at level 12
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9]
 solution : [0, 11, 1, 5, 13]

After backtrack at level 12
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24]
 solution : [0, 11, 1, 5, 13]


Before backtrack at level 11
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24]
 solution : [0, 11, 1, 5, 13]

After backtrack at level 11
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22]
 solution : [0, 11, 1, 5, 13]


Before backtrack at level 10
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22]
 solution : [0, 11, 1, 5, 13]

After backtrack at level 10
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2]
 solution : [0, 11, 1, 5, 13]


Before backtrack at level 9
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2]
 solution : [0, 11, 1, 5, 13]

After backtrack at level 9
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23]
 solution : [0, 11, 1, 5, 13]


Before backtrack at level 8
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23]
 solution : [0, 11, 1, 5, 13]

After backtrack at level 8
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20]
 solution : [0, 11, 1, 5, 13]


Before backtrack at level 7
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20]
 solution : [0, 11, 1, 5, 13]

After backtrack at level 7
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28]
 solution : [0, 11, 1, 5, 13]


Before backtrack at level 6
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28]
 solution : [0, 11, 1, 5, 13]

After backtrack at level 6
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 29]
 solution : [0, 11, 1, 5, 13]


Before backtrack at level 5
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 29]
 solution : [0, 11, 1, 5, 13]

After backtrack at level 5
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 29, 15, 14, 27]
 solution : [0, 11, 1, 5, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 29, 15, 14, 27]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 29, 15, 14, 27]
 solution : [0, 11, 1, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 29, 15, 14, 27]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 5 among pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 29, 15, 14, 27]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 29 with phase True at level 5

After decision at level 5
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14, 27]
 solution : [0, 11, 1, 5, 29]


New level: 6
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14, 27]
 solution : [0, 11, 1, 5, 29]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14, 27]
 solution : [0, 11, 1, 5, 29]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, 192), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 16), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 28), (25, 72), (26, 32), (27, 0), (28, 37), (29, -1), (30, 72), (31, 69), (32, -1), (33, 32)]

Covered at level 6 : {27}

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 29]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 29]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 16), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 28), (25, 72), (26, 32), (27, 0), (28, 37), (29, -1), (30, 72), (31, 69), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 16), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 28), (25, 72), (26, 32), (27, -1), (28, 37), (29, -1), (30, 72), (31, 69), (32, -1), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 29]


Solution : [0, 11, 1, 5, 29] has cost 49.


Before backtrack at level 6
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 29]

After backtrack at level 6
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14, 27]
 solution : [0, 11, 1, 5, 29]


Invert decision for 29 at level 5


New level: 6
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14, 27]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14, 27]
 solution : [0, 11, 1, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 16), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 28), (25, 72), (26, 32), (27, -1), (28, 37), (29, -1), (30, 72), (31, 69), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14, 27]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 6 among pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14, 27]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 27 with phase True at level 6

After decision at level 6
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 27]


New level: 7
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 27]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, 192), (28, 168), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 16), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 28), (25, 72), (26, 32), (27, -1), (28, 37), (29, -1), (30, 72), (31, 69), (32, -1), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 27]


Solution : [0, 11, 1, 5, 27] has cost 49.


Before backtrack at level 7
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 27]

After backtrack at level 7
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5, 27]


Invert decision for 27 at level 6


New level: 7
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 24), (17, 16), (18, 18), (19, 8), (20, 32), (21, 8), (22, 32), (23, 100), (24, 28), (25, 72), (26, 32), (27, -1), (28, 37), (29, -1), (30, 72), (31, 69), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, 168), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 7 among pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 28, 15, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, 168), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 28 with phase True at level 7

After decision at level 7
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 15, 14]
 solution : [0, 11, 1, 5, 28]


New level: 8
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 15, 14]
 solution : [0, 11, 1, 5, 28]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 17, 7, 19, 21, 9, 24, 22, 2, 23, 20, 15, 14]
 solution : [0, 11, 1, 5, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, 168), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 0), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 64), (24, 0), (25, 40), (26, 4), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 4)]

Covered at level 8 : {24, 17}

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14]
 solution : [0, 11, 1, 5, 28]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14]
 solution : [0, 11, 1, 5, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 0), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 64), (24, 0), (25, 40), (26, 4), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, -1), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 64), (24, -1), (25, 40), (26, 4), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14]
 solution : [0, 11, 1, 5, 28]


Solution : [0, 11, 1, 5, 28] has cost 83.


Before backtrack at level 8
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14]
 solution : [0, 11, 1, 5, 28]

After backtrack at level 8
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14, 17, 24]
 solution : [0, 11, 1, 5, 28]


Invert decision for 28 at level 7


New level: 8
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14, 17, 24]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14, 17, 24]
 solution : [0, 11, 1, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, -1), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 64), (24, -1), (25, 40), (26, 4), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14, 17, 24]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 8 among pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 6, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14, 17, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 6 with phase True at level 8

After decision at level 8
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14, 17, 24]
 solution : [0, 11, 1, 5, 6]


New level: 9
 pending : [10, 12, 30, 16, 18, 26, 33, 25, 31, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14, 17, 24]
 solution : [0, 11, 1, 5, 6]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 26, 33, 25, 31, 3, 8, 7, 19, 21, 9, 22, 2, 23, 20, 15, 14, 17, 24]
 solution : [0, 11, 1, 5, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 26), (24, 14), (25, 20), (26, 0), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, 0)]

Covered at level 9 : {33, 3, 8, 10, 12, 14, 15, 26}

After reduction : 
 pending  : [30, 16, 18, 25, 31, 7, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 7, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 26), (24, 14), (25, 20), (26, 0), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 26), (24, 14), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 7, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]


Solution : [0, 11, 1, 5, 6] has cost 44.


Decide in level 9 among pending : [30, 16, 18, 25, 31, 7, 19, 21, 9, 22, 2, 23, 20, 17, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 26), (24, 14), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, -1)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [30, 16, 18, 25, 31, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6, 7]


New level: 10
 pending : [30, 16, 18, 25, 31, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6, 7]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 26), (24, 14), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 10 : {2, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 6, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 6, 7]


Solution : [0, 11, 1, 5, 6, 7] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 5, 6, 7]

After backtrack at level 10
 pending : [30, 16, 18, 25, 31, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [30, 16, 18, 25, 31, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 26), (24, 14), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 19, 21, 9, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]


Solution : [0, 11, 1, 5, 6] has cost 44.


Decide in level 10 among pending : [30, 16, 18, 25, 31, 19, 21, 9, 22, 2, 23, 20, 17, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 26), (24, 14), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, -1)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [30, 16, 18, 25, 31, 19, 21, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6, 9]


New level: 11
 pending : [30, 16, 18, 25, 31, 19, 21, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6, 9]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 19, 21, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, 32), (23, 26), (24, 14), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 11 : {2, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 6, 9]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 6, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 6, 9]


Solution : [0, 11, 1, 5, 6, 9] has cost 51.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 6, 9]

After backtrack at level 11
 pending : [30, 16, 18, 25, 31, 19, 21, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [30, 16, 18, 25, 31, 19, 21, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 19, 21, 22, 2, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]

Essensial at level 11 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 11 : {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 6, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 6, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 6, 2]


Solution : [0, 11, 1, 5, 6, 2] has cost 51.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 6, 2]

After backtrack at level 11
 pending : [2, 30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]


Before backtrack at level 10
 pending : [2, 30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24]
 solution : [0, 11, 1, 5, 6]

After backtrack at level 10
 pending : [2, 30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9]
 solution : [0, 11, 1, 5, 6]


Before backtrack at level 9
 pending : [2, 30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9]
 solution : [0, 11, 1, 5, 6]

After backtrack at level 9
 pending : [2, 30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9, 10, 12, 26, 33, 3, 8, 15, 14, 7]
 solution : [0, 11, 1, 5, 6]


Invert decision for 6 at level 8


New level: 9
 pending : [2, 30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9, 10, 12, 26, 33, 3, 8, 15, 14, 7]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [2, 30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9, 10, 12, 26, 33, 3, 8, 15, 14, 7]
 solution : [0, 11, 1, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [2, 30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9, 10, 12, 26, 33, 3, 8, 15, 14, 7]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 9 among pending : [2, 30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9, 10, 12, 26, 33, 3, 8, 15, 14, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 2 with phase True at level 9

After decision at level 9
 pending : [30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9, 10, 12, 26, 33, 3, 8, 15, 14, 7]
 solution : [0, 11, 1, 5, 2]


New level: 10
 pending : [30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9, 10, 12, 26, 33, 3, 8, 15, 14, 7]
 solution : [0, 11, 1, 5, 2]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 19, 21, 22, 23, 20, 17, 24, 9, 10, 12, 26, 33, 3, 8, 15, 14, 7]
 solution : [0, 11, 1, 5, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, 0), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, 0), (20, 8), (21, 0), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Covered at level 10 : {9, 19, 21, 7}

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 3, 8, 15, 14]
 solution : [0, 11, 1, 5, 2]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 3, 8, 15, 14]
 solution : [0, 11, 1, 5, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, 0), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, 0), (20, 8), (21, 0), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 3, 8, 15, 14]
 solution : [0, 11, 1, 5, 2]


Solution : [0, 11, 1, 5, 2] has cost 32.


Decide in level 10 among pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 3, 8, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 8, 15, 14]
 solution : [0, 11, 1, 5, 2, 3]


New level: 11
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 8, 15, 14]
 solution : [0, 11, 1, 5, 2, 3]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 8, 15, 14]
 solution : [0, 11, 1, 5, 2, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 8, 10, 12, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 2, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 2, 3]


Solution : [0, 11, 1, 5, 2, 3] has cost 39.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 5, 2, 3]

After backtrack at level 11
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 8, 15, 14]
 solution : [0, 11, 1, 5, 2, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 8, 15, 14]
 solution : [0, 11, 1, 5, 2]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 8, 15, 14]
 solution : [0, 11, 1, 5, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 8, 15, 14]
 solution : [0, 11, 1, 5, 2]


Solution : [0, 11, 1, 5, 2] has cost 32.


Decide in level 11 among pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 8, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 2, 8]


New level: 12
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 2, 8]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 2, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 10, 12, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 2, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 2, 8]


Solution : [0, 11, 1, 5, 2, 8] has cost 39.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 5, 2, 8]

After backtrack at level 12
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 2, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 2]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 2]


Solution : [0, 11, 1, 5, 2] has cost 32.


Decide in level 12 among pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Decide 14 with phase True at level 12

After decision at level 12
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 2, 14]


New level: 13
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 2, 14]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33, 15]
 solution : [0, 11, 1, 5, 2, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 13 : {15}

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Solution : [0, 11, 1, 5, 2, 14] has cost 38.


Decide in level 13 among pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 24, 10, 12, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 24 with phase True at level 13

After decision at level 13
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 24]


New level: 14
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 17, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 24]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 17, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 24]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 3), (17, 0), (18, 4), (19, -1), (20, 1), (21, -1), (22, 1), (23, 9), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

Covered at level 14 : {17}

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 24]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 24]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 3), (17, 0), (18, 4), (19, -1), (20, 1), (21, -1), (22, 1), (23, 9), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 3), (17, -1), (18, 4), (19, -1), (20, 1), (21, -1), (22, 1), (23, 9), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

Covered at level 14 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 24]


Solution : [0, 11, 1, 5, 2, 14, 24] has cost 105.


Before backtrack at level 14
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 24]

After backtrack at level 14
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33, 17]
 solution : [0, 11, 1, 5, 2, 14, 24]


Invert decision for 24 at level 13


New level: 14
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33, 17]
 solution : [0, 11, 1, 5, 2, 14]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33, 17]
 solution : [0, 11, 1, 5, 2, 14]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 3), (17, -1), (18, 4), (19, -1), (20, 1), (21, -1), (22, 1), (23, 9), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33, 17]
 solution : [0, 11, 1, 5, 2, 14]


Solution : [0, 11, 1, 5, 2, 14] has cost 38.


Decide in level 14 among pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 17 with phase True at level 14

After decision at level 14
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 17]


New level: 15
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 17]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, 4), (21, -1), (22, 4), (23, 20), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 17]


Solution : [0, 11, 1, 5, 2, 14, 17] has cost 51.


Before backtrack at level 15
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 17]

After backtrack at level 15
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 17]


Invert decision for 17 at level 14


New level: 15
 pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Before reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, 4), (21, -1), (22, 4), (23, 20), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Solution : [0, 11, 1, 5, 2, 14] has cost 38.


Decide in level 15 among pending : [30, 16, 18, 25, 31, 22, 23, 20, 10, 12, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 31 with phase True at level 15

After decision at level 15
 pending : [30, 16, 18, 25, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 31]


New level: 16
 pending : [30, 16, 18, 25, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 31]


Before reduction : 
 pending  : [30, 16, 18, 25, 22, 23, 20, 10, 12, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 31]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 16 : {33, 16, 18, 20, 22, 23, 25, 26, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 31]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 31]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 31]


Solution : [0, 11, 1, 5, 2, 14, 31] has cost 96.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 31]

After backtrack at level 16
 pending : [10, 12, 30, 16, 18, 25, 22, 23, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 31]


Invert decision for 31 at level 15


New level: 16
 pending : [10, 12, 30, 16, 18, 25, 22, 23, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 25, 22, 23, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 25, 22, 23, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Solution : [0, 11, 1, 5, 2, 14] has cost 38.


Decide in level 16 among pending : [10, 12, 30, 16, 18, 25, 22, 23, 20, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Decide 23 with phase True at level 16

After decision at level 16
 pending : [10, 12, 30, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 23]


New level: 17
 pending : [10, 12, 30, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 23]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 23]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 17 : {33, 16, 18, 20, 22, 25, 26, 30}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 23]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 23]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 23]


Solution : [0, 11, 1, 5, 2, 14, 23] has cost 96.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 23]

After backtrack at level 17
 pending : [10, 12, 30, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 23]


Invert decision for 23 at level 16


New level: 17
 pending : [10, 12, 30, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Before reduction : 
 pending  : [10, 12, 30, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 30, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Solution : [0, 11, 1, 5, 2, 14] has cost 38.


Decide in level 17 among pending : [10, 12, 30, 16, 18, 25, 22, 20, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Decide 30 with phase True at level 17

After decision at level 17
 pending : [10, 12, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 30]


New level: 18
 pending : [10, 12, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 30]


Before reduction : 
 pending  : [10, 12, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 30]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 18 : {33, 16, 18, 20, 22, 25, 26}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 30]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 30]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 30]


Solution : [0, 11, 1, 5, 2, 14, 30] has cost 96.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 30]

After backtrack at level 18
 pending : [10, 12, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14, 30]


Invert decision for 30 at level 17


New level: 18
 pending : [10, 12, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Before reduction : 
 pending  : [10, 12, 16, 18, 25, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]

Essensial at level 18 : {25}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 18 : {33, 16, 18, 20, 22, 26}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 25]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 25]


Solution : [0, 11, 1, 5, 2, 14, 25] has cost 96.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 5, 2, 14, 25]

After backtrack at level 18
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]


Before backtrack at level 17
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 14]

After backtrack at level 17
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30]
 solution : [0, 11, 1, 5, 2, 14]


Before backtrack at level 16
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30]
 solution : [0, 11, 1, 5, 2, 14]

After backtrack at level 16
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23]
 solution : [0, 11, 1, 5, 2, 14]


Before backtrack at level 15
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23]
 solution : [0, 11, 1, 5, 2, 14]

After backtrack at level 15
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 14]


Before backtrack at level 14
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 14]

After backtrack at level 14
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]
 solution : [0, 11, 1, 5, 2, 14]


Before backtrack at level 13
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]
 solution : [0, 11, 1, 5, 2, 14]

After backtrack at level 13
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17, 15, 24]
 solution : [0, 11, 1, 5, 2, 14]


Invert decision for 14 at level 12


New level: 13
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17, 15, 24]
 solution : [0, 11, 1, 5, 2]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17, 15, 24]
 solution : [0, 11, 1, 5, 2]

Essensial at level 13 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17, 24]
 solution : [0, 11, 1, 5, 2, 15]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17, 24]
 solution : [0, 11, 1, 5, 2, 15]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17, 24]
 solution : [0, 11, 1, 5, 2, 15]


Solution : [0, 11, 1, 5, 2, 15] has cost 34.


Decide in level 13 among pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 24 with phase True at level 13

After decision at level 13
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]
 solution : [0, 11, 1, 5, 2, 15, 24]


New level: 14
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]
 solution : [0, 11, 1, 5, 2, 15, 24]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]
 solution : [0, 11, 1, 5, 2, 15, 24]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, 104), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 3), (17, 0), (18, 4), (19, -1), (20, 1), (21, -1), (22, 1), (23, 9), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

Covered at level 14 : {17}

After reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 24]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 24]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 3), (17, 0), (18, 4), (19, -1), (20, 1), (21, -1), (22, 1), (23, 9), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 3), (17, -1), (18, 4), (19, -1), (20, 1), (21, -1), (22, 1), (23, 9), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 24]


Solution : [0, 11, 1, 5, 2, 15, 24] has cost 101.


Before backtrack at level 14
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 24]

After backtrack at level 14
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]
 solution : [0, 11, 1, 5, 2, 15, 24]


Invert decision for 24 at level 13


New level: 14
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]
 solution : [0, 11, 1, 5, 2, 15]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]
 solution : [0, 11, 1, 5, 2, 15]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 3), (17, -1), (18, 4), (19, -1), (20, 1), (21, -1), (22, 1), (23, 9), (24, -1), (25, 9), (26, 1), (27, -1), (28, -1), (29, -1), (30, 9), (31, 16), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]
 solution : [0, 11, 1, 5, 2, 15]


Solution : [0, 11, 1, 5, 2, 15] has cost 34.


Decide in level 14 among pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 17 with phase True at level 14

After decision at level 14
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 17]


New level: 15
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 17]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, 4), (21, -1), (22, 4), (23, 20), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 17]


Solution : [0, 11, 1, 5, 2, 15, 17] has cost 47.


Before backtrack at level 15
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 17]

After backtrack at level 15
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 17]


Invert decision for 17 at level 14


New level: 15
 pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15]


Before reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, 4), (21, -1), (22, 4), (23, 20), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15]


Solution : [0, 11, 1, 5, 2, 15] has cost 34.


Decide in level 15 among pending : [10, 12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 10 with phase True at level 15

After decision at level 15
 pending : [12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 10]


New level: 16
 pending : [12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 10]


Before reduction : 
 pending  : [12, 25, 16, 18, 22, 20, 26, 33, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, 8), (23, 22), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 7), (24, -1), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, 0)]

Covered at level 16 : {33, 12, 16, 18, 20, 22, 26}

After reduction : 
 pending  : [25, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 10]


Before reduction : 
 pending  : [25, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 7), (24, -1), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 7), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [25, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 10]


Solution : [0, 11, 1, 5, 2, 15, 10] has cost 46.


Before backtrack at level 16
 pending : [25, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 10]

After backtrack at level 16
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 15, 10]


Invert decision for 10 at level 15


New level: 16
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 15]


Before reduction : 
 pending  : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 15]

Essensial at level 16 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 7), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 7), (24, -1), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, 0)]

Covered at level 16 : {33, 16, 18, 20, 22, 26}

After reduction : 
 pending  : [25, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 12]


Before reduction : 
 pending  : [25, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 12]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 7), (24, -1), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 7), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [25, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 12]


Solution : [0, 11, 1, 5, 2, 15, 12] has cost 46.


Before backtrack at level 16
 pending : [25, 30, 23, 31]
 solution : [0, 11, 1, 5, 2, 15, 12]

After backtrack at level 16
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 15]


Before backtrack at level 15
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33]
 solution : [0, 11, 1, 5, 2, 15]

After backtrack at level 15
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10]
 solution : [0, 11, 1, 5, 2, 15]


Before backtrack at level 14
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10]
 solution : [0, 11, 1, 5, 2, 15]

After backtrack at level 14
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17]
 solution : [0, 11, 1, 5, 2, 15]


Before backtrack at level 13
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17]
 solution : [0, 11, 1, 5, 2, 15]

After backtrack at level 13
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24]
 solution : [0, 11, 1, 5, 2]


Before backtrack at level 12
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24]
 solution : [0, 11, 1, 5, 2]

After backtrack at level 12
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14]
 solution : [0, 11, 1, 5, 2]


Before backtrack at level 11
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14]
 solution : [0, 11, 1, 5, 2]

After backtrack at level 11
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8]
 solution : [0, 11, 1, 5, 2]


Before backtrack at level 10
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8]
 solution : [0, 11, 1, 5, 2]

After backtrack at level 10
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5, 2]


Invert decision for 2 at level 9


New level: 10
 pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 7), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 10 among pending : [25, 30, 23, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 23 with phase True at level 10

After decision at level 10
 pending : [25, 30, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5, 23]


New level: 11
 pending : [25, 30, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5, 23]


Before reduction : 
 pending  : [25, 30, 31, 12, 16, 18, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5, 23]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, 128), (24, 128), (25, 96), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 0), (17, 2), (18, 0), (19, 32), (20, 64), (21, 32), (22, 64), (23, -1), (24, 5), (25, 0), (26, 8), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 8)]

Covered at level 11 : {16, 18, 25, 30, 31}

After reduction : 
 pending  : [12, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5, 23]


Before reduction : 
 pending  : [12, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5, 23]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 0), (17, 2), (18, 0), (19, 32), (20, 64), (21, 32), (22, 64), (23, -1), (24, 5), (25, 0), (26, 8), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, -1), (17, 2), (18, -1), (19, 32), (20, 1), (21, 32), (22, 1), (23, -1), (24, 5), (25, -1), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5, 23]


Solution : [0, 11, 1, 5, 23] has cost 83.


Before backtrack at level 11
 pending : [12, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3]
 solution : [0, 11, 1, 5, 23]

After backtrack at level 11
 pending : [12, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 23]


Invert decision for 23 at level 10


New level: 11
 pending : [12, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [12, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, -1), (17, 2), (18, -1), (19, 32), (20, 1), (21, 32), (22, 1), (23, -1), (24, 5), (25, -1), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, -1), (24, 128), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 11 among pending : [12, 22, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, -1), (24, 128), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 22 with phase True at level 11

After decision at level 11
 pending : [12, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22]


New level: 12
 pending : [12, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22]


Before reduction : 
 pending  : [12, 20, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, 128), (23, -1), (24, 128), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, 0), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

Covered at level 12 : {20}

After reduction : 
 pending  : [12, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22]


Before reduction : 
 pending  : [12, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, 0), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [12, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22]


Solution : [0, 11, 1, 5, 22] has cost 38.


Decide in level 12 among pending : [12, 26, 33, 10, 17, 15, 24, 14, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

Decide 14 with phase True at level 12

After decision at level 12
 pending : [12, 26, 33, 10, 17, 15, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 14]


New level: 13
 pending : [12, 26, 33, 10, 17, 15, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 14]


Before reduction : 
 pending  : [12, 26, 33, 10, 17, 15, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 17), (25, 64), (26, 0), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 0)]

Covered at level 13 : {33, 26, 15}

After reduction : 
 pending  : [12, 10, 17, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 14]


Before reduction : 
 pending  : [12, 10, 17, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 17), (25, 64), (26, 0), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 17), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [12, 10, 17, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 14]


Solution : [0, 11, 1, 5, 22, 14] has cost 44.


Before backtrack at level 13
 pending : [12, 10, 17, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 14]

After backtrack at level 13
 pending : [12, 10, 17, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 14]


Invert decision for 14 at level 12


New level: 13
 pending : [12, 10, 17, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18, 26, 33, 15]
 solution : [0, 11, 1, 5, 22]


Before reduction : 
 pending  : [12, 10, 17, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18, 26, 33, 15]
 solution : [0, 11, 1, 5, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 128), (8, 32), (9, 128), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 32), (17, 2), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 17), (25, 64), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [12, 10, 17, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18, 26, 33, 15]
 solution : [0, 11, 1, 5, 22]


Solution : [0, 11, 1, 5, 22] has cost 38.


Decide in level 13 among pending : [12, 10, 17, 24, 8, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18, 26, 33, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [12, 10, 17, 24, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 8]


New level: 14
 pending : [12, 10, 17, 24, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 8]


Before reduction : 
 pending  : [12, 10, 17, 24, 19, 21, 9, 7, 3, 25, 30, 31, 16, 18, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 4), (17, 0), (18, 4), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 2), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, 0)]

Covered at level 14 : {33, 3, 10, 12, 15, 17, 26}

After reduction : 
 pending  : [24, 19, 21, 9, 7, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 8]


Before reduction : 
 pending  : [24, 19, 21, 9, 7, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 4), (17, 0), (18, 4), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 2), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, -1), (18, 4), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 2), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [24, 19, 21, 9, 7, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 8]


Solution : [0, 11, 1, 5, 22, 8] has cost 45.


Before backtrack at level 14
 pending : [24, 19, 21, 9, 7, 25, 30, 31, 16, 18]
 solution : [0, 11, 1, 5, 22, 8]

After backtrack at level 14
 pending : [24, 19, 21, 9, 7, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [24, 19, 21, 9, 7, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22]


Before reduction : 
 pending  : [24, 19, 21, 9, 7, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, -1), (18, 4), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 2), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [24, 19, 21, 9, 7, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22]


Solution : [0, 11, 1, 5, 22] has cost 38.


Decide in level 14 among pending : [24, 19, 21, 9, 7, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [24, 19, 21, 7, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 9]


New level: 15
 pending : [24, 19, 21, 7, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 9]


Before reduction : 
 pending  : [24, 19, 21, 7, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 32), (17, 16), (18, 18), (19, 8), (20, -1), (21, 8), (22, -1), (23, -1), (24, 76), (25, 64), (26, 8), (27, -1), (28, -1), (29, -1), (30, 64), (31, 37), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, 76), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, 8)]

Covered at level 15 : {19, 21, 7}

After reduction : 
 pending  : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 9]


Before reduction : 
 pending  : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, 76), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 76), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 9]


Solution : [0, 11, 1, 5, 22, 9] has cost 45.


Before backtrack at level 15
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 9]

After backtrack at level 15
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 19, 21, 7]
 solution : [0, 11, 1, 5, 22, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 19, 21, 7]
 solution : [0, 11, 1, 5, 22]


Before reduction : 
 pending  : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 19, 21, 7]
 solution : [0, 11, 1, 5, 22]

Essensial at level 15 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 76), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, 76), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, 8)]

Covered at level 15 : {19, 21}

After reduction : 
 pending  : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 7]


Before reduction : 
 pending  : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 4), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, 76), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 28), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 7]


Solution : [0, 11, 1, 5, 22, 7] has cost 57.


Before backtrack at level 15
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15]
 solution : [0, 11, 1, 5, 22, 7]

After backtrack at level 15
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21]
 solution : [0, 11, 1, 5, 22]


Before backtrack at level 14
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21]
 solution : [0, 11, 1, 5, 22]

After backtrack at level 14
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9]
 solution : [0, 11, 1, 5, 22]


Before backtrack at level 13
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9]
 solution : [0, 11, 1, 5, 22]

After backtrack at level 13
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8]
 solution : [0, 11, 1, 5, 22]


Before backtrack at level 12
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8]
 solution : [0, 11, 1, 5, 22]

After backtrack at level 12
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5, 22]


Invert decision for 22 at level 11


New level: 12
 pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 28), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, 16), (31, 13), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, -1), (23, -1), (24, 128), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 12 among pending : [24, 25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, -1), (23, -1), (24, 128), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 24 with phase True at level 12

After decision at level 12
 pending : [25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5, 24]


New level: 13
 pending : [25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5, 24]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 12, 10, 17, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5, 24]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, -1), (23, -1), (24, 128), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 0), (18, 16), (19, 32), (20, 64), (21, 32), (22, -1), (23, -1), (24, -1), (25, 40), (26, 4), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 4)]

Covered at level 13 : {17}

After reduction : 
 pending  : [25, 30, 31, 16, 18, 12, 10, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5, 24]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 12, 10, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5, 24]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, 0), (18, 16), (19, 32), (20, 64), (21, 32), (22, -1), (23, -1), (24, -1), (25, 40), (26, 4), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, -1), (18, 16), (19, 32), (20, 64), (21, 32), (22, -1), (23, -1), (24, -1), (25, 40), (26, 4), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [25, 30, 31, 16, 18, 12, 10, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5, 24]


Solution : [0, 11, 1, 5, 24] has cost 92.


Before backtrack at level 13
 pending : [25, 30, 31, 16, 18, 12, 10, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14]
 solution : [0, 11, 1, 5, 24]

After backtrack at level 13
 pending : [25, 30, 31, 16, 18, 12, 10, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14, 17]
 solution : [0, 11, 1, 5, 24]


Invert decision for 24 at level 12


New level: 13
 pending : [25, 30, 31, 16, 18, 12, 10, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14, 17]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 12, 10, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14, 17]
 solution : [0, 11, 1, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 16), (17, -1), (18, 16), (19, 32), (20, 64), (21, 32), (22, -1), (23, -1), (24, -1), (25, 40), (26, 4), (27, -1), (28, -1), (29, -1), (30, 40), (31, 64), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, -1), (23, -1), (24, -1), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [25, 30, 31, 16, 18, 12, 10, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14, 17]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 13 among pending : [25, 30, 31, 16, 18, 12, 10, 3, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, -1), (23, -1), (24, -1), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [25, 30, 31, 16, 18, 12, 10, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14, 17]
 solution : [0, 11, 1, 5, 3]


New level: 14
 pending : [25, 30, 31, 16, 18, 12, 10, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14, 17]
 solution : [0, 11, 1, 5, 3]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 12, 10, 26, 33, 15, 7, 19, 21, 9, 8, 20, 14, 17]
 solution : [0, 11, 1, 5, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, -1), (23, -1), (24, -1), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, -1), (23, -1), (24, -1), (25, 20), (26, 0), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, 0)]

Covered at level 14 : {33, 8, 10, 12, 14, 15, 26}

After reduction : 
 pending  : [25, 30, 31, 16, 18, 7, 19, 21, 9, 20, 17]
 solution : [0, 11, 1, 5, 3]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 7, 19, 21, 9, 20, 17]
 solution : [0, 11, 1, 5, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, 128), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, -1), (23, -1), (24, -1), (25, 20), (26, 0), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [25, 30, 31, 16, 18, 7, 19, 21, 9, 20, 17]
 solution : [0, 11, 1, 5, 3]


Solution : [0, 11, 1, 5, 3] has cost 32.


Decide in level 14 among pending : [25, 30, 31, 16, 18, 7, 19, 21, 9, 20, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, -1)]

Decide 7 with phase True at level 14

After decision at level 14
 pending : [25, 30, 31, 16, 18, 19, 21, 9, 20, 17]
 solution : [0, 11, 1, 5, 3, 7]


New level: 15
 pending : [25, 30, 31, 16, 18, 19, 21, 9, 20, 17]
 solution : [0, 11, 1, 5, 3, 7]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 19, 21, 9, 20, 17]
 solution : [0, 11, 1, 5, 3, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 4), (18, 16), (19, 32), (20, 32), (21, 32), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, 20), (31, 20), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 15 : {9, 16, 17, 18, 19, 20, 21, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 3, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 3, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 3, 7]


Solution : [0, 11, 1, 5, 3, 7] has cost 51.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 5, 3, 7]

After backtrack at level 15
 pending : [25, 30, 31, 16, 18, 19, 21, 9, 20, 17]
 solution : [0, 11, 1, 5, 3, 7]


Invert decision for 7 at level 14


New level: 15
 pending : [25, 30, 31, 16, 18, 19, 21, 9, 20, 17]
 solution : [0, 11, 1, 5, 3]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 19, 21, 9, 20, 17]
 solution : [0, 11, 1, 5, 3]

Essensial at level 15 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 15 : {16, 17, 18, 19, 20, 21, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 3, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 3, 9]


Solution : [0, 11, 1, 5, 3, 9] has cost 39.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 5, 3, 9]

After backtrack at level 15
 pending : [9, 25, 30, 31, 16, 18, 19, 21, 20, 17]
 solution : [0, 11, 1, 5, 3]


Before backtrack at level 14
 pending : [9, 25, 30, 31, 16, 18, 19, 21, 20, 17]
 solution : [0, 11, 1, 5, 3]

After backtrack at level 14
 pending : [9, 25, 30, 31, 16, 18, 19, 21, 20, 17, 12, 10, 26, 33, 15, 8, 14, 7]
 solution : [0, 11, 1, 5, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [9, 25, 30, 31, 16, 18, 19, 21, 20, 17, 12, 10, 26, 33, 15, 8, 14, 7]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [9, 25, 30, 31, 16, 18, 19, 21, 20, 17, 12, 10, 26, 33, 15, 8, 14, 7]
 solution : [0, 11, 1, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, -1), (23, -1), (24, -1), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 25, 30, 31, 16, 18, 19, 21, 20, 17, 12, 10, 26, 33, 15, 8, 14, 7]
 solution : [0, 11, 1, 5]


Solution : [0, 11, 1, 5] has cost 25.


Decide in level 14 among pending : [9, 25, 30, 31, 16, 18, 19, 21, 20, 17, 12, 10, 26, 33, 15, 8, 14, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, -1), (23, -1), (24, -1), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [25, 30, 31, 16, 18, 19, 21, 20, 17, 12, 10, 26, 33, 15, 8, 14, 7]
 solution : [0, 11, 1, 5, 9]


New level: 15
 pending : [25, 30, 31, 16, 18, 19, 21, 20, 17, 12, 10, 26, 33, 15, 8, 14, 7]
 solution : [0, 11, 1, 5, 9]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 19, 21, 20, 17, 12, 10, 26, 33, 15, 8, 14, 7]
 solution : [0, 11, 1, 5, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, 128), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 52), (17, 64), (18, 66), (19, 32), (20, 128), (21, 32), (22, -1), (23, -1), (24, -1), (25, 80), (26, 32), (27, -1), (28, -1), (29, -1), (30, 80), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, 0), (20, 8), (21, 0), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Covered at level 15 : {19, 21, 7}

After reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 8, 14]
 solution : [0, 11, 1, 5, 9]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 8, 14]
 solution : [0, 11, 1, 5, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, 0), (20, 8), (21, 0), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Covered at level 15 : set()

After reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 8, 14]
 solution : [0, 11, 1, 5, 9]


Solution : [0, 11, 1, 5, 9] has cost 32.


Decide in level 15 among pending : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 9, 8]


New level: 16
 pending : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 9, 8]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 9, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 10, 12, 14, 15, 16, 17, 18, 20, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 9, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 5, 9, 8]


Solution : [0, 11, 1, 5, 9, 8] has cost 39.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 5, 9, 8]

After backtrack at level 16
 pending : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 9, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 9]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Covered at level 16 : set()

After reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 14]
 solution : [0, 11, 1, 5, 9]


Solution : [0, 11, 1, 5, 9] has cost 32.


Decide in level 16 among pending : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Decide 14 with phase True at level 16

After decision at level 16
 pending : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 9, 14]


New level: 17
 pending : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 9, 14]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33, 15]
 solution : [0, 11, 1, 5, 9, 14]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 17 : {15}

After reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]


Solution : [0, 11, 1, 5, 9, 14] has cost 38.


Decide in level 17 among pending : [25, 30, 31, 16, 18, 20, 17, 12, 10, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 17 with phase True at level 17

After decision at level 17
 pending : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 17]


New level: 18
 pending : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 17]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Covered at level 18 : set()

After reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 17]


Solution : [0, 11, 1, 5, 9, 14, 17] has cost 51.


Before backtrack at level 18
 pending : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 17]

After backtrack at level 18
 pending : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 17]


Invert decision for 17 at level 17


New level: 18
 pending : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]


Before reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]


Solution : [0, 11, 1, 5, 9, 14] has cost 38.


Decide in level 18 among pending : [25, 30, 31, 16, 18, 20, 12, 10, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 31 with phase True at level 18

After decision at level 18
 pending : [25, 30, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 31]


New level: 19
 pending : [25, 30, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 31]


Before reduction : 
 pending  : [25, 30, 16, 18, 20, 12, 10, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 31]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 19 : {33, 16, 18, 20, 25, 26, 30}

After reduction : 
 pending  : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 31]


Before reduction : 
 pending  : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 31]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 31]


Solution : [0, 11, 1, 5, 9, 14, 31] has cost 96.


Before backtrack at level 19
 pending : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 31]

After backtrack at level 19
 pending : [12, 10, 25, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 31]


Invert decision for 31 at level 18


New level: 19
 pending : [12, 10, 25, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]


Before reduction : 
 pending  : [12, 10, 25, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Covered at level 19 : set()

After reduction : 
 pending  : [12, 10, 25, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]


Solution : [0, 11, 1, 5, 9, 14] has cost 38.


Decide in level 19 among pending : [12, 10, 25, 30, 16, 18, 20, 26, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

Decide 25 with phase True at level 19

After decision at level 19
 pending : [12, 10, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 25]


New level: 20
 pending : [12, 10, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 25]


Before reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 25]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, -1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

Covered at level 20 : {33, 16, 18, 20, 26, 30}

After reduction : 
 pending  : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 25]


Before reduction : 
 pending  : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 25]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 25]


Solution : [0, 11, 1, 5, 9, 14, 25] has cost 96.


Before backtrack at level 20
 pending : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 25]

After backtrack at level 20
 pending : [12, 10, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14, 25]


Invert decision for 25 at level 19


New level: 20
 pending : [12, 10, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]


Before reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]

Essensial at level 20 : {30}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 20 : {33, 16, 18, 20, 26}

After reduction : 
 pending  : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 30]


Before reduction : 
 pending  : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 30]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 30]


Solution : [0, 11, 1, 5, 9, 14, 30] has cost 96.


Before backtrack at level 20
 pending : [12, 10]
 solution : [0, 11, 1, 5, 9, 14, 30]

After backtrack at level 20
 pending : [12, 10, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]


Before backtrack at level 19
 pending : [12, 10, 30, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 14]

After backtrack at level 19
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25]
 solution : [0, 11, 1, 5, 9, 14]


Before backtrack at level 18
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25]
 solution : [0, 11, 1, 5, 9, 14]

After backtrack at level 18
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 14]


Before backtrack at level 17
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 14]

After backtrack at level 17
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31, 15, 17]
 solution : [0, 11, 1, 5, 9, 14]


Invert decision for 14 at level 16


New level: 17
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31, 15, 17]
 solution : [0, 11, 1, 5, 9]


Before reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31, 15, 17]
 solution : [0, 11, 1, 5, 9]

Essensial at level 17 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31, 17]
 solution : [0, 11, 1, 5, 9, 15]


Before reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31, 17]
 solution : [0, 11, 1, 5, 9, 15]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31, 17]
 solution : [0, 11, 1, 5, 9, 15]


Solution : [0, 11, 1, 5, 9, 15] has cost 34.


Decide in level 17 among pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 17 with phase True at level 17

After decision at level 17
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 17]


New level: 18
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 17]


Before reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

Covered at level 18 : set()

After reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 17]


Solution : [0, 11, 1, 5, 9, 15, 17] has cost 47.


Before backtrack at level 18
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 17]

After backtrack at level 18
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 17]


Invert decision for 17 at level 17


New level: 18
 pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15]


Before reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, 8), (19, -1), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 4), (27, -1), (28, -1), (29, -1), (30, 18), (31, 19), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15]


Solution : [0, 11, 1, 5, 9, 15] has cost 34.


Decide in level 18 among pending : [12, 10, 30, 16, 18, 20, 26, 33, 25, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

Decide 12 with phase True at level 18

After decision at level 18
 pending : [10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 12]


New level: 19
 pending : [10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 12]


Before reduction : 
 pending  : [10, 30, 16, 18, 20, 26, 33, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 12]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 8), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, 0)]

Covered at level 19 : {33, 10, 16, 18, 20, 26}

After reduction : 
 pending  : [30, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 12]


Before reduction : 
 pending  : [30, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 12]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [30, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 12]


Solution : [0, 11, 1, 5, 9, 15, 12] has cost 46.


Before backtrack at level 19
 pending : [30, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 12]

After backtrack at level 19
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 15, 12]


Invert decision for 12 at level 18


New level: 19
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 15]


Before reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 15]

Essensial at level 19 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, 0)]

Covered at level 19 : {33, 16, 18, 20, 26}

After reduction : 
 pending  : [30, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 10]


Before reduction : 
 pending  : [30, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 8), (26, 0), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [30, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 10]


Solution : [0, 11, 1, 5, 9, 15, 10] has cost 46.


Before backtrack at level 19
 pending : [30, 25, 31]
 solution : [0, 11, 1, 5, 9, 15, 10]

After backtrack at level 19
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 15]


Before backtrack at level 18
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33]
 solution : [0, 11, 1, 5, 9, 15]

After backtrack at level 18
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12]
 solution : [0, 11, 1, 5, 9, 15]


Before backtrack at level 17
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12]
 solution : [0, 11, 1, 5, 9, 15]

After backtrack at level 17
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17]
 solution : [0, 11, 1, 5, 9]


Before backtrack at level 16
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17]
 solution : [0, 11, 1, 5, 9]

After backtrack at level 16
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14]
 solution : [0, 11, 1, 5, 9]


Before backtrack at level 15
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14]
 solution : [0, 11, 1, 5, 9]

After backtrack at level 15
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 19, 21, 7, 8]
 solution : [0, 11, 1, 5, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 19, 21, 7, 8]
 solution : [0, 11, 1, 5]


Before reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 19, 21, 7, 8]
 solution : [0, 11, 1, 5]

Essensial at level 15 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 7), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, 0), (20, 8), (21, 0), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Covered at level 15 : {19, 21}

After reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8]
 solution : [0, 11, 1, 5, 7]


Before reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8]
 solution : [0, 11, 1, 5, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, 0), (20, 8), (21, 0), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

Covered at level 15 : set()

After reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8]
 solution : [0, 11, 1, 5, 7]


Solution : [0, 11, 1, 5, 7] has cost 44.


Before backtrack at level 15
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8]
 solution : [0, 11, 1, 5, 7]

After backtrack at level 15
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21]
 solution : [0, 11, 1, 5]


Before backtrack at level 14
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21]
 solution : [0, 11, 1, 5]

After backtrack at level 14
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9]
 solution : [0, 11, 1, 5]


Before backtrack at level 13
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9]
 solution : [0, 11, 1, 5]

After backtrack at level 13
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3]
 solution : [0, 11, 1, 5]


Before backtrack at level 12
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3]
 solution : [0, 11, 1, 5]

After backtrack at level 12
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24]
 solution : [0, 11, 1, 5]


Before backtrack at level 11
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24]
 solution : [0, 11, 1, 5]

After backtrack at level 11
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22]
 solution : [0, 11, 1, 5]


Before backtrack at level 10
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22]
 solution : [0, 11, 1, 5]

After backtrack at level 10
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23]
 solution : [0, 11, 1, 5]


Before backtrack at level 9
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23]
 solution : [0, 11, 1, 5]

After backtrack at level 9
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2]
 solution : [0, 11, 1, 5]


Before backtrack at level 8
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2]
 solution : [0, 11, 1, 5]

After backtrack at level 8
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6]
 solution : [0, 11, 1, 5]


Before backtrack at level 7
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6]
 solution : [0, 11, 1, 5]

After backtrack at level 7
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28]
 solution : [0, 11, 1, 5]


Before backtrack at level 6
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28]
 solution : [0, 11, 1, 5]

After backtrack at level 6
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27]
 solution : [0, 11, 1, 5]


Before backtrack at level 5
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27]
 solution : [0, 11, 1, 5]

After backtrack at level 5
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29]
 solution : [0, 11, 1, 5]


Before backtrack at level 4
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29]
 solution : [0, 11, 1, 5]

After backtrack at level 4
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13]
 solution : [0, 11, 1, 5]


Before backtrack at level 3
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13]
 solution : [0, 11, 1, 5]

After backtrack at level 3
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32, 4]
 solution : [0, 11, 1, 5]


Invert decision for 5 at level 2


New level: 3
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32, 4]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32, 4]
 solution : [0, 11, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, 128), (15, 64), (16, 10), (17, 64), (18, 12), (19, -1), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 18), (26, 32), (27, -1), (28, -1), (29, -1), (30, 18), (31, 22), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, -1), (6, 264), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 112), (17, 64), (18, 72), (19, 64), (20, 128), (21, 128), (22, 256), (23, 256), (24, 160), (25, 102), (26, 128), (27, 384), (28, 420), (29, 192), (30, 456), (31, 232), (32, 128), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32, 4]
 solution : [0, 11, 1]


Solution : [0, 11, 1] has cost 11.


Decide in level 3 among pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32, 4]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, -1), (6, 264), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 112), (17, 64), (18, 72), (19, 64), (20, 128), (21, 128), (22, 256), (23, 256), (24, 160), (25, 102), (26, 128), (27, 384), (28, 420), (29, 192), (30, 456), (31, 232), (32, 128), (33, 256)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32]
 solution : [0, 11, 1, 4]


New level: 4
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32]
 solution : [0, 11, 1, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, -1), (6, 264), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 112), (17, 64), (18, 72), (19, 64), (20, 128), (21, 128), (22, 256), (23, 256), (24, 160), (25, 102), (26, 128), (27, 384), (28, 420), (29, 192), (30, 456), (31, 232), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, -1), (6, 258), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 48), (17, 16), (18, 24), (19, 64), (20, 128), (21, 128), (22, 256), (23, 48), (24, 16), (25, 24), (26, 128), (27, 40), (28, 48), (29, 20), (30, 116), (31, 60), (32, 128), (33, 256)]

Covered at level 4 : set()

After reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 39.


Decide in level 4 among pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 9, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, -1), (6, 258), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 48), (17, 16), (18, 24), (19, 64), (20, 128), (21, 128), (22, 256), (23, 48), (24, 16), (25, 24), (26, 128), (27, 40), (28, 48), (29, 20), (30, 116), (31, 60), (32, 128), (33, 256)]

Decide 9 with phase True at level 4

After decision at level 4
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32]
 solution : [0, 11, 1, 4, 9]


New level: 5
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 7, 19, 21, 3, 24, 22, 23, 2, 6, 28, 27, 29, 13, 32]
 solution : [0, 11, 1, 4, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, -1), (6, 258), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 48), (17, 16), (18, 24), (19, 64), (20, 128), (21, 128), (22, 256), (23, 48), (24, 16), (25, 24), (26, 128), (27, 40), (28, 48), (29, 20), (30, 116), (31, 60), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 512), (4, -1), (5, -1), (6, 258), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 10), (17, 4), (18, 6), (19, 0), (20, 4), (21, 0), (22, 8), (23, 10), (24, 4), (25, 5), (26, 128), (27, 0), (28, 12), (29, 0), (30, 25), (31, 15), (32, 32), (33, 256)]

Covered at level 5 : {2, 7, 19, 21, 27, 29}

After reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 3, 24, 22, 23, 6, 28, 13, 32]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 3, 24, 22, 23, 6, 28, 13, 32]
 solution : [0, 11, 1, 4, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 512), (4, -1), (5, -1), (6, 258), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 10), (17, 4), (18, 6), (19, 0), (20, 4), (21, 0), (22, 8), (23, 10), (24, 4), (25, 5), (26, 128), (27, 0), (28, 12), (29, 0), (30, 25), (31, 15), (32, 32), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 10), (17, 4), (18, 6), (19, -1), (20, 4), (21, -1), (22, 8), (23, 10), (24, 4), (25, 5), (26, 128), (27, -1), (28, 12), (29, -1), (30, 25), (31, 15), (32, 32), (33, 256)]

Covered at level 5 : set()

After reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 3, 24, 22, 23, 6, 28, 13, 32]
 solution : [0, 11, 1, 4, 9]


Solution : [0, 11, 1, 4, 9] has cost 46.


Before backtrack at level 5
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 3, 24, 22, 23, 6, 28, 13, 32]
 solution : [0, 11, 1, 4, 9]

After backtrack at level 5
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 3, 24, 22, 23, 6, 28, 13, 32, 7, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 4, 9]


Invert decision for 9 at level 4


New level: 5
 pending : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 3, 24, 22, 23, 6, 28, 13, 32, 7, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 3, 24, 22, 23, 6, 28, 13, 32, 7, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 4]

Essensial at level 5 : {3, 7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 10), (17, 4), (18, 6), (19, -1), (20, 4), (21, -1), (22, 8), (23, 10), (24, 4), (25, 5), (26, 128), (27, -1), (28, 12), (29, -1), (30, 25), (31, 15), (32, 32), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 5 : {2, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 7]


Solution : [0, 11, 1, 4, 3, 7] has cost 65.


Before backtrack at level 5
 pending : []
 solution : [0, 11, 1, 4, 3, 7]

After backtrack at level 5
 pending : [3, 7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 4]


Before backtrack at level 4
 pending : [3, 7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 4]

After backtrack at level 4
 pending : [3, 7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [3, 7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [3, 7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, -1), (6, 264), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 112), (17, 64), (18, 72), (19, 64), (20, 128), (21, 128), (22, 256), (23, 256), (24, 160), (25, 102), (26, 128), (27, 384), (28, 420), (29, 192), (30, 456), (31, 232), (32, 128), (33, 256)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1]


Solution : [0, 11, 1] has cost 11.


Decide in level 4 among pending : [3, 7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, -1), (6, 264), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 112), (17, 64), (18, 72), (19, 64), (20, 128), (21, 128), (22, 256), (23, 256), (24, 160), (25, 102), (26, 128), (27, 384), (28, 420), (29, 192), (30, 456), (31, 232), (32, 128), (33, 256)]

Decide 3 with phase True at level 4

After decision at level 4
 pending : [7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1, 3]


New level: 5
 pending : [7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1, 3]


Before reduction : 
 pending  : [7, 30, 25, 31, 10, 16, 18, 20, 26, 33, 12, 15, 17, 14, 8, 24, 22, 23, 6, 28, 13, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, -1), (6, 264), (7, 320), (8, 128), (9, 512), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 112), (17, 64), (18, 72), (19, 64), (20, 128), (21, 128), (22, 256), (23, 256), (24, 160), (25, 102), (26, 128), (27, 384), (28, 420), (29, 192), (30, 456), (31, 232), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, 288), (8, 0), (9, 512), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 28), (17, 8), (18, 24), (19, 64), (20, 64), (21, 128), (22, 128), (23, 52), (24, 22), (25, 20), (26, 2), (27, 384), (28, 57), (29, 192), (30, 89), (31, 53), (32, 32), (33, 8)]

Covered at level 5 : {6, 8, 10, 12, 13, 14, 15}

After reduction : 
 pending  : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1, 3]


Before reduction : 
 pending  : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, 288), (8, 0), (9, 512), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 28), (17, 8), (18, 24), (19, 64), (20, 64), (21, 128), (22, 128), (23, 52), (24, 22), (25, 20), (26, 2), (27, 384), (28, 57), (29, 192), (30, 89), (31, 53), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 288), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 8), (18, 24), (19, 64), (20, 64), (21, 128), (22, 128), (23, 52), (24, 22), (25, 20), (26, 2), (27, 384), (28, 57), (29, 192), (30, 89), (31, 53), (32, 32), (33, 8)]

Covered at level 5 : set()

After reduction : 
 pending  : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29, 9]
 solution : [0, 11, 1, 3]


Solution : [0, 11, 1, 3] has cost 18.


Decide in level 5 among pending : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 288), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 8), (18, 24), (19, 64), (20, 64), (21, 128), (22, 128), (23, 52), (24, 22), (25, 20), (26, 2), (27, 384), (28, 57), (29, 192), (30, 89), (31, 53), (32, 32), (33, 8)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 3, 9]


New level: 6
 pending : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 3, 9]


Before reduction : 
 pending  : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 3, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 288), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 8), (18, 24), (19, 64), (20, 64), (21, 128), (22, 128), (23, 52), (24, 22), (25, 20), (26, 2), (27, 384), (28, 57), (29, 192), (30, 89), (31, 53), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {2, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 3, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 3, 9]


Solution : [0, 11, 1, 3, 9] has cost 25.


Before backtrack at level 6
 pending : []
 solution : [0, 11, 1, 3, 9]

After backtrack at level 6
 pending : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 3, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 3]


Before reduction : 
 pending  : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 3]

Essensial at level 6 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {2, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 3, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 3, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 3, 7]


Solution : [0, 11, 1, 3, 7] has cost 37.


Before backtrack at level 6
 pending : []
 solution : [0, 11, 1, 3, 7]

After backtrack at level 6
 pending : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 3]


Before backtrack at level 5
 pending : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29]
 solution : [0, 11, 1, 3]

After backtrack at level 5
 pending : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29, 10, 12, 15, 14, 8, 6, 13, 9]
 solution : [0, 11, 1, 3]


Invert decision for 3 at level 4


New level: 5
 pending : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29, 10, 12, 15, 14, 8, 6, 13, 9]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [7, 30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 19, 21, 2, 27, 29, 10, 12, 15, 14, 8, 6, 13, 9]
 solution : [0, 11, 1]

Essensial at level 5 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 258), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 20), (17, 64), (18, 12), (19, 0), (20, 16), (21, 0), (22, 32), (23, 44), (24, 112), (25, 18), (26, 128), (27, 10), (28, 393), (29, 5), (30, 77), (31, 49), (32, 32), (33, 256)]

Covered at level 5 : {2, 19, 21, 7}

After reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 27, 29, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 27, 29, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 258), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 20), (17, 64), (18, 12), (19, 0), (20, 16), (21, 0), (22, 32), (23, 44), (24, 112), (25, 18), (26, 128), (27, 10), (28, 393), (29, 5), (30, 77), (31, 49), (32, 32), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 20), (17, 64), (18, 12), (19, -1), (20, 16), (21, -1), (22, 32), (23, 44), (24, 112), (25, 18), (26, 128), (27, 10), (28, 393), (29, 5), (30, 77), (31, 49), (32, 32), (33, 256)]

Covered at level 5 : set()

After reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 27, 29, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 18.


Decide in level 5 among pending : [30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 28, 32, 27, 29, 10, 12, 15, 14, 8, 6, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 20), (17, 64), (18, 12), (19, -1), (20, 16), (21, -1), (22, 32), (23, 44), (24, 112), (25, 18), (26, 128), (27, 10), (28, 393), (29, 5), (30, 77), (31, 49), (32, 32), (33, 256)]

Decide 28 with phase True at level 5

After decision at level 5
 pending : [30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 32, 27, 29, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9, 28]


New level: 6
 pending : [30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 32, 27, 29, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9, 28]


Before reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 17, 24, 22, 23, 32, 27, 29, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 20), (17, 64), (18, 12), (19, -1), (20, 16), (21, -1), (22, 32), (23, 44), (24, 112), (25, 18), (26, 128), (27, 10), (28, 393), (29, 5), (30, 77), (31, 49), (32, 32), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 257), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 6), (17, 0), (18, 4), (19, -1), (20, 2), (21, -1), (22, 4), (23, 18), (24, 0), (25, 9), (26, 16), (27, 0), (28, -1), (29, 0), (30, 36), (31, 32), (32, 8), (33, 64)]

Covered at level 6 : {24, 17, 27, 29}

After reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9, 28]


Before reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 257), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 6), (17, 0), (18, 4), (19, -1), (20, 2), (21, -1), (22, 4), (23, 18), (24, 0), (25, 9), (26, 16), (27, 0), (28, -1), (29, 0), (30, 36), (31, 32), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 257), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 6), (17, -1), (18, 4), (19, -1), (20, 2), (21, -1), (22, 4), (23, 18), (24, -1), (25, 9), (26, 16), (27, -1), (28, -1), (29, -1), (30, 36), (31, 32), (32, 8), (33, 64)]

Covered at level 6 : set()

After reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9, 28]


Solution : [0, 11, 1, 9, 28] has cost 76.


Before backtrack at level 6
 pending : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 6, 13]
 solution : [0, 11, 1, 9, 28]

After backtrack at level 6
 pending : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 6, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9, 28]


Invert decision for 28 at level 5


New level: 6
 pending : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 6, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 6, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 257), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 6), (17, -1), (18, 4), (19, -1), (20, 2), (21, -1), (22, 4), (23, 18), (24, -1), (25, 9), (26, 16), (27, -1), (28, -1), (29, -1), (30, 36), (31, 32), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 20), (17, 64), (18, 12), (19, -1), (20, 16), (21, -1), (22, 32), (23, 44), (24, 112), (25, 18), (26, 128), (27, 10), (28, -1), (29, 5), (30, 77), (31, 49), (32, 32), (33, 256)]

Covered at level 6 : set()

After reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 6, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 18.


Decide in level 6 among pending : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 6, 13, 17, 24, 27, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 20), (17, 64), (18, 12), (19, -1), (20, 16), (21, -1), (22, 32), (23, 44), (24, 112), (25, 18), (26, 128), (27, 10), (28, -1), (29, 5), (30, 77), (31, 49), (32, 32), (33, 256)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9, 6]


New level: 7
 pending : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9, 6]


Before reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 258), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 256), (14, 128), (15, 64), (16, 20), (17, 64), (18, 12), (19, -1), (20, 16), (21, -1), (22, 32), (23, 44), (24, 112), (25, 18), (26, 128), (27, 10), (28, -1), (29, 5), (30, 77), (31, 49), (32, 32), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 6]


Solution : [0, 11, 1, 9, 6] has cost 37.


Before backtrack at level 7
 pending : []
 solution : [0, 11, 1, 9, 6]

After backtrack at level 7
 pending : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [30, 25, 31, 16, 18, 20, 26, 33, 22, 23, 32, 10, 12, 15, 14, 8, 13, 17, 24, 27, 29]
 solution : [0, 11, 1, 9]

Essensial at level 7 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 0), (11, -1), (12, -1), (13, 64), (14, 8), (15, 1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 13), (24, 11), (25, 8), (26, 2), (27, 0), (28, -1), (29, 0), (30, 68), (31, 29), (32, 16), (33, 16)]

Covered at level 7 : {10, 16, 17, 18, 20, 22, 27, 29}

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24]
 solution : [0, 11, 1, 9, 12]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24]
 solution : [0, 11, 1, 9, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 0), (11, -1), (12, -1), (13, 64), (14, 8), (15, 1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 13), (24, 11), (25, 8), (26, 2), (27, 0), (28, -1), (29, 0), (30, 68), (31, 29), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, 64), (14, 8), (15, 1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 13), (24, 11), (25, 8), (26, 2), (27, -1), (28, -1), (29, -1), (30, 68), (31, 29), (32, 16), (33, 16)]

Covered at level 7 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24]
 solution : [0, 11, 1, 9, 12]


Solution : [0, 11, 1, 9, 12] has cost 30.


Before backtrack at level 7
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24]
 solution : [0, 11, 1, 9, 12]

After backtrack at level 7
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29]
 solution : [0, 11, 1, 9]


Before backtrack at level 6
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29]
 solution : [0, 11, 1, 9]

After backtrack at level 6
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6]
 solution : [0, 11, 1, 9]


Before backtrack at level 5
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6]
 solution : [0, 11, 1, 9]

After backtrack at level 5
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28]
 solution : [0, 11, 1]


Before backtrack at level 4
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28]
 solution : [0, 11, 1]

After backtrack at level 4
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28, 3]
 solution : [0, 11, 1]


Before backtrack at level 3
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28, 3]
 solution : [0, 11, 1]

After backtrack at level 3
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28, 3, 4]
 solution : [0, 11, 1]


Before backtrack at level 2
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28, 3, 4]
 solution : [0, 11, 1]

After backtrack at level 2
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28, 3, 4, 5]
 solution : [0, 11, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28, 3, 4, 5]
 solution : [0, 11]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28, 3, 4, 5]
 solution : [0, 11]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, 64), (14, 8), (15, 1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 13), (24, 11), (25, 8), (26, 2), (27, -1), (28, -1), (29, -1), (30, 68), (31, 29), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 424), (32, 128), (33, 256)]

Covered at level 2 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28, 3, 4, 5]
 solution : [0, 11]


Solution : [0, 11] has cost 8.


Decide in level 2 among pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 7, 19, 21, 2, 28, 3, 4, 5]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 424), (32, 128), (33, 256)]

Decide 7 with phase True at level 2

After decision at level 2
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 19, 21, 2, 28, 3, 4, 5]
 solution : [0, 11, 7]


New level: 3
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 19, 21, 2, 28, 3, 4, 5]
 solution : [0, 11, 7]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 19, 21, 2, 28, 3, 4, 5]
 solution : [0, 11, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 512), (4, 576), (5, 640), (6, 576), (7, 768), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 288), (19, 128), (20, 256), (21, 128), (22, 256), (23, 512), (24, 320), (25, 408), (26, 256), (27, 384), (28, 456), (29, 384), (30, 576), (31, 424), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, 288), (6, 576), (7, -1), (8, 512), (9, 128), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 100), (17, 128), (18, 84), (19, 0), (20, 64), (21, 32), (22, 128), (23, 256), (24, 256), (25, 144), (26, 256), (27, 96), (28, 418), (29, 40), (30, 201), (31, 201), (32, 64), (33, 256)]

Covered at level 3 : {19}

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 2, 28, 3, 4, 5]
 solution : [0, 11, 7]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 2, 28, 3, 4, 5]
 solution : [0, 11, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, 288), (6, 576), (7, -1), (8, 512), (9, 128), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 100), (17, 128), (18, 84), (19, 0), (20, 64), (21, 32), (22, 128), (23, 256), (24, 256), (25, 144), (26, 256), (27, 96), (28, 418), (29, 40), (30, 201), (31, 201), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, 288), (6, 576), (7, -1), (8, 512), (9, 128), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 100), (17, 128), (18, 84), (19, -1), (20, 64), (21, 32), (22, 128), (23, 256), (24, 256), (25, 144), (26, 256), (27, 96), (28, 418), (29, 40), (30, 201), (31, 201), (32, 64), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 2, 28, 3, 4, 5]
 solution : [0, 11, 7]


Solution : [0, 11, 7] has cost 27.


Before backtrack at level 3
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 2, 28, 3, 4, 5]
 solution : [0, 11, 7]

After backtrack at level 3
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 2, 28, 3, 4, 5, 19]
 solution : [0, 11, 7]


Invert decision for 7 at level 2


New level: 3
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 2, 28, 3, 4, 5, 19]
 solution : [0, 11]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 2, 28, 3, 4, 5, 19]
 solution : [0, 11]

Essensial at level 3 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 576), (5, 288), (6, 576), (7, -1), (8, 512), (9, 128), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 100), (17, 128), (18, 84), (19, -1), (20, 64), (21, 32), (22, 128), (23, 256), (24, 256), (25, 144), (26, 256), (27, 96), (28, 418), (29, 40), (30, 201), (31, 201), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, 640), (6, 520), (7, -1), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 128), (19, 64), (20, 128), (21, 128), (22, 256), (23, 512), (24, 320), (25, 204), (26, 256), (27, 384), (28, 420), (29, 96), (30, 576), (31, 178), (32, 128), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 28, 3, 4, 5, 19]
 solution : [0, 11, 2]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 28, 3, 4, 5, 19]
 solution : [0, 11, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, 640), (6, 520), (7, -1), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 128), (19, 64), (20, 128), (21, 128), (22, 256), (23, 512), (24, 320), (25, 204), (26, 256), (27, 384), (28, 420), (29, 96), (30, 576), (31, 178), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, 640), (6, 520), (7, -1), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 128), (19, 64), (20, 128), (21, 128), (22, 256), (23, 512), (24, 320), (25, 204), (26, 256), (27, 384), (28, 420), (29, 96), (30, 576), (31, 178), (32, 128), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 28, 3, 4, 5, 19]
 solution : [0, 11, 2]


Solution : [0, 11, 2] has cost 15.


Decide in level 3 among pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 28, 3, 4, 5, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, 640), (6, 520), (7, -1), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 128), (19, 64), (20, 128), (21, 128), (22, 256), (23, 512), (24, 320), (25, 204), (26, 256), (27, 384), (28, 420), (29, 96), (30, 576), (31, 178), (32, 128), (33, 256)]

Decide 5 with phase True at level 3

After decision at level 3
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 28, 3, 4, 19]
 solution : [0, 11, 2, 5]


New level: 4
 pending : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 28, 3, 4, 19]
 solution : [0, 11, 2, 5]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 32, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 9, 21, 28, 3, 4, 19]
 solution : [0, 11, 2, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, 640), (6, 520), (7, -1), (8, 512), (9, 512), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 224), (17, 128), (18, 128), (19, 64), (20, 128), (21, 128), (22, 256), (23, 512), (24, 320), (25, 204), (26, 256), (27, 384), (28, 420), (29, 96), (30, 576), (31, 178), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 576), (5, -1), (6, 256), (7, -1), (8, 512), (9, 0), (10, 256), (11, -1), (12, 128), (13, 512), (14, 512), (15, 512), (16, 20), (17, 128), (18, 40), (19, 0), (20, 16), (21, 0), (22, 8), (23, 44), (24, 208), (25, 72), (26, 64), (27, 5), (28, 162), (29, 10), (30, 18), (31, 40), (32, 0), (33, 32)]

Covered at level 4 : {32, 9, 19, 21}

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4]
 solution : [0, 11, 2, 5]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4]
 solution : [0, 11, 2, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 576), (5, -1), (6, 256), (7, -1), (8, 512), (9, 0), (10, 256), (11, -1), (12, 128), (13, 512), (14, 512), (15, 512), (16, 20), (17, 128), (18, 40), (19, 0), (20, 16), (21, 0), (22, 8), (23, 44), (24, 208), (25, 72), (26, 64), (27, 5), (28, 162), (29, 10), (30, 18), (31, 40), (32, 0), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 576), (5, -1), (6, 256), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 128), (13, 512), (14, 512), (15, 512), (16, 20), (17, 128), (18, 40), (19, -1), (20, 16), (21, -1), (22, 8), (23, 44), (24, 208), (25, 72), (26, 64), (27, 5), (28, 162), (29, 10), (30, 18), (31, 40), (32, -1), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4]
 solution : [0, 11, 2, 5]


Solution : [0, 11, 2, 5] has cost 29.


Before backtrack at level 4
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4]
 solution : [0, 11, 2, 5]

After backtrack at level 4
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4, 32, 9, 21, 19]
 solution : [0, 11, 2, 5]


Invert decision for 5 at level 3


New level: 4
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4, 32, 9, 21, 19]
 solution : [0, 11, 2]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4, 32, 9, 21, 19]
 solution : [0, 11, 2]

Essensial at level 4 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 576), (5, -1), (6, 256), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 128), (13, 512), (14, 512), (15, 512), (16, 20), (17, 128), (18, 40), (19, -1), (20, 16), (21, -1), (22, 8), (23, 44), (24, 208), (25, 72), (26, 64), (27, 5), (28, 162), (29, 10), (30, 18), (31, 40), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 80), (17, 128), (18, 128), (19, 32), (20, 128), (21, 0), (22, 64), (23, 176), (24, 256), (25, 197), (26, 256), (27, 40), (28, 418), (29, 96), (30, 256), (31, 169), (32, 64), (33, 256)]

Covered at level 4 : {21}

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4, 32, 19]
 solution : [0, 11, 2, 9]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4, 32, 19]
 solution : [0, 11, 2, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 80), (17, 128), (18, 128), (19, 32), (20, 128), (21, 0), (22, 64), (23, 176), (24, 256), (25, 197), (26, 256), (27, 40), (28, 418), (29, 96), (30, 256), (31, 169), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 80), (17, 128), (18, 128), (19, 32), (20, 128), (21, -1), (22, 64), (23, 176), (24, 256), (25, 197), (26, 256), (27, 40), (28, 418), (29, 96), (30, 256), (31, 169), (32, 64), (33, 256)]

Covered at level 4 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4, 32, 19]
 solution : [0, 11, 2, 9]


Solution : [0, 11, 2, 9] has cost 22.


Decide in level 4 among pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 4, 32, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 80), (17, 128), (18, 128), (19, 32), (20, 128), (21, -1), (22, 64), (23, 176), (24, 256), (25, 197), (26, 256), (27, 40), (28, 418), (29, 96), (30, 256), (31, 169), (32, 64), (33, 256)]

Decide 4 with phase True at level 4

After decision at level 4
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 32, 19]
 solution : [0, 11, 2, 9, 4]


New level: 5
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 32, 19]
 solution : [0, 11, 2, 9, 4]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 27, 29, 6, 28, 3, 32, 19]
 solution : [0, 11, 2, 9, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 576), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 80), (17, 128), (18, 128), (19, 32), (20, 128), (21, -1), (22, 64), (23, 176), (24, 256), (25, 197), (26, 256), (27, 40), (28, 418), (29, 96), (30, 256), (31, 169), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 40), (17, 16), (18, 38), (19, 32), (20, 128), (21, -1), (22, 16), (23, 40), (24, 16), (25, 48), (26, 256), (27, 0), (28, 24), (29, 5), (30, 49), (31, 41), (32, 64), (33, 256)]

Covered at level 5 : {27}

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 6, 28, 3, 32, 19]
 solution : [0, 11, 2, 9, 4]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 6, 28, 3, 32, 19]
 solution : [0, 11, 2, 9, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 40), (17, 16), (18, 38), (19, 32), (20, 128), (21, -1), (22, 16), (23, 40), (24, 16), (25, 48), (26, 256), (27, 0), (28, 24), (29, 5), (30, 49), (31, 41), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 40), (17, 16), (18, 38), (19, 32), (20, 128), (21, -1), (22, 16), (23, 40), (24, 16), (25, 48), (26, 256), (27, -1), (28, 24), (29, 5), (30, 49), (31, 41), (32, 64), (33, 256)]

Covered at level 5 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 6, 28, 3, 32, 19]
 solution : [0, 11, 2, 9, 4]


Solution : [0, 11, 2, 9, 4] has cost 50.


Before backtrack at level 5
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 6, 28, 3, 32, 19]
 solution : [0, 11, 2, 9, 4]

After backtrack at level 5
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 6, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9, 4]


Invert decision for 4 at level 4


New level: 5
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 6, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 6, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 40), (17, 16), (18, 38), (19, 32), (20, 128), (21, -1), (22, 16), (23, 40), (24, 16), (25, 48), (26, 256), (27, -1), (28, 24), (29, 5), (30, 49), (31, 41), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 80), (17, 128), (18, 128), (19, 32), (20, 128), (21, -1), (22, 64), (23, 176), (24, 256), (25, 197), (26, 256), (27, 40), (28, 418), (29, 96), (30, 256), (31, 169), (32, 64), (33, 256)]

Covered at level 5 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 6, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9]


Solution : [0, 11, 2, 9] has cost 22.


Decide in level 5 among pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 6, 28, 3, 32, 19, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 80), (17, 128), (18, 128), (19, 32), (20, 128), (21, -1), (22, 64), (23, 176), (24, 256), (25, 197), (26, 256), (27, 40), (28, 418), (29, 96), (30, 256), (31, 169), (32, 64), (33, 256)]

Decide 6 with phase True at level 5

After decision at level 5
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9, 6]


New level: 6
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9, 6]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 514), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 80), (17, 128), (18, 128), (19, 32), (20, 128), (21, -1), (22, 64), (23, 176), (24, 256), (25, 197), (26, 256), (27, 40), (28, 418), (29, 96), (30, 256), (31, 169), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {3, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 2, 9, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 2, 9, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 2, 9, 6]


Solution : [0, 11, 2, 9, 6] has cost 41.


Before backtrack at level 6
 pending : []
 solution : [0, 11, 2, 9, 6]

After backtrack at level 6
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9, 6]


Invert decision for 6 at level 5


New level: 6
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 12, 16, 18, 20, 22, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9]

Essensial at level 6 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, -1), (10, 8), (11, -1), (12, -1), (13, 128), (14, 128), (15, 512), (16, 4), (17, 2), (18, 4), (19, 8), (20, 16), (21, -1), (22, 0), (23, 161), (24, 81), (25, 36), (26, 128), (27, 2), (28, 128), (29, 9), (30, 192), (31, 141), (32, 32), (33, 32)]

Covered at level 6 : {22}

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9, 12]


Before reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, -1), (10, 8), (11, -1), (12, -1), (13, 128), (14, 128), (15, 512), (16, 4), (17, 2), (18, 4), (19, 8), (20, 16), (21, -1), (22, 0), (23, 161), (24, 81), (25, 36), (26, 128), (27, 2), (28, 128), (29, 9), (30, 192), (31, 141), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, -1), (10, 8), (11, -1), (12, -1), (13, 128), (14, 128), (15, 512), (16, 4), (17, 2), (18, 4), (19, 8), (20, 16), (21, -1), (22, -1), (23, 161), (24, 81), (25, 36), (26, 128), (27, 2), (28, 128), (29, 9), (30, 192), (31, 141), (32, 32), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9, 12]


Solution : [0, 11, 2, 9, 12] has cost 34.


Before backtrack at level 6
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27]
 solution : [0, 11, 2, 9, 12]

After backtrack at level 6
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22]
 solution : [0, 11, 2, 9]


Before backtrack at level 5
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22]
 solution : [0, 11, 2, 9]

After backtrack at level 5
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22, 6]
 solution : [0, 11, 2, 9]


Before backtrack at level 4
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22, 6]
 solution : [0, 11, 2, 9]

After backtrack at level 4
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22, 6, 9, 21, 4]
 solution : [0, 11, 2]


Before backtrack at level 3
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22, 6, 9, 21, 4]
 solution : [0, 11, 2]

After backtrack at level 3
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22, 6, 9, 21, 4, 2, 5]
 solution : [0, 11]


Before backtrack at level 2
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22, 6, 9, 21, 4, 2, 5]
 solution : [0, 11]

After backtrack at level 2
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22, 6, 9, 21, 4, 2, 5, 7]
 solution : [0, 11]


Before backtrack at level 1
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22, 6, 9, 21, 4, 2, 5, 7]
 solution : [0, 11]

After backtrack at level 1
 pending : [30, 25, 31, 26, 33, 23, 15, 14, 8, 13, 24, 16, 18, 20, 10, 17, 29, 28, 3, 32, 19, 27, 12, 22, 6, 9, 21, 4, 2, 5, 7, 1]
 solution : [0, 11]


============================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall.ivy: node=3]

============================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 25

[MIN NOTE]: maximum branch and bound depth: 20

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 11, 1, 3, 9]

[MIN NOTE]: solution length: 5

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_11] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 6

invariant [invar_1] forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0) # qcost: 3

invariant [invar_3] forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1 # qcost: 7

invariant [invar_9] forall NODE1,NODE0. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1 # qcost: 7

[MIN NOTE]: number of total invariants: 5

[MIN NOTE]: total qCost: 25




[QRM NOTE]: Time elapsed since start: 13.420 seconds

[QRM NOTE]: Time elapsed since last: 2.663 seconds

[QRM NOTE]: Peak memory: 2385855 bytes


=============================================

	[IVY_CHECK] Ivy Check for Rmin

=============================================


=================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/firewall.node_3.0.ivy]

=================================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_3
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_3 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_3 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_3 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS


==================================================================================================

	[MUS]: Extract strengthening assertion for [ivybench/sym/ivy/firewall.node_3.0.ivy]

==================================================================================================

[MUS NOTE]: number of strengthening assertions: 2

[MUS NOTE]: min mus: {1, 3}

invariant [invar_11] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 6

invariant [invar_3] forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1 # qcost: 7


========================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/firewall.node_3.0.assert.ivy]

========================================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.assert.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 34: safety
        ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 38: invar_11
        ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 39: invar_3

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 34: safety ... PASS
        ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 38: invar_11 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 39: invar_3 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 34: safety ... PASS
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 38: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 39: invar_3 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 34: safety ... PASS
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 38: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 39: invar_3 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.assert.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS

[ASSERT_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 18.734 seconds

[QRM NOTE]: Time elapsed since last: 5.314 seconds

[QRM NOTE]: Peak memory: 2415816 bytes


********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************

[QRM RESULT]: PASS

