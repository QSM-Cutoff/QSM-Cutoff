
***************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_forall.ivy

***************************************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


===============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

===============================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 18

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm toy_consensus_forall.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_forall.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_forall.node_3_value_3.finite.cpp toy_consensus_forall.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_forall.node_3_value_3.finite.o toy_consensus_forall.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 8.081 seconds

[QRM NOTE]: Time elapsed since last: 8.081 seconds

[QRM NOTE]: Peak memory: 1187932 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        228

[FW NOTE]: number of dfs representative states:     14

[FW NOTE]: number of dfs non-representative states: 214


======================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

======================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voting_quorum=('quorum',)
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', '(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
representative states : 939, 39339, 308651, 2421675, 19198891, 2454443, 19233195, 17085355, 341419, 2455979, 2782123, 37803, 308139, 340907


=== State Orbit 0 =====================
size : 3
repr state: 000000000000000001
lex min decimal: 939
states:
000000000000000010
000000000000000001
000000000000000100




=== State Orbit 1 =====================
size : 9
repr state: 000100000000100001
lex min decimal: 39339
states:
000001000000100001
000000000010001100
000100000000100001
000000010000010010
000000001000010010
000000000100001100
000010000000100001
000000100000010010
000000000001001100




=== State Orbit 2 =====================
size : 18
repr state: 000100100000110001
lex min decimal: 308651
states:
000001000001101100
000000010010011010
000000100100011100
000000001001011100
000000010010011100
000000001001011010
000001001000110001
000010010000110001
000100100000110010
000001001000110010
000010000010101100
000100000100101100
000010000010101001
000000100100011010
000001000001101001
000100000100101001
000100100000110001
000010010000110010




=== State Orbit 3 =====================
size : 9
repr state: 000100100100111001
lex min decimal: 2421675
states:
000100100100111010
000010010010111100
000010010010111001
000010010010111010
000100100100111001
000100100100111100
000001001001111001
000001001001111100
000001001001111010




=== State Orbit 4 =====================
size : 9
repr state: 100100100100111100
lex min decimal: 19198891
states:
100100100100111010
010010010010111010
010010010010111001
100100100100111100
001001001001111100
001001001001111010
100100100100111001
001001001001111001
010010010010111100




=== State Orbit 5 =====================
size : 36
repr state: 000100100010111001
lex min decimal: 2454443
states:
000001100001111100
000001001100111001
000100010100111001
000100001100111100
000100001001111010
000010001010111100
000010010100111001
000010100100111010
000010001001111010
000001010001111001
000001001100111010
000100100010111010
000010010100111010
000010100100111100
000100001100111001
000010100010111100
000001100100111100
000010010001111001
000010010001111010
000001010010111010
000010001001111100
000100010010111100
000001100100111010
000100010010111010
000010001010111001
000001100001111001
000100100010111001
000100010100111100
000001010001111100
000100001001111100
000001001010111010
000001001010111001
000100100001111010
000100100001111001
000010100010111001
000001010010111100




=== State Orbit 6 =====================
size : 18
repr state: 100100100010111100
lex min decimal: 19233195
states:
010010010100111100
001001001100111100
010010001010111010
001001001010111100
010100010010111001
100001100100111001
100100100001111100
100010100100111001
001001100001111010
001001010001111010
001100001001111001
001010001001111001
100100100010111100
010010010001111100
100100001100111010
100100010100111010
010001010010111001
010010100010111010




=== State Orbit 7 =====================
size : 9
repr state: 100100100000110100
lex min decimal: 17085355
states:
010010000010101010
010010010000110100
100000100100011001
100100000100101010
001000001001011001
001001001000110100
100100100000110100
010000010010011001
001001000001101010




=== State Orbit 8 =====================
size : 36
repr state: 000100010000110001
lex min decimal: 341419
states:
000010001000110010
000010000100101100
000000010001011010
000000010100011100
000000001010011010
000000010100011010
000100000010101100
000010000001101100
000000100010011010
000100001000110010
000001000100101100
000100000010101001
000010000100101001
000010001000110001
000000001010011100
000000001100011100
000001100000110010
000000001100011010
000001010000110010
000010100000110010
000000100001011100
000010000001101001
000000100001011010
000001000100101001
000100010000110010
000001000010101100
000001000010101001
000100010000110001
000100000001101001
000100001000110001
000001100000110001
000100000001101100
000010100000110001
000001010000110001
000000100010011100
000000010001011100




=== State Orbit 9 =====================
size : 18
repr state: 000100010010111001
lex min decimal: 2455979
states:
000010100100111001
000001100100111001
000001100001111010
000001010010111001
000010001001111001
000001001100111100
000100100001111100
000100001001111001
000100010100111010
000001010001111010
000100100010111100
000100001100111010
000001001010111100
000010010100111100
000010001010111010
000010010001111100
000100010010111001
000010100010111010




=== State Orbit 10 =====================
size : 18
repr state: 000100010001111001
lex min decimal: 2782123
states:
000100001010111100
000100001010111010
000001010100111100
000010100001111100
000100010001111010
000010100001111001
000100010001111001
000001100010111010
000010001100111010
000100001010111001
000010100001111010
000010001100111100
000010001100111001
000001100010111100
000001010100111001
000100010001111100
000001010100111010
000001100010111001




=== State Orbit 11 =====================
size : 18
repr state: 000000100000010001
lex min decimal: 37803
states:
000001000000100010
000100000000100100
000000100000010001
000000000010001010
000000010000010001
000000001000010001
000100000000100010
000000001000010100
000000000010001001
000000100000010100
000010000000100010
000000000001001010
000010000000100100
000000000100001001
000000010000010100
000001000000100100
000000000001001001
000000000100001010




=== State Orbit 12 =====================
size : 9
repr state: 000000100100011001
lex min decimal: 308139
states:
000100000100101010
000100100000110100
000000010010011001
000010010000110100
000001001000110100
000001000001101010
000010000010101010
000000001001011001
000000100100011001




=== State Orbit 13 =====================
size : 18
repr state: 000000100010011001
lex min decimal: 340907
states:
000000100001011001
000001100000110100
000000010100011001
000010001000110100
000000100010011001
000001000010101010
000001000100101010
000010000100101010
000100000010101010
000010000001101010
000010100000110100
000000010001011001
000100000001101010
000001010000110100
000100010000110100
000000001100011001
000000001010011001
000100001000110100



[QRM NOTE]: Time elapsed since start: 8.292 seconds

[QRM NOTE]: Time elapsed since last: 0.211 seconds

[QRM NOTE]: Peak memory: 1278033 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 8.297 seconds

[QRM NOTE]: Time elapsed since last: 0.005 seconds

[QRM NOTE]: Peak memory: 276722 bytes


======================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

======================================================================================================================


=================================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

=================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ----------1---0---
0     : ['vote(node2,value1)', '~voted(node2)']
1     : -----------1--0---
1     : ['vote(node2,value2)', '~voted(node2)']
2     : ---------1----0---
2     : ['vote(node2,value0)', '~voted(node2)']
3     : -------1-----0----
3     : ['vote(node1,value1)', '~voted(node1)']
4     : --------1----0----
4     : ['vote(node1,value2)', '~voted(node1)']
5     : ------1------0----
5     : ['vote(node1,value0)', '~voted(node1)']
6     : ----1-------0-----
6     : ['vote(node0,value1)', '~voted(node0)']
7     : -----1------0-----
7     : ['vote(node0,value2)', '~voted(node0)']
8     : ---1--------0-----
8     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
9 (*) : ----11------------
9     : ['vote(node0,value1)', 'vote(node0,value2)']
10     : ---1-1------------
10     : ['vote(node0,value0)', 'vote(node0,value2)']
11     : ---11-------------
11     : ['vote(node0,value0)', 'vote(node0,value1)']
12     : -------11---------
12     : ['vote(node1,value1)', 'vote(node1,value2)']
13     : ------1-1---------
13     : ['vote(node1,value0)', 'vote(node1,value2)']
14     : ------11----------
14     : ['vote(node1,value0)', 'vote(node1,value1)']
15     : ----------11------
15     : ['vote(node2,value1)', 'vote(node2,value2)']
16     : ---------1-1------
16     : ['vote(node2,value0)', 'vote(node2,value2)']
17     : ---------11-------
17     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
18 (*) : 1-1---------------
18     : ['decided(value0)', 'decided(value2)']
19     : 11----------------
19     : ['decided(value0)', 'decided(value1)']
20     : -11---------------
20     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
21 (*) : ---------------11-
21     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node0_node2)']
22     : ---------------1-1
22     : ['(voting_quorum=quorum__node0_node1)', '(voting_quorum=quorum__node1_node2)']
23     : ----------------11
23     : ['(voting_quorum=quorum__node0_node2)', '(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
24 (*) : 1---------1----0--
24     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
25     : 1----------1---0--
25     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
26     : -1-------1-----0--
26     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
27     : -1---------1---0--
27     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
28     : --1------1-----0--
28     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
29     : --1-------1----0--
29     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
30     : 1------1--------0-
30     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
31     : 1-------1-------0-
31     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
32     : -1----1---------0-
32     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
33     : -1------1-------0-
33     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
34     : --1---1---------0-
34     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
35     : --1----1--------0-
35     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
36     : 1---1------------0
36     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
37     : 1----1-----------0
37     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
38     : -1-1-------------0
38     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
39     : -1---1-----------0
39     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
40     : --11-------------0
40     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
41     : --1-1------------0
41     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 1
42 (*) : 1--------0-----0--
42     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
43     : -1--------0----0--
43     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
44     : --1--------0---0--
44     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
45     : 1-----0---------0-
45     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
46     : -1-----0--------0-
46     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
47     : --1-----0-------0-
47     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
48     : 1--0-------------0
48     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
49     : -1--0------------0
49     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
50     : --1--0-----------0
50     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
51 (*) : 1--0-----------1--
51     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
52     : -1--0----------1--
52     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
53     : --1--0---------1--
53     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
54     : 1--0------------1-
54     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
55     : -1--0-----------1-
55     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
56     : --1--0----------1-
56     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
57     : 1-----0--------1--
57     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
58     : -1-----0-------1--
58     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
59     : --1-----0------1--
59     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
60     : 1-----0----------1
60     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
61     : -1-----0---------1
61     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
62     : --1-----0--------1
62     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
63     : 1--------0------1-
63     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
64     : -1--------0-----1-
64     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
65     : --1--------0----1-
65     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
66     : 1--------0-------1
66     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
67     : -1--------0------1
67     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
68     : --1--------0-----1
68     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
69 (*) : 1------1-------1--
69     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
70     : 1-------1------1--
70     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
71     : -1----1--------1--
71     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
72     : -1------1------1--
72     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
73     : --1---1--------1--
73     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
74     : --1----1-------1--
74     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
75     : 1---------1-----1-
75     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
76     : 1----------1----1-
76     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
77     : -1-------1------1-
77     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
78     : -1---------1----1-
78     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
79     : --1------1------1-
79     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
80     : --1-------1-----1-
80     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
81     : 1---1----------1--
81     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
82     : 1----1---------1--
82     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
83     : -1-1-----------1--
83     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
84     : -1---1---------1--
84     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
85     : --11-----------1--
85     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
86     : --1-1----------1--
86     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
87     : 1---------1------1
87     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
88     : 1----------1-----1
88     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
89     : -1-------1-------1
89     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
90     : -1---------1-----1
90     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
91     : --1------1-------1
91     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
92     : --1-------1------1
92     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
93     : 1---1-----------1-
93     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
94     : 1----1----------1-
94     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
95     : -1-1------------1-
95     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
96     : -1---1----------1-
96     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
97     : --11------------1-
97     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
98     : --1-1-----------1-
98     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
99     : 1------1---------1
99     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
100     : 1-------1--------1
100     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
101     : -1----1----------1
101     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
102     : -1------1--------1
102     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
103     : --1---1----------1
103     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
104     : --1----1---------1
104     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 36
num_suborbits: 1
105 (*) : 1----1--------0---
105     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
106     : 1---1---------0---
106     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
107     : -1---1--------0---
107     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
108     : -1-1----------0---
108     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
109     : --1-1---------0---
109     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
110     : --11----------0---
110     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
111     : 1----1-------0----
111     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
112     : 1---1--------0----
112     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
113     : -1---1-------0----
113     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
114     : -1-1---------0----
114     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
115     : --1-1--------0----
115     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
116     : --11---------0----
116     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
117     : 1-------1-----0---
117     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
118     : 1------1------0---
118     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
119     : -1------1-----0---
119     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
120     : -1----1-------0---
120     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
121     : --1----1------0---
121     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
122     : --1---1-------0---
122     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
123     : 1-------1---0-----
123     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
124     : 1------1----0-----
124     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
125     : -1------1---0-----
125     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
126     : -1----1-----0-----
126     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
127     : --1----1----0-----
127     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
128     : --1---1-----0-----
128     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
129     : 1----------1-0----
129     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
130     : 1---------1--0----
130     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
131     : -1---------1-0----
131     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
132     : -1-------1---0----
132     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
133     : --1-------1--0----
133     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
134     : --1------1---0----
134     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
135     : 1----------10-----
135     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
136     : 1---------1-0-----
136     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
137     : -1---------10-----
137     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
138     : -1-------1--0-----
138     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
139     : --1-------1-0-----
139     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
140     : --1------1--0-----
140     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
141 (*) : 1--0----------0---
141     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
142     : -1--0---------0---
142     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
143     : --1--0--------0---
143     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
144     : 1--0---------0----
144     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
145     : -1--0--------0----
145     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
146     : --1--0-------0----
146     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
147     : 1-----0-------0---
147     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
148     : -1-----0------0---
148     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
149     : --1-----0-----0---
149     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
150     : 1-----0-----0-----
150     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
151     : -1-----0----0-----
151     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
152     : --1-----0---0-----
152     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
153     : 1--------0---0----
153     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
154     : -1--------0--0----
154     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
155     : --1--------0-0----
155     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
156     : 1--------0--0-----
156     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
157     : -1--------0-0-----
157     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
158     : --1--------00-----
158     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
159 (*) : 1-------------0--1
159     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
160     : -1------------0--1
160     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
161     : --1-----------0--1
161     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
162     : 1------------0---1
162     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
163     : -1-----------0---1
163     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
164     : --1----------0---1
164     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
165     : 1-------------0-1-
165     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
166     : -1------------0-1-
166     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
167     : --1-----------0-1-
167     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
168     : 1-----------0---1-
168     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
169     : -1----------0---1-
169     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
170     : --1---------0---1-
170     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
171     : 1------------0-1--
171     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
172     : -1-----------0-1--
172     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
173     : --1----------0-1--
173     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
174     : 1-----------0--1--
174     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
175     : -1----------0--1--
175     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
176     : --1---------0--1--
176     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
177 (*) : 1-------------00--
177     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
178     : -1------------00--
178     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
179     : --1-----------00--
179     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
180     : 1------------0--0-
180     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
181     : -1-----------0--0-
181     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
182     : --1----------0--0-
182     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
183     : 1-----------0----0
183     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
184     : -1----------0----0
184     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
185     : --1---------0----0
185     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
186 (*) : 1--0-----0--------
186     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
187     : -1--0-----0-------
187     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
188     : --1--0-----0------
188     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
189     : 1--0--0-----------
189     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
190     : -1--0--0----------
190     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
191     : --1--0--0---------
191     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
192     : 1-----0--0--------
192     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
193     : -1-----0--0-------
193     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
194     : --1-----0--0------
194     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
195 (*) : 1------1-0--------
195     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
196     : 1-------10--------
196     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
197     : -1----1---0-------
197     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
198     : -1------1-0-------
198     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
199     : --1---1----0------
199     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
200     : --1----1---0------
200     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
201     : 1-----0---1-------
201     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
202     : 1-----0----1------
202     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
203     : -1-----0-1--------
203     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
204     : -1-----0---1------
204     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
205     : --1-----01--------
205     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
206     : --1-----0-1-------
206     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
207     : 1---1----0--------
207     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
208     : 1----1---0--------
208     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
209     : -1-1------0-------
209     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
210     : -1---1----0-------
210     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
211     : --11-------0------
211     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
212     : --1-1------0------
212     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
213     : 1--0------1-------
213     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
214     : 1--0-------1------
214     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
215     : -1--0----1--------
215     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
216     : -1--0------1------
216     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
217     : --1--0---1--------
217     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
218     : --1--0----1-------
218     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
219     : 1---1-0-----------
219     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
220     : 1----10-----------
220     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
221     : -1-1---0----------
221     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
222     : -1---1-0----------
222     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
223     : --11----0---------
223     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
224     : --1-1---0---------
224     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
225     : 1--0---1----------
225     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
226     : 1--0----1---------
226     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
227     : -1--0-1-----------
227     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
228     : -1--0---1---------
228     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
229     : --1--01-----------
229     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
230     : --1--0-1----------
230     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 2
231 (*) : 1---1--1----------
231     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
232     : 1----1--1---------
232     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
233     : -1-1--1-----------
233     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
234     : -1---1--1---------
234     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
235     : --11--1-----------
235     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
236     : --1-1--1----------
236     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
237     : 1---1-----1-------
237     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
238     : 1----1-----1------
238     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
239     : -1-1-----1--------
239     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
240     : -1---1-----1------
240     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
241     : --11-----1--------
241     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
242     : --1-1-----1-------
242     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
243     : 1------1--1-------
243     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
244     : 1-------1--1------
244     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
245     : -1----1--1--------
245     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
246     : -1------1--1------
246     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
247     : --1---1--1--------
247     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
248     : --1----1--1-------
248     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
249 (*) : 1----1----1-------
249     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
250     : 1---1------1------
250     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
251     : -1---1---1--------
251     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
252     : -1-1-------1------
252     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
253     : --1-1----1--------
253     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
254     : --11------1-------
254     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
255     : 1----1-1----------
255     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
256     : 1---1---1---------
256     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
257     : -1---11-----------
257     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
258     : -1-1----1---------
258     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
259     : --1-1-1-----------
259     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
260     : --11---1----------
260     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
261     : 1-------1-1-------
261     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
262     : 1------1---1------
262     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
263     : -1------11--------
263     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
264     : -1----1----1------
264     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
265     : --1----1-1--------
265     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
266     : --1---1---1-------
266     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
267 (*) : 1------------00---
267     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
268     : -1-----------00---
268     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
269     : --1----------00---
269     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
270     : 1-----------0-0---
270     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
271     : -1----------0-0---
271     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
272     : --1---------0-0---
272     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
273     : 1-----------00----
273     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
274     : -1----------00----
274     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
275     : --1---------00----
275     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 1
num_suborbits: 1
276 (*) : ---------------000
276     : ['~(voting_quorum=quorum__node0_node1)', '~(voting_quorum=quorum__node0_node2)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---000------1-----
277     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---------000--1---
279     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 18

[PRIME NOTE]: number of orbits before merging: 19

[PRIME NOTE]: number of primes: 280

[QRM NOTE]: Time elapsed since start: 8.410 seconds

[QRM NOTE]: Time elapsed since last: 0.113 seconds

[QRM NOTE]: Peak memory: 1609831 bytes


===========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

===========================================================================================================

definition primes: {16, 3}


New level: 0
 pending : [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17]
 solution : []

Essensial at level 0 : {0, 1, 17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]

[QRM NOTE]: Time elapsed since start: 8.448 seconds

[QRM NOTE]: Time elapsed since last: 0.038 seconds

[QRM NOTE]: Peak memory: 565350 bytes


===============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

===============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ----------1---0---
0     : ['vote(node2,value1)', '~voted(node2)']
1     : -----------1--0---
1     : ['vote(node2,value2)', '~voted(node2)']
2     : ---------1----0---
2     : ['vote(node2,value0)', '~voted(node2)']
3     : -------1-----0----
3     : ['vote(node1,value1)', '~voted(node1)']
4     : --------1----0----
4     : ['vote(node1,value2)', '~voted(node1)']
5     : ------1------0----
5     : ['vote(node1,value0)', '~voted(node1)']
6     : ----1-------0-----
6     : ['vote(node0,value1)', '~voted(node0)']
7     : -----1------0-----
7     : ['vote(node0,value2)', '~voted(node0)']
8     : ---1--------0-----
8     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value1)', '~voted(node2)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node2,value1)', '~voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
9 (*) : ----11------------
9     : ['vote(node0,value1)', 'vote(node0,value2)']
10     : ---1-1------------
10     : ['vote(node0,value0)', 'vote(node0,value2)']
11     : ---11-------------
11     : ['vote(node0,value0)', 'vote(node0,value1)']
12     : -------11---------
12     : ['vote(node1,value1)', 'vote(node1,value2)']
13     : ------1-1---------
13     : ['vote(node1,value0)', 'vote(node1,value2)']
14     : ------11----------
14     : ['vote(node1,value0)', 'vote(node1,value1)']
15     : ----------11------
15     : ['vote(node2,value1)', 'vote(node2,value2)']
16     : ---------1-1------
16     : ['vote(node2,value0)', 'vote(node2,value2)']
17     : ---------11-------
17     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value1)', 'vote(node0,value2)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value1)', 'vote(node0,value2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---000------1-----
277     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---------000--1---
279     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$1$vote$0$2, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$2]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2', 'value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 3, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
18 (*) : 1-1---------------
18     : ['decided(value0)', 'decided(value2)']
19     : 11----------------
19     : ['decided(value0)', 'decided(value1)']
20     : -11---------------
20     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
24 (*) : 1---------1----0--
24     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
25     : 1----------1---0--
25     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
26     : -1-------1-----0--
26     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
27     : -1---------1---0--
27     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
28     : --1------1-----0--
28     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
29     : --1-------1----0--
29     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
30     : 1------1--------0-
30     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
31     : 1-------1-------0-
31     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
32     : -1----1---------0-
32     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
33     : -1------1-------0-
33     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
34     : --1---1---------0-
34     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
35     : --1----1--------0-
35     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
36     : 1---1------------0
36     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
37     : 1----1-----------0
37     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
38     : -1-1-------------0
38     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
39     : -1---1-----------0
39     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
40     : --11-------------0
40     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
41     : --1-1------------0
41     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node2,value1)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node2,value1)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~member(NODE0,QUORUM0)', 'voting_quorum ~= QUORUM0', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0,VALUE1. ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 1
42 (*) : 1--------0-----0--
42     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
43     : -1--------0----0--
43     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
44     : --1--------0---0--
44     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
45     : 1-----0---------0-
45     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
46     : -1-----0--------0-
46     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
47     : --1-----0-------0-
47     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
48     : 1--0-------------0
48     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
49     : -1--0------------0
49     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
50     : --1--0-----------0
50     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node2,value0)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node2,value0)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', 'voting_quorum ~= QUORUM0', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0)


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
51 (*) : 1--0-----------1--
51     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
52     : -1--0----------1--
52     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
53     : --1--0---------1--
53     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
54     : 1--0------------1-
54     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
55     : -1--0-----------1-
55     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
56     : --1--0----------1-
56     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
57     : 1-----0--------1--
57     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
58     : -1-----0-------1--
58     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
59     : --1-----0------1--
59     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
60     : 1-----0----------1
60     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
61     : -1-----0---------1
61     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
62     : --1-----0--------1
62     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
63     : 1--------0------1-
63     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
64     : -1--------0-----1-
64     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
65     : --1--------0----1-
65     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
66     : 1--------0-------1
66     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
67     : -1--------0------1
67     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
68     : --1--------0-----1
68     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)', 'voting_quorum = quorum__node0_node1', 'member(node0,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)', 'voting_quorum = quorum__node0_node1', 'member(node0,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$vote$0': [node$0$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$vote$0': node$0$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'member(NODE0,QUORUM0)', 'voting_quorum = QUORUM0', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0)


=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
69 (*) : 1------1-------1--
69     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
70     : 1-------1------1--
70     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
71     : -1----1--------1--
71     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
72     : -1------1------1--
72     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
73     : --1---1--------1--
73     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
74     : --1----1-------1--
74     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
75     : 1---------1-----1-
75     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
76     : 1----------1----1-
76     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
77     : -1-------1------1-
77     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
78     : -1---------1----1-
78     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
79     : --1------1------1-
79     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
80     : --1-------1-----1-
80     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
81     : 1---1----------1--
81     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
82     : 1----1---------1--
82     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
83     : -1-1-----------1--
83     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
84     : -1---1---------1--
84     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
85     : --11-----------1--
85     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
86     : --1-1----------1--
86     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
87     : 1---------1------1
87     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
88     : 1----------1-----1
88     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
89     : -1-------1-------1
89     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
90     : -1---------1-----1
90     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
91     : --1------1-------1
91     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
92     : --1-------1------1
92     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
93     : 1---1-----------1-
93     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
94     : 1----1----------1-
94     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
95     : -1-1------------1-
95     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
96     : -1---1----------1-
96     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
97     : --11------------1-
97     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
98     : --1-1-----------1-
98     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
99     : 1------1---------1
99     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
100     : 1-------1--------1
100     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
101     : -1----1----------1
101     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
102     : -1------1--------1
102     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
103     : --1---1----------1
103     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
104     : --1----1---------1
104     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', 'voting_quorum = quorum__node0_node1', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', 'voting_quorum = quorum__node0_node1', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$vote$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$vote$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$vote$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'voting_quorum = QUORUM0', 'member(NODE0,QUORUM0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0,VALUE1. ~decided(VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 8 =====================
size : 36
num_suborbits: 1
105 (*) : 1----1--------0---
105     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
106     : 1---1---------0---
106     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
107     : -1---1--------0---
107     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
108     : -1-1----------0---
108     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
109     : --1-1---------0---
109     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
110     : --11----------0---
110     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
111     : 1----1-------0----
111     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
112     : 1---1--------0----
112     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
113     : -1---1-------0----
113     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
114     : -1-1---------0----
114     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
115     : --1-1--------0----
115     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
116     : --11---------0----
116     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
117     : 1-------1-----0---
117     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
118     : 1------1------0---
118     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
119     : -1------1-----0---
119     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
120     : -1----1-------0---
120     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
121     : --1----1------0---
121     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
122     : --1---1-------0---
122     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
123     : 1-------1---0-----
123     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
124     : 1------1----0-----
124     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
125     : -1------1---0-----
125     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
126     : -1----1-----0-----
126     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
127     : --1----1----0-----
127     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
128     : --1---1-----0-----
128     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
129     : 1----------1-0----
129     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
130     : 1---------1--0----
130     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
131     : -1---------1-0----
131     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
132     : -1-------1---0----
132     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
133     : --1-------1--0----
133     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
134     : --1------1---0----
134     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
135     : 1----------10-----
135     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
136     : 1---------1-0-----
136     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
137     : -1---------10-----
137     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
138     : -1-------1--0-----
138     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
139     : --1-------1-0-----
139     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
140     : --1------1--0-----
140     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1,VALUE1. ~decided(VALUE0) | voted(NODE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
141 (*) : 1--0----------0---
141     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
142     : -1--0---------0---
142     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
143     : --1--0--------0---
143     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
144     : 1--0---------0----
144     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
145     : -1--0--------0----
145     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
146     : --1--0-------0----
146     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
147     : 1-----0-------0---
147     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
148     : -1-----0------0---
148     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
149     : --1-----0-----0---
149     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
150     : 1-----0-----0-----
150     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
151     : -1-----0----0-----
151     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
152     : --1-----0---0-----
152     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
153     : 1--------0---0----
153     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
154     : -1--------0--0----
154     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
155     : --1--------0-0----
155     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
156     : 1--------0--0-----
156     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
157     : -1--------0-0-----
157     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
158     : --1--------00-----
158     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | vote(NODE0,VALUE0) | voted(NODE1) | NODE0 = NODE1


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
159 (*) : 1-------------0--1
159     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
160     : -1------------0--1
160     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
161     : --1-----------0--1
161     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
162     : 1------------0---1
162     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
163     : -1-----------0---1
163     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
164     : --1----------0---1
164     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
165     : 1-------------0-1-
165     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
166     : -1------------0-1-
166     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
167     : --1-----------0-1-
167     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
168     : 1-----------0---1-
168     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
169     : -1----------0---1-
169     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
170     : --1---------0---1-
170     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
171     : 1------------0-1--
171     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
172     : -1-----------0-1--
172     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
173     : --1----------0-1--
173     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
174     : 1-----------0--1--
174     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
175     : -1----------0--1--
175     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
176     : --1---------0--1--
176     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node2)', 'voting_quorum = quorum__node1_node2', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voting_quorum=': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$member$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$voting_quorum=$0$0, quorum$0$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$voting_quorum=$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

part_sig: ('node$0$member$0$0; node$1$voted$0$0', 'quorum$0$member$1$0; quorum$0$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node2)', 'voting_quorum = quorum__node1_node2', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '0$voting_quorum=': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$voted$0': [node$0$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$voted$0': node$0$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': [quorum$0$member$1$0; quorum$0$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$0$voting_quorum=$0': quorum$0$member$1$0; quorum$0$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'member(NODE0,QUORUM0)', 'voting_quorum = QUORUM0', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | voting_quorum ~= QUORUM0 | voted(NODE0)


=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
177 (*) : 1-------------00--
177     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
178     : -1------------00--
178     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
179     : --1-----------00--
179     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
180     : 1------------0--0-
180     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
181     : -1-----------0--0-
181     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
182     : --1----------0--0-
182     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
183     : 1-----------0----0
183     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
184     : -1----------0----0
184     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
185     : --1---------0----0
185     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voting_quorum=': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0], Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$voting_quorum=$0$0, quorum$1$member$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$voting_quorum=$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$member$1$0; quorum$1$voting_quorum=$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node2)', 'voting_quorum ~= quorum__node0_node1', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voting_quorum=': Const('voting_quorum', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voting_quorum=': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1, '1$voting_quorum=': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: quorum

	identical_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': [quorum$1$member$1$0; quorum$1$voting_quorum=$0$0]}

	identical_single_classes: {'quorum$1$member$1; quorum$1$voting_quorum=$0': quorum$1$member$1$0; quorum$1$voting_quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall

quantifier mode: quorum: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voting_quorum=': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)', 'voting_quorum ~= QUORUM0', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0)


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
186 (*) : 1--0-----0--------
186     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
187     : -1--0-----0-------
187     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
188     : --1--0-----0------
188     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
189     : 1--0--0-----------
189     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
190     : -1--0--0----------
190     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
191     : --1--0--0---------
191     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
192     : 1-----0--0--------
192     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
193     : -1-----0--0-------
193     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
194     : --1-----0--0------
194     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE1,VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
195 (*) : 1------1-0--------
195     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
196     : 1-------10--------
196     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
197     : -1----1---0-------
197     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
198     : -1------1-0-------
198     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
199     : --1---1----0------
199     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
200     : --1----1---0------
200     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
201     : 1-----0---1-------
201     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
202     : 1-----0----1------
202     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
203     : -1-----0-1--------
203     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
204     : -1-----0---1------
204     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
205     : --1-----01--------
205     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
206     : --1-----0-1-------
206     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
207     : 1---1----0--------
207     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
208     : 1----1---0--------
208     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
209     : -1-1------0-------
209     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
210     : -1---1----0-------
210     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
211     : --11-------0------
211     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
212     : --1-1------0------
212     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
213     : 1--0------1-------
213     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
214     : 1--0-------1------
214     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
215     : -1--0----1--------
215     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
216     : -1--0------1------
216     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
217     : --1--0---1--------
217     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
218     : --1--0----1-------
218     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
219     : 1---1-0-----------
219     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
220     : 1----10-----------
220     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
221     : -1-1---0----------
221     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
222     : -1---1-0----------
222     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
223     : --11----0---------
223     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
224     : --1-1---0---------
224     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
225     : 1--0---1----------
225     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
226     : 1--0----1---------
226     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
227     : -1--0-1-----------
227     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
228     : -1--0---1---------
228     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
229     : --1--01-----------
229     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
230     : --1--0-1----------
230     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE1,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1,VALUE1. ~decided(VALUE0) | vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 2
231 (*) : 1---1--1----------
231     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
232     : 1----1--1---------
232     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
233     : -1-1--1-----------
233     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
234     : -1---1--1---------
234     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
235     : --11--1-----------
235     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
236     : --1-1--1----------
236     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
237     : 1---1-----1-------
237     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
238     : 1----1-----1------
238     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
239     : -1-1-----1--------
239     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
240     : -1---1-----1------
240     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
241     : --11-----1--------
241     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
242     : --1-1-----1-------
242     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
243     : 1------1--1-------
243     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
244     : 1-------1--1------
244     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
245     : -1----1--1--------
245     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
246     : -1------1--1------
246     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
247     : --1---1--1--------
247     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
248     : --1----1--1-------
248     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
249 (*) : 1----1----1-------
249     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
250     : 1---1------1------
250     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
251     : -1---1---1--------
251     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
252     : -1-1-------1------
252     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
253     : --1-1----1--------
253     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
254     : --11------1-------
254     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
255     : 1----1-1----------
255     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
256     : 1---1---1---------
256     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
257     : -1---11-----------
257     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
258     : -1-1----1---------
258     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
259     : --1-1-1-----------
259     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
260     : --11---1----------
260     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
261     : 1-------1-1-------
261     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
262     : 1------1---1------
262     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
263     : -1------11--------
263     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
264     : -1----1----1------
264     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
265     : --1----1-1--------
265     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
266     : --1---1---1-------
266     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE1,VALUE2)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE2,NODE1,VALUE0,VALUE1. ~decided(VALUE0) | ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | VALUE0 = VALUE2 | NODE0 = NODE1)


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
267 (*) : 1------------00---
267     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
268     : -1-----------00---
268     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
269     : --1----------00---
269     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
270     : 1-----------0-0---
270     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
271     : -1----------0-0---
271     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
272     : --1---------0-0---
272     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
273     : 1-----------00----
273     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
274     : -1----------00----
274     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
275     : --1---------00----
275     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1


=========================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

=========================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ----------1---0---
0     : ['vote(node2,value1)', '~voted(node2)']
1     : -----------1--0---
1     : ['vote(node2,value2)', '~voted(node2)']
2     : ---------1----0---
2     : ['vote(node2,value0)', '~voted(node2)']
3     : -------1-----0----
3     : ['vote(node1,value1)', '~voted(node1)']
4     : --------1----0----
4     : ['vote(node1,value2)', '~voted(node1)']
5     : ------1------0----
5     : ['vote(node1,value0)', '~voted(node1)']
6     : ----1-------0-----
6     : ['vote(node0,value1)', '~voted(node0)']
7     : -----1------0-----
7     : ['vote(node0,value2)', '~voted(node0)']
8     : ---1--------0-----
8     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
9 (*) : ----11------------
9     : ['vote(node0,value1)', 'vote(node0,value2)']
10     : ---1-1------------
10     : ['vote(node0,value0)', 'vote(node0,value2)']
11     : ---11-------------
11     : ['vote(node0,value0)', 'vote(node0,value1)']
12     : -------11---------
12     : ['vote(node1,value1)', 'vote(node1,value2)']
13     : ------1-1---------
13     : ['vote(node1,value0)', 'vote(node1,value2)']
14     : ------11----------
14     : ['vote(node1,value0)', 'vote(node1,value1)']
15     : ----------11------
15     : ['vote(node2,value1)', 'vote(node2,value2)']
16     : ---------1-1------
16     : ['vote(node2,value0)', 'vote(node2,value2)']
17     : ---------11-------
17     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 7




=== Prime Orbit 17 =====================
size : 3
num_suborbits: 1
277 (*) : ---000------1-----
277     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
278     : ------000----1----
278     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
279     : ---------000--1---
279     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))
qcost : 4




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
18 (*) : 1-1---------------
18     : ['decided(value0)', 'decided(value2)']
19     : 11----------------
19     : ['decided(value0)', 'decided(value1)']
20     : -11---------------
20     : ['decided(value1)', 'decided(value2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,VALUE1. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
24 (*) : 1---------1----0--
24     : ['decided(value0)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
25     : 1----------1---0--
25     : ['decided(value0)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
26     : -1-------1-----0--
26     : ['decided(value1)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
27     : -1---------1---0--
27     : ['decided(value1)', 'vote(node2,value2)', '~(voting_quorum=quorum__node0_node1)']
28     : --1------1-----0--
28     : ['decided(value2)', 'vote(node2,value0)', '~(voting_quorum=quorum__node0_node1)']
29     : --1-------1----0--
29     : ['decided(value2)', 'vote(node2,value1)', '~(voting_quorum=quorum__node0_node1)']
30     : 1------1--------0-
30     : ['decided(value0)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
31     : 1-------1-------0-
31     : ['decided(value0)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
32     : -1----1---------0-
32     : ['decided(value1)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
33     : -1------1-------0-
33     : ['decided(value1)', 'vote(node1,value2)', '~(voting_quorum=quorum__node0_node2)']
34     : --1---1---------0-
34     : ['decided(value2)', 'vote(node1,value0)', '~(voting_quorum=quorum__node0_node2)']
35     : --1----1--------0-
35     : ['decided(value2)', 'vote(node1,value1)', '~(voting_quorum=quorum__node0_node2)']
36     : 1---1------------0
36     : ['decided(value0)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
37     : 1----1-----------0
37     : ['decided(value0)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
38     : -1-1-------------0
38     : ['decided(value1)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
39     : -1---1-----------0
39     : ['decided(value1)', 'vote(node0,value2)', '~(voting_quorum=quorum__node1_node2)']
40     : --11-------------0
40     : ['decided(value2)', 'vote(node0,value0)', '~(voting_quorum=quorum__node1_node2)']
41     : --1-1------------0
41     : ['decided(value2)', 'vote(node0,value1)', '~(voting_quorum=quorum__node1_node2)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,QUORUM0,NODE0,VALUE1. ~decided(VALUE0) | member(NODE0,QUORUM0) | voting_quorum = QUORUM0 | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 11




=== Prime Orbit 5 =====================
size : 9
num_suborbits: 1
42 (*) : 1--------0-----0--
42     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value0)']
43     : -1--------0----0--
43     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value1)']
44     : --1--------0---0--
44     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~vote(node2,value2)']
45     : 1-----0---------0-
45     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value0)']
46     : -1-----0--------0-
46     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value1)']
47     : --1-----0-------0-
47     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~vote(node1,value2)']
48     : 1--0-------------0
48     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value0)']
49     : -1--0------------0
49     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value1)']
50     : --1--0-----------0
50     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0)
qcost : 8




=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
51 (*) : 1--0-----------1--
51     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node0,value0)']
52     : -1--0----------1--
52     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node0,value1)']
53     : --1--0---------1--
53     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node0,value2)']
54     : 1--0------------1-
54     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node0,value0)']
55     : -1--0-----------1-
55     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node0,value1)']
56     : --1--0----------1-
56     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node0,value2)']
57     : 1-----0--------1--
57     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~vote(node1,value0)']
58     : -1-----0-------1--
58     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~vote(node1,value1)']
59     : --1-----0------1--
59     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~vote(node1,value2)']
60     : 1-----0----------1
60     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node1,value0)']
61     : -1-----0---------1
61     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node1,value1)']
62     : --1-----0--------1
62     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node1,value2)']
63     : 1--------0------1-
63     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~vote(node2,value0)']
64     : -1--------0-----1-
64     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~vote(node2,value1)']
65     : --1--------0----1-
65     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~vote(node2,value2)']
66     : 1--------0-------1
66     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~vote(node2,value0)']
67     : -1--------0------1
67     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~vote(node2,value1)']
68     : --1--------0-----1
68     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0)
qcost : 8




=== Prime Orbit 7 =====================
size : 36
num_suborbits: 1
69 (*) : 1------1-------1--
69     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value1)']
70     : 1-------1------1--
70     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node1,value2)']
71     : -1----1--------1--
71     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value0)']
72     : -1------1------1--
72     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node1,value2)']
73     : --1---1--------1--
73     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value0)']
74     : --1----1-------1--
74     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node1,value1)']
75     : 1---------1-----1-
75     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value1)']
76     : 1----------1----1-
76     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node2,value2)']
77     : -1-------1------1-
77     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value0)']
78     : -1---------1----1-
78     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node2,value2)']
79     : --1------1------1-
79     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value0)']
80     : --1-------1-----1-
80     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node2,value1)']
81     : 1---1----------1--
81     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value1)']
82     : 1----1---------1--
82     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', 'vote(node0,value2)']
83     : -1-1-----------1--
83     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value0)']
84     : -1---1---------1--
84     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', 'vote(node0,value2)']
85     : --11-----------1--
85     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value0)']
86     : --1-1----------1--
86     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', 'vote(node0,value1)']
87     : 1---------1------1
87     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value1)']
88     : 1----------1-----1
88     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node2,value2)']
89     : -1-------1-------1
89     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value0)']
90     : -1---------1-----1
90     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node2,value2)']
91     : --1------1-------1
91     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value0)']
92     : --1-------1------1
92     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node2,value1)']
93     : 1---1-----------1-
93     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value1)']
94     : 1----1----------1-
94     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', 'vote(node0,value2)']
95     : -1-1------------1-
95     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value0)']
96     : -1---1----------1-
96     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', 'vote(node0,value2)']
97     : --11------------1-
97     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value0)']
98     : --1-1-----------1-
98     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', 'vote(node0,value1)']
99     : 1------1---------1
99     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value1)']
100     : 1-------1--------1
100     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', 'vote(node1,value2)']
101     : -1----1----------1
101     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value0)']
102     : -1------1--------1
102     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', 'vote(node1,value2)']
103     : --1---1----------1
103     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value0)']
104     : --1----1---------1
104     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', 'vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,QUORUM0,NODE0,VALUE1. ~decided(VALUE0) | voting_quorum ~= QUORUM0 | ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 11




=== Prime Orbit 8 =====================
size : 36
num_suborbits: 1
105 (*) : 1----1--------0---
105     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
106     : 1---1---------0---
106     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
107     : -1---1--------0---
107     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
108     : -1-1----------0---
108     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
109     : --1-1---------0---
109     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
110     : --11----------0---
110     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
111     : 1----1-------0----
111     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
112     : 1---1--------0----
112     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
113     : -1---1-------0----
113     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
114     : -1-1---------0----
114     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
115     : --1-1--------0----
115     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
116     : --11---------0----
116     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
117     : 1-------1-----0---
117     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
118     : 1------1------0---
118     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
119     : -1------1-----0---
119     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
120     : -1----1-------0---
120     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
121     : --1----1------0---
121     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
122     : --1---1-------0---
122     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
123     : 1-------1---0-----
123     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
124     : 1------1----0-----
124     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
125     : -1------1---0-----
125     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
126     : -1----1-----0-----
126     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
127     : --1----1----0-----
127     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
128     : --1---1-----0-----
128     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
129     : 1----------1-0----
129     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
130     : 1---------1--0----
130     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
131     : -1---------1-0----
131     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
132     : -1-------1---0----
132     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
133     : --1-------1--0----
133     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
134     : --1------1---0----
134     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
135     : 1----------10-----
135     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
136     : 1---------1-0-----
136     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
137     : -1---------10-----
137     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
138     : -1-------1--0-----
138     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
139     : --1-------1-0-----
139     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
140     : --1------1--0-----
140     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,NODE0,NODE1,VALUE1. ~decided(VALUE0) | voted(NODE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 11




=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
141 (*) : 1--0----------0---
141     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
142     : -1--0---------0---
142     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
143     : --1--0--------0---
143     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
144     : 1--0---------0----
144     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
145     : -1--0--------0----
145     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
146     : --1--0-------0----
146     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
147     : 1-----0-------0---
147     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
148     : -1-----0------0---
148     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
149     : --1-----0-----0---
149     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
150     : 1-----0-----0-----
150     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
151     : -1-----0----0-----
151     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
152     : --1-----0---0-----
152     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
153     : 1--------0---0----
153     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
154     : -1--------0--0----
154     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
155     : --1--------0-0----
155     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
156     : 1--------0--0-----
156     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
157     : -1--------0-0-----
157     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
158     : --1--------00-----
158     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | vote(NODE0,VALUE0) | voted(NODE1) | NODE0 = NODE1
qcost : 8




=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
159 (*) : 1-------------0--1
159     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node2)']
160     : -1------------0--1
160     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node2)']
161     : --1-----------0--1
161     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node2)']
162     : 1------------0---1
162     : ['(voting_quorum=quorum__node1_node2)', 'decided(value0)', '~voted(node1)']
163     : -1-----------0---1
163     : ['(voting_quorum=quorum__node1_node2)', 'decided(value1)', '~voted(node1)']
164     : --1----------0---1
164     : ['(voting_quorum=quorum__node1_node2)', 'decided(value2)', '~voted(node1)']
165     : 1-------------0-1-
165     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node2)']
166     : -1------------0-1-
166     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node2)']
167     : --1-----------0-1-
167     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node2)']
168     : 1-----------0---1-
168     : ['(voting_quorum=quorum__node0_node2)', 'decided(value0)', '~voted(node0)']
169     : -1----------0---1-
169     : ['(voting_quorum=quorum__node0_node2)', 'decided(value1)', '~voted(node0)']
170     : --1---------0---1-
170     : ['(voting_quorum=quorum__node0_node2)', 'decided(value2)', '~voted(node0)']
171     : 1------------0-1--
171     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node1)']
172     : -1-----------0-1--
172     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node1)']
173     : --1----------0-1--
173     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node1)']
174     : 1-----------0--1--
174     : ['(voting_quorum=quorum__node0_node1)', 'decided(value0)', '~voted(node0)']
175     : -1----------0--1--
175     : ['(voting_quorum=quorum__node0_node1)', 'decided(value1)', '~voted(node0)']
176     : --1---------0--1--
176     : ['(voting_quorum=quorum__node0_node1)', 'decided(value2)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | voting_quorum ~= QUORUM0 | voted(NODE0)
qcost : 8




=== Prime Orbit 11 =====================
size : 9
num_suborbits: 1
177 (*) : 1-------------00--
177     : ['decided(value0)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
178     : -1------------00--
178     : ['decided(value1)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
179     : --1-----------00--
179     : ['decided(value2)', '~(voting_quorum=quorum__node0_node1)', '~voted(node2)']
180     : 1------------0--0-
180     : ['decided(value0)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
181     : -1-----------0--0-
181     : ['decided(value1)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
182     : --1----------0--0-
182     : ['decided(value2)', '~(voting_quorum=quorum__node0_node2)', '~voted(node1)']
183     : 1-----------0----0
183     : ['decided(value0)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
184     : -1----------0----0
184     : ['decided(value1)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
185     : --1---------0----0
185     : ['decided(value2)', '~(voting_quorum=quorum__node1_node2)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0)
qcost : 8




=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
186 (*) : 1--0-----0--------
186     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
187     : -1--0-----0-------
187     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
188     : --1--0-----0------
188     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
189     : 1--0--0-----------
189     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
190     : -1--0--0----------
190     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
191     : --1--0--0---------
191     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
192     : 1-----0--0--------
192     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
193     : -1-----0--0-------
193     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
194     : --1-----0--0------
194     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 8




=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
195 (*) : 1------1-0--------
195     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
196     : 1-------10--------
196     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
197     : -1----1---0-------
197     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
198     : -1------1-0-------
198     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
199     : --1---1----0------
199     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
200     : --1----1---0------
200     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
201     : 1-----0---1-------
201     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
202     : 1-----0----1------
202     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
203     : -1-----0-1--------
203     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
204     : -1-----0---1------
204     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
205     : --1-----01--------
205     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
206     : --1-----0-1-------
206     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
207     : 1---1----0--------
207     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
208     : 1----1---0--------
208     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
209     : -1-1------0-------
209     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
210     : -1---1----0-------
210     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
211     : --11-------0------
211     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
212     : --1-1------0------
212     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
213     : 1--0------1-------
213     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
214     : 1--0-------1------
214     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
215     : -1--0----1--------
215     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
216     : -1--0------1------
216     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
217     : --1--0---1--------
217     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
218     : --1--0----1-------
218     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
219     : 1---1-0-----------
219     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
220     : 1----10-----------
220     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
221     : -1-1---0----------
221     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
222     : -1---1-0----------
222     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
223     : --11----0---------
223     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
224     : --1-1---0---------
224     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
225     : 1--0---1----------
225     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
226     : 1--0----1---------
226     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
227     : -1--0-1-----------
227     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
228     : -1--0---1---------
228     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
229     : --1--01-----------
229     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
230     : --1--0-1----------
230     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,NODE0,NODE1,VALUE1. ~decided(VALUE0) | vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 11




=== Prime Orbit 14 =====================
size : 36
num_suborbits: 2
231 (*) : 1---1--1----------
231     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
232     : 1----1--1---------
232     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
233     : -1-1--1-----------
233     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
234     : -1---1--1---------
234     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
235     : --11--1-----------
235     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
236     : --1-1--1----------
236     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
237     : 1---1-----1-------
237     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
238     : 1----1-----1------
238     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
239     : -1-1-----1--------
239     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
240     : -1---1-----1------
240     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
241     : --11-----1--------
241     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
242     : --1-1-----1-------
242     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
243     : 1------1--1-------
243     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
244     : 1-------1--1------
244     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
245     : -1----1--1--------
245     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
246     : -1------1--1------
246     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
247     : --1---1--1--------
247     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
248     : --1----1--1-------
248     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
249 (*) : 1----1----1-------
249     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
250     : 1---1------1------
250     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
251     : -1---1---1--------
251     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
252     : -1-1-------1------
252     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
253     : --1-1----1--------
253     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
254     : --11------1-------
254     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
255     : 1----1-1----------
255     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
256     : 1---1---1---------
256     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
257     : -1---11-----------
257     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
258     : -1-1----1---------
258     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
259     : --1-1-1-----------
259     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
260     : --11---1----------
260     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
261     : 1-------1-1-------
261     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
262     : 1------1---1------
262     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
263     : -1------11--------
263     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
264     : -1----1----1------
264     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
265     : --1----1-1--------
265     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
266     : --1---1---1-------
266     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
num_forall :   5
num_exists :   0
num_literals : 9
quantified form : forall NODE0,VALUE2,NODE1,VALUE0,VALUE1. ~decided(VALUE0) | ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | VALUE0 = VALUE2 | NODE0 = NODE1)
qcost : 14




=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
267 (*) : 1------------00---
267     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
268     : -1-----------00---
268     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
269     : --1----------00---
269     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
270     : 1-----------0-0---
270     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
271     : -1----------0-0---
271     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
272     : --1---------0-0---
272     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
273     : 1-----------00----
273     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
274     : -1----------00----
274     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
275     : --1---------00----
275     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
num_forall :   3
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1
qcost : 8



[QRM NOTE]: Time elapsed since start: 11.520 seconds

[QRM NOTE]: Time elapsed since last: 3.072 seconds

[QRM NOTE]: Peak memory: 2419122 bytes


========================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

========================================================================================================


New level: 1
 pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 15.


Decide in level 1 among pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


New level: 2
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 33554432), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 1048576), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, 4194304), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


Solution : [0, 1, 17, 2] has cost 21.


Decide in level 2 among pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 1048576), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, 4194304), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

Decide 5 with phase True at level 2

After decision at level 2
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 5]


New level: 3
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 5]


Before reduction : 
 pending  : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 1048576), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, 4194304), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 3 : {4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 5]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 5]


Solution : [0, 1, 17, 2, 5] has cost 29.


Before backtrack at level 3
 pending : []
 solution : [0, 1, 17, 2, 5]

After backtrack at level 3
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2, 5]


Invert decision for 5 at level 2


New level: 3
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, 1048576), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, 4194304), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 solution : [0, 1, 17, 2]


Solution : [0, 1, 17, 2] has cost 21.


Decide in level 3 among pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, 1048576), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, 4194304), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

Decide 12 with phase True at level 3

After decision at level 3
 pending : [4, 6, 7, 8, 9, 10, 11, 13, 14, 15]
 solution : [0, 1, 17, 2, 12]


New level: 4
 pending : [4, 6, 7, 8, 9, 10, 11, 13, 14, 15]
 solution : [0, 1, 17, 2, 12]


Before reduction : 
 pending  : [4, 6, 7, 8, 9, 10, 11, 13, 14, 15]
 solution : [0, 1, 17, 2, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, 1048576), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, 4194304), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 4096), (7, 512), (8, 0), (9, 0), (10, 512), (11, 2048), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 4 : {8, 9, 13, 14, 15}

After reduction : 
 pending  : [4, 6, 7, 10, 11]
 solution : [0, 1, 17, 2, 12]


Before reduction : 
 pending  : [4, 6, 7, 10, 11]
 solution : [0, 1, 17, 2, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 4096), (7, 512), (8, 0), (9, 0), (10, 512), (11, 2048), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 4096), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 6, 7, 10, 11]
 solution : [0, 1, 17, 2, 12]


Solution : [0, 1, 17, 2, 12] has cost 29.


Decide in level 4 among pending : [4, 6, 7, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 4096), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [4, 7, 10, 11]
 solution : [0, 1, 17, 2, 12, 6]


New level: 5
 pending : [4, 7, 10, 11]
 solution : [0, 1, 17, 2, 12, 6]


Before reduction : 
 pending  : [4, 7, 10, 11]
 solution : [0, 1, 17, 2, 12, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 4096), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {10, 11, 4, 7}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 12, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 12, 6]


Solution : [0, 1, 17, 2, 12, 6] has cost 37.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 17, 2, 12, 6]

After backtrack at level 5
 pending : [4, 7, 10, 11]
 solution : [0, 1, 17, 2, 12, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [4, 7, 10, 11]
 solution : [0, 1, 17, 2, 12]


Before reduction : 
 pending  : [4, 7, 10, 11]
 solution : [0, 1, 17, 2, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 7, 10, 11]
 solution : [0, 1, 17, 2, 12]


Solution : [0, 1, 17, 2, 12] has cost 29.


Decide in level 5 among pending : [4, 7, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 5

After decision at level 5
 pending : [7, 10, 11]
 solution : [0, 1, 17, 2, 12, 4]


New level: 6
 pending : [7, 10, 11]
 solution : [0, 1, 17, 2, 12, 4]


Before reduction : 
 pending  : [7, 10, 11]
 solution : [0, 1, 17, 2, 12, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {7}

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 2, 12, 4]


Before reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 2, 12, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 2, 12, 4]


Solution : [0, 1, 17, 2, 12, 4] has cost 40.


Before backtrack at level 6
 pending : [10, 11]
 solution : [0, 1, 17, 2, 12, 4]

After backtrack at level 6
 pending : [10, 11, 7]
 solution : [0, 1, 17, 2, 12, 4]


Invert decision for 4 at level 5


New level: 6
 pending : [10, 11, 7]
 solution : [0, 1, 17, 2, 12]


Before reduction : 
 pending  : [10, 11, 7]
 solution : [0, 1, 17, 2, 12]

Essensial at level 6 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 2, 12, 7]


Before reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 2, 12, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 2, 12, 7]


Solution : [0, 1, 17, 2, 12, 7] has cost 40.


Before backtrack at level 6
 pending : [10, 11]
 solution : [0, 1, 17, 2, 12, 7]

After backtrack at level 6
 pending : [10, 11, 7]
 solution : [0, 1, 17, 2, 12]


Before backtrack at level 5
 pending : [10, 11, 7]
 solution : [0, 1, 17, 2, 12]

After backtrack at level 5
 pending : [10, 11, 7, 4]
 solution : [0, 1, 17, 2, 12]


Before backtrack at level 4
 pending : [10, 11, 7, 4]
 solution : [0, 1, 17, 2, 12]

After backtrack at level 4
 pending : [10, 11, 7, 4, 8, 9, 13, 14, 15, 6]
 solution : [0, 1, 17, 2, 12]


Invert decision for 12 at level 3


New level: 4
 pending : [10, 11, 7, 4, 8, 9, 13, 14, 15, 6]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [10, 11, 7, 4, 8, 9, 13, 14, 15, 6]
 solution : [0, 1, 17, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, 1048576), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, -1), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 11, 7, 4, 8, 9, 13, 14, 15, 6]
 solution : [0, 1, 17, 2]


Solution : [0, 1, 17, 2] has cost 21.


Decide in level 4 among pending : [10, 11, 7, 4, 8, 9, 13, 14, 15, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, 1048576), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, -1), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [10, 11, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2, 6]


New level: 5
 pending : [10, 11, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2, 6]


Before reduction : 
 pending  : [10, 11, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, 1048576), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, -1), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 5 : {4, 7, 8, 9, 10, 11, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 6]


Solution : [0, 1, 17, 2, 6] has cost 29.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 17, 2, 6]

After backtrack at level 5
 pending : [10, 11, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [10, 11, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [10, 11, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, -1), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 11, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2]


Solution : [0, 1, 17, 2] has cost 21.


Decide in level 5 among pending : [10, 11, 7, 4, 8, 9, 13, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, -1), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [10, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2, 11]


New level: 6
 pending : [10, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2, 11]


Before reduction : 
 pending  : [10, 7, 4, 8, 9, 13, 14, 15]
 solution : [0, 1, 17, 2, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 131072), (8, 65536), (9, 524288), (10, 131072), (11, 524288), (12, -1), (13, 524288), (14, 81920), (15, 65536), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, 0), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {10, 15}

After reduction : 
 pending  : [7, 4, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11]


Before reduction : 
 pending  : [7, 4, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, 0), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [7, 4, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11]


Solution : [0, 1, 17, 2, 11] has cost 29.


Decide in level 6 among pending : [7, 4, 8, 9, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [7, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11, 4]


New level: 7
 pending : [7, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11, 4]


Before reduction : 
 pending  : [7, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {7, 8, 9, 13, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 11, 4]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 11, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 11, 4]


Solution : [0, 1, 17, 2, 11, 4] has cost 40.


Before backtrack at level 7
 pending : []
 solution : [0, 1, 17, 2, 11, 4]

After backtrack at level 7
 pending : [7, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [7, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11]


Before reduction : 
 pending  : [7, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11]

Essensial at level 7 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {8, 9, 13, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 11, 7]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 11, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 11, 7]


Solution : [0, 1, 17, 2, 11, 7] has cost 40.


Before backtrack at level 7
 pending : []
 solution : [0, 1, 17, 2, 11, 7]

After backtrack at level 7
 pending : [7, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11]


Before backtrack at level 6
 pending : [7, 8, 9, 13, 14]
 solution : [0, 1, 17, 2, 11]

After backtrack at level 6
 pending : [7, 8, 9, 13, 14, 10, 15, 4]
 solution : [0, 1, 17, 2, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [7, 8, 9, 13, 14, 10, 15, 4]
 solution : [0, 1, 17, 2]


Before reduction : 
 pending  : [7, 8, 9, 13, 14, 10, 15, 4]
 solution : [0, 1, 17, 2]

Essensial at level 6 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {15}

After reduction : 
 pending  : [7, 8, 9, 13, 14, 4]
 solution : [0, 1, 17, 2, 10]


Before reduction : 
 pending  : [7, 8, 9, 13, 14, 4]
 solution : [0, 1, 17, 2, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [7, 8, 9, 13, 14, 4]
 solution : [0, 1, 17, 2, 10]


Solution : [0, 1, 17, 2, 10] has cost 29.


Decide in level 6 among pending : [7, 8, 9, 13, 14, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, -1), (16, -1), (17, -1)]

Decide 13 with phase True at level 6

After decision at level 6
 pending : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 2, 10, 13]


New level: 7
 pending : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 2, 10, 13]


Before reduction : 
 pending  : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 2, 10, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, 524288), (14, 81920), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {8, 9, 14}

After reduction : 
 pending  : [7, 4]
 solution : [0, 1, 17, 2, 10, 13]


Before reduction : 
 pending  : [7, 4]
 solution : [0, 1, 17, 2, 10, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 4]
 solution : [0, 1, 17, 2, 10, 13]


Solution : [0, 1, 17, 2, 10, 13] has cost 40.


Before backtrack at level 7
 pending : [7, 4]
 solution : [0, 1, 17, 2, 10, 13]

After backtrack at level 7
 pending : [7, 4, 8, 9, 14]
 solution : [0, 1, 17, 2, 10, 13]


Invert decision for 13 at level 6


New level: 7
 pending : [7, 4, 8, 9, 14]
 solution : [0, 1, 17, 2, 10]


Before reduction : 
 pending  : [7, 4, 8, 9, 14]
 solution : [0, 1, 17, 2, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, 81920), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 4, 8, 9, 14]
 solution : [0, 1, 17, 2, 10]


Solution : [0, 1, 17, 2, 10] has cost 29.


Decide in level 7 among pending : [7, 4, 8, 9, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, 81920), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 7

After decision at level 7
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 2, 10, 4]


New level: 8
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 2, 10, 4]


Before reduction : 
 pending  : [7, 8, 9, 14]
 solution : [0, 1, 17, 2, 10, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, -1), (6, -1), (7, 65536), (8, 4096), (9, 16384), (10, -1), (11, -1), (12, -1), (13, -1), (14, 81920), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {8, 9, 14, 7}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 10, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 10, 4]


Solution : [0, 1, 17, 2, 10, 4] has cost 40.


Before backtrack at level 8
 pending : []
 solution : [0, 1, 17, 2, 10, 4]

After backtrack at level 8
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 2, 10, 4]


Invert decision for 4 at level 7


New level: 8
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 2, 10]


Before reduction : 
 pending  : [7, 8, 9, 14]
 solution : [0, 1, 17, 2, 10]

Essensial at level 8 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {8, 9, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 10, 7]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 10, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 2, 10, 7]


Solution : [0, 1, 17, 2, 10, 7] has cost 40.


Before backtrack at level 8
 pending : []
 solution : [0, 1, 17, 2, 10, 7]

After backtrack at level 8
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 2, 10]


Before backtrack at level 7
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 2, 10]

After backtrack at level 7
 pending : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 2, 10]


Before backtrack at level 6
 pending : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 2, 10]

After backtrack at level 6
 pending : [7, 8, 9, 14, 4, 10, 15, 13]
 solution : [0, 1, 17, 2]


Before backtrack at level 5
 pending : [7, 8, 9, 14, 4, 10, 15, 13]
 solution : [0, 1, 17, 2]

After backtrack at level 5
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11]
 solution : [0, 1, 17, 2]


Before backtrack at level 4
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11]
 solution : [0, 1, 17, 2]

After backtrack at level 4
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6]
 solution : [0, 1, 17, 2]


Before backtrack at level 3
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6]
 solution : [0, 1, 17, 2]

After backtrack at level 3
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 12]
 solution : [0, 1, 17, 2]


Before backtrack at level 2
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 12]
 solution : [0, 1, 17, 2]

After backtrack at level 2
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 12, 5]
 solution : [0, 1, 17, 2]


Invert decision for 2 at level 1


New level: 2
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 12, 5]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 12, 5]
 solution : [0, 1, 17]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 12, 5]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 15.


Decide in level 2 among pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 12, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Decide 12 with phase True at level 2

After decision at level 2
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 5]
 solution : [0, 1, 17, 12]


New level: 3
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 5]
 solution : [0, 1, 17, 12]


Before reduction : 
 pending  : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 5]
 solution : [0, 1, 17, 12]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, 16777216), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 16384), (6, 4096), (7, 512), (8, 0), (9, 0), (10, 512), (11, 2048), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 3 : {8, 9, 13, 14, 15}

After reduction : 
 pending  : [7, 4, 10, 11, 6, 5]
 solution : [0, 1, 17, 12]


Before reduction : 
 pending  : [7, 4, 10, 11, 6, 5]
 solution : [0, 1, 17, 12]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 16384), (6, 4096), (7, 512), (8, 0), (9, 0), (10, 512), (11, 2048), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 16384), (6, 4096), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [7, 4, 10, 11, 6, 5]
 solution : [0, 1, 17, 12]


Solution : [0, 1, 17, 12] has cost 23.


Decide in level 3 among pending : [7, 4, 10, 11, 6, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 16384), (6, 4096), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 5 with phase True at level 3

After decision at level 3
 pending : [7, 4, 10, 11, 6]
 solution : [0, 1, 17, 12, 5]


New level: 4
 pending : [7, 4, 10, 11, 6]
 solution : [0, 1, 17, 12, 5]


Before reduction : 
 pending  : [7, 4, 10, 11, 6]
 solution : [0, 1, 17, 12, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, 16384), (6, 4096), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : {4, 6, 7, 10, 11}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 12, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 12, 5]


Solution : [0, 1, 17, 12, 5] has cost 31.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 17, 12, 5]

After backtrack at level 4
 pending : [7, 4, 10, 11, 6]
 solution : [0, 1, 17, 12, 5]


Invert decision for 5 at level 3


New level: 4
 pending : [7, 4, 10, 11, 6]
 solution : [0, 1, 17, 12]


Before reduction : 
 pending  : [7, 4, 10, 11, 6]
 solution : [0, 1, 17, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 4096), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [7, 4, 10, 11, 6]
 solution : [0, 1, 17, 12]


Solution : [0, 1, 17, 12] has cost 23.


Decide in level 4 among pending : [7, 4, 10, 11, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 4096), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [7, 4, 10, 11]
 solution : [0, 1, 17, 12, 6]


New level: 5
 pending : [7, 4, 10, 11]
 solution : [0, 1, 17, 12, 6]


Before reduction : 
 pending  : [7, 4, 10, 11]
 solution : [0, 1, 17, 12, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, 4096), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : {10, 11, 4, 7}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 12, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 12, 6]


Solution : [0, 1, 17, 12, 6] has cost 31.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 17, 12, 6]

After backtrack at level 5
 pending : [7, 4, 10, 11]
 solution : [0, 1, 17, 12, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [7, 4, 10, 11]
 solution : [0, 1, 17, 12]


Before reduction : 
 pending  : [7, 4, 10, 11]
 solution : [0, 1, 17, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [7, 4, 10, 11]
 solution : [0, 1, 17, 12]


Solution : [0, 1, 17, 12] has cost 23.


Decide in level 5 among pending : [7, 4, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 5

After decision at level 5
 pending : [7, 10, 11]
 solution : [0, 1, 17, 12, 4]


New level: 6
 pending : [7, 10, 11]
 solution : [0, 1, 17, 12, 4]


Before reduction : 
 pending  : [7, 10, 11]
 solution : [0, 1, 17, 12, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : {7}

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 12, 4]


Before reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 12, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 12, 4]


Solution : [0, 1, 17, 12, 4] has cost 34.


Before backtrack at level 6
 pending : [10, 11]
 solution : [0, 1, 17, 12, 4]

After backtrack at level 6
 pending : [10, 11, 7]
 solution : [0, 1, 17, 12, 4]


Invert decision for 4 at level 5


New level: 6
 pending : [10, 11, 7]
 solution : [0, 1, 17, 12]


Before reduction : 
 pending  : [10, 11, 7]
 solution : [0, 1, 17, 12]

Essensial at level 6 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 12, 7]


Before reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 12, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 11]
 solution : [0, 1, 17, 12, 7]


Solution : [0, 1, 17, 12, 7] has cost 34.


Before backtrack at level 6
 pending : [10, 11]
 solution : [0, 1, 17, 12, 7]

After backtrack at level 6
 pending : [10, 11, 7]
 solution : [0, 1, 17, 12]


Before backtrack at level 5
 pending : [10, 11, 7]
 solution : [0, 1, 17, 12]

After backtrack at level 5
 pending : [10, 11, 7, 4]
 solution : [0, 1, 17, 12]


Before backtrack at level 4
 pending : [10, 11, 7, 4]
 solution : [0, 1, 17, 12]

After backtrack at level 4
 pending : [10, 11, 7, 4, 6]
 solution : [0, 1, 17, 12]


Before backtrack at level 3
 pending : [10, 11, 7, 4, 6]
 solution : [0, 1, 17, 12]

After backtrack at level 3
 pending : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13, 5]
 solution : [0, 1, 17, 12]


Invert decision for 12 at level 2


New level: 3
 pending : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13, 5]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13, 5]
 solution : [0, 1, 17]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 512), (11, 2048), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, -1), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13, 5]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 15.


Decide in level 3 among pending : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, -1), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Decide 5 with phase True at level 3

After decision at level 3
 pending : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 5]


New level: 4
 pending : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 5]


Before reduction : 
 pending  : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, 16777216), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, -1), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 4 : {4, 6, 7, 8, 9, 10, 11, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 5]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 5]


Solution : [0, 1, 17, 5] has cost 23.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 17, 5]

After backtrack at level 4
 pending : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 5]


Invert decision for 5 at level 3


New level: 4
 pending : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13]
 solution : [0, 1, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, -1), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 15.


Decide in level 4 among pending : [10, 11, 7, 4, 6, 8, 9, 14, 15, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, -1), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [10, 11, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 6]


New level: 5
 pending : [10, 11, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 6]


Before reduction : 
 pending  : [10, 11, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, 4194304), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, -1), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

Covered at level 5 : {4, 7, 8, 9, 10, 11, 13, 14, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 6]


Solution : [0, 1, 17, 6] has cost 23.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 17, 6]

After backtrack at level 5
 pending : [10, 11, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [10, 11, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [10, 11, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, -1), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 11, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 15.


Decide in level 5 among pending : [10, 11, 7, 4, 8, 9, 14, 15, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, -1), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [10, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 11]


New level: 6
 pending : [10, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 11]


Before reduction : 
 pending  : [10, 7, 4, 8, 9, 14, 15, 13]
 solution : [0, 1, 17, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 524288), (8, 262144), (9, 2097152), (10, 524288), (11, 2097152), (12, -1), (13, 2097152), (14, 327680), (15, 262144), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, 0), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {10, 15}

After reduction : 
 pending  : [7, 4, 8, 9, 14, 13]
 solution : [0, 1, 17, 11]


Before reduction : 
 pending  : [7, 4, 8, 9, 14, 13]
 solution : [0, 1, 17, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, 0), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [7, 4, 8, 9, 14, 13]
 solution : [0, 1, 17, 11]


Solution : [0, 1, 17, 11] has cost 23.


Decide in level 6 among pending : [7, 4, 8, 9, 14, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [7, 8, 9, 14, 13]
 solution : [0, 1, 17, 11, 4]


New level: 7
 pending : [7, 8, 9, 14, 13]
 solution : [0, 1, 17, 11, 4]


Before reduction : 
 pending  : [7, 8, 9, 14, 13]
 solution : [0, 1, 17, 11, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {7, 8, 9, 13, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 11, 4]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 11, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 11, 4]


Solution : [0, 1, 17, 11, 4] has cost 34.


Before backtrack at level 7
 pending : []
 solution : [0, 1, 17, 11, 4]

After backtrack at level 7
 pending : [7, 8, 9, 14, 13]
 solution : [0, 1, 17, 11, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [7, 8, 9, 14, 13]
 solution : [0, 1, 17, 11]


Before reduction : 
 pending  : [7, 8, 9, 14, 13]
 solution : [0, 1, 17, 11]

Essensial at level 7 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {8, 9, 13, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 11, 7]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 11, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 11, 7]


Solution : [0, 1, 17, 11, 7] has cost 34.


Before backtrack at level 7
 pending : []
 solution : [0, 1, 17, 11, 7]

After backtrack at level 7
 pending : [7, 8, 9, 14, 13]
 solution : [0, 1, 17, 11]


Before backtrack at level 6
 pending : [7, 8, 9, 14, 13]
 solution : [0, 1, 17, 11]

After backtrack at level 6
 pending : [7, 8, 9, 14, 13, 10, 15, 4]
 solution : [0, 1, 17, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [7, 8, 9, 14, 13, 10, 15, 4]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [7, 8, 9, 14, 13, 10, 15, 4]
 solution : [0, 1, 17]

Essensial at level 6 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, 0), (16, -1), (17, -1)]

Covered at level 6 : {15}

After reduction : 
 pending  : [7, 8, 9, 14, 13, 4]
 solution : [0, 1, 17, 10]


Before reduction : 
 pending  : [7, 8, 9, 14, 13, 4]
 solution : [0, 1, 17, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, 0), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, -1), (16, -1), (17, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [7, 8, 9, 14, 13, 4]
 solution : [0, 1, 17, 10]


Solution : [0, 1, 17, 10] has cost 23.


Decide in level 6 among pending : [7, 8, 9, 14, 13, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, -1), (16, -1), (17, -1)]

Decide 13 with phase True at level 6

After decision at level 6
 pending : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 10, 13]


New level: 7
 pending : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 10, 13]


Before reduction : 
 pending  : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 10, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 2097152), (14, 327680), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : {8, 9, 14}

After reduction : 
 pending  : [7, 4]
 solution : [0, 1, 17, 10, 13]


Before reduction : 
 pending  : [7, 4]
 solution : [0, 1, 17, 10, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 4]
 solution : [0, 1, 17, 10, 13]


Solution : [0, 1, 17, 10, 13] has cost 34.


Before backtrack at level 7
 pending : [7, 4]
 solution : [0, 1, 17, 10, 13]

After backtrack at level 7
 pending : [7, 4, 8, 9, 14]
 solution : [0, 1, 17, 10, 13]


Invert decision for 13 at level 6


New level: 7
 pending : [7, 4, 8, 9, 14]
 solution : [0, 1, 17, 10]


Before reduction : 
 pending  : [7, 4, 8, 9, 14]
 solution : [0, 1, 17, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2048), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, 327680), (15, -1), (16, -1), (17, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 4, 8, 9, 14]
 solution : [0, 1, 17, 10]


Solution : [0, 1, 17, 10] has cost 23.


Decide in level 7 among pending : [7, 4, 8, 9, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, 327680), (15, -1), (16, -1), (17, -1)]

Decide 4 with phase True at level 7

After decision at level 7
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 10, 4]


New level: 8
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 10, 4]


Before reduction : 
 pending  : [7, 8, 9, 14]
 solution : [0, 1, 17, 10, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2097152), (5, -1), (6, -1), (7, 262144), (8, 16384), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, 327680), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {8, 9, 14, 7}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 10, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 10, 4]


Solution : [0, 1, 17, 10, 4] has cost 34.


Before backtrack at level 8
 pending : []
 solution : [0, 1, 17, 10, 4]

After backtrack at level 8
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 10, 4]


Invert decision for 4 at level 7


New level: 8
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 10]


Before reduction : 
 pending  : [7, 8, 9, 14]
 solution : [0, 1, 17, 10]

Essensial at level 8 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : {8, 9, 14}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 10, 7]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 10, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 10, 7]


Solution : [0, 1, 17, 10, 7] has cost 34.


Before backtrack at level 8
 pending : []
 solution : [0, 1, 17, 10, 7]

After backtrack at level 8
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 10]


Before backtrack at level 7
 pending : [7, 8, 9, 14]
 solution : [0, 1, 17, 10]

After backtrack at level 7
 pending : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 10]


Before backtrack at level 6
 pending : [7, 8, 9, 14, 4]
 solution : [0, 1, 17, 10]

After backtrack at level 6
 pending : [7, 8, 9, 14, 4, 10, 15, 13]
 solution : [0, 1, 17]


Before backtrack at level 5
 pending : [7, 8, 9, 14, 4, 10, 15, 13]
 solution : [0, 1, 17]

After backtrack at level 5
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11]
 solution : [0, 1, 17]


Before backtrack at level 4
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11]
 solution : [0, 1, 17]

After backtrack at level 4
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6]
 solution : [0, 1, 17]


Before backtrack at level 3
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6]
 solution : [0, 1, 17]

After backtrack at level 3
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 5]
 solution : [0, 1, 17]


Before backtrack at level 2
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 5]
 solution : [0, 1, 17]

After backtrack at level 2
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 5, 12]
 solution : [0, 1, 17]


Before backtrack at level 1
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 5, 12]
 solution : [0, 1, 17]

After backtrack at level 1
 pending : [7, 8, 9, 14, 4, 10, 15, 13, 11, 6, 5, 12, 2]
 solution : [0, 1, 17]


=======================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_forall.ivy: node=3,value=3]

=======================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: upper bound: 23

[MIN NOTE]: maximum branch and bound depth: 8

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 17, 5]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_1] forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 7

invariant [invar_17] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_5] forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | voting_quorum = QUORUM0 | member(NODE0,QUORUM0) # qcost: 8

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 23




[MIN NOTE]: Solution 1 : [0, 1, 17, 6]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_1] forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 7

invariant [invar_17] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_6] forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0) # qcost: 8

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 23




[QRM NOTE]: Time elapsed since start: 11.942 seconds

[QRM NOTE]: Time elapsed since last: 0.422 seconds

[QRM NOTE]: Peak memory: 2344002 bytes


=============================================

	[IVY_CHECK] Ivy Check for Rmin

=============================================


============================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy]

============================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_5

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_5 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_5 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 47: invar_5 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.0.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1


============================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy]

============================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_6

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_6 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_6 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 46: invar_17 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 47: invar_6 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS


=============================================================================================================================

	[MUS]: Extract strengthening assertion for [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.ivy]

=============================================================================================================================

[MUS NOTE]: number of strengthening assertions: 3

[MUS NOTE]: min mus: {0, 1, 3}

invariant [invar_0] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_1] forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 7

invariant [invar_6] forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | voting_quorum ~= QUORUM0 | vote(NODE0,VALUE0) # qcost: 8


===================================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy]

===================================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 8: axiom1

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 38: safety
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 45: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 46: invar_6

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 21: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 15: init[after2]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 38: safety ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 45: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 46: invar_6 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 38: safety ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 46: invar_6 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 38: safety ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 46: invar_6 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 22: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_forall.node_3_value_3.1.assert.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS

[ASSERT_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 20.054 seconds

[QRM NOTE]: Time elapsed since last: 8.112 seconds

[QRM NOTE]: Peak memory: 2375619 bytes


***************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_forall.ivy

***************************************************************************

[QRM RESULT]: PASS

