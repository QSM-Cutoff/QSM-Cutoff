
************************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy

************************************************************************************


**********************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

**********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy -s node=2 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 7

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.047 seconds

[QRM NOTE]: Time elapsed since last: 0.047 seconds

[QRM NOTE]: Peak memory: 47723 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: vote(fml:v,fml:n)

building bdd for action: become_leader(fml:n,fml:s)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 6


===================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj: node=2]

===================================================================================================================

sort: node=['node0', 'node1']
sort: nset=['nset__node0_node1']
predicate: isleader('node',)
predicate: quorum=('nset',)
predicate: member('node', 'nset')
predicate: voted('node', 'node')
interpreted atoms: {'member(node0,nset__node0_node1)': '1', 'member(node1,nset__node0_node1)': '1'}
state atoms: ['isleader(node0)', 'isleader(node1)', '(quorum=nset__node0_node1)', 'voted(node0,node0)', 'voted(node0,node1)', 'voted(node1,node0)', 'voted(node1,node1)']

0010-0-
0010-10
001100-
0011010
0110101
1011010

[QRM NOTE]: Time elapsed since start: 0.274 seconds

[QRM NOTE]: Time elapsed since last: 0.228 seconds

[QRM NOTE]: Peak memory: 1137036 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.280 seconds

[QRM NOTE]: Time elapsed since last: 0.006 seconds

[QRM NOTE]: Peak memory: 87175 bytes


=======================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

=======================================================================================================================


==================================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : --0----
0     : ['~(quorum=nset__node0_node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -----11
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : ---11--
2     : ['voted(node0,node0)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
3 (*) : -1---1-
3     : ['isleader(node1)', 'voted(node1,node0)']
4     : 1---1--
4     : ['isleader(node0)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
5 (*) : 11-----
5     : ['isleader(node0)', 'isleader(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
6 (*) : -1----0
6     : ['isleader(node1)', '~voted(node1,node1)']
7     : 1--0---
7     : ['isleader(node0)', '~voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
8 (*) : -1--0--
8     : ['isleader(node1)', '~voted(node0,node1)']
9     : 1----0-
9     : ['isleader(node0)', '~voted(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
10 (*) : -1-1---
10     : ['isleader(node1)', 'voted(node0,node0)']
11     : 1-----1
11     : ['isleader(node0)', 'voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 7

[PRIME NOTE]: number of orbits before merging: 7

[PRIME NOTE]: number of primes: 12

[QRM NOTE]: Time elapsed since start: 0.293 seconds

[QRM NOTE]: Time elapsed since last: 0.013 seconds

[QRM NOTE]: Peak memory: 1166932 bytes


============================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

============================================================================================================

definition primes: {0}


New level: 0
 pending : [1, 2, 3, 4, 5, 6]
 solution : []


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6]
 solution : []

Essensial at level 0 : {1, 4, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 0)]

Covered at level 0 : {2, 3, 6}

After reduction : 
 pending  : []
 solution : [1, 4, 5]


Before reduction : 
 pending  : []
 solution : [1, 4, 5]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [1, 4, 5]

[QRM NOTE]: Time elapsed since start: 0.297 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 120725 bytes


================================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

================================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -----11
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : ---11--
2     : ['voted(node0,node0)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['voted(node1,node0)', 'voted(node1,node1)']

sign_func_name2args: {'0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$voted$1$0]}

sig2const: {'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0}

part_sig: ('node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['voted(node1,node0)', 'voted(node1,node1)']

func_name2symbol:  {'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'voted': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$voted$0; node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1], 'node$0$voted$1': [node$0$voted$1$0]}

	identical_single_classes: {'node$0$voted$0; node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, 'node$0$voted$1': node$0$voted$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE1)', 'voted(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
6 (*) : -1----0
6     : ['isleader(node1)', '~voted(node1,node1)']
7     : 1--0---
7     : ['isleader(node0)', '~voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node1,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', '~voted(node1,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0,NODE0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. voted(NODE0,NODE0) | ~isleader(NODE0)


=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
8 (*) : -1--0--
8     : ['isleader(node1)', '~voted(node0,node1)']
9     : 1----0-
9     : ['isleader(node0)', '~voted(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node0,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$isleader$0$0; node$1$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', '~voted(node0,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$isleader$0$0; node$1$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$isleader$0$0; node$1$voted$1$0 | node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~isleader(NODE0) | voted(NODE1,NODE0) | NODE0 = NODE1


==========================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

==========================================================================================================================


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : -----11
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : ---11--
2     : ['voted(node0,node0)', 'voted(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
6 (*) : -1----0
6     : ['isleader(node1)', '~voted(node1,node1)']
7     : 1--0---
7     : ['isleader(node0)', '~voted(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. voted(NODE0,NODE0) | ~isleader(NODE0)
qcost : 3




=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
8 (*) : -1--0--
8     : ['isleader(node1)', '~voted(node0,node1)']
9     : 1----0-
9     : ['isleader(node0)', '~voted(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~isleader(NODE0) | voted(NODE1,NODE0) | NODE0 = NODE1
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.410 seconds

[QRM NOTE]: Time elapsed since last: 0.113 seconds

[QRM NOTE]: Peak memory: 1848500 bytes


=========================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

=========================================================================================================


New level: 1
 pending : []
 solution : [1, 4, 5]


Before reduction : 
 pending  : []
 solution : [1, 4, 5]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [1, 4, 5]


Solution : [1, 4, 5] has cost 13.


Before backtrack at level 1
 pending : []
 solution : [1, 4, 5]

After backtrack at level 1
 pending : []
 solution : [1, 4, 5]


========================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

========================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 13

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [1, 4, 5]

[MIN NOTE]: solution length: 3

invariant [invar_1] forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_4] forall NODE0. voted(NODE0,NODE0) | ~isleader(NODE0) # qcost: 3

invariant [invar_5] forall NODE0,NODE1. ~isleader(NODE0) | voted(NODE1,NODE0) | NODE0 = NODE1 # qcost: 5

[MIN NOTE]: number of total invariants: 3

[MIN NOTE]: total qCost: 13




[QRM NOTE]: Time elapsed since start: 0.482 seconds

[QRM NOTE]: Time elapsed since last: 0.072 seconds

[QRM NOTE]: Peak memory: 1837949 bytes


*************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=2]

*************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_2.0.ivy -s node=3 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_2.0.ivy: node=3]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 0.112 seconds

[QRM NOTE]: Time elapsed since last: 0.112 seconds

[QRM NOTE]: Peak memory: 171601 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: vote(fml:v,fml:n)

building bdd for action: become_leader(fml:n,fml:s)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 108


===================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj: node=3]

===================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: nset=['nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2']
predicate: voted('node', 'node')
predicate: quorum=('nset',)
predicate: member('node', 'nset')
predicate: isleader('node',)
interpreted atoms: {'member(node0,nset__node0_node1)': '1', 'member(node0,nset__node0_node2)': '1', 'member(node0,nset__node1_node2)': '0', 'member(node1,nset__node0_node1)': '1', 'member(node1,nset__node0_node2)': '0', 'member(node1,nset__node1_node2)': '1', 'member(node2,nset__node0_node1)': '0', 'member(node2,nset__node0_node2)': '1', 'member(node2,nset__node1_node2)': '1'}
state atoms: ['isleader(node0)', 'isleader(node1)', 'isleader(node2)', '(quorum=nset__node0_node1)', '(quorum=nset__node0_node2)', '(quorum=nset__node1_node2)', 'voted(node0,node0)', 'voted(node0,node1)', 'voted(node0,node2)', 'voted(node1,node0)', 'voted(node1,node1)', 'voted(node1,node2)', 'voted(node2,node0)', 'voted(node2,node1)', 'voted(node2,node2)']

00000100-00-00-
00000100-00-010
00000100-00-100
00000100-01000-
00000100-010010
00000100-010100
00000100-10000-
00000100-100010
00000100-100100
00000101000-00-
00000101000-010
00000101000-100
00000101001000-
000001010010010
000001010010100
00000101010000-
000001010100010
000001010100100
00000110000-00-
00000110000-010
00000110000-100
00000110001000-
000001100010010
000001100010100
00000110010000-
000001100100010
000001100100100
00001000-00-00-
00001000-00-010
00001000-00-100
00001000-01000-
00001000-010010
00001000-010100
00001000-10000-
00001000-100010
00001000-100100
00001001000-00-
00001001000-010
00001001000-100
00001001001000-
000010010010010
000010010010100
00001001010000-
000010010100010
000010010100100
00001010000-00-
00001010000-010
00001010000-100
00001010001000-
000010100010010
000010100010100
00001010010000-
000010100100010
000010100100100
00010000-00-00-
00010000-00-010
00010000-00-100
00010000-01000-
00010000-010010
00010000-010100
00010000-10000-
00010000-100010
00010000-100100
00010001000-00-
00010001000-010
00010001000-100
00010001001000-
000100010010010
000100010010100
00010001010000-
000100010100010
000100010100100
00010010000-00-
00010010000-010
00010010000-100
00010010001000-
000100100010010
000100100010100
00010010010000-
000100100100010
000100100100100
00100100-001001
001001010001001
001001100001001
00101000100-001
001010001010001
001010001100001
00110000100100-
001100001001010
001100001001100
01000100-010010
010001010010010
010001100010010
01001001000-010
010010010010010
010010010100010
01010001001000-
010100010010010
010100010010100
10000100-100100
100001010100100
100001100100100
10001010000-100
100010100010100
100010100100100
10010010010000-
100100100100010
100100100100100

[QRM NOTE]: Time elapsed since start: 1.075 seconds

[QRM NOTE]: Time elapsed since last: 0.964 seconds

[QRM NOTE]: Peak memory: 1388196 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_2.0.ivy: node=3]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 1.738 seconds

[QRM NOTE]: Time elapsed since last: 0.662 seconds

[QRM NOTE]: Peak memory: 1037845 bytes

next size: node=3


**********************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

**********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy -s node=3 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.020 seconds

[QRM NOTE]: Time elapsed since last: 0.020 seconds

[QRM NOTE]: Peak memory: 30956 bytes


=======================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

=======================================================================================================================


==================================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : ------------1-1
0     : ['voted(node2,node0)', 'voted(node2,node2)']
1     : ---------11----
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : -------------11
2     : ['voted(node2,node1)', 'voted(node2,node2)']
3     : ------11-------
3     : ['voted(node0,node0)', 'voted(node0,node1)']
4     : ----------11---
4     : ['voted(node1,node1)', 'voted(node1,node2)']
5     : ------1-1------
5     : ['voted(node0,node0)', 'voted(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
6 (*) : ------------11-
6     : ['voted(node2,node0)', 'voted(node2,node1)']
7     : ---------1-1---
7     : ['voted(node1,node0)', 'voted(node1,node2)']
8     : -------11------
8     : ['voted(node0,node1)', 'voted(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
9 (*) : -11------------
9     : ['isleader(node1)', 'isleader(node2)']
10     : 1-1------------
10     : ['isleader(node0)', 'isleader(node2)']
11     : 11-------------
11     : ['isleader(node0)', 'isleader(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
12 (*) : ----11---------
12     : ['(quorum=nset__node0_node2)', '(quorum=nset__node1_node2)']
13     : ---1-1---------
13     : ['(quorum=nset__node0_node1)', '(quorum=nset__node1_node2)']
14     : ---11----------
14     : ['(quorum=nset__node0_node1)', '(quorum=nset__node0_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 6
num_suborbits: 1
15 (*) : 1--------0---1-
15     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node1,node0)']
16     : 1----------10--
16     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node2,node0)']
17     : -1-----0----1--
17     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node0,node1)']
18     : -1------1----0-
18     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node2,node1)']
19     : --1-----01-----
19     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node0,node2)']
20     : --1----1---0---
20     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
21 (*) : 1--0---------1-
21     : ['isleader(node0)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
22     : 1---0------1---
22     : ['isleader(node0)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
23     : -1-0--------1--
23     : ['isleader(node1)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
24     : -1---0--1------
24     : ['isleader(node1)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
25     : --1-0----1-----
25     : ['isleader(node2)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
26     : --1--0-1-------
26     : ['isleader(node2)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
27 (*) : 1----------1-1-
27     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']
28     : -1------1---1--
28     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node0)']
29     : --1----1-1-----
29     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
30 (*) : 1-----0------1-
30     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node0,node0)']
31     : 1-----0----1---
31     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node0,node0)']
32     : -1--------0-1--
32     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node1,node1)']
33     : -1------1-0----
33     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node1,node1)']
34     : --1------1----0
34     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node2,node2)']
35     : --1----1------0
35     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
36 (*) : 1-------1----1-
36     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']
37     : 1------1---1---
37     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']
38     : -1---------11--
38     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node0)']
39     : -1------11-----
39     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node0)']
40     : --1------1---1-
40     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node1)']
41     : --1----1----1--
41     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
42 (*) : 1------1-----1-
42     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']
43     : 1-------1--1---
43     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']
44     : -1-------1--1--
44     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node0)']
45     : -1------1--1---
45     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node2)']
46     : --1------1--1--
46     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node0)']
47     : --1----1-----1-
47     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
48 (*) : 1---------1--1-
48     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']
49     : 1----------1--1
49     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node2)']
50     : -1----1-----1--
50     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node0)']
51     : -1------1-----1
51     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node2)']
52     : --1---1--1-----
52     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node0)']
53     : --1----1--1----
53     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
54 (*) : --1-----0----1-
54     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node0,node2)']
55     : -1-----0---1---
55     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node0,node1)']
56     : --1--------01--
56     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node1,node2)']
57     : 1-------10-----
57     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node1,node0)']
58     : -1-------1---0-
58     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node2,node1)']
59     : 1------1----0--
59     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
60 (*) : --1--------0-1-
60     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node1,node2)']
61     : -1---------1-0-
61     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node2,node1)']
62     : --1-----0---1--
62     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node0,node2)']
63     : 1-------1---0--
63     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node2,node0)']
64     : -1-----0-1-----
64     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node0,node1)']
65     : 1------1-0-----
65     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
66 (*) : --1-------1--1-
66     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']
67     : -1---------1--1
67     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node2)']
68     : --1---1-----1--
68     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node0)']
69     : 1-------1-----1
69     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node2)']
70     : -1----1--1-----
70     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node0)']
71     : 1------1--1----
71     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
72 (*) : --1---1------1-
72     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']
73     : -1----1----1---
73     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node2)']
74     : --1-------1-1--
74     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node0)']
75     : 1-------1-1----
75     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node1)']
76     : -1-------1----1
76     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node2)']
77     : 1------1------1
77     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
78 (*) : --1--1-------1-
78     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node1)']
79     : -1---1-----1---
79     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node2)']
80     : --1-1-------1--
80     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node0)']
81     : 1---1---1------
81     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node2)']
82     : -1-1-----1-----
82     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node0)']
83     : 1--1---1-------
83     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
84 (*) : --10---------1-
84     : ['isleader(node2)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
85     : -1--0------1---
85     : ['isleader(node1)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
86     : --10--------1--
86     : ['isleader(node2)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
87     : 1----0--1------
87     : ['isleader(node0)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
88     : -1--0----1-----
88     : ['isleader(node1)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
89     : 1----0-1-------
89     : ['isleader(node0)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
90 (*) : 1----1-------1-
90     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node1)']
91     : 1----1-----1---
91     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node2)']
92     : -1--1-------1--
92     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node0)']
93     : -1--1---1------
93     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node2)']
94     : --11-----1-----
94     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node0)']
95     : --11---1-------
95     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
96 (*) : 1---1--------1-
96     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node1)']
97     : 1--1-------1---
97     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node2)']
98     : -1---1------1--
98     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node0)']
99     : -1-1----1------
99     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node2)']
100     : --1--1---1-----
100     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node0)']
101     : --1-1--1-------
101     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
102 (*) : --1-1--------1-
102     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node1)']
103     : -1-1-------1---
103     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node2)']
104     : --1--1------1--
104     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node0)']
105     : 1--1----1------
105     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node2)']
106     : -1---1---1-----
106     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node0)']
107     : 1---1--1-------
107     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
108 (*) : -1--1--------0-
108     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node2,node1)']
109     : --11-------0---
109     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node1,node2)']
110     : 1----1------0--
110     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node2,node0)']
111     : --11----0------
111     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node0,node2)']
112     : 1----1---0-----
112     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node1,node0)']
113     : -1--1--0-------
113     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
114 (*) : -1--1---------1
114     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node2)']
115     : --11------1----
115     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node1)']
116     : 1----1--------1
116     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node2)']
117     : --11--1--------
117     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node0)']
118     : 1----1----1----
118     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node1)']
119     : -1--1-1--------
119     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
120 (*) : -1---1-------0-
120     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node2,node1)']
121     : --1--1-----0---
121     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node1,node2)']
122     : 1---1-------0--
122     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node2,node0)']
123     : --1-1---0------
123     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node0,node2)']
124     : 1--1-----0-----
124     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node1,node0)']
125     : -1-1---0-------
125     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
126 (*) : -1---1--------1
126     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node2)']
127     : --1--1----1----
127     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node1)']
128     : 1---1---------1
128     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node2)']
129     : --1-1-1--------
129     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node0)']
130     : 1--1------1----
130     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node1)']
131     : -1-1--1--------
131     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
132 (*) : -1---1----0----
132     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node1,node1)']
133     : --1--1--------0
133     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node2,node2)']
134     : 1---1-0--------
134     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node0,node0)']
135     : --1-1---------0
135     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node2,node2)']
136     : 1--1--0--------
136     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node0,node0)']
137     : -1-1------0----
137     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
138 (*) : -1-0---------0-
138     : ['isleader(node1)', '~(quorum=nset__node0_node1)', '~voted(node2,node1)']
139     : --1-0------0---
139     : ['isleader(node2)', '~(quorum=nset__node0_node2)', '~voted(node1,node2)']
140     : 1--0--------0--
140     : ['isleader(node0)', '~(quorum=nset__node0_node1)', '~voted(node2,node0)']
141     : --1--0--0------
141     : ['isleader(node2)', '~(quorum=nset__node1_node2)', '~voted(node0,node2)']
142     : 1---0----0-----
142     : ['isleader(node0)', '~(quorum=nset__node0_node2)', '~voted(node1,node0)']
143     : -1---0-0-------
143     : ['isleader(node1)', '~(quorum=nset__node1_node2)', '~voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 3
num_suborbits: 1
144 (*) : -1-----0-----0-
144     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']
145     : --1-----0--0---
145     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node1,node2)']
146     : 1--------0--0--
146     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
147 (*) : -1-----0------1
147     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node0,node1)']
148     : --1-----0-1----
148     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node0,node2)']
149     : 1--------0----1
149     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node1,node0)']
150     : --1---1----0---
150     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node1,node2)']
151     : 1---------1-0--
151     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node2,node0)']
152     : -1----1------0-
152     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
153 (*) : -1-0----------1
153     : ['isleader(node1)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
154     : --1-0-----1----
154     : ['isleader(node2)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
155     : 1--0----------1
155     : ['isleader(node0)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
156     : --1--01--------
156     : ['isleader(node2)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
157     : 1---0-----1----
157     : ['isleader(node0)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
158     : -1---01--------
158     : ['isleader(node1)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
159 (*) : -1--------0---1
159     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node1,node1)']
160     : --1-------1---0
160     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node2,node2)']
161     : 1-----0-------1
161     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node0,node0)']
162     : --1---1-------0
162     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node2,node2)']
163     : 1-----0---1----
163     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node0,node0)']
164     : -1----1---0----
164     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 3
num_suborbits: 1
165 (*) : -1--0-----0----
165     : ['isleader(node1)', '~(quorum=nset__node0_node2)', '~voted(node1,node1)']
166     : --10----------0
166     : ['isleader(node2)', '~(quorum=nset__node0_node1)', '~voted(node2,node2)']
167     : 1----00--------
167     : ['isleader(node0)', '~(quorum=nset__node1_node2)', '~voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
168 (*) : -1-----0--0----
168     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']
169     : --1-----0-----0
169     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node2,node2)']
170     : 1-----0--0-----
170     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']
171     : --1--------0--0
171     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node2,node2)']
172     : 1-----0-----0--
172     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node2,node0)']
173     : -1--------0--0-
173     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
174 (*) : -1----1-------1
174     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']
175     : --1---1---1----
175     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node1)']
176     : 1---------1---1
176     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 1
num_suborbits: 1
177 (*) : ---000---------
177     : ['~(quorum=nset__node0_node1)', '~(quorum=nset__node0_node2)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 34

[PRIME NOTE]: number of primes: 178

[QRM NOTE]: Time elapsed since start: 0.066 seconds

[QRM NOTE]: Time elapsed since last: 0.045 seconds

[QRM NOTE]: Peak memory: 1277590 bytes


============================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

============================================================================================================

definition primes: {33, 3}


New level: 0
 pending : [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []

Essensial at level 0 : {0, 1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 4194304), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 4194304), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 4194304), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1]

[QRM NOTE]: Time elapsed since start: 0.107 seconds

[QRM NOTE]: Time elapsed since last: 0.041 seconds

[QRM NOTE]: Peak memory: 238578 bytes


================================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

================================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : ------------1-1
0     : ['voted(node2,node0)', 'voted(node2,node2)']
1     : ---------11----
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : -------------11
2     : ['voted(node2,node1)', 'voted(node2,node2)']
3     : ------11-------
3     : ['voted(node0,node0)', 'voted(node0,node1)']
4     : ----------11---
4     : ['voted(node1,node1)', 'voted(node1,node2)']
5     : ------1-1------
5     : ['voted(node0,node0)', 'voted(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['voted(node2,node0)', 'voted(node2,node2)']

sign_func_name2args: {'0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0}

part_sig: ('node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['voted(node2,node0)', 'voted(node2,node2)']

func_name2symbol:  {'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$voted$0; node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1], 'node$0$voted$1': [node$0$voted$1$0]}

	identical_single_classes: {'node$0$voted$0; node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$1, 'node$0$voted$1': node$0$voted$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE1)', 'voted(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
6 (*) : ------------11-
6     : ['voted(node2,node0)', 'voted(node2,node1)']
7     : ---------1-1---
7     : ['voted(node1,node0)', 'voted(node1,node2)']
8     : -------11------
8     : ['voted(node0,node1)', 'voted(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['voted(node2,node0)', 'voted(node2,node1)']

sign_func_name2args: {'0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$1]}

sig2const: {'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$0$voted$0$1, node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$voted$0$0; node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['voted(node2,node0)', 'voted(node2,node1)']

func_name2symbol:  {'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$0$voted$0$1, node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$0$voted$0': [node$0$voted$0$0; node$0$voted$0$1], 'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}

	identical_single_classes: {'node$0$voted$0; node$0$voted$0': node$0$voted$0$0; node$0$voted$0$1}

	identical_multi_classes: {'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. (exists NODE0. (~voted(NODE1,NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
9 (*) : -11------------
9     : ['isleader(node1)', 'isleader(node2)']
10     : 1-1------------
10     : ['isleader(node0)', 'isleader(node2)']
11     : 11-------------
11     : ['isleader(node0)', 'isleader(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'isleader(node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$isleader$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$isleader$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$isleader$0$1}

part_sig: ('node$0$isleader$0$0 | node$0$isleader$0$1',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'isleader(node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$isleader': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$isleader$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$isleader$0$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0, node$0$isleader$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$isleader$0': [node$0$isleader$0$0, node$0$isleader$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE1)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~isleader(NODE1) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 4 =====================
size : 6
num_suborbits: 1
15 (*) : 1--------0---1-
15     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node1,node0)']
16     : 1----------10--
16     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node2,node0)']
17     : -1-----0----1--
17     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node0,node1)']
18     : -1------1----0-
18     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node2,node1)']
19     : --1-----01-----
19     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node0,node2)']
20     : --1----1---0---
20     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', '~voted(node1,node0)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$voted$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0; node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0; node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', '~voted(node1,node0)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0; node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$0$voted$0': [node$0$voted$0$0], 'node$0$voted$1; node$1$voted$0': [node$0$voted$1$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$0$voted$0': node$0$voted$0$0, 'node$0$voted$1; node$1$voted$0': node$0$voted$1$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE2,NODE0)', 'voted(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~isleader(NODE0) | voted(NODE2,NODE0) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
21 (*) : 1--0---------1-
21     : ['isleader(node0)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
22     : 1---0------1---
22     : ['isleader(node0)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
23     : -1-0--------1--
23     : ['isleader(node1)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
24     : -1---0--1------
24     : ['isleader(node1)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
25     : --1-0----1-----
25     : ['isleader(node2)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
26     : --1--0-1-------
26     : ['isleader(node2)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum ~= nset__node0_node1', 'voted(node2,node1)', 'member(node0,nset__node0_node1)', 'member(node1,nset__node0_node1)', '~member(node2,nset__node0_node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$member$0$0], Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1, nset$1$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$1$member$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$member$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$1': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$1$0, node$0$voted$0$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$1$0 | node$0$voted$0$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$1$0 | node$0$voted$0$0; node$1$member$0$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum ~= nset__node0_node1', 'voted(node2,node1)', 'member(node0,nset__node0_node1)', 'member(node1,nset__node0_node1)', '~member(node2,nset__node0_node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '0$voted': 1, '0$member': 2, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$1$0, node$0$voted$0$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$1$0 | node$0$voted$0$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0': [node$0$isleader$0$0; node$0$member$0$0], 'node$0$member$0; node$0$voted$1': [node$0$member$0$1; node$0$voted$1$0], 'node$0$voted$0; node$1$member$0': [node$0$voted$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0': node$0$isleader$0$0; node$0$member$0$0, 'node$0$member$0; node$0$voted$1': node$0$member$0$1; node$0$voted$1$0, 'node$0$voted$0; node$1$member$0': node$0$voted$0$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': [nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$member': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum ~= NSET0', 'member(NODE1,NSET0)', '~member(NODE2,NSET0)', 'member(NODE0,NSET0)', 'voted(NODE2,NODE1)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NSET0. quorum = NSET0 | ~member(NODE1,NSET0) | member(NODE2,NSET0) | ~member(NODE0,NSET0) | ~voted(NODE2,NODE1) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
27 (*) : 1----------1-1-
27     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']
28     : -1------1---1--
28     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node0)']
29     : --1----1-1-----
29     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$1, node$0$voted$0$1; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$1 | node$0$voted$0$1; node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$1 | node$0$voted$0$1; node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$1, node$0$voted$0$1; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$1 | node$0$voted$0$1; node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$1, node$0$voted$0$1; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0}

	identical_multi_classes: {'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0, node$0$voted$1$1, node$0$voted$0$1, node$0$voted$1$0]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE2,NODE1)', 'isleader(NODE0)', 'voted(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE2,NODE1) | ~isleader(NODE0) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
30 (*) : 1-----0------1-
30     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node0,node0)']
31     : 1-----0----1---
31     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node0,node0)']
32     : -1--------0-1--
32     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node1,node1)']
33     : -1------1-0----
33     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node1,node1)']
34     : --1------1----0
34     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node2,node2)']
35     : --1----1------0
35     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', '~voted(node0,node0)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', '~voted(node0,node0)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0], 'node$0$voted$0': [node$0$voted$0$0], 'node$0$voted$1': [node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, 'node$0$voted$0': node$0$voted$0$0, 'node$0$voted$1': node$0$voted$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE0,NODE0)', 'voted(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~isleader(NODE0) | voted(NODE0,NODE0) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
36 (*) : 1-------1----1-
36     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']
37     : 1------1---1---
37     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']
38     : -1---------11--
38     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node0)']
39     : -1------11-----
39     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node0)']
40     : --1------1---1-
40     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node1)']
41     : --1----1----1--
41     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$voted$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0': [node$0$isleader$0$0; node$0$voted$0$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$1; node$0$voted$1$0], 'node$0$voted$1': [node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0': node$0$isleader$0$0; node$0$voted$0$0, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$1; node$0$voted$1$0, 'node$0$voted$1': node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', 'voted(NODE0,NODE1)', 'voted(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~isleader(NODE0) | ~voted(NODE0,NODE1) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
42 (*) : 1------1-----1-
42     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']
43     : 1-------1--1---
43     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']
44     : -1-------1--1--
44     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node0)']
45     : -1------1--1---
45     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node2)']
46     : --1------1--1--
46     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node0)']
47     : --1----1-----1-
47     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$voted$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0': [node$0$isleader$0$0; node$0$voted$0$0], 'node$0$voted$0': [node$0$voted$0$1], 'node$0$voted$1; node$0$voted$1': [node$0$voted$1$0; node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0': node$0$isleader$0$0; node$0$voted$0$0, 'node$0$voted$0': node$0$voted$0$1, 'node$0$voted$1; node$0$voted$1': node$0$voted$1$0; node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', 'voted(NODE0,NODE2)', 'voted(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~isleader(NODE0) | ~voted(NODE0,NODE2) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
48 (*) : 1---------1--1-
48     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']
49     : 1----------1--1
49     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node2)']
50     : -1----1-----1--
50     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node0)']
51     : -1------1-----1
51     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node2)']
52     : --1---1--1-----
52     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node0)']
53     : --1----1--1----
53     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$voted$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1, node$0$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1 | node$0$voted$0$1}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1 | node$0$voted$0$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1, node$0$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1 | node$0$voted$0$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0; node$0$voted$1; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1], 'node$0$voted$0': [node$0$voted$0$1]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0, 'node$0$voted$0; node$0$voted$1; node$0$voted$1': node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1, 'node$0$voted$0': node$0$voted$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE2,NODE1)', 'isleader(NODE0)', 'voted(NODE1,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE2,NODE1) | ~isleader(NODE0) | ~voted(NODE1,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
54 (*) : --1-----0----1-
54     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node0,node2)']
55     : -1-----0---1---
55     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node0,node1)']
56     : --1--------01--
56     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node1,node2)']
57     : 1-------10-----
57     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node1,node0)']
58     : -1-------1---0-
58     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node2,node1)']
59     : 1------1----0--
59     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', '~voted(node0,node2)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$0$voted$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0 | node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node2)', '~voted(node0,node2)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0 | node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0], 'node$0$voted$1': [node$0$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0; node$1$voted$1': node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, 'node$0$voted$1': node$0$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE2,NODE0)', 'voted(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~isleader(NODE0) | voted(NODE2,NODE0) | ~voted(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
60 (*) : --1--------0-1-
60     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node1,node2)']
61     : -1---------1-0-
61     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node2,node1)']
62     : --1-----0---1--
62     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node0,node2)']
63     : 1-------1---0--
63     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node2,node0)']
64     : -1-----0-1-----
64     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node0,node1)']
65     : 1------1-0-----
65     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', '~voted(node1,node2)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0; node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0; node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node2)', '~voted(node1,node2)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0; node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0], 'node$0$voted$1; node$1$voted$0': [node$0$voted$1$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0; node$1$voted$1': node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, 'node$0$voted$1; node$1$voted$0': node$0$voted$1$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', 'voted(NODE0,NODE1)', '~voted(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~isleader(NODE0) | ~voted(NODE0,NODE1) | voted(NODE1,NODE0) | NODE0 = NODE1


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
66 (*) : --1-------1--1-
66     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']
67     : -1---------1--1
67     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node2)']
68     : --1---1-----1--
68     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node0)']
69     : 1-------1-----1
69     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node2)']
70     : -1----1--1-----
70     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node0)']
71     : 1------1--1----
71     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$1, node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$1, node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0': [node$0$isleader$0$0; node$0$voted$0$1], 'node$0$voted$0; node$0$voted$1; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0': node$0$isleader$0$0; node$0$voted$0$1, 'node$0$voted$0; node$0$voted$1; node$0$voted$1': node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', 'voted(NODE0,NODE1)', 'voted(NODE1,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~isleader(NODE0) | ~voted(NODE0,NODE1) | ~voted(NODE1,NODE1) | NODE0 = NODE1


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
72 (*) : --1---1------1-
72     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']
73     : -1----1----1---
73     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node2)']
74     : --1-------1-1--
74     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node0)']
75     : 1-------1-1----
75     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node1)']
76     : -1-------1----1
76     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node2)']
77     : 1------1------1
77     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$1, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$1, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$1 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0': [node$0$isleader$0$0; node$0$voted$0$1], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0], 'node$0$voted$1': [node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0': node$0$isleader$0$0; node$0$voted$0$1, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$1$0, 'node$0$voted$1': node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', 'voted(NODE1,NODE1)', 'voted(NODE0,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~isleader(NODE0) | ~voted(NODE1,NODE1) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
78 (*) : --1--1-------1-
78     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node1)']
79     : -1---1-----1---
79     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node2)']
80     : --1-1-------1--
80     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node0)']
81     : 1---1---1------
81     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node2)']
82     : -1-1-----1-----
82     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node0)']
83     : 1--1---1-------
83     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'quorum = nset__node1_node2', 'voted(node2,node1)', 'member(node1,nset__node1_node2)', 'member(node2,nset__node1_node2)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0, node$0$member$0$1], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$1': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$1; node$0$voted$0$0, node$0$member$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$1; node$0$voted$0$0 | node$0$member$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$1; node$0$voted$0$0 | node$0$member$0$0; node$0$voted$1$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node2)', 'quorum = nset__node1_node2', 'voted(node2,node1)', 'member(node1,nset__node1_node2)', 'member(node2,nset__node1_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$1; node$0$voted$0$0, node$0$member$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$1; node$0$voted$0$0 | node$0$member$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$0$voted$0': [node$0$isleader$0$0; node$0$member$0$1; node$0$voted$0$0], 'node$0$member$0; node$0$voted$1': [node$0$member$0$0; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$0$voted$0': node$0$isleader$0$0; node$0$member$0$1; node$0$voted$0$0, 'node$0$member$0; node$0$voted$1': node$0$member$0$0; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', 'voted(NODE0,NODE1)', 'member(NODE1,NSET0)', 'member(NODE0,NSET0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~voted(NODE0,NODE1) | ~member(NODE1,NSET0) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
84 (*) : --10---------1-
84     : ['isleader(node2)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
85     : -1--0------1---
85     : ['isleader(node1)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
86     : --10--------1--
86     : ['isleader(node2)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
87     : 1----0--1------
87     : ['isleader(node0)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
88     : -1--0----1-----
88     : ['isleader(node1)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
89     : 1----0-1-------
89     : ['isleader(node0)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'quorum ~= nset__node0_node1', 'voted(node2,node1)', 'member(node1,nset__node0_node1)', '~member(node2,nset__node0_node1)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0, node$1$member$0$0], Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0, nset$0$member$1$0, nset$1$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$1$0', 'nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node2)', 'quorum ~= nset__node0_node1', 'voted(node2,node1)', 'member(node1,nset__node0_node1)', '~member(node2,nset__node0_node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '0$voted': 1, '0$member': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0; node$1$member$0': [node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0], 'node$0$member$0; node$0$voted$1': [node$0$member$0$0; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0; node$1$member$0': node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0, 'node$0$member$0; node$0$voted$1': node$0$member$0$0; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,NSET0)', 'voted(NODE0,NODE1)', 'quorum ~= NSET0', 'member(NODE1,NSET0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. member(NODE0,NSET0) | ~voted(NODE0,NODE1) | quorum = NSET0 | ~member(NODE1,NSET0) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
90 (*) : 1----1-------1-
90     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node1)']
91     : 1----1-----1---
91     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node2)']
92     : -1--1-------1--
92     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node0)']
93     : -1--1---1------
93     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node2)']
94     : --11-----1-----
94     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node0)']
95     : --11---1-------
95     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node1_node2', 'voted(node2,node1)', '~member(node0,nset__node1_node2)', 'member(node1,nset__node1_node2)', 'member(node2,nset__node1_node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$member$0$0], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0, nset$1$member$1$0, nset$0$member$1$0, nset$0$member$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$member$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$0$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$1': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$1$0, node$0$member$0$1; node$0$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$1$0 | node$0$member$0$1; node$0$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$1$0 | node$0$member$0$1; node$0$voted$0$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node1_node2', 'voted(node2,node1)', '~member(node0,nset__node1_node2)', 'member(node1,nset__node1_node2)', 'member(node2,nset__node1_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '1$member': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$1$0, node$0$member$0$1; node$0$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$1$0 | node$0$member$0$1; node$0$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$member$0': [node$0$isleader$0$0; node$1$member$0$0], 'node$0$member$0; node$0$voted$1': [node$0$member$0$0; node$0$voted$1$0], 'node$0$member$0; node$0$voted$0': [node$0$member$0$1; node$0$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$member$0': node$0$isleader$0$0; node$1$member$0$0, 'node$0$member$0; node$0$voted$1': node$0$member$0$0; node$0$voted$1$0, 'node$0$member$0; node$0$voted$0': node$0$member$0$1; node$0$voted$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~member(NODE0,NSET0)', 'member(NODE1,NSET0)', 'member(NODE2,NSET0)', 'voted(NODE2,NODE1)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NSET0. quorum ~= NSET0 | member(NODE0,NSET0) | ~member(NODE1,NSET0) | ~member(NODE2,NSET0) | ~voted(NODE2,NODE1) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
96 (*) : 1---1--------1-
96     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node1)']
97     : 1--1-------1---
97     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node2)']
98     : -1---1------1--
98     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node0)']
99     : -1-1----1------
99     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node2)']
100     : --1--1---1-----
100     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node0)']
101     : --1-1--1-------
101     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node0_node2', 'voted(node2,node1)', 'member(node0,nset__node0_node2)', '~member(node1,nset__node0_node2)', 'member(node2,nset__node0_node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$member$0$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1, nset$1$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$member$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$1$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$1': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0, node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node0_node2', 'voted(node2,node1)', 'member(node0,nset__node0_node2)', '~member(node1,nset__node0_node2)', 'member(node2,nset__node0_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '0$member': 2, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0, node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0': [node$0$isleader$0$0; node$0$member$0$0], 'node$0$member$0; node$0$voted$0': [node$0$member$0$1; node$0$voted$0$0], 'node$0$voted$1; node$1$member$0': [node$0$voted$1$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0': node$0$isleader$0$0; node$0$member$0$0, 'node$0$member$0; node$0$voted$0': node$0$member$0$1; node$0$voted$0$0, 'node$0$voted$1; node$1$member$0': node$0$voted$1$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$member': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE2)', 'quorum = NSET0', 'member(NODE1,NSET0)', '~member(NODE2,NSET0)', 'member(NODE0,NSET0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NSET0. ~voted(NODE1,NODE2) | quorum ~= NSET0 | ~member(NODE1,NSET0) | member(NODE2,NSET0) | ~member(NODE0,NSET0) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
102 (*) : --1-1--------1-
102     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node1)']
103     : -1-1-------1---
103     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node2)']
104     : --1--1------1--
104     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node0)']
105     : 1--1----1------
105     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node2)']
106     : -1---1---1-----
106     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node0)']
107     : 1---1--1-------
107     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node2)', 'quorum = nset__node0_node2', 'voted(node2,node1)', '~member(node1,nset__node0_node2)', 'member(node2,nset__node0_node2)']

sign_func_name2args: {'0$isleader': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$voted$0$0, node$0$member$0$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0, nset$1$member$1$0, nset$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$1$0, node$1$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0, node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0', 'nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node2)', 'quorum = nset__node0_node2', 'voted(node2,node1)', '~member(node1,nset__node0_node2)', 'member(node2,nset__node0_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '1$member': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0, node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$0$voted$0': [node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0], 'node$0$voted$1; node$1$member$0': [node$0$voted$1$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$0$voted$0': node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0, 'node$0$voted$1; node$1$member$0': node$0$voted$1$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~member(NODE1,NSET0)', 'voted(NODE0,NODE1)', 'member(NODE0,NSET0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | member(NODE1,NSET0) | ~voted(NODE0,NODE1) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
108 (*) : -1--1--------0-
108     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node2,node1)']
109     : --11-------0---
109     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node1,node2)']
110     : 1----1------0--
110     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node2,node0)']
111     : --11----0------
111     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node0,node2)']
112     : 1----1---0-----
112     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node1,node0)']
113     : -1--1--0-------
113     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node0_node2', '~voted(node2,node1)', '~member(node1,nset__node0_node2)', 'member(node2,nset__node0_node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$1$member$0$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0, nset$1$member$1$0, nset$0$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0, node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0 | node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0 | node$0$member$0$0; node$1$voted$0$0', 'nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum = nset__node0_node2', '~voted(node2,node1)', '~member(node1,nset__node0_node2)', 'member(node2,nset__node0_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '1$voted': 1, '1$member': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0, node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0 | node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$member$0; node$1$voted$1': [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0], 'node$0$member$0; node$1$voted$0': [node$0$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$member$0; node$1$voted$1': node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0, 'node$0$member$0; node$1$voted$0': node$0$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~voted(NODE1,NODE0)', '~member(NODE0,NSET0)', 'member(NODE1,NSET0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | voted(NODE1,NODE0) | member(NODE0,NSET0) | ~member(NODE1,NSET0) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
114 (*) : -1--1---------1
114     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node2)']
115     : --11------1----
115     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node1)']
116     : 1----1--------1
116     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node2)']
117     : --11--1--------
117     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node0)']
118     : 1----1----1----
118     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node1)']
119     : -1--1-1--------
119     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node0_node2', 'voted(node2,node2)', '~member(node1,nset__node0_node2)', 'member(node2,nset__node0_node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$member$0$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0, nset$1$member$1$0, nset$0$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0', 'nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum = nset__node0_node2', 'voted(node2,node2)', '~member(node1,nset__node0_node2)', 'member(node2,nset__node0_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '1$member': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$member$0': [node$0$isleader$0$0; node$1$member$0$0], 'node$0$member$0; node$0$voted$0; node$0$voted$1': [node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$member$0': node$0$isleader$0$0; node$1$member$0$0, 'node$0$member$0; node$0$voted$0; node$0$voted$1': node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~member(NODE0,NSET0)', 'member(NODE1,NSET0)', 'voted(NODE1,NODE1)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | member(NODE0,NSET0) | ~member(NODE1,NSET0) | ~voted(NODE1,NODE1) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
120 (*) : -1---1-------0-
120     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node2,node1)']
121     : --1--1-----0---
121     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node1,node2)']
122     : 1---1-------0--
122     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node2,node0)']
123     : --1-1---0------
123     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node0,node2)']
124     : 1--1-----0-----
124     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node1,node0)']
125     : -1-1---0-------
125     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node1_node2', '~voted(node2,node1)', 'member(node1,nset__node1_node2)', 'member(node2,nset__node1_node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$0$member$0$0], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$0$member$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$1': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, node$0$member$0$1; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$0$member$0$1; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$0$member$0$1; node$1$voted$0$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum = nset__node1_node2', '~voted(node2,node1)', 'member(node1,nset__node1_node2)', 'member(node2,nset__node1_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '1$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, node$0$member$0$1; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$0$member$0$1; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$1': [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0], 'node$0$member$0; node$1$voted$0': [node$0$member$0$1; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$1': node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, 'node$0$member$0; node$1$voted$0': node$0$member$0$1; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~voted(NODE1,NODE0)', 'member(NODE1,NSET0)', 'member(NODE0,NSET0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | voted(NODE1,NODE0) | ~member(NODE1,NSET0) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
126 (*) : -1---1--------1
126     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node2)']
127     : --1--1----1----
127     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node1)']
128     : 1---1---------1
128     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node2)']
129     : --1-1-1--------
129     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node0)']
130     : 1--1------1----
130     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node1)']
131     : -1-1--1--------
131     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node1_node2', 'voted(node2,node2)', 'member(node1,nset__node1_node2)', 'member(node2,nset__node1_node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$member$0$0], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$member$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$1': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum = nset__node1_node2', 'voted(node2,node2)', 'member(node1,nset__node1_node2)', 'member(node2,nset__node1_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0': [node$0$isleader$0$0; node$0$member$0$0], 'node$0$member$0; node$0$voted$0; node$0$voted$1': [node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0': node$0$isleader$0$0; node$0$member$0$0, 'node$0$member$0; node$0$voted$0; node$0$voted$1': node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', 'member(NODE1,NSET0)', 'voted(NODE1,NODE1)', 'member(NODE0,NSET0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~member(NODE1,NSET0) | ~voted(NODE1,NODE1) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
132 (*) : -1---1----0----
132     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node1,node1)']
133     : --1--1--------0
133     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node2,node2)']
134     : 1---1-0--------
134     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node0,node0)']
135     : --1-1---------0
135     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node2,node2)']
136     : 1--1--0--------
136     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node0,node0)']
137     : -1-1------0----
137     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum = nset__node1_node2', '~voted(node1,node1)', 'member(node1,nset__node1_node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$quorum=': [(Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0, node$0$member$0$0], Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$0$quorum=$0$0, nset$0$member$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node1_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0', 'nset$0$member$1$0; nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum = nset__node1_node2', '~voted(node1,node1)', 'member(node1,nset__node1_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '1$voted': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$0; node$1$voted$1': node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$quorum=$0': [nset$0$member$1$0; nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$quorum=$0': nset$0$member$1$0; nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE0,NODE0)', 'quorum = NSET0', 'member(NODE0,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NSET0. ~isleader(NODE0) | voted(NODE0,NODE0) | quorum ~= NSET0 | ~member(NODE0,NSET0)


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
138 (*) : -1-0---------0-
138     : ['isleader(node1)', '~(quorum=nset__node0_node1)', '~voted(node2,node1)']
139     : --1-0------0---
139     : ['isleader(node2)', '~(quorum=nset__node0_node2)', '~voted(node1,node2)']
140     : 1--0--------0--
140     : ['isleader(node0)', '~(quorum=nset__node0_node1)', '~voted(node2,node0)']
141     : --1--0--0------
141     : ['isleader(node2)', '~(quorum=nset__node1_node2)', '~voted(node0,node2)']
142     : 1---0----0-----
142     : ['isleader(node0)', '~(quorum=nset__node0_node2)', '~voted(node1,node0)']
143     : -1---0-0-------
143     : ['isleader(node1)', '~(quorum=nset__node1_node2)', '~voted(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum ~= nset__node0_node1', '~voted(node2,node1)', 'member(node1,nset__node0_node1)', '~member(node2,nset__node0_node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$0$member$0$0], Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0, nset$0$member$1$0, nset$1$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$1$member$0$0; node$1$voted$0$0', 'nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum ~= nset__node0_node1', '~voted(node2,node1)', 'member(node1,nset__node0_node1)', '~member(node2,nset__node0_node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '1$voted': 1, '0$member': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$1': [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0], 'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$1': node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, 'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1,NODE0)', '~member(NODE1,NSET0)', 'quorum ~= NSET0', 'member(NODE0,NSET0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. voted(NODE1,NODE0) | member(NODE1,NSET0) | quorum = NSET0 | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 26 =====================
size : 3
num_suborbits: 1
144 (*) : -1-----0-----0-
144     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']
145     : --1-----0--0---
145     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node1,node2)']
146     : 1--------0--0--
146     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$1$voted$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0 | node$1$voted$0$1',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0 | node$1$voted$0$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1], 'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE1)', '~voted(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~isleader(NODE1) | (exists NODE0. (voted(NODE0,NODE1) & NODE0 ~= NODE1))


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
147 (*) : -1-----0------1
147     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node0,node1)']
148     : --1-----0-1----
148     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node0,node2)']
149     : 1--------0----1
149     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node1,node0)']
150     : --1---1----0---
150     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node1,node2)']
151     : 1---------1-0--
151     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node2,node0)']
152     : -1----1------0-
152     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node0,node1)', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0 | node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', '~voted(node0,node1)', 'voted(node2,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0 | node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE2,NODE0)', 'voted(NODE1,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~isleader(NODE0) | voted(NODE2,NODE0) | ~voted(NODE1,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
153 (*) : -1-0----------1
153     : ['isleader(node1)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
154     : --1-0-----1----
154     : ['isleader(node2)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
155     : 1--0----------1
155     : ['isleader(node0)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
156     : --1--01--------
156     : ['isleader(node2)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
157     : 1---0-----1----
157     : ['isleader(node0)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
158     : -1---01--------
158     : ['isleader(node1)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum ~= nset__node0_node1', 'voted(node2,node2)', 'member(node1,nset__node0_node1)', '~member(node2,nset__node0_node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$0$member$0$0], Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0, nset$0$member$1$0, nset$1$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0, node$1$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$0$member$1$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node0_node1', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0, node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0', 'nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum ~= nset__node0_node1', 'voted(node2,node2)', 'member(node1,nset__node0_node1)', '~member(node2,nset__node0_node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '0$voted': 1, '0$member': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$0$member$0$0, node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$0$member$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0': [node$0$isleader$0$0; node$0$member$0$0], 'node$0$voted$0; node$0$voted$1; node$1$member$0': [node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0': node$0$isleader$0$0; node$0$member$0$0, 'node$0$voted$0; node$0$voted$1; node$1$member$0': node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE1,NSET0)', 'quorum ~= NSET0', 'voted(NODE1,NODE1)', 'member(NODE0,NSET0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. member(NODE1,NSET0) | quorum = NSET0 | ~voted(NODE1,NODE1) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
159 (*) : -1--------0---1
159     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node1,node1)']
160     : --1-------1---0
160     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node2,node2)']
161     : 1-----0-------1
161     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node0,node0)']
162     : --1---1-------0
162     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node2,node2)']
163     : 1-----0---1----
163     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node0,node0)']
164     : -1----1---0----
164     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node1,node1)', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', '~voted(node1,node1)', 'voted(node2,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE0,NODE0)', 'voted(NODE1,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~isleader(NODE0) | voted(NODE0,NODE0) | ~voted(NODE1,NODE1) | NODE0 = NODE1


=== Prime Orbit 30 =====================
size : 3
num_suborbits: 1
165 (*) : -1--0-----0----
165     : ['isleader(node1)', '~(quorum=nset__node0_node2)', '~voted(node1,node1)']
166     : --10----------0
166     : ['isleader(node2)', '~(quorum=nset__node0_node1)', '~voted(node2,node2)']
167     : 1----00--------
167     : ['isleader(node0)', '~(quorum=nset__node1_node2)', '~voted(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'quorum ~= nset__node0_node2', '~voted(node1,node1)', '~member(node1,nset__node0_node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$quorum=': [(Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0, node$1$member$0$0], Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))): [nset$1$quorum=$0$0, nset$1$member$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$quorum=$0$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'nset$1$member$1$0': Const('nset__node0_node2', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0', 'nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'quorum ~= nset__node0_node2', '~voted(node1,node1)', '~member(node1,nset__node0_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): [nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')): nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$member$0; node$1$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$member$0; node$1$voted$0; node$1$voted$1': node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$1$member$1; nset$1$quorum=$0': [nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$1$member$1; nset$1$quorum=$0': nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1', 'nset__node0_node2', 'nset__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', 'quorum ~= NSET0', '~voted(NODE0,NODE0)', '~member(NODE0,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NSET0. ~isleader(NODE0) | quorum = NSET0 | voted(NODE0,NODE0) | member(NODE0,NSET0)


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
168 (*) : -1-----0--0----
168     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']
169     : --1-----0-----0
169     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node2,node2)']
170     : 1-----0--0-----
170     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']
171     : --1--------0--0
171     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node2,node2)']
172     : 1-----0-----0--
172     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node2,node0)']
173     : -1--------0--0-
173     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0, node$1$voted$1$0, node$1$voted$0$1, node$1$voted$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1; node$1$voted$1': node$0$isleader$0$0; node$1$voted$0$1; node$1$voted$1$0; node$1$voted$1$1, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', '~voted(NODE0,NODE0)', '~voted(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~isleader(NODE0) | voted(NODE0,NODE0) | voted(NODE1,NODE0) | NODE0 = NODE1


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
174 (*) : -1----1-------1
174     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']
175     : --1---1---1----
175     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node1)']
176     : 1---------1---1
176     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$isleader$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$0, node$0$voted$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$voted$0$1, node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$0$1; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1; node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$0$1; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1; node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0, node$0$voted$0$1; node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0}

	identical_multi_classes: {'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0, node$0$voted$1$0, node$0$voted$0$1, node$0$voted$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE2,NODE2)', 'isleader(NODE0)', 'voted(NODE1,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE2,NODE2) | ~isleader(NODE0) | ~voted(NODE1,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


==========================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

==========================================================================================================================


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : ------------1-1
0     : ['voted(node2,node0)', 'voted(node2,node2)']
1     : ---------11----
1     : ['voted(node1,node0)', 'voted(node1,node1)']
2     : -------------11
2     : ['voted(node2,node1)', 'voted(node2,node2)']
3     : ------11-------
3     : ['voted(node0,node0)', 'voted(node0,node1)']
4     : ----------11---
4     : ['voted(node1,node1)', 'voted(node1,node2)']
5     : ------1-1------
5     : ['voted(node0,node0)', 'voted(node0,node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
6 (*) : ------------11-
6     : ['voted(node2,node0)', 'voted(node2,node1)']
7     : ---------1-1---
7     : ['voted(node1,node0)', 'voted(node1,node2)']
8     : -------11------
8     : ['voted(node0,node1)', 'voted(node0,node2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE1. (exists NODE0. (~voted(NODE1,NODE0) & NODE0 ~= NODE1))
qcost : 4




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
9 (*) : -11------------
9     : ['isleader(node1)', 'isleader(node2)']
10     : 1-1------------
10     : ['isleader(node0)', 'isleader(node2)']
11     : 11-------------
11     : ['isleader(node0)', 'isleader(node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~isleader(NODE1) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 4 =====================
size : 6
num_suborbits: 1
15 (*) : 1--------0---1-
15     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node1,node0)']
16     : 1----------10--
16     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node2,node0)']
17     : -1-----0----1--
17     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node0,node1)']
18     : -1------1----0-
18     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node2,node1)']
19     : --1-----01-----
19     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node0,node2)']
20     : --1----1---0---
20     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~isleader(NODE0) | voted(NODE2,NODE0) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
21 (*) : 1--0---------1-
21     : ['isleader(node0)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
22     : 1---0------1---
22     : ['isleader(node0)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
23     : -1-0--------1--
23     : ['isleader(node1)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
24     : -1---0--1------
24     : ['isleader(node1)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
25     : --1-0----1-----
25     : ['isleader(node2)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
26     : --1--0-1-------
26     : ['isleader(node2)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NSET0. quorum = NSET0 | ~member(NODE1,NSET0) | member(NODE2,NSET0) | ~member(NODE0,NSET0) | ~voted(NODE2,NODE1) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
27 (*) : 1----------1-1-
27     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']
28     : -1------1---1--
28     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node0)']
29     : --1----1-1-----
29     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE2,NODE1) | ~isleader(NODE0) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
30 (*) : 1-----0------1-
30     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node0,node0)']
31     : 1-----0----1---
31     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node0,node0)']
32     : -1--------0-1--
32     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node1,node1)']
33     : -1------1-0----
33     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node1,node1)']
34     : --1------1----0
34     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node2,node2)']
35     : --1----1------0
35     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node2,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~isleader(NODE0) | voted(NODE0,NODE0) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
36 (*) : 1-------1----1-
36     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']
37     : 1------1---1---
37     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']
38     : -1---------11--
38     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node0)']
39     : -1------11-----
39     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node0)']
40     : --1------1---1-
40     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node1)']
41     : --1----1----1--
41     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~isleader(NODE0) | ~voted(NODE0,NODE1) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
42 (*) : 1------1-----1-
42     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']
43     : 1-------1--1---
43     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']
44     : -1-------1--1--
44     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node0)']
45     : -1------1--1---
45     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node2)']
46     : --1------1--1--
46     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node0)']
47     : --1----1-----1-
47     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~isleader(NODE0) | ~voted(NODE0,NODE2) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
48 (*) : 1---------1--1-
48     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']
49     : 1----------1--1
49     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node2)']
50     : -1----1-----1--
50     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node0)']
51     : -1------1-----1
51     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node2)']
52     : --1---1--1-----
52     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node0)']
53     : --1----1--1----
53     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE2,NODE1) | ~isleader(NODE0) | ~voted(NODE1,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
54 (*) : --1-----0----1-
54     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node0,node2)']
55     : -1-----0---1---
55     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node0,node1)']
56     : --1--------01--
56     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node1,node2)']
57     : 1-------10-----
57     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node1,node0)']
58     : -1-------1---0-
58     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node2,node1)']
59     : 1------1----0--
59     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~isleader(NODE0) | voted(NODE2,NODE0) | ~voted(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
60 (*) : --1--------0-1-
60     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node1,node2)']
61     : -1---------1-0-
61     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node2,node1)']
62     : --1-----0---1--
62     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node0,node2)']
63     : 1-------1---0--
63     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node2,node0)']
64     : -1-----0-1-----
64     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node0,node1)']
65     : 1------1-0-----
65     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~isleader(NODE0) | ~voted(NODE0,NODE1) | voted(NODE1,NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
66 (*) : --1-------1--1-
66     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']
67     : -1---------1--1
67     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node2)']
68     : --1---1-----1--
68     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node0)']
69     : 1-------1-----1
69     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node2)']
70     : -1----1--1-----
70     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node0)']
71     : 1------1--1----
71     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~isleader(NODE0) | ~voted(NODE0,NODE1) | ~voted(NODE1,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
72 (*) : --1---1------1-
72     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']
73     : -1----1----1---
73     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node2)']
74     : --1-------1-1--
74     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node0)']
75     : 1-------1-1----
75     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node1)']
76     : -1-------1----1
76     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node2)']
77     : 1------1------1
77     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~isleader(NODE0) | ~voted(NODE1,NODE1) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
78 (*) : --1--1-------1-
78     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node1)']
79     : -1---1-----1---
79     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node2)']
80     : --1-1-------1--
80     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node0)']
81     : 1---1---1------
81     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node2)']
82     : -1-1-----1-----
82     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node0)']
83     : 1--1---1-------
83     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~voted(NODE0,NODE1) | ~member(NODE1,NSET0) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
84 (*) : --10---------1-
84     : ['isleader(node2)', 'voted(node2,node1)', '~(quorum=nset__node0_node1)']
85     : -1--0------1---
85     : ['isleader(node1)', 'voted(node1,node2)', '~(quorum=nset__node0_node2)']
86     : --10--------1--
86     : ['isleader(node2)', 'voted(node2,node0)', '~(quorum=nset__node0_node1)']
87     : 1----0--1------
87     : ['isleader(node0)', 'voted(node0,node2)', '~(quorum=nset__node1_node2)']
88     : -1--0----1-----
88     : ['isleader(node1)', 'voted(node1,node0)', '~(quorum=nset__node0_node2)']
89     : 1----0-1-------
89     : ['isleader(node0)', 'voted(node0,node1)', '~(quorum=nset__node1_node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. member(NODE0,NSET0) | ~voted(NODE0,NODE1) | quorum = NSET0 | ~member(NODE1,NSET0) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
90 (*) : 1----1-------1-
90     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node1)']
91     : 1----1-----1---
91     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node2)']
92     : -1--1-------1--
92     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node0)']
93     : -1--1---1------
93     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node2)']
94     : --11-----1-----
94     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node0)']
95     : --11---1-------
95     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node1)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NSET0. quorum ~= NSET0 | member(NODE0,NSET0) | ~member(NODE1,NSET0) | ~member(NODE2,NSET0) | ~voted(NODE2,NODE1) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
96 (*) : 1---1--------1-
96     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node1)']
97     : 1--1-------1---
97     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node2)']
98     : -1---1------1--
98     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node0)']
99     : -1-1----1------
99     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node2)']
100     : --1--1---1-----
100     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node0)']
101     : --1-1--1-------
101     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node1)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NSET0. ~voted(NODE1,NODE2) | quorum ~= NSET0 | ~member(NODE1,NSET0) | member(NODE2,NSET0) | ~member(NODE0,NSET0) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
102 (*) : --1-1--------1-
102     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node2,node1)']
103     : -1-1-------1---
103     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node1,node2)']
104     : --1--1------1--
104     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node2,node0)']
105     : 1--1----1------
105     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node0,node2)']
106     : -1---1---1-----
106     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node1,node0)']
107     : 1---1--1-------
107     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | member(NODE1,NSET0) | ~voted(NODE0,NODE1) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
108 (*) : -1--1--------0-
108     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node2,node1)']
109     : --11-------0---
109     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node1,node2)']
110     : 1----1------0--
110     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node2,node0)']
111     : --11----0------
111     : ['(quorum=nset__node0_node1)', 'isleader(node2)', '~voted(node0,node2)']
112     : 1----1---0-----
112     : ['(quorum=nset__node1_node2)', 'isleader(node0)', '~voted(node1,node0)']
113     : -1--1--0-------
113     : ['(quorum=nset__node0_node2)', 'isleader(node1)', '~voted(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | voted(NODE1,NODE0) | member(NODE0,NSET0) | ~member(NODE1,NSET0) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
114 (*) : -1--1---------1
114     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node2,node2)']
115     : --11------1----
115     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node1,node1)']
116     : 1----1--------1
116     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node2,node2)']
117     : --11--1--------
117     : ['(quorum=nset__node0_node1)', 'isleader(node2)', 'voted(node0,node0)']
118     : 1----1----1----
118     : ['(quorum=nset__node1_node2)', 'isleader(node0)', 'voted(node1,node1)']
119     : -1--1-1--------
119     : ['(quorum=nset__node0_node2)', 'isleader(node1)', 'voted(node0,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | member(NODE0,NSET0) | ~member(NODE1,NSET0) | ~voted(NODE1,NODE1) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
120 (*) : -1---1-------0-
120     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node2,node1)']
121     : --1--1-----0---
121     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node1,node2)']
122     : 1---1-------0--
122     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node2,node0)']
123     : --1-1---0------
123     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node0,node2)']
124     : 1--1-----0-----
124     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node1,node0)']
125     : -1-1---0-------
125     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | voted(NODE1,NODE0) | ~member(NODE1,NSET0) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
126 (*) : -1---1--------1
126     : ['(quorum=nset__node1_node2)', 'isleader(node1)', 'voted(node2,node2)']
127     : --1--1----1----
127     : ['(quorum=nset__node1_node2)', 'isleader(node2)', 'voted(node1,node1)']
128     : 1---1---------1
128     : ['(quorum=nset__node0_node2)', 'isleader(node0)', 'voted(node2,node2)']
129     : --1-1-1--------
129     : ['(quorum=nset__node0_node2)', 'isleader(node2)', 'voted(node0,node0)']
130     : 1--1------1----
130     : ['(quorum=nset__node0_node1)', 'isleader(node0)', 'voted(node1,node1)']
131     : -1-1--1--------
131     : ['(quorum=nset__node0_node1)', 'isleader(node1)', 'voted(node0,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~member(NODE1,NSET0) | ~voted(NODE1,NODE1) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
132 (*) : -1---1----0----
132     : ['(quorum=nset__node1_node2)', 'isleader(node1)', '~voted(node1,node1)']
133     : --1--1--------0
133     : ['(quorum=nset__node1_node2)', 'isleader(node2)', '~voted(node2,node2)']
134     : 1---1-0--------
134     : ['(quorum=nset__node0_node2)', 'isleader(node0)', '~voted(node0,node0)']
135     : --1-1---------0
135     : ['(quorum=nset__node0_node2)', 'isleader(node2)', '~voted(node2,node2)']
136     : 1--1--0--------
136     : ['(quorum=nset__node0_node1)', 'isleader(node0)', '~voted(node0,node0)']
137     : -1-1------0----
137     : ['(quorum=nset__node0_node1)', 'isleader(node1)', '~voted(node1,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NSET0. ~isleader(NODE0) | voted(NODE0,NODE0) | quorum ~= NSET0 | ~member(NODE0,NSET0)
qcost : 6




=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
138 (*) : -1-0---------0-
138     : ['isleader(node1)', '~(quorum=nset__node0_node1)', '~voted(node2,node1)']
139     : --1-0------0---
139     : ['isleader(node2)', '~(quorum=nset__node0_node2)', '~voted(node1,node2)']
140     : 1--0--------0--
140     : ['isleader(node0)', '~(quorum=nset__node0_node1)', '~voted(node2,node0)']
141     : --1--0--0------
141     : ['isleader(node2)', '~(quorum=nset__node1_node2)', '~voted(node0,node2)']
142     : 1---0----0-----
142     : ['isleader(node0)', '~(quorum=nset__node0_node2)', '~voted(node1,node0)']
143     : -1---0-0-------
143     : ['isleader(node1)', '~(quorum=nset__node1_node2)', '~voted(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. voted(NODE1,NODE0) | member(NODE1,NSET0) | quorum = NSET0 | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 26 =====================
size : 3
num_suborbits: 1
144 (*) : -1-----0-----0-
144     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']
145     : --1-----0--0---
145     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node1,node2)']
146     : 1--------0--0--
146     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node2,node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~isleader(NODE1) | (exists NODE0. (voted(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
147 (*) : -1-----0------1
147     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node0,node1)']
148     : --1-----0-1----
148     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node0,node2)']
149     : 1--------0----1
149     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node1,node0)']
150     : --1---1----0---
150     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node1,node2)']
151     : 1---------1-0--
151     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node2,node0)']
152     : -1----1------0-
152     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~isleader(NODE0) | voted(NODE2,NODE0) | ~voted(NODE1,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
153 (*) : -1-0----------1
153     : ['isleader(node1)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
154     : --1-0-----1----
154     : ['isleader(node2)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
155     : 1--0----------1
155     : ['isleader(node0)', 'voted(node2,node2)', '~(quorum=nset__node0_node1)']
156     : --1--01--------
156     : ['isleader(node2)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
157     : 1---0-----1----
157     : ['isleader(node0)', 'voted(node1,node1)', '~(quorum=nset__node0_node2)']
158     : -1---01--------
158     : ['isleader(node1)', 'voted(node0,node0)', '~(quorum=nset__node1_node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. member(NODE1,NSET0) | quorum = NSET0 | ~voted(NODE1,NODE1) | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
159 (*) : -1--------0---1
159     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node1,node1)']
160     : --1-------1---0
160     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node2,node2)']
161     : 1-----0-------1
161     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node0,node0)']
162     : --1---1-------0
162     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node2,node2)']
163     : 1-----0---1----
163     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node0,node0)']
164     : -1----1---0----
164     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node1,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~isleader(NODE0) | voted(NODE0,NODE0) | ~voted(NODE1,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 30 =====================
size : 3
num_suborbits: 1
165 (*) : -1--0-----0----
165     : ['isleader(node1)', '~(quorum=nset__node0_node2)', '~voted(node1,node1)']
166     : --10----------0
166     : ['isleader(node2)', '~(quorum=nset__node0_node1)', '~voted(node2,node2)']
167     : 1----00--------
167     : ['isleader(node0)', '~(quorum=nset__node1_node2)', '~voted(node0,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NSET0. ~isleader(NODE0) | quorum = NSET0 | voted(NODE0,NODE0) | member(NODE0,NSET0)
qcost : 6




=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
168 (*) : -1-----0--0----
168     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']
169     : --1-----0-----0
169     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node2,node2)']
170     : 1-----0--0-----
170     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']
171     : --1--------0--0
171     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node2,node2)']
172     : 1-----0-----0--
172     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node2,node0)']
173     : -1--------0--0-
173     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node2,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~isleader(NODE0) | voted(NODE0,NODE0) | voted(NODE1,NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
174 (*) : -1----1-------1
174     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']
175     : --1---1---1----
175     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node1)']
176     : 1---------1---1
176     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE2,NODE2) | ~isleader(NODE0) | ~voted(NODE1,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9



[QRM NOTE]: Time elapsed since start: 0.345 seconds

[QRM NOTE]: Time elapsed since last: 0.238 seconds

[QRM NOTE]: Peak memory: 2052726 bytes


=========================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

=========================================================================================================


New level: 1
 pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 4194304), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 4194304), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1]


Solution : [0, 1] has cost 9.


Decide in level 1 among pending : [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]

Coverage : [(0, -1), (1, -1), (2, 4194304), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1, 2]


New level: 2
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1, 2]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 4194304), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 131072), (6, 32768), (7, 131072), (8, 32768), (9, 32768), (10, 32768), (11, 131072), (12, 131072), (13, 32768), (14, 32768), (15, 32768), (16, 131072), (17, 32768), (18, 32768), (19, 32768), (20, 131072), (21, 32768), (22, 131072), (23, 32768), (24, 131072), (25, 524288), (26, 524288), (27, 131072), (28, 131072), (29, 131072), (30, 524288), (31, 524288), (32, 32768), (33, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1, 2]


Solution : [0, 1, 2] has cost 14.


Decide in level 2 among pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 131072), (6, 32768), (7, 131072), (8, 32768), (9, 32768), (10, 32768), (11, 131072), (12, 131072), (13, 32768), (14, 32768), (15, 32768), (16, 131072), (17, 32768), (18, 32768), (19, 32768), (20, 131072), (21, 32768), (22, 131072), (23, 32768), (24, 131072), (25, 524288), (26, 524288), (27, 131072), (28, 131072), (29, 131072), (30, 524288), (31, 524288), (32, 32768), (33, -1)]

Decide 25 with phase True at level 2

After decision at level 2
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1, 2, 25]


New level: 3
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1, 2, 25]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32]
 solution : [0, 1, 2, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 131072), (6, 32768), (7, 131072), (8, 32768), (9, 32768), (10, 32768), (11, 131072), (12, 131072), (13, 32768), (14, 32768), (15, 32768), (16, 131072), (17, 32768), (18, 32768), (19, 32768), (20, 131072), (21, 32768), (22, 131072), (23, 32768), (24, 131072), (25, 524288), (26, 524288), (27, 131072), (28, 131072), (29, 131072), (30, 524288), (31, 524288), (32, 32768), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 512), (10, 0), (11, 2048), (12, 2048), (13, 512), (14, 512), (15, 4096), (16, 131072), (17, 0), (18, 0), (19, 4096), (20, 0), (21, 0), (22, 0), (23, 0), (24, 16384), (25, -1), (26, 0), (27, 0), (28, 0), (29, 2048), (30, 524288), (31, 8192), (32, 0), (33, -1)]

Covered at level 3 : {32, 4, 5, 6, 10, 17, 18, 20, 21, 22, 23, 26, 27, 28}

After reduction : 
 pending  : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 30, 31]
 solution : [0, 1, 2, 25]


Before reduction : 
 pending  : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 30, 31]
 solution : [0, 1, 2, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 512), (10, 0), (11, 2048), (12, 2048), (13, 512), (14, 512), (15, 4096), (16, 131072), (17, 0), (18, 0), (19, 4096), (20, 0), (21, 0), (22, 0), (23, 0), (24, 16384), (25, -1), (26, 0), (27, 0), (28, 0), (29, 2048), (30, 524288), (31, 8192), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, 512), (10, -1), (11, 2048), (12, 2048), (13, 512), (14, 512), (15, 4096), (16, 131072), (17, -1), (18, -1), (19, 4096), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, -1), (28, -1), (29, 2048), (30, 524288), (31, 8192), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 30, 31]
 solution : [0, 1, 2, 25]


Solution : [0, 1, 2, 25] has cost 23.


Decide in level 3 among pending : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 30, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, 512), (10, -1), (11, 2048), (12, 2048), (13, 512), (14, 512), (15, 4096), (16, 131072), (17, -1), (18, -1), (19, 4096), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, -1), (28, -1), (29, 2048), (30, 524288), (31, 8192), (32, -1), (33, -1)]

Decide 30 with phase True at level 3

After decision at level 3
 pending : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 31]
 solution : [0, 1, 2, 25, 30]


New level: 4
 pending : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 31]
 solution : [0, 1, 2, 25, 30]


Before reduction : 
 pending  : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 31]
 solution : [0, 1, 2, 25, 30]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, 512), (10, -1), (11, 2048), (12, 2048), (13, 512), (14, 512), (15, 4096), (16, 131072), (17, -1), (18, -1), (19, 4096), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, -1), (28, -1), (29, 2048), (30, 524288), (31, 8192), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 4 : {7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 1, 2, 25, 30]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 25, 30]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 25, 30]


Solution : [0, 1, 2, 25, 30] has cost 29.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 2, 25, 30]

After backtrack at level 4
 pending : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 31]
 solution : [0, 1, 2, 25, 30]


Invert decision for 30 at level 3


New level: 4
 pending : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 31]
 solution : [0, 1, 2, 25]


Before reduction : 
 pending  : [7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 24, 29, 31]
 solution : [0, 1, 2, 25]

Essensial at level 4 : {24}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 4 : {7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 1, 2, 25, 24]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 25, 24]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 25, 24]


Solution : [0, 1, 2, 25, 24] has cost 29.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 2, 25, 24]

After backtrack at level 4
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31]
 solution : [0, 1, 2, 25]


Before backtrack at level 3
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31]
 solution : [0, 1, 2, 25]

After backtrack at level 3
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 4, 5, 6, 10, 17, 18, 20, 21, 22, 23, 26, 27, 28, 32, 30]
 solution : [0, 1, 2, 25]


Invert decision for 25 at level 2


New level: 3
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 4, 5, 6, 10, 17, 18, 20, 21, 22, 23, 26, 27, 28, 32, 30]
 solution : [0, 1, 2]


Before reduction : 
 pending  : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 4, 5, 6, 10, 17, 18, 20, 21, 22, 23, 26, 27, 28, 32, 30]
 solution : [0, 1, 2]

Essensial at level 3 : {20, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 512), (10, 0), (11, 2048), (12, 2048), (13, 512), (14, 512), (15, 4096), (16, 131072), (17, 0), (18, 0), (19, 4096), (20, -1), (21, 0), (22, -1), (23, 0), (24, 16384), (25, -1), (26, 0), (27, 0), (28, 0), (29, 2048), (30, 524288), (31, 8192), (32, 0), (33, -1)]

Covered at level 3 : {32, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28}

After reduction : 
 pending  : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30]
 solution : [0, 1, 2, 20, 22]


Before reduction : 
 pending  : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30]
 solution : [0, 1, 2, 20, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 2048), (8, 512), (9, 512), (10, 0), (11, 2048), (12, 2048), (13, 512), (14, 512), (15, 4096), (16, 131072), (17, 0), (18, 0), (19, 4096), (20, -1), (21, 0), (22, -1), (23, 0), (24, 16384), (25, -1), (26, 0), (27, 0), (28, 0), (29, 2048), (30, 524288), (31, 8192), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, 512), (10, -1), (11, 2048), (12, 2048), (13, 512), (14, 512), (15, 4096), (16, 131072), (17, -1), (18, -1), (19, 4096), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, -1), (28, -1), (29, 2048), (30, 524288), (31, 8192), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30]
 solution : [0, 1, 2, 20, 22]


Solution : [0, 1, 2, 20, 22] has cost 32.


Before backtrack at level 3
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30]
 solution : [0, 1, 2, 20, 22]

After backtrack at level 3
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32]
 solution : [0, 1, 2]


Before backtrack at level 2
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32]
 solution : [0, 1, 2]

After backtrack at level 2
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1, 2]


Invert decision for 2 at level 1


New level: 2
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1]


Before reduction : 
 pending  : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 2048), (8, 512), (9, 512), (10, -1), (11, 2048), (12, 2048), (13, 512), (14, 512), (15, 4096), (16, 131072), (17, -1), (18, -1), (19, 4096), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, -1), (28, -1), (29, 2048), (30, 524288), (31, 8192), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1]


Solution : [0, 1] has cost 9.


Decide in level 2 among pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 31, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

Decide 31 with phase True at level 2

After decision at level 2
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1, 31]


New level: 3
 pending : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1, 31]


Before reduction : 
 pending  : [24, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 29, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1, 31]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, 2097152), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 4096), (7, 0), (8, 0), (9, 0), (10, 8192), (11, 0), (12, 0), (13, 0), (14, 0), (15, 512), (16, 2048), (17, 8192), (18, 8192), (19, 512), (20, 65536), (21, 16384), (22, 65536), (23, 16384), (24, 2048), (25, 262144), (26, 262144), (27, 65536), (28, 65536), (29, 0), (30, 8192), (31, -1), (32, 16384), (33, -1)]

Covered at level 3 : {7, 8, 9, 11, 12, 13, 14, 29}

After reduction : 
 pending  : [24, 15, 16, 19, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1, 31]


Before reduction : 
 pending  : [24, 15, 16, 19, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1, 31]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 4096), (7, 0), (8, 0), (9, 0), (10, 8192), (11, 0), (12, 0), (13, 0), (14, 0), (15, 512), (16, 2048), (17, 8192), (18, 8192), (19, 512), (20, 65536), (21, 16384), (22, 65536), (23, 16384), (24, 2048), (25, 262144), (26, 262144), (27, 65536), (28, 65536), (29, 0), (30, 8192), (31, -1), (32, 16384), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 4096), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 8192), (18, 8192), (19, 512), (20, 65536), (21, 16384), (22, 65536), (23, 16384), (24, 2048), (25, 262144), (26, 262144), (27, 65536), (28, 65536), (29, -1), (30, 8192), (31, -1), (32, 16384), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [24, 15, 16, 19, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]
 solution : [0, 1, 31]


Solution : [0, 1, 31] has cost 15.


Decide in level 3 among pending : [24, 15, 16, 19, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 26, 27, 28, 32, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 4096), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 8192), (18, 8192), (19, 512), (20, 65536), (21, 16384), (22, 65536), (23, 16384), (24, 2048), (25, 262144), (26, 262144), (27, 65536), (28, 65536), (29, -1), (30, 8192), (31, -1), (32, 16384), (33, -1)]

Decide 26 with phase True at level 3

After decision at level 3
 pending : [24, 15, 16, 19, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 27, 28, 32, 25]
 solution : [0, 1, 31, 26]


New level: 4
 pending : [24, 15, 16, 19, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 27, 28, 32, 25]
 solution : [0, 1, 31, 26]


Before reduction : 
 pending  : [24, 15, 16, 19, 30, 20, 22, 4, 5, 6, 10, 17, 18, 21, 23, 27, 28, 32, 25]
 solution : [0, 1, 31, 26]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 4096), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 8192), (18, 8192), (19, 512), (20, 65536), (21, 16384), (22, 65536), (23, 16384), (24, 2048), (25, 262144), (26, 262144), (27, 65536), (28, 65536), (29, -1), (30, 8192), (31, -1), (32, 16384), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 2048), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 512), (18, 512), (19, 512), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, 2048), (25, 8192), (26, -1), (27, 0), (28, 2048), (29, -1), (30, 8192), (31, -1), (32, 0), (33, -1)]

Covered at level 4 : {32, 4, 6, 10, 27}

After reduction : 
 pending  : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26]


Before reduction : 
 pending  : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 2048), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 512), (18, 512), (19, 512), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, 2048), (25, 8192), (26, -1), (27, 0), (28, 2048), (29, -1), (30, 8192), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 512), (18, 512), (19, 512), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, 2048), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, 8192), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26]


Solution : [0, 1, 31, 26] has cost 20.


Decide in level 4 among pending : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 512), (18, 512), (19, 512), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, 2048), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, 8192), (31, -1), (32, -1), (33, -1)]

Decide 30 with phase True at level 4

After decision at level 4
 pending : [24, 15, 16, 19, 20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26, 30]


New level: 5
 pending : [24, 15, 16, 19, 20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26, 30]


Before reduction : 
 pending  : [24, 15, 16, 19, 20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26, 30]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 512), (18, 512), (19, 512), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, 2048), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, 8192), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 512), (18, 512), (19, 0), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, 0), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : {24, 16, 19, 15}

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26, 30]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26, 30]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 512), (18, 512), (19, 0), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, 0), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 512), (18, 512), (19, -1), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, -1), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26, 30]


Solution : [0, 1, 31, 26, 30] has cost 26.


Decide in level 5 among pending : [20, 22, 5, 17, 18, 21, 23, 28, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 512), (18, 512), (19, -1), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, -1), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 5

After decision at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 30, 25]


New level: 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 30, 25]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 30, 25]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 512), (18, 512), (19, -1), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, -1), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {5, 17, 18, 20, 21, 22, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 30, 25]


Before reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 30, 25]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 30, 25]


Solution : [0, 1, 31, 26, 30, 25] has cost 35.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 31, 26, 30, 25]

After backtrack at level 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 30, 25]


Invert decision for 25 at level 5


New level: 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 30]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 30]

Essensial at level 6 : {20, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {5, 17, 18, 21, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 30, 20, 22]


Before reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 30, 20, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 30, 20, 22]


Solution : [0, 1, 31, 26, 30, 20, 22] has cost 44.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 31, 26, 30, 20, 22]

After backtrack at level 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 30]


Before backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 30]

After backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25]
 solution : [0, 1, 31, 26, 30]


Invert decision for 30 at level 4


New level: 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25]
 solution : [0, 1, 31, 26]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25]
 solution : [0, 1, 31, 26]

Essensial at level 5 : {24}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 512), (18, 512), (19, 0), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, -1), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : {16, 19, 15}

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26, 24]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26, 24]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 512), (18, 512), (19, 0), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, -1), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 512), (18, 512), (19, -1), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, -1), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 25]
 solution : [0, 1, 31, 26, 24]


Solution : [0, 1, 31, 26, 24] has cost 26.


Decide in level 5 among pending : [20, 22, 5, 17, 18, 21, 23, 28, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 512), (18, 512), (19, -1), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, -1), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 5

After decision at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 24, 25]


New level: 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 24, 25]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 24, 25]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2048), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 512), (18, 512), (19, -1), (20, 2048), (21, 512), (22, 2048), (23, 512), (24, -1), (25, 8192), (26, -1), (27, -1), (28, 2048), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {5, 17, 18, 20, 21, 22, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 24, 25]


Before reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 24, 25]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 24, 25]


Solution : [0, 1, 31, 26, 24, 25] has cost 35.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 31, 26, 24, 25]

After backtrack at level 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 24, 25]


Invert decision for 25 at level 5


New level: 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 24]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 24]

Essensial at level 6 : {20, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {5, 17, 18, 21, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 24, 20, 22]


Before reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 24, 20, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 31, 26, 24, 20, 22]


Solution : [0, 1, 31, 26, 24, 20, 22] has cost 44.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 31, 26, 24, 20, 22]

After backtrack at level 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 24]


Before backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28]
 solution : [0, 1, 31, 26, 24]

After backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25]
 solution : [0, 1, 31, 26]


Before backtrack at level 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25]
 solution : [0, 1, 31, 26]

After backtrack at level 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31, 26]


Invert decision for 26 at level 3


New level: 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 4096), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 8192), (18, 8192), (19, 512), (20, 65536), (21, 16384), (22, 65536), (23, 16384), (24, 2048), (25, 262144), (26, -1), (27, 65536), (28, 65536), (29, -1), (30, 8192), (31, -1), (32, 16384), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31]


Solution : [0, 1, 31] has cost 15.


Decide in level 4 among pending : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 25, 4, 6, 10, 27, 32, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 4096), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 8192), (18, 8192), (19, 512), (20, 65536), (21, 16384), (22, 65536), (23, 16384), (24, 2048), (25, 262144), (26, -1), (27, 65536), (28, 65536), (29, -1), (30, 8192), (31, -1), (32, 16384), (33, -1)]

Decide 25 with phase True at level 4

After decision at level 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31, 25]


New level: 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31, 25]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 24, 15, 16, 19, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31, 25]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, 32768), (6, 4096), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 8192), (18, 8192), (19, 512), (20, 65536), (21, 16384), (22, 65536), (23, 16384), (24, 2048), (25, 262144), (26, -1), (27, 65536), (28, 65536), (29, -1), (30, 8192), (31, -1), (32, 16384), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 0), (18, 0), (19, 512), (20, 0), (21, 0), (22, 0), (23, 0), (24, 2048), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, 8192), (31, -1), (32, 0), (33, -1)]

Covered at level 5 : {32, 4, 5, 6, 10, 17, 18, 20, 21, 22, 23, 27, 28}

After reduction : 
 pending  : [24, 15, 16, 19, 30]
 solution : [0, 1, 31, 25]


Before reduction : 
 pending  : [24, 15, 16, 19, 30]
 solution : [0, 1, 31, 25]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 0), (18, 0), (19, 512), (20, 0), (21, 0), (22, 0), (23, 0), (24, 2048), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, 8192), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, -1), (18, -1), (19, 512), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2048), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8192), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [24, 15, 16, 19, 30]
 solution : [0, 1, 31, 25]


Solution : [0, 1, 31, 25] has cost 24.


Decide in level 5 among pending : [24, 15, 16, 19, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, -1), (18, -1), (19, 512), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2048), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8192), (31, -1), (32, -1), (33, -1)]

Decide 30 with phase True at level 5

After decision at level 5
 pending : [24, 15, 16, 19]
 solution : [0, 1, 31, 25, 30]


New level: 6
 pending : [24, 15, 16, 19]
 solution : [0, 1, 31, 25, 30]


Before reduction : 
 pending  : [24, 15, 16, 19]
 solution : [0, 1, 31, 25, 30]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, -1), (18, -1), (19, 512), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2048), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8192), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {24, 16, 19, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 31, 25, 30]


Before reduction : 
 pending  : []
 solution : [0, 1, 31, 25, 30]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 31, 25, 30]


Solution : [0, 1, 31, 25, 30] has cost 30.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 31, 25, 30]

After backtrack at level 6
 pending : [24, 15, 16, 19]
 solution : [0, 1, 31, 25, 30]


Invert decision for 30 at level 5


New level: 6
 pending : [24, 15, 16, 19]
 solution : [0, 1, 31, 25]


Before reduction : 
 pending  : [24, 15, 16, 19]
 solution : [0, 1, 31, 25]

Essensial at level 6 : {24}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {16, 19, 15}

After reduction : 
 pending  : []
 solution : [0, 1, 31, 25, 24]


Before reduction : 
 pending  : []
 solution : [0, 1, 31, 25, 24]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 31, 25, 24]


Solution : [0, 1, 31, 25, 24] has cost 30.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 31, 25, 24]

After backtrack at level 6
 pending : [24, 15, 16, 19]
 solution : [0, 1, 31, 25]


Before backtrack at level 5
 pending : [24, 15, 16, 19]
 solution : [0, 1, 31, 25]

After backtrack at level 5
 pending : [24, 15, 16, 19, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31, 25]


Invert decision for 25 at level 4


New level: 5
 pending : [24, 15, 16, 19, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31]


Before reduction : 
 pending  : [24, 15, 16, 19, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 30]
 solution : [0, 1, 31]

Essensial at level 5 : {20, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 0), (18, 0), (19, 512), (20, -1), (21, 0), (22, -1), (23, 0), (24, 2048), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, 8192), (31, -1), (32, 0), (33, -1)]

Covered at level 5 : {32, 4, 5, 6, 10, 17, 18, 21, 23, 27, 28}

After reduction : 
 pending  : [24, 15, 16, 19, 30]
 solution : [0, 1, 31, 20, 22]


Before reduction : 
 pending  : [24, 15, 16, 19, 30]
 solution : [0, 1, 31, 20, 22]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, 0), (18, 0), (19, 512), (20, -1), (21, 0), (22, -1), (23, 0), (24, 2048), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, 8192), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, -1), (18, -1), (19, 512), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2048), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8192), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [24, 15, 16, 19, 30]
 solution : [0, 1, 31, 20, 22]


Solution : [0, 1, 31, 20, 22] has cost 33.


Before backtrack at level 5
 pending : [24, 15, 16, 19, 30]
 solution : [0, 1, 31, 20, 22]

After backtrack at level 5
 pending : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32]
 solution : [0, 1, 31]


Before backtrack at level 4
 pending : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32]
 solution : [0, 1, 31]

After backtrack at level 4
 pending : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25]
 solution : [0, 1, 31]


Before backtrack at level 3
 pending : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25]
 solution : [0, 1, 31]

After backtrack at level 3
 pending : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 31]


Invert decision for 31 at level 2


New level: 3
 pending : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1]


Before reduction : 
 pending  : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 512), (16, 2048), (17, -1), (18, -1), (19, 512), (20, -1), (21, -1), (22, -1), (23, -1), (24, 2048), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8192), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, -1), (32, 131072), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1]


Solution : [0, 1] has cost 9.


Decide in level 3 among pending : [24, 15, 16, 19, 30, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, -1), (32, 131072), (33, -1)]

Decide 30 with phase True at level 3

After decision at level 3
 pending : [24, 15, 16, 19, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]


New level: 4
 pending : [24, 15, 16, 19, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]


Before reduction : 
 pending  : [24, 15, 16, 19, 20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 524288), (6, 131072), (7, 524288), (8, 131072), (9, 131072), (10, 131072), (11, 524288), (12, 524288), (13, 131072), (14, 131072), (15, 131072), (16, 524288), (17, 131072), (18, 131072), (19, 131072), (20, 524288), (21, 131072), (22, 524288), (23, 131072), (24, 524288), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 524288), (30, 2097152), (31, -1), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, 0), (16, 0), (17, 65536), (18, 8192), (19, 0), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, 0), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

Covered at level 4 : {24, 16, 19, 15}

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, 0), (16, 0), (17, 65536), (18, 8192), (19, 0), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, 0), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]


Solution : [0, 1, 30] has cost 15.


Decide in level 4 among pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 25, 7, 8, 9, 11, 12, 13, 14, 29, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

Decide 25 with phase True at level 4

After decision at level 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30, 25]


New level: 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30, 25]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30, 25]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 5 : {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32}

After reduction : 
 pending  : []
 solution : [0, 1, 30, 25]


Before reduction : 
 pending  : []
 solution : [0, 1, 30, 25]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 30, 25]


Solution : [0, 1, 30, 25] has cost 24.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 30, 25]

After backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30, 25]


Invert decision for 25 at level 4


New level: 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]

Essensial at level 5 : {20, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 5 : {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 21, 23, 26, 27, 28, 29, 32}

After reduction : 
 pending  : []
 solution : [0, 1, 30, 20, 22]


Before reduction : 
 pending  : []
 solution : [0, 1, 30, 20, 22]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 30, 20, 22]


Solution : [0, 1, 30, 20, 22] has cost 33.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 30, 20, 22]

After backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]


Before backtrack at level 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26]
 solution : [0, 1, 30]

After backtrack at level 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26, 24, 15, 16, 19, 25]
 solution : [0, 1, 30]


Invert decision for 30 at level 3


New level: 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26, 24, 15, 16, 19, 25]
 solution : [0, 1]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26, 24, 15, 16, 19, 25]
 solution : [0, 1]

Essensial at level 4 : {24}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, 0), (16, 0), (17, 65536), (18, 8192), (19, 0), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

Covered at level 4 : {16, 19, 15}

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26, 25]
 solution : [0, 1, 24]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26, 25]
 solution : [0, 1, 24]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, 0), (16, 0), (17, 65536), (18, 8192), (19, 0), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26, 25]
 solution : [0, 1, 24]


Solution : [0, 1, 24] has cost 15.


Decide in level 4 among pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 26, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

Decide 26 with phase True at level 4

After decision at level 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 25]
 solution : [0, 1, 24, 26]


New level: 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 25]
 solution : [0, 1, 24, 26]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 4, 6, 10, 27, 32, 7, 8, 9, 11, 12, 13, 14, 29, 25]
 solution : [0, 1, 24, 26]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, 2097152), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 32768), (6, 0), (7, 2048), (8, 512), (9, 512), (10, 0), (11, 2048), (12, 4096), (13, 1024), (14, 512), (15, -1), (16, -1), (17, 4096), (18, 1024), (19, -1), (20, 32768), (21, 8192), (22, 4096), (23, 512), (24, -1), (25, 262144), (26, -1), (27, 0), (28, 65536), (29, 4096), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 5 : {32, 4, 6, 10, 27}

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 25]
 solution : [0, 1, 24, 26]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 25]
 solution : [0, 1, 24, 26]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 32768), (6, 0), (7, 2048), (8, 512), (9, 512), (10, 0), (11, 2048), (12, 4096), (13, 1024), (14, 512), (15, -1), (16, -1), (17, 4096), (18, 1024), (19, -1), (20, 32768), (21, 8192), (22, 4096), (23, 512), (24, -1), (25, 262144), (26, -1), (27, 0), (28, 65536), (29, 4096), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, 2048), (8, 512), (9, 512), (10, -1), (11, 2048), (12, 4096), (13, 1024), (14, 512), (15, -1), (16, -1), (17, 4096), (18, 1024), (19, -1), (20, 32768), (21, 8192), (22, 4096), (23, 512), (24, -1), (25, 262144), (26, -1), (27, -1), (28, 65536), (29, 4096), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 25]
 solution : [0, 1, 24, 26]


Solution : [0, 1, 24, 26] has cost 20.


Decide in level 5 among pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, 2048), (8, 512), (9, 512), (10, -1), (11, 2048), (12, 4096), (13, 1024), (14, 512), (15, -1), (16, -1), (17, 4096), (18, 1024), (19, -1), (20, 32768), (21, 8192), (22, 4096), (23, 512), (24, -1), (25, 262144), (26, -1), (27, -1), (28, 65536), (29, 4096), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 5

After decision at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29]
 solution : [0, 1, 24, 26, 25]


New level: 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29]
 solution : [0, 1, 24, 26, 25]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29]
 solution : [0, 1, 24, 26, 25]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, 2048), (8, 512), (9, 512), (10, -1), (11, 2048), (12, 4096), (13, 1024), (14, 512), (15, -1), (16, -1), (17, 4096), (18, 1024), (19, -1), (20, 32768), (21, 8192), (22, 4096), (23, 512), (24, -1), (25, 262144), (26, -1), (27, -1), (28, 65536), (29, 4096), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {5, 7, 8, 9, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 1, 24, 26, 25]


Before reduction : 
 pending  : []
 solution : [0, 1, 24, 26, 25]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 24, 26, 25]


Solution : [0, 1, 24, 26, 25] has cost 29.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 24, 26, 25]

After backtrack at level 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29]
 solution : [0, 1, 24, 26, 25]


Invert decision for 25 at level 5


New level: 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29]
 solution : [0, 1, 24, 26]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29]
 solution : [0, 1, 24, 26]

Essensial at level 6 : {20, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {5, 7, 8, 9, 11, 12, 13, 14, 17, 18, 21, 23, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 1, 24, 26, 20, 22]


Before reduction : 
 pending  : []
 solution : [0, 1, 24, 26, 20, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, 0), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 24, 26, 20, 22]


Solution : [0, 1, 24, 26, 20, 22] has cost 38.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 24, 26, 20, 22]

After backtrack at level 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29]
 solution : [0, 1, 24, 26]


Before backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29]
 solution : [0, 1, 24, 26]

After backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25]
 solution : [0, 1, 24, 26]


Invert decision for 26 at level 4


New level: 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25]
 solution : [0, 1, 24]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25]
 solution : [0, 1, 24]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, -1), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25]
 solution : [0, 1, 24]


Solution : [0, 1, 24] has cost 15.


Decide in level 5 among pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, -1), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

Decide 25 with phase True at level 5

After decision at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32]
 solution : [0, 1, 24, 25]


New level: 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32]
 solution : [0, 1, 24, 25]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32]
 solution : [0, 1, 24, 25]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 262144), (6, 131072), (7, 32768), (8, 8192), (9, 8192), (10, 131072), (11, 65536), (12, 65536), (13, 16384), (14, 16384), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, 524288), (21, 131072), (22, 65536), (23, 16384), (24, -1), (25, 2097152), (26, -1), (27, 524288), (28, 524288), (29, 65536), (30, -1), (31, -1), (32, 131072), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 6 : {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 27, 28, 29, 32}

After reduction : 
 pending  : []
 solution : [0, 1, 24, 25]


Before reduction : 
 pending  : []
 solution : [0, 1, 24, 25]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 24, 25]


Solution : [0, 1, 24, 25] has cost 24.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 24, 25]

After backtrack at level 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32]
 solution : [0, 1, 24, 25]


Invert decision for 25 at level 5


New level: 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32]
 solution : [0, 1, 24]


Before reduction : 
 pending  : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32]
 solution : [0, 1, 24]

Essensial at level 6 : {20, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 6 : {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 21, 23, 27, 28, 29, 32}

After reduction : 
 pending  : []
 solution : [0, 1, 24, 20, 22]


Before reduction : 
 pending  : []
 solution : [0, 1, 24, 20, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 24, 20, 22]


Solution : [0, 1, 24, 20, 22] has cost 33.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 24, 20, 22]

After backtrack at level 6
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32]
 solution : [0, 1, 24]


Before backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32]
 solution : [0, 1, 24]

After backtrack at level 5
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25]
 solution : [0, 1, 24]


Before backtrack at level 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25]
 solution : [0, 1, 24]

After backtrack at level 4
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25, 24, 15, 16, 19, 26]
 solution : [0, 1]


Before backtrack at level 3
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25, 24, 15, 16, 19, 26]
 solution : [0, 1]

After backtrack at level 3
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25, 24, 15, 16, 19, 26, 30]
 solution : [0, 1]


Before backtrack at level 2
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25, 24, 15, 16, 19, 26, 30]
 solution : [0, 1]

After backtrack at level 2
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25, 24, 15, 16, 19, 26, 30, 31]
 solution : [0, 1]


Before backtrack at level 1
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25, 24, 15, 16, 19, 26, 30, 31]
 solution : [0, 1]

After backtrack at level 1
 pending : [20, 22, 5, 17, 18, 21, 23, 28, 7, 8, 9, 11, 12, 13, 14, 29, 4, 6, 10, 27, 32, 25, 24, 15, 16, 19, 26, 30, 31, 2]
 solution : [0, 1]


========================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

========================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: upper bound: 24

[MIN NOTE]: maximum branch and bound depth: 6

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 30, 25]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_1] forall NODE1. (exists NODE0. (~voted(NODE1,NODE0) & NODE0 ~= NODE1)) # qcost: 4

invariant [invar_30] forall NODE0,NSET0. ~isleader(NODE0) | quorum = NSET0 | voted(NODE0,NODE0) | member(NODE0,NSET0) # qcost: 6

invariant [invar_25] forall NODE0,NODE1,NSET0. voted(NODE1,NODE0) | member(NODE1,NSET0) | quorum = NSET0 | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1 # qcost: 9

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 24




[MIN NOTE]: Solution 1 : [0, 1, 24, 25]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_1] forall NODE1. (exists NODE0. (~voted(NODE1,NODE0) & NODE0 ~= NODE1)) # qcost: 4

invariant [invar_24] forall NODE0,NSET0. ~isleader(NODE0) | voted(NODE0,NODE0) | quorum ~= NSET0 | ~member(NODE0,NSET0) # qcost: 6

invariant [invar_25] forall NODE0,NODE1,NSET0. voted(NODE1,NODE0) | member(NODE1,NSET0) | quorum = NSET0 | ~member(NODE0,NSET0) | ~isleader(NODE0) | NODE0 = NODE1 # qcost: 9

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 24




[QRM NOTE]: Time elapsed since start: 0.564 seconds

[QRM NOTE]: Time elapsed since last: 0.219 seconds

[QRM NOTE]: Peak memory: 2027449 bytes


*************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

*************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.0.ivy -s node=4 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.0.ivy: node=4]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 24

[QRM NOTE]: Time elapsed since start: 0.232 seconds

[QRM NOTE]: Time elapsed since last: 0.232 seconds

[QRM NOTE]: Peak memory: 431695 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: vote(fml:v,fml:n)

building bdd for action: become_leader(fml:n,fml:s)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 1088


===================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj: node=4]

===================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: nset=['nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3']
predicate: isleader('node',)
predicate: member('node', 'nset')
predicate: voted('node', 'node')
predicate: quorum=('nset',)
interpreted atoms: {'member(node0,nset__node0_node1_node2)': '1', 'member(node0,nset__node0_node1_node3)': '1', 'member(node0,nset__node0_node2_node3)': '1', 'member(node0,nset__node1_node2_node3)': '0', 'member(node1,nset__node0_node1_node2)': '1', 'member(node1,nset__node0_node1_node3)': '1', 'member(node1,nset__node0_node2_node3)': '0', 'member(node1,nset__node1_node2_node3)': '1', 'member(node2,nset__node0_node1_node2)': '1', 'member(node2,nset__node0_node1_node3)': '0', 'member(node2,nset__node0_node2_node3)': '1', 'member(node2,nset__node1_node2_node3)': '1', 'member(node3,nset__node0_node1_node2)': '0', 'member(node3,nset__node0_node1_node3)': '1', 'member(node3,nset__node0_node2_node3)': '1', 'member(node3,nset__node1_node2_node3)': '1'}
state atoms: ['isleader(node0)', 'isleader(node1)', 'isleader(node2)', 'isleader(node3)', '(quorum=nset__node0_node1_node2)', '(quorum=nset__node0_node1_node3)', '(quorum=nset__node0_node2_node3)', '(quorum=nset__node1_node2_node3)', 'voted(node0,node0)', 'voted(node0,node1)', 'voted(node0,node2)', 'voted(node0,node3)', 'voted(node1,node0)', 'voted(node1,node1)', 'voted(node1,node2)', 'voted(node1,node3)', 'voted(node2,node0)', 'voted(node2,node1)', 'voted(node2,node2)', 'voted(node2,node3)', 'voted(node3,node0)', 'voted(node3,node1)', 'voted(node3,node2)', 'voted(node3,node3)']

00000001000-000-000-000-
00000001000-000-000-0010
00000001000-000-000-0100
00000001000-000-000-1000
00000001000-000-0010000-
00000001000-000-00100010
00000001000-000-00100100
00000001000-000-00101000
00000001000-000-0100000-
00000001000-000-01000010
00000001000-000-01000100
00000001000-000-01001000
00000001000-000-1000000-
00000001000-000-10000010
00000001000-000-10000100
00000001000-000-10001000
00000001000-0010000-000-
00000001000-0010000-0010
00000001000-0010000-0100
00000001000-0010000-1000
00000001000-00100010000-
00000001000-001000100010
00000001000-001000100100
00000001000-001000101000
00000001000-00100100000-
00000001000-001001000010
00000001000-001001000100
00000001000-001001001000
00000001000-00101000000-
00000001000-001010000010
00000001000-001010000100
00000001000-001010001000
00000001000-0100000-000-
00000001000-0100000-0010
00000001000-0100000-0100
00000001000-0100000-1000
00000001000-01000010000-
00000001000-010000100010
00000001000-010000100100
00000001000-010000101000
00000001000-01000100000-
00000001000-010001000010
00000001000-010001000100
00000001000-010001001000
00000001000-01001000000-
00000001000-010010000010
00000001000-010010000100
00000001000-010010001000
00000001000-1000000-000-
00000001000-1000000-0010
00000001000-1000000-0100
00000001000-1000000-1000
00000001000-10000010000-
00000001000-100000100010
00000001000-100000100100
00000001000-100000101000
00000001000-10000100000-
00000001000-100001000010
00000001000-100001000100
00000001000-100001001000
00000001000-10001000000-
00000001000-100010000010
00000001000-100010000100
00000001000-100010001000
000000010010000-000-000-
000000010010000-000-0010
000000010010000-000-0100
000000010010000-000-1000
000000010010000-0010000-
000000010010000-00100010
000000010010000-00100100
000000010010000-00101000
000000010010000-0100000-
000000010010000-01000010
000000010010000-01000100
000000010010000-01001000
000000010010000-1000000-
000000010010000-10000010
000000010010000-10000100
000000010010000-10001000
0000000100100010000-000-
0000000100100010000-0010
0000000100100010000-0100
0000000100100010000-1000
00000001001000100010000-
000000010010001000100010
000000010010001000100100
000000010010001000101000
00000001001000100100000-
000000010010001001000010
000000010010001001000100
000000010010001001001000
00000001001000101000000-
000000010010001010000010
000000010010001010000100
000000010010001010001000
0000000100100100000-000-
0000000100100100000-0010
0000000100100100000-0100
0000000100100100000-1000
00000001001001000010000-
000000010010010000100010
000000010010010000100100
000000010010010000101000
00000001001001000100000-
000000010010010001000010
000000010010010001000100
000000010010010001001000
00000001001001001000000-
000000010010010010000010
000000010010010010000100
000000010010010010001000
0000000100101000000-000-
0000000100101000000-0010
0000000100101000000-0100
0000000100101000000-1000
00000001001010000010000-
000000010010100000100010
000000010010100000100100
000000010010100000101000
00000001001010000100000-
000000010010100001000010
000000010010100001000100
000000010010100001001000
00000001001010001000000-
000000010010100010000010
000000010010100010000100
000000010010100010001000
000000010100000-000-000-
000000010100000-000-0010
000000010100000-000-0100
000000010100000-000-1000
000000010100000-0010000-
000000010100000-00100010
000000010100000-00100100
000000010100000-00101000
000000010100000-0100000-
000000010100000-01000010
000000010100000-01000100
000000010100000-01001000
000000010100000-1000000-
000000010100000-10000010
000000010100000-10000100
000000010100000-10001000
0000000101000010000-000-
0000000101000010000-0010
0000000101000010000-0100
0000000101000010000-1000
00000001010000100010000-
000000010100001000100010
000000010100001000100100
000000010100001000101000
00000001010000100100000-
000000010100001001000010
000000010100001001000100
000000010100001001001000
00000001010000101000000-
000000010100001010000010
000000010100001010000100
000000010100001010001000
0000000101000100000-000-
0000000101000100000-0010
0000000101000100000-0100
0000000101000100000-1000
00000001010001000010000-
000000010100010000100010
000000010100010000100100
000000010100010000101000
00000001010001000100000-
000000010100010001000010
000000010100010001000100
000000010100010001001000
00000001010001001000000-
000000010100010010000010
000000010100010010000100
000000010100010010001000
0000000101001000000-000-
0000000101001000000-0010
0000000101001000000-0100
0000000101001000000-1000
00000001010010000010000-
000000010100100000100010
000000010100100000100100
000000010100100000101000
00000001010010000100000-
000000010100100001000010
000000010100100001000100
000000010100100001001000
00000001010010001000000-
000000010100100010000010
000000010100100010000100
000000010100100010001000
000000011000000-000-000-
000000011000000-000-0010
000000011000000-000-0100
000000011000000-000-1000
000000011000000-0010000-
000000011000000-00100010
000000011000000-00100100
000000011000000-00101000
000000011000000-0100000-
000000011000000-01000010
000000011000000-01000100
000000011000000-01001000
000000011000000-1000000-
000000011000000-10000010
000000011000000-10000100
000000011000000-10001000
0000000110000010000-000-
0000000110000010000-0010
0000000110000010000-0100
0000000110000010000-1000
00000001100000100010000-
000000011000001000100010
000000011000001000100100
000000011000001000101000
00000001100000100100000-
000000011000001001000010
000000011000001001000100
000000011000001001001000
00000001100000101000000-
000000011000001010000010
000000011000001010000100
000000011000001010001000
0000000110000100000-000-
0000000110000100000-0010
0000000110000100000-0100
0000000110000100000-1000
00000001100001000010000-
000000011000010000100010
000000011000010000100100
000000011000010000101000
00000001100001000100000-
000000011000010001000010
000000011000010001000100
000000011000010001001000
00000001100001001000000-
000000011000010010000010
000000011000010010000100
000000011000010010001000
0000000110001000000-000-
0000000110001000000-0010
0000000110001000000-0100
0000000110001000000-1000
00000001100010000010000-
000000011000100000100010
000000011000100000100100
000000011000100000101000
00000001100010000100000-
000000011000100001000010
000000011000100001000100
000000011000100001001000
00000001100010001000000-
000000011000100010000010
000000011000100010000100
000000011000100010001000
00000010000-000-000-000-
00000010000-000-000-0010
00000010000-000-000-0100
00000010000-000-000-1000
00000010000-000-0010000-
00000010000-000-00100010
00000010000-000-00100100
00000010000-000-00101000
00000010000-000-0100000-
00000010000-000-01000010
00000010000-000-01000100
00000010000-000-01001000
00000010000-000-1000000-
00000010000-000-10000010
00000010000-000-10000100
00000010000-000-10001000
00000010000-0010000-000-
00000010000-0010000-0010
00000010000-0010000-0100
00000010000-0010000-1000
00000010000-00100010000-
00000010000-001000100010
00000010000-001000100100
00000010000-001000101000
00000010000-00100100000-
00000010000-001001000010
00000010000-001001000100
00000010000-001001001000
00000010000-00101000000-
00000010000-001010000010
00000010000-001010000100
00000010000-001010001000
00000010000-0100000-000-
00000010000-0100000-0010
00000010000-0100000-0100
00000010000-0100000-1000
00000010000-01000010000-
00000010000-010000100010
00000010000-010000100100
00000010000-010000101000
00000010000-01000100000-
00000010000-010001000010
00000010000-010001000100
00000010000-010001001000
00000010000-01001000000-
00000010000-010010000010
00000010000-010010000100
00000010000-010010001000
00000010000-1000000-000-
00000010000-1000000-0010
00000010000-1000000-0100
00000010000-1000000-1000
00000010000-10000010000-
00000010000-100000100010
00000010000-100000100100
00000010000-100000101000
00000010000-10000100000-
00000010000-100001000010
00000010000-100001000100
00000010000-100001001000
00000010000-10001000000-
00000010000-100010000010
00000010000-100010000100
00000010000-100010001000
000000100010000-000-000-
000000100010000-000-0010
000000100010000-000-0100
000000100010000-000-1000
000000100010000-0010000-
000000100010000-00100010
000000100010000-00100100
000000100010000-00101000
000000100010000-0100000-
000000100010000-01000010
000000100010000-01000100
000000100010000-01001000
000000100010000-1000000-
000000100010000-10000010
000000100010000-10000100
000000100010000-10001000
0000001000100010000-000-
0000001000100010000-0010
0000001000100010000-0100
0000001000100010000-1000
00000010001000100010000-
000000100010001000100010
000000100010001000100100
000000100010001000101000
00000010001000100100000-
000000100010001001000010
000000100010001001000100
000000100010001001001000
00000010001000101000000-
000000100010001010000010
000000100010001010000100
000000100010001010001000
0000001000100100000-000-
0000001000100100000-0010
0000001000100100000-0100
0000001000100100000-1000
00000010001001000010000-
000000100010010000100010
000000100010010000100100
000000100010010000101000
00000010001001000100000-
000000100010010001000010
000000100010010001000100
000000100010010001001000
00000010001001001000000-
000000100010010010000010
000000100010010010000100
000000100010010010001000
0000001000101000000-000-
0000001000101000000-0010
0000001000101000000-0100
0000001000101000000-1000
00000010001010000010000-
000000100010100000100010
000000100010100000100100
000000100010100000101000
00000010001010000100000-
000000100010100001000010
000000100010100001000100
000000100010100001001000
00000010001010001000000-
000000100010100010000010
000000100010100010000100
000000100010100010001000
000000100100000-000-000-
000000100100000-000-0010
000000100100000-000-0100
000000100100000-000-1000
000000100100000-0010000-
000000100100000-00100010
000000100100000-00100100
000000100100000-00101000
000000100100000-0100000-
000000100100000-01000010
000000100100000-01000100
000000100100000-01001000
000000100100000-1000000-
000000100100000-10000010
000000100100000-10000100
000000100100000-10001000
0000001001000010000-000-
0000001001000010000-0010
0000001001000010000-0100
0000001001000010000-1000
00000010010000100010000-
000000100100001000100010
000000100100001000100100
000000100100001000101000
00000010010000100100000-
000000100100001001000010
000000100100001001000100
000000100100001001001000
00000010010000101000000-
000000100100001010000010
000000100100001010000100
000000100100001010001000
0000001001000100000-000-
0000001001000100000-0010
0000001001000100000-0100
0000001001000100000-1000
00000010010001000010000-
000000100100010000100010
000000100100010000100100
000000100100010000101000
00000010010001000100000-
000000100100010001000010
000000100100010001000100
000000100100010001001000
00000010010001001000000-
000000100100010010000010
000000100100010010000100
000000100100010010001000
0000001001001000000-000-
0000001001001000000-0010
0000001001001000000-0100
0000001001001000000-1000
00000010010010000010000-
000000100100100000100010
000000100100100000100100
000000100100100000101000
00000010010010000100000-
000000100100100001000010
000000100100100001000100
000000100100100001001000
00000010010010001000000-
000000100100100010000010
000000100100100010000100
000000100100100010001000
000000101000000-000-000-
000000101000000-000-0010
000000101000000-000-0100
000000101000000-000-1000
000000101000000-0010000-
000000101000000-00100010
000000101000000-00100100
000000101000000-00101000
000000101000000-0100000-
000000101000000-01000010
000000101000000-01000100
000000101000000-01001000
000000101000000-1000000-
000000101000000-10000010
000000101000000-10000100
000000101000000-10001000
0000001010000010000-000-
0000001010000010000-0010
0000001010000010000-0100
0000001010000010000-1000
00000010100000100010000-
000000101000001000100010
000000101000001000100100
000000101000001000101000
00000010100000100100000-
000000101000001001000010
000000101000001001000100
000000101000001001001000
00000010100000101000000-
000000101000001010000010
000000101000001010000100
000000101000001010001000
0000001010000100000-000-
0000001010000100000-0010
0000001010000100000-0100
0000001010000100000-1000
00000010100001000010000-
000000101000010000100010
000000101000010000100100
000000101000010000101000
00000010100001000100000-
000000101000010001000010
000000101000010001000100
000000101000010001001000
00000010100001001000000-
000000101000010010000010
000000101000010010000100
000000101000010010001000
0000001010001000000-000-
0000001010001000000-0010
0000001010001000000-0100
0000001010001000000-1000
00000010100010000010000-
000000101000100000100010
000000101000100000100100
000000101000100000101000
00000010100010000100000-
000000101000100001000010
000000101000100001000100
000000101000100001001000
00000010100010001000000-
000000101000100010000010
000000101000100010000100
000000101000100010001000
00000100000-000-000-000-
00000100000-000-000-0010
00000100000-000-000-0100
00000100000-000-000-1000
00000100000-000-0010000-
00000100000-000-00100010
00000100000-000-00100100
00000100000-000-00101000
00000100000-000-0100000-
00000100000-000-01000010
00000100000-000-01000100
00000100000-000-01001000
00000100000-000-1000000-
00000100000-000-10000010
00000100000-000-10000100
00000100000-000-10001000
00000100000-0010000-000-
00000100000-0010000-0010
00000100000-0010000-0100
00000100000-0010000-1000
00000100000-00100010000-
00000100000-001000100010
00000100000-001000100100
00000100000-001000101000
00000100000-00100100000-
00000100000-001001000010
00000100000-001001000100
00000100000-001001001000
00000100000-00101000000-
00000100000-001010000010
00000100000-001010000100
00000100000-001010001000
00000100000-0100000-000-
00000100000-0100000-0010
00000100000-0100000-0100
00000100000-0100000-1000
00000100000-01000010000-
00000100000-010000100010
00000100000-010000100100
00000100000-010000101000
00000100000-01000100000-
00000100000-010001000010
00000100000-010001000100
00000100000-010001001000
00000100000-01001000000-
00000100000-010010000010
00000100000-010010000100
00000100000-010010001000
00000100000-1000000-000-
00000100000-1000000-0010
00000100000-1000000-0100
00000100000-1000000-1000
00000100000-10000010000-
00000100000-100000100010
00000100000-100000100100
00000100000-100000101000
00000100000-10000100000-
00000100000-100001000010
00000100000-100001000100
00000100000-100001001000
00000100000-10001000000-
00000100000-100010000010
00000100000-100010000100
00000100000-100010001000
000001000010000-000-000-
000001000010000-000-0010
000001000010000-000-0100
000001000010000-000-1000
000001000010000-0010000-
000001000010000-00100010
000001000010000-00100100
000001000010000-00101000
000001000010000-0100000-
000001000010000-01000010
000001000010000-01000100
000001000010000-01001000
000001000010000-1000000-
000001000010000-10000010
000001000010000-10000100
000001000010000-10001000
0000010000100010000-000-
0000010000100010000-0010
0000010000100010000-0100
0000010000100010000-1000
00000100001000100010000-
000001000010001000100010
000001000010001000100100
000001000010001000101000
00000100001000100100000-
000001000010001001000010
000001000010001001000100
000001000010001001001000
00000100001000101000000-
000001000010001010000010
000001000010001010000100
000001000010001010001000
0000010000100100000-000-
0000010000100100000-0010
0000010000100100000-0100
0000010000100100000-1000
00000100001001000010000-
000001000010010000100010
000001000010010000100100
000001000010010000101000
00000100001001000100000-
000001000010010001000010
000001000010010001000100
000001000010010001001000
00000100001001001000000-
000001000010010010000010
000001000010010010000100
000001000010010010001000
0000010000101000000-000-
0000010000101000000-0010
0000010000101000000-0100
0000010000101000000-1000
00000100001010000010000-
000001000010100000100010
000001000010100000100100
000001000010100000101000
00000100001010000100000-
000001000010100001000010
000001000010100001000100
000001000010100001001000
00000100001010001000000-
000001000010100010000010
000001000010100010000100
000001000010100010001000
000001000100000-000-000-
000001000100000-000-0010
000001000100000-000-0100
000001000100000-000-1000
000001000100000-0010000-
000001000100000-00100010
000001000100000-00100100
000001000100000-00101000
000001000100000-0100000-
000001000100000-01000010
000001000100000-01000100
000001000100000-01001000
000001000100000-1000000-
000001000100000-10000010
000001000100000-10000100
000001000100000-10001000
0000010001000010000-000-
0000010001000010000-0010
0000010001000010000-0100
0000010001000010000-1000
00000100010000100010000-
000001000100001000100010
000001000100001000100100
000001000100001000101000
00000100010000100100000-
000001000100001001000010
000001000100001001000100
000001000100001001001000
00000100010000101000000-
000001000100001010000010
000001000100001010000100
000001000100001010001000
0000010001000100000-000-
0000010001000100000-0010
0000010001000100000-0100
0000010001000100000-1000
00000100010001000010000-
000001000100010000100010
000001000100010000100100
000001000100010000101000
00000100010001000100000-
000001000100010001000010
000001000100010001000100
000001000100010001001000
00000100010001001000000-
000001000100010010000010
000001000100010010000100
000001000100010010001000
0000010001001000000-000-
0000010001001000000-0010
0000010001001000000-0100
0000010001001000000-1000
00000100010010000010000-
000001000100100000100010
000001000100100000100100
000001000100100000101000
00000100010010000100000-
000001000100100001000010
000001000100100001000100
000001000100100001001000
00000100010010001000000-
000001000100100010000010
000001000100100010000100
000001000100100010001000
000001001000000-000-000-
000001001000000-000-0010
000001001000000-000-0100
000001001000000-000-1000
000001001000000-0010000-
000001001000000-00100010
000001001000000-00100100
000001001000000-00101000
000001001000000-0100000-
000001001000000-01000010
000001001000000-01000100
000001001000000-01001000
000001001000000-1000000-
000001001000000-10000010
000001001000000-10000100
000001001000000-10001000
0000010010000010000-000-
0000010010000010000-0010
0000010010000010000-0100
0000010010000010000-1000
00000100100000100010000-
000001001000001000100010
000001001000001000100100
000001001000001000101000
00000100100000100100000-
000001001000001001000010
000001001000001001000100
000001001000001001001000
00000100100000101000000-
000001001000001010000010
000001001000001010000100
000001001000001010001000
0000010010000100000-000-
0000010010000100000-0010
0000010010000100000-0100
0000010010000100000-1000
00000100100001000010000-
000001001000010000100010
000001001000010000100100
000001001000010000101000
00000100100001000100000-
000001001000010001000010
000001001000010001000100
000001001000010001001000
00000100100001001000000-
000001001000010010000010
000001001000010010000100
000001001000010010001000
0000010010001000000-000-
0000010010001000000-0010
0000010010001000000-0100
0000010010001000000-1000
00000100100010000010000-
000001001000100000100010
000001001000100000100100
000001001000100000101000
00000100100010000100000-
000001001000100001000010
000001001000100001000100
000001001000100001001000
00000100100010001000000-
000001001000100010000010
000001001000100010000100
000001001000100010001000
00001000000-000-000-000-
00001000000-000-000-0010
00001000000-000-000-0100
00001000000-000-000-1000
00001000000-000-0010000-
00001000000-000-00100010
00001000000-000-00100100
00001000000-000-00101000
00001000000-000-0100000-
00001000000-000-01000010
00001000000-000-01000100
00001000000-000-01001000
00001000000-000-1000000-
00001000000-000-10000010
00001000000-000-10000100
00001000000-000-10001000
00001000000-0010000-000-
00001000000-0010000-0010
00001000000-0010000-0100
00001000000-0010000-1000
00001000000-00100010000-
00001000000-001000100010
00001000000-001000100100
00001000000-001000101000
00001000000-00100100000-
00001000000-001001000010
00001000000-001001000100
00001000000-001001001000
00001000000-00101000000-
00001000000-001010000010
00001000000-001010000100
00001000000-001010001000
00001000000-0100000-000-
00001000000-0100000-0010
00001000000-0100000-0100
00001000000-0100000-1000
00001000000-01000010000-
00001000000-010000100010
00001000000-010000100100
00001000000-010000101000
00001000000-01000100000-
00001000000-010001000010
00001000000-010001000100
00001000000-010001001000
00001000000-01001000000-
00001000000-010010000010
00001000000-010010000100
00001000000-010010001000
00001000000-1000000-000-
00001000000-1000000-0010
00001000000-1000000-0100
00001000000-1000000-1000
00001000000-10000010000-
00001000000-100000100010
00001000000-100000100100
00001000000-100000101000
00001000000-10000100000-
00001000000-100001000010
00001000000-100001000100
00001000000-100001001000
00001000000-10001000000-
00001000000-100010000010
00001000000-100010000100
00001000000-100010001000
000010000010000-000-000-
000010000010000-000-0010
000010000010000-000-0100
000010000010000-000-1000
000010000010000-0010000-
000010000010000-00100010
000010000010000-00100100
000010000010000-00101000
000010000010000-0100000-
000010000010000-01000010
000010000010000-01000100
000010000010000-01001000
000010000010000-1000000-
000010000010000-10000010
000010000010000-10000100
000010000010000-10001000
0000100000100010000-000-
0000100000100010000-0010
0000100000100010000-0100
0000100000100010000-1000
00001000001000100010000-
000010000010001000100010
000010000010001000100100
000010000010001000101000
00001000001000100100000-
000010000010001001000010
000010000010001001000100
000010000010001001001000
00001000001000101000000-
000010000010001010000010
000010000010001010000100
000010000010001010001000
0000100000100100000-000-
0000100000100100000-0010
0000100000100100000-0100
0000100000100100000-1000
00001000001001000010000-
000010000010010000100010
000010000010010000100100
000010000010010000101000
00001000001001000100000-
000010000010010001000010
000010000010010001000100
000010000010010001001000
00001000001001001000000-
000010000010010010000010
000010000010010010000100
000010000010010010001000
0000100000101000000-000-
0000100000101000000-0010
0000100000101000000-0100
0000100000101000000-1000
00001000001010000010000-
000010000010100000100010
000010000010100000100100
000010000010100000101000
00001000001010000100000-
000010000010100001000010
000010000010100001000100
000010000010100001001000
00001000001010001000000-
000010000010100010000010
000010000010100010000100
000010000010100010001000
000010000100000-000-000-
000010000100000-000-0010
000010000100000-000-0100
000010000100000-000-1000
000010000100000-0010000-
000010000100000-00100010
000010000100000-00100100
000010000100000-00101000
000010000100000-0100000-
000010000100000-01000010
000010000100000-01000100
000010000100000-01001000
000010000100000-1000000-
000010000100000-10000010
000010000100000-10000100
000010000100000-10001000
0000100001000010000-000-
0000100001000010000-0010
0000100001000010000-0100
0000100001000010000-1000
00001000010000100010000-
000010000100001000100010
000010000100001000100100
000010000100001000101000
00001000010000100100000-
000010000100001001000010
000010000100001001000100
000010000100001001001000
00001000010000101000000-
000010000100001010000010
000010000100001010000100
000010000100001010001000
0000100001000100000-000-
0000100001000100000-0010
0000100001000100000-0100
0000100001000100000-1000
00001000010001000010000-
000010000100010000100010
000010000100010000100100
000010000100010000101000
00001000010001000100000-
000010000100010001000010
000010000100010001000100
000010000100010001001000
00001000010001001000000-
000010000100010010000010
000010000100010010000100
000010000100010010001000
0000100001001000000-000-
0000100001001000000-0010
0000100001001000000-0100
0000100001001000000-1000
00001000010010000010000-
000010000100100000100010
000010000100100000100100
000010000100100000101000
00001000010010000100000-
000010000100100001000010
000010000100100001000100
000010000100100001001000
00001000010010001000000-
000010000100100010000010
000010000100100010000100
000010000100100010001000
000010001000000-000-000-
000010001000000-000-0010
000010001000000-000-0100
000010001000000-000-1000
000010001000000-0010000-
000010001000000-00100010
000010001000000-00100100
000010001000000-00101000
000010001000000-0100000-
000010001000000-01000010
000010001000000-01000100
000010001000000-01001000
000010001000000-1000000-
000010001000000-10000010
000010001000000-10000100
000010001000000-10001000
0000100010000010000-000-
0000100010000010000-0010
0000100010000010000-0100
0000100010000010000-1000
00001000100000100010000-
000010001000001000100010
000010001000001000100100
000010001000001000101000
00001000100000100100000-
000010001000001001000010
000010001000001001000100
000010001000001001001000
00001000100000101000000-
000010001000001010000010
000010001000001010000100
000010001000001010001000
0000100010000100000-000-
0000100010000100000-0010
0000100010000100000-0100
0000100010000100000-1000
00001000100001000010000-
000010001000010000100010
000010001000010000100100
000010001000010000101000
00001000100001000100000-
000010001000010001000010
000010001000010001000100
000010001000010001001000
00001000100001001000000-
000010001000010010000010
000010001000010010000100
000010001000010010001000
0000100010001000000-000-
0000100010001000000-0010
0000100010001000000-0100
0000100010001000000-1000
00001000100010000010000-
000010001000100000100010
000010001000100000100100
000010001000100000101000
00001000100010000100000-
000010001000100001000010
000010001000100001000100
000010001000100001001000
00001000100010001000000-
000010001000100010000010
000010001000100010000100
000010001000100010001000
00010001000-000100010001
000100010010000100010001
000100010100000100010001
000100011000000100010001
000100100001000-00010001
000100100001001000010001
000100100001010000010001
000100100001100000010001
0001010000010001000-0001
000101000001000100100001
000101000001000101000001
000101000001000110000001
00011000000100010001000-
000110000001000100010010
000110000001000100010100
000110000001000100011000
00100001000-001000100010
001000010010001000100010
001000010100001000100010
001000011000001000100010
001000100010000-00100010
001000100010001000100010
001000100010010000100010
001000100010100000100010
0010010000100010000-0010
001001000010001000100010
001001000010001001000010
001001000010001010000010
00101000001000100010000-
001010000010001000100010
001010000010001000100100
001010000010001000101000
01000001000-010001000100
010000010010010001000100
010000010100010001000100
010000011000010001000100
010000100100000-01000100
010000100100001001000100
010000100100010001000100
010000100100100001000100
0100010001000100000-0100
010001000100010000100100
010001000100010001000100
010001000100010010000100
01001000010001000100000-
010010000100010001000010
010010000100010001000100
010010000100010001001000
10000001000-100010001000
100000010010100010001000
100000010100100010001000
100000011000100010001000
100000101000000-10001000
100000101000001010001000
100000101000010010001000
100000101000100010001000
1000010010001000000-1000
100001001000100000101000
100001001000100001001000
100001001000100010001000
10001000100010001000000-
100010001000100010000010
100010001000100010000100
100010001000100010001000

[QRM NOTE]: Time elapsed since start: 2.750 seconds

[QRM NOTE]: Time elapsed since last: 2.518 seconds

[QRM NOTE]: Peak memory: 1948213 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.0.ivy: node=4]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 13.362 seconds

[QRM NOTE]: Time elapsed since last: 10.612 seconds

[QRM NOTE]: Peak memory: 12750807 bytes

next size: node=4


*************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=3]

*************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.1.ivy -s node=4 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_3.1.ivy: node=4]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 10.457 seconds

[QRM NOTE]: Time elapsed since last: 10.457 seconds

[QRM NOTE]: Peak memory: 12010290 bytes

next size: node=4


**********************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=4]

**********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy -s node=4 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.043 seconds

[QRM NOTE]: Time elapsed since last: 0.043 seconds

[QRM NOTE]: Peak memory: 418172 bytes


=======================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=4]

=======================================================================================================================


==================================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=4]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 12
num_suborbits: 1
0 (*) : --------------11--------
0     : ['voted(node1,node2)', 'voted(node1,node3)']
1     : -----------------1-1----
1     : ['voted(node2,node1)', 'voted(node2,node3)']
2     : ---------------------11-
2     : ['voted(node3,node1)', 'voted(node3,node2)']
3     : ----------11------------
3     : ['voted(node0,node2)', 'voted(node0,node3)']
4     : ----------------1--1----
4     : ['voted(node2,node0)', 'voted(node2,node3)']
5     : --------------------1-1-
5     : ['voted(node3,node0)', 'voted(node3,node2)']
6     : ---------1-1------------
6     : ['voted(node0,node1)', 'voted(node0,node3)']
7     : ------------1--1--------
7     : ['voted(node1,node0)', 'voted(node1,node3)']
8     : --------------------11--
8     : ['voted(node3,node0)', 'voted(node3,node1)']
9     : ---------11-------------
9     : ['voted(node0,node1)', 'voted(node0,node2)']
10     : ------------1-1---------
10     : ['voted(node1,node0)', 'voted(node1,node2)']
11     : ----------------11------
11     : ['voted(node2,node0)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 12
num_suborbits: 1
12 (*) : -------------11---------
12     : ['voted(node1,node1)', 'voted(node1,node2)']
13     : -------------1-1--------
13     : ['voted(node1,node1)', 'voted(node1,node3)']
14     : -----------------11-----
14     : ['voted(node2,node1)', 'voted(node2,node2)']
15     : ------------------11----
15     : ['voted(node2,node2)', 'voted(node2,node3)']
16     : ---------------------1-1
16     : ['voted(node3,node1)', 'voted(node3,node3)']
17     : ----------------------11
17     : ['voted(node3,node2)', 'voted(node3,node3)']
18     : --------1-1-------------
18     : ['voted(node0,node0)', 'voted(node0,node2)']
19     : --------1--1------------
19     : ['voted(node0,node0)', 'voted(node0,node3)']
20     : ----------------1-1-----
20     : ['voted(node2,node0)', 'voted(node2,node2)']
21     : --------------------1--1
21     : ['voted(node3,node0)', 'voted(node3,node3)']
22     : --------11--------------
22     : ['voted(node0,node0)', 'voted(node0,node1)']
23     : ------------11----------
23     : ['voted(node1,node0)', 'voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
24 (*) : ------11----------------
24     : ['(quorum=nset__node0_node2_node3)', '(quorum=nset__node1_node2_node3)']
25     : -----1-1----------------
25     : ['(quorum=nset__node0_node1_node3)', '(quorum=nset__node1_node2_node3)']
26     : ----1--1----------------
26     : ['(quorum=nset__node0_node1_node2)', '(quorum=nset__node1_node2_node3)']
27     : -----11-----------------
27     : ['(quorum=nset__node0_node1_node3)', '(quorum=nset__node0_node2_node3)']
28     : ----1-1-----------------
28     : ['(quorum=nset__node0_node1_node2)', '(quorum=nset__node0_node2_node3)']
29     : ----11------------------
29     : ['(quorum=nset__node0_node1_node2)', '(quorum=nset__node0_node1_node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
30 (*) : -1-1--------------------
30     : ['isleader(node1)', 'isleader(node3)']
31     : -11---------------------
31     : ['isleader(node1)', 'isleader(node2)']
32     : --11--------------------
32     : ['isleader(node2)', 'isleader(node3)']
33     : 1--1--------------------
33     : ['isleader(node0)', 'isleader(node3)']
34     : 1-1---------------------
34     : ['isleader(node0)', 'isleader(node2)']
35     : 11----------------------
35     : ['isleader(node0)', 'isleader(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 24
num_suborbits: 1
36 (*) : 1---1-------0-----------
36     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', '~voted(node1,node0)']
37     : 1----1------0-----------
37     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', '~voted(node1,node0)']
38     : 1---1-----------0-------
38     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', '~voted(node2,node0)']
39     : 1-----1---------0-------
39     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', '~voted(node2,node0)']
40     : 1----1--------------0---
40     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', '~voted(node3,node0)']
41     : 1-----1-------------0---
41     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', '~voted(node3,node0)']
42     : -1--1----0--------------
42     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', '~voted(node0,node1)']
43     : -1---1---0--------------
43     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', '~voted(node0,node1)']
44     : -1--1------------0------
44     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', '~voted(node2,node1)']
45     : -1-----1---------0------
45     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', '~voted(node2,node1)']
46     : -1---1---------------0--
46     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', '~voted(node3,node1)']
47     : -1-----1-------------0--
47     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', '~voted(node3,node1)']
48     : --1-1-----0-------------
48     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', '~voted(node0,node2)']
49     : --1---1---0-------------
49     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', '~voted(node0,node2)']
50     : --1-1---------0---------
50     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', '~voted(node1,node2)']
51     : --1----1------0---------
51     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', '~voted(node1,node2)']
52     : --1---1---------------0-
52     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', '~voted(node3,node2)']
53     : --1----1--------------0-
53     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', '~voted(node3,node2)']
54     : ---1-1-----0------------
54     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', '~voted(node0,node3)']
55     : ---1--1----0------------
55     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', '~voted(node0,node3)']
56     : ---1-1---------0--------
56     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', '~voted(node1,node3)']
57     : ---1---1-------0--------
57     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', '~voted(node1,node3)']
58     : ---1--1------------0----
58     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', '~voted(node2,node3)']
59     : ---1---1-----------0----
59     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
60 (*) : 1-----0-----0-----------
60     : ['isleader(node0)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node0)']
61     : 1----0----------0-------
61     : ['isleader(node0)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node0)']
62     : 1---0---------------0---
62     : ['isleader(node0)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node0)']
63     : -1-----0-0--------------
63     : ['isleader(node1)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node1)']
64     : -1---0-----------0------
64     : ['isleader(node1)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node1)']
65     : -1--0----------------0--
65     : ['isleader(node1)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node1)']
66     : --1----0--0-------------
66     : ['isleader(node2)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node2)']
67     : --1---0-------0---------
67     : ['isleader(node2)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node2)']
68     : --1-0-----------------0-
68     : ['isleader(node2)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node2)']
69     : ---1---0---0------------
69     : ['isleader(node3)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node3)']
70     : ---1--0--------0--------
70     : ['isleader(node3)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node3)']
71     : ---1-0-------------0----
71     : ['isleader(node3)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 1
72 (*) : 1-----0------1----------
72     : ['isleader(node0)', 'voted(node1,node1)', '~(quorum=nset__node0_node2_node3)']
73     : 1----0------------1-----
73     : ['isleader(node0)', 'voted(node2,node2)', '~(quorum=nset__node0_node1_node3)']
74     : 1---0------------------1
74     : ['isleader(node0)', 'voted(node3,node3)', '~(quorum=nset__node0_node1_node2)']
75     : -1-----01---------------
75     : ['isleader(node1)', 'voted(node0,node0)', '~(quorum=nset__node1_node2_node3)']
76     : -1---0------------1-----
76     : ['isleader(node1)', 'voted(node2,node2)', '~(quorum=nset__node0_node1_node3)']
77     : -1--0------------------1
77     : ['isleader(node1)', 'voted(node3,node3)', '~(quorum=nset__node0_node1_node2)']
78     : --1----01---------------
78     : ['isleader(node2)', 'voted(node0,node0)', '~(quorum=nset__node1_node2_node3)']
79     : --1---0------1----------
79     : ['isleader(node2)', 'voted(node1,node1)', '~(quorum=nset__node0_node2_node3)']
80     : --1-0------------------1
80     : ['isleader(node2)', 'voted(node3,node3)', '~(quorum=nset__node0_node1_node2)']
81     : ---1---01---------------
81     : ['isleader(node3)', 'voted(node0,node0)', '~(quorum=nset__node1_node2_node3)']
82     : ---1--0------1----------
82     : ['isleader(node3)', 'voted(node1,node1)', '~(quorum=nset__node0_node2_node3)']
83     : ---1-0------------1-----
83     : ['isleader(node3)', 'voted(node2,node2)', '~(quorum=nset__node0_node1_node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 24
num_suborbits: 1
84 (*) : 1---1--------1----------
84     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node1,node1)']
85     : 1----1-------1----------
85     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node1,node1)']
86     : 1---1-------------1-----
86     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node2,node2)']
87     : 1-----1-----------1-----
87     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node2,node2)']
88     : 1----1-----------------1
88     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node3,node3)']
89     : 1-----1----------------1
89     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node3,node3)']
90     : -1--1---1---------------
90     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node0,node0)']
91     : -1---1--1---------------
91     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node0,node0)']
92     : -1--1-------------1-----
92     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node2,node2)']
93     : -1-----1----------1-----
93     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node2,node2)']
94     : -1---1-----------------1
94     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node3,node3)']
95     : -1-----1---------------1
95     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node3,node3)']
96     : --1-1---1---------------
96     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node0,node0)']
97     : --1---1-1---------------
97     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node0,node0)']
98     : --1-1--------1----------
98     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node1,node1)']
99     : --1----1-----1----------
99     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node1,node1)']
100     : --1---1----------------1
100     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node3,node3)']
101     : --1----1---------------1
101     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node3,node3)']
102     : ---1-1--1---------------
102     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node0,node0)']
103     : ---1--1-1---------------
103     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node0,node0)']
104     : ---1-1-------1----------
104     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node1,node1)']
105     : ---1---1-----1----------
105     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node1,node1)']
106     : ---1--1-----------1-----
106     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node2,node2)']
107     : ---1---1----------1-----
107     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 24
num_suborbits: 1
108 (*) : 1-----0--------1--------
108     : ['isleader(node0)', 'voted(node1,node3)', '~(quorum=nset__node0_node2_node3)']
109     : 1-----0-------1---------
109     : ['isleader(node0)', 'voted(node1,node2)', '~(quorum=nset__node0_node2_node3)']
110     : 1----0-------------1----
110     : ['isleader(node0)', 'voted(node2,node3)', '~(quorum=nset__node0_node1_node3)']
111     : 1----0-----------1------
111     : ['isleader(node0)', 'voted(node2,node1)', '~(quorum=nset__node0_node1_node3)']
112     : 1---0-----------------1-
112     : ['isleader(node0)', 'voted(node3,node2)', '~(quorum=nset__node0_node1_node2)']
113     : 1---0----------------1--
113     : ['isleader(node0)', 'voted(node3,node1)', '~(quorum=nset__node0_node1_node2)']
114     : -1-----0---1------------
114     : ['isleader(node1)', 'voted(node0,node3)', '~(quorum=nset__node1_node2_node3)']
115     : -1-----0--1-------------
115     : ['isleader(node1)', 'voted(node0,node2)', '~(quorum=nset__node1_node2_node3)']
116     : -1---0-------------1----
116     : ['isleader(node1)', 'voted(node2,node3)', '~(quorum=nset__node0_node1_node3)']
117     : -1---0----------1-------
117     : ['isleader(node1)', 'voted(node2,node0)', '~(quorum=nset__node0_node1_node3)']
118     : -1--0-----------------1-
118     : ['isleader(node1)', 'voted(node3,node2)', '~(quorum=nset__node0_node1_node2)']
119     : -1--0---------------1---
119     : ['isleader(node1)', 'voted(node3,node0)', '~(quorum=nset__node0_node1_node2)']
120     : --1----0---1------------
120     : ['isleader(node2)', 'voted(node0,node3)', '~(quorum=nset__node1_node2_node3)']
121     : --1----0-1--------------
121     : ['isleader(node2)', 'voted(node0,node1)', '~(quorum=nset__node1_node2_node3)']
122     : --1---0--------1--------
122     : ['isleader(node2)', 'voted(node1,node3)', '~(quorum=nset__node0_node2_node3)']
123     : --1---0-----1-----------
123     : ['isleader(node2)', 'voted(node1,node0)', '~(quorum=nset__node0_node2_node3)']
124     : --1-0----------------1--
124     : ['isleader(node2)', 'voted(node3,node1)', '~(quorum=nset__node0_node1_node2)']
125     : --1-0---------------1---
125     : ['isleader(node2)', 'voted(node3,node0)', '~(quorum=nset__node0_node1_node2)']
126     : ---1---0--1-------------
126     : ['isleader(node3)', 'voted(node0,node2)', '~(quorum=nset__node1_node2_node3)']
127     : ---1---0-1--------------
127     : ['isleader(node3)', 'voted(node0,node1)', '~(quorum=nset__node1_node2_node3)']
128     : ---1--0-------1---------
128     : ['isleader(node3)', 'voted(node1,node2)', '~(quorum=nset__node0_node2_node3)']
129     : ---1--0-----1-----------
129     : ['isleader(node3)', 'voted(node1,node0)', '~(quorum=nset__node0_node2_node3)']
130     : ---1-0-----------1------
130     : ['isleader(node3)', 'voted(node2,node1)', '~(quorum=nset__node0_node1_node3)']
131     : ---1-0----------1-------
131     : ['isleader(node3)', 'voted(node2,node0)', '~(quorum=nset__node0_node1_node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 24
num_suborbits: 1
132 (*) : 1---1----------1--------
132     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node1,node3)']
133     : 1----1--------1---------
133     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node1,node2)']
134     : 1---1--------------1----
134     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node2,node3)']
135     : 1-----1----------1------
135     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node2,node1)']
136     : 1----1----------------1-
136     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node3,node2)']
137     : 1-----1--------------1--
137     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node3,node1)']
138     : -1--1------1------------
138     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node0,node3)']
139     : -1---1----1-------------
139     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node0,node2)']
140     : -1--1--------------1----
140     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node2,node3)']
141     : -1-----1--------1-------
141     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node2,node0)']
142     : -1---1----------------1-
142     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node3,node2)']
143     : -1-----1------------1---
143     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node3,node0)']
144     : --1-1------1------------
144     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node0,node3)']
145     : --1---1--1--------------
145     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node0,node1)']
146     : --1-1----------1--------
146     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node1,node3)']
147     : --1----1----1-----------
147     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node1,node0)']
148     : --1---1--------------1--
148     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node3,node1)']
149     : --1----1------------1---
149     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node3,node0)']
150     : ---1-1----1-------------
150     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node0,node2)']
151     : ---1--1--1--------------
151     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node0,node1)']
152     : ---1-1--------1---------
152     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node1,node2)']
153     : ---1---1----1-----------
153     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node1,node0)']
154     : ---1--1----------1------
154     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node2,node1)']
155     : ---1---1--------1-------
155     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 24
num_suborbits: 1
156 (*) : 1---1---------1---------
156     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node1,node2)']
157     : 1----1---------1--------
157     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node1,node3)']
158     : 1---1------------1------
158     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node2,node1)']
159     : 1-----1------------1----
159     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node2,node3)']
160     : 1----1---------------1--
160     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node3,node1)']
161     : 1-----1---------------1-
161     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node3,node2)']
162     : -1--1-----1-------------
162     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node0,node2)']
163     : -1---1-----1------------
163     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node0,node3)']
164     : -1--1-----------1-------
164     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node2,node0)']
165     : -1-----1-----------1----
165     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node2,node3)']
166     : -1---1--------------1---
166     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node3,node0)']
167     : -1-----1--------------1-
167     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node3,node2)']
168     : --1-1----1--------------
168     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node0,node1)']
169     : --1---1----1------------
169     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node0,node3)']
170     : --1-1-------1-----------
170     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node1,node0)']
171     : --1----1-------1--------
171     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node1,node3)']
172     : --1---1-------------1---
172     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node3,node0)']
173     : --1----1-------------1--
173     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node3,node1)']
174     : ---1-1---1--------------
174     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node0,node1)']
175     : ---1--1---1-------------
175     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node0,node2)']
176     : ---1-1------1-----------
176     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node1,node0)']
177     : ---1---1------1---------
177     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node1,node2)']
178     : ---1--1---------1-------
178     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node2,node0)']
179     : ---1---1---------1------
179     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 24
num_suborbits: 1
180 (*) : 1-------0-----1---------
180     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node0,node0)']
181     : 1-------0------1--------
181     : ['isleader(node0)', 'voted(node1,node3)', '~voted(node0,node0)']
182     : 1-------0--------1------
182     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node0,node0)']
183     : 1-------0----------1----
183     : ['isleader(node0)', 'voted(node2,node3)', '~voted(node0,node0)']
184     : 1-------0------------1--
184     : ['isleader(node0)', 'voted(node3,node1)', '~voted(node0,node0)']
185     : 1-------0-------------1-
185     : ['isleader(node0)', 'voted(node3,node2)', '~voted(node0,node0)']
186     : -1--------1--0----------
186     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node1,node1)']
187     : -1---------1-0----------
187     : ['isleader(node1)', 'voted(node0,node3)', '~voted(node1,node1)']
188     : -1-----------0--1-------
188     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node1,node1)']
189     : -1-----------0-----1----
189     : ['isleader(node1)', 'voted(node2,node3)', '~voted(node1,node1)']
190     : -1-----------0------1---
190     : ['isleader(node1)', 'voted(node3,node0)', '~voted(node1,node1)']
191     : -1-----------0--------1-
191     : ['isleader(node1)', 'voted(node3,node2)', '~voted(node1,node1)']
192     : --1------1--------0-----
192     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node2,node2)']
193     : --1--------1------0-----
193     : ['isleader(node2)', 'voted(node0,node3)', '~voted(node2,node2)']
194     : --1---------1-----0-----
194     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node2,node2)']
195     : --1------------1--0-----
195     : ['isleader(node2)', 'voted(node1,node3)', '~voted(node2,node2)']
196     : --1---------------0-1---
196     : ['isleader(node2)', 'voted(node3,node0)', '~voted(node2,node2)']
197     : --1---------------0--1--
197     : ['isleader(node2)', 'voted(node3,node1)', '~voted(node2,node2)']
198     : ---1-----1-------------0
198     : ['isleader(node3)', 'voted(node0,node1)', '~voted(node3,node3)']
199     : ---1------1------------0
199     : ['isleader(node3)', 'voted(node0,node2)', '~voted(node3,node3)']
200     : ---1--------1----------0
200     : ['isleader(node3)', 'voted(node1,node0)', '~voted(node3,node3)']
201     : ---1----------1--------0
201     : ['isleader(node3)', 'voted(node1,node2)', '~voted(node3,node3)']
202     : ---1------------1------0
202     : ['isleader(node3)', 'voted(node2,node0)', '~voted(node3,node3)']
203     : ---1-------------1-----0
203     : ['isleader(node3)', 'voted(node2,node1)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 24
num_suborbits: 1
204 (*) : 1--------1----1---------
204     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']
205     : 1--------1-----1--------
205     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node3)']
206     : 1---------1------1------
206     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']
207     : 1---------1--------1----
207     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node3)']
208     : 1----------1---------1--
208     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node3,node1)']
209     : 1----------1----------1-
209     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node3,node2)']
210     : -1--------1-1-----------
210     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node0)']
211     : -1---------11-----------
211     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node1,node0)']
212     : -1------------1-1-------
212     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node0)']
213     : -1------------1----1----
213     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node3)']
214     : -1-------------1----1---
214     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node3,node0)']
215     : -1-------------1------1-
215     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node3,node2)']
216     : --1------1------1-------
216     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node0)']
217     : --1--------1----1-------
217     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node2,node0)']
218     : --1---------1----1------
218     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node1)']
219     : --1------------1-1------
219     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node2,node1)']
220     : --1----------------11---
220     : ['isleader(node2)', 'voted(node2,node3)', 'voted(node3,node0)']
221     : --1----------------1-1--
221     : ['isleader(node2)', 'voted(node2,node3)', 'voted(node3,node1)']
222     : ---1-----1----------1---
222     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node3,node0)']
223     : ---1------1---------1---
223     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node3,node0)']
224     : ---1--------1--------1--
224     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node3,node1)']
225     : ---1----------1------1--
225     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node3,node1)']
226     : ---1------------1-----1-
226     : ['isleader(node3)', 'voted(node2,node0)', 'voted(node3,node2)']
227     : ---1-------------1----1-
227     : ['isleader(node3)', 'voted(node2,node1)', 'voted(node3,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 24
num_suborbits: 1
228 (*) : 1----------1--1---------
228     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node2)']
229     : 1---------1----1--------
229     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node3)']
230     : 1----------1-----1------
230     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node2,node1)']
231     : 1--------1---------1----
231     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node3)']
232     : 1---------1----------1--
232     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node3,node1)']
233     : 1--------1------------1-
233     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node3,node2)']
234     : -1--------1----1--------
234     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node3)']
235     : -1---------1--1---------
235     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node1,node2)']
236     : -1-------------11-------
236     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node2,node0)']
237     : -1----------1------1----
237     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node3)']
238     : -1------------1-----1---
238     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node3,node0)']
239     : -1----------1---------1-
239     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node3,node2)']
240     : --1------1---------1----
240     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node3)']
241     : --1--------1-----1------
241     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node2,node1)']
242     : --1---------1------1----
242     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node3)']
243     : --1------------11-------
243     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node2,node0)']
244     : --1--------------1--1---
244     : ['isleader(node2)', 'voted(node2,node1)', 'voted(node3,node0)']
245     : --1-------------1----1--
245     : ['isleader(node2)', 'voted(node2,node0)', 'voted(node3,node1)']
246     : ---1-----1------------1-
246     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node3,node2)']
247     : ---1------1----------1--
247     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node3,node1)']
248     : ---1--------1---------1-
248     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node3,node2)']
249     : ---1----------1-----1---
249     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node3,node0)']
250     : ---1------------1----1--
250     : ['isleader(node3)', 'voted(node2,node0)', 'voted(node3,node1)']
251     : ---1-------------1--1---
251     : ['isleader(node3)', 'voted(node2,node1)', 'voted(node3,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 24
num_suborbits: 1
252 (*) : 1---------1---1---------
252     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']
253     : 1----------1---1--------
253     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node3)']
254     : 1--------1-------1------
254     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']
255     : 1----------1-------1----
255     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node2,node3)']
256     : 1--------1-----------1--
256     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node3,node1)']
257     : 1---------1-----------1-
257     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node3,node2)']
258     : -1--------1---1---------
258     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node2)']
259     : -1---------1---1--------
259     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node1,node3)']
260     : -1----------1---1-------
260     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node0)']
261     : -1-------------1---1----
261     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node2,node3)']
262     : -1----------1-------1---
262     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node3,node0)']
263     : -1------------1-------1-
263     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node3,node2)']
264     : --1------1-------1------
264     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node1)']
265     : --1--------1-------1----
265     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node2,node3)']
266     : --1---------1---1-------
266     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node0)']
267     : --1------------1---1----
267     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node2,node3)']
268     : --1-------------1---1---
268     : ['isleader(node2)', 'voted(node2,node0)', 'voted(node3,node0)']
269     : --1--------------1---1--
269     : ['isleader(node2)', 'voted(node2,node1)', 'voted(node3,node1)']
270     : ---1-----1-----------1--
270     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node3,node1)']
271     : ---1------1-----------1-
271     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node3,node2)']
272     : ---1--------1-------1---
272     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node3,node0)']
273     : ---1----------1-------1-
273     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node3,node2)']
274     : ---1------------1---1---
274     : ['isleader(node3)', 'voted(node2,node0)', 'voted(node3,node0)']
275     : ---1-------------1---1--
275     : ['isleader(node3)', 'voted(node2,node1)', 'voted(node3,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 4
num_suborbits: 1
276 (*) : 1------00---------------
276     : ['isleader(node0)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node0)']
277     : -1----0------0----------
277     : ['isleader(node1)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node1)']
278     : --1--0------------0-----
278     : ['isleader(node2)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node2)']
279     : ---10------------------0
279     : ['isleader(node3)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 12
num_suborbits: 1
280 (*) : 1-------0---0-----------
280     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']
281     : 1-------0-------0-------
281     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node2,node0)']
282     : 1-------0-----------0---
282     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node3,node0)']
283     : -1-------0---0----------
283     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']
284     : -1-----------0---0------
284     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node2,node1)']
285     : -1-----------0-------0--
285     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node3,node1)']
286     : --1-------0-------0-----
286     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node2,node2)']
287     : --1-----------0---0-----
287     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node2,node2)']
288     : --1---------------0---0-
288     : ['isleader(node2)', '~voted(node2,node2)', '~voted(node3,node2)']
289     : ---1-------0-----------0
289     : ['isleader(node3)', '~voted(node0,node3)', '~voted(node3,node3)']
290     : ---1-----------0-------0
290     : ['isleader(node3)', '~voted(node1,node3)', '~voted(node3,node3)']
291     : ---1---------------0---0
291     : ['isleader(node3)', '~voted(node2,node3)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
292 (*) : 1-----1-0---------------
292     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', '~voted(node0,node0)']
293     : 1----1--0---------------
293     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', '~voted(node0,node0)']
294     : 1---1---0---------------
294     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', '~voted(node0,node0)']
295     : -1-----1-----0----------
295     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', '~voted(node1,node1)']
296     : -1---1-------0----------
296     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', '~voted(node1,node1)']
297     : -1--1--------0----------
297     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', '~voted(node1,node1)']
298     : --1----1----------0-----
298     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', '~voted(node2,node2)']
299     : --1---1-----------0-----
299     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', '~voted(node2,node2)']
300     : --1-1-------------0-----
300     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', '~voted(node2,node2)']
301     : ---1---1---------------0
301     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', '~voted(node3,node3)']
302     : ---1--1----------------0
302     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', '~voted(node3,node3)']
303     : ---1-1-----------------0
303     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
304 (*) : 1------0---1------------
304     : ['isleader(node0)', 'voted(node0,node3)', '~(quorum=nset__node1_node2_node3)']
305     : 1------0--1-------------
305     : ['isleader(node0)', 'voted(node0,node2)', '~(quorum=nset__node1_node2_node3)']
306     : 1------0-1--------------
306     : ['isleader(node0)', 'voted(node0,node1)', '~(quorum=nset__node1_node2_node3)']
307     : -1----0--------1--------
307     : ['isleader(node1)', 'voted(node1,node3)', '~(quorum=nset__node0_node2_node3)']
308     : -1----0-------1---------
308     : ['isleader(node1)', 'voted(node1,node2)', '~(quorum=nset__node0_node2_node3)']
309     : -1----0-----1-----------
309     : ['isleader(node1)', 'voted(node1,node0)', '~(quorum=nset__node0_node2_node3)']
310     : --1--0-------------1----
310     : ['isleader(node2)', 'voted(node2,node3)', '~(quorum=nset__node0_node1_node3)']
311     : --1--0-----------1------
311     : ['isleader(node2)', 'voted(node2,node1)', '~(quorum=nset__node0_node1_node3)']
312     : --1--0----------1-------
312     : ['isleader(node2)', 'voted(node2,node0)', '~(quorum=nset__node0_node1_node3)']
313     : ---10-----------------1-
313     : ['isleader(node3)', 'voted(node3,node2)', '~(quorum=nset__node0_node1_node2)']
314     : ---10----------------1--
314     : ['isleader(node3)', 'voted(node3,node1)', '~(quorum=nset__node0_node1_node2)']
315     : ---10---------------1---
315     : ['isleader(node3)', 'voted(node3,node0)', '~(quorum=nset__node0_node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 1
316 (*) : 1----------10-----------
316     : ['isleader(node0)', 'voted(node0,node3)', '~voted(node1,node0)']
317     : 1---------1-0-----------
317     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node1,node0)']
318     : 1----------1----0-------
318     : ['isleader(node0)', 'voted(node0,node3)', '~voted(node2,node0)']
319     : 1--------1------0-------
319     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node2,node0)']
320     : 1---------1---------0---
320     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node3,node0)']
321     : 1--------1----------0---
321     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node3,node0)']
322     : -1-------0-----1--------
322     : ['isleader(node1)', 'voted(node1,node3)', '~voted(node0,node1)']
323     : -1-------0----1---------
323     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node0,node1)']
324     : -1-------------1-0------
324     : ['isleader(node1)', 'voted(node1,node3)', '~voted(node2,node1)']
325     : -1----------1----0------
325     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node2,node1)']
326     : -1------------1------0--
326     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node3,node1)']
327     : -1----------1--------0--
327     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node3,node1)']
328     : --1-------0--------1----
328     : ['isleader(node2)', 'voted(node2,node3)', '~voted(node0,node2)']
329     : --1-------0------1------
329     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node0,node2)']
330     : --1-----------0----1----
330     : ['isleader(node2)', 'voted(node2,node3)', '~voted(node1,node2)']
331     : --1-----------0-1-------
331     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node1,node2)']
332     : --1--------------1----0-
332     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node3,node2)']
333     : --1-------------1-----0-
333     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node3,node2)']
334     : ---1-------0----------1-
334     : ['isleader(node3)', 'voted(node3,node2)', '~voted(node0,node3)']
335     : ---1-------0---------1--
335     : ['isleader(node3)', 'voted(node3,node1)', '~voted(node0,node3)']
336     : ---1-----------0------1-
336     : ['isleader(node3)', 'voted(node3,node2)', '~voted(node1,node3)']
337     : ---1-----------0----1---
337     : ['isleader(node3)', 'voted(node3,node0)', '~voted(node1,node3)']
338     : ---1---------------0-1--
338     : ['isleader(node3)', 'voted(node3,node1)', '~voted(node2,node3)']
339     : ---1---------------01---
339     : ['isleader(node3)', 'voted(node3,node0)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 24
num_suborbits: 1
340 (*) : 1-----1----1------------
340     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node0,node3)']
341     : 1-----1---1-------------
341     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node0,node2)']
342     : 1----1-----1------------
342     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node0,node3)']
343     : 1----1---1--------------
343     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node0,node1)']
344     : 1---1-----1-------------
344     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node0,node2)']
345     : 1---1----1--------------
345     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node0,node1)']
346     : -1-----1-------1--------
346     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node1,node3)']
347     : -1-----1------1---------
347     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node1,node2)']
348     : -1---1---------1--------
348     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node1,node3)']
349     : -1---1------1-----------
349     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node1,node0)']
350     : -1--1---------1---------
350     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node1,node2)']
351     : -1--1-------1-----------
351     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node1,node0)']
352     : --1----1-----------1----
352     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node2,node3)']
353     : --1----1---------1------
353     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node2,node1)']
354     : --1---1------------1----
354     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node2,node3)']
355     : --1---1---------1-------
355     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node2,node0)']
356     : --1-1------------1------
356     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node2,node1)']
357     : --1-1-----------1-------
357     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node2,node0)']
358     : ---1---1--------------1-
358     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node3,node2)']
359     : ---1---1-------------1--
359     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node3,node1)']
360     : ---1--1---------------1-
360     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node3,node2)']
361     : ---1--1-------------1---
361     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node3,node0)']
362     : ---1-1---------------1--
362     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node3,node1)']
363     : ---1-1--------------1---
363     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node3,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 12
num_suborbits: 1
364 (*) : 1-----1--1--------------
364     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node0,node1)']
365     : 1----1----1-------------
365     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node0,node2)']
366     : 1---1------1------------
366     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node0,node3)']
367     : -1-----1----1-----------
367     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node1,node0)']
368     : -1---1--------1---------
368     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node1,node2)']
369     : -1--1----------1--------
369     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node1,node3)']
370     : --1----1--------1-------
370     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node2,node0)']
371     : --1---1----------1------
371     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node2,node1)']
372     : --1-1--------------1----
372     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node2,node3)']
373     : ---1---1------------1---
373     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node3,node0)']
374     : ---1--1--------------1--
374     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node3,node1)']
375     : ---1-1----------------1-
375     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node3,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 12
num_suborbits: 1
376 (*) : 1--------1--0-----------
376     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']
377     : 1---------1-----0-------
377     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node2,node0)']
378     : 1----------1--------0---
378     : ['isleader(node0)', 'voted(node0,node3)', '~voted(node3,node0)']
379     : -1-------0--1-----------
379     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node0,node1)']
380     : -1------------1--0------
380     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node2,node1)']
381     : -1-------------1-----0--
381     : ['isleader(node1)', 'voted(node1,node3)', '~voted(node3,node1)']
382     : --1-------0-----1-------
382     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node0,node2)']
383     : --1-----------0--1------
383     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node1,node2)']
384     : --1----------------1--0-
384     : ['isleader(node2)', 'voted(node2,node3)', '~voted(node3,node2)']
385     : ---1-------0--------1---
385     : ['isleader(node3)', 'voted(node3,node0)', '~voted(node0,node3)']
386     : ---1-----------0-----1--
386     : ['isleader(node3)', 'voted(node3,node1)', '~voted(node1,node3)']
387     : ---1---------------0--1-
387     : ['isleader(node3)', 'voted(node3,node2)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 12
num_suborbits: 1
388 (*) : 1-------0----1----------
388     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node0,node0)']
389     : 1-------0---------1-----
389     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node0,node0)']
390     : 1-------0--------------1
390     : ['isleader(node0)', 'voted(node3,node3)', '~voted(node0,node0)']
391     : -1------1----0----------
391     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node1,node1)']
392     : -1-----------0----1-----
392     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node1,node1)']
393     : -1-----------0---------1
393     : ['isleader(node1)', 'voted(node3,node3)', '~voted(node1,node1)']
394     : --1-----1---------0-----
394     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node2,node2)']
395     : --1----------1----0-----
395     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node2,node2)']
396     : --1---------------0----1
396     : ['isleader(node2)', 'voted(node3,node3)', '~voted(node2,node2)']
397     : ---1----1--------------0
397     : ['isleader(node3)', 'voted(node0,node0)', '~voted(node3,node3)']
398     : ---1---------1---------0
398     : ['isleader(node3)', 'voted(node1,node1)', '~voted(node3,node3)']
399     : ---1--------------1----0
399     : ['isleader(node3)', 'voted(node2,node2)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 24
num_suborbits: 1
400 (*) : 1----------1-1----------
400     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node1)']
401     : 1---------1--1----------
401     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node1)']
402     : 1----------1------1-----
402     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node2,node2)']
403     : 1--------1--------1-----
403     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node2)']
404     : 1---------1------------1
404     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node3,node3)']
405     : 1--------1-------------1
405     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node3,node3)']
406     : -1------1------1--------
406     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node3)']
407     : -1------1-----1---------
407     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node2)']
408     : -1-------------1--1-----
408     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node2,node2)']
409     : -1----------1-----1-----
409     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node2)']
410     : -1------------1--------1
410     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node3,node3)']
411     : -1----------1----------1
411     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node3,node3)']
412     : --1-----1----------1----
412     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node3)']
413     : --1-----1--------1------
413     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']
414     : --1----------1-----1----
414     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node3)']
415     : --1----------1--1-------
415     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node0)']
416     : --1--------------1-----1
416     : ['isleader(node2)', 'voted(node2,node1)', 'voted(node3,node3)']
417     : --1-------------1------1
417     : ['isleader(node2)', 'voted(node2,node0)', 'voted(node3,node3)']
418     : ---1----1-------------1-
418     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node3,node2)']
419     : ---1----1------------1--
419     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node3,node1)']
420     : ---1---------1--------1-
420     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node3,node2)']
421     : ---1---------1------1---
421     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node3,node0)']
422     : ---1--------------1--1--
422     : ['isleader(node3)', 'voted(node2,node2)', 'voted(node3,node1)']
423     : ---1--------------1-1---
423     : ['isleader(node3)', 'voted(node2,node2)', 'voted(node3,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 12
num_suborbits: 1
424 (*) : 1--------1---1----------
424     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']
425     : 1---------1-------1-----
425     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node2)']
426     : 1----------1-----------1
426     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node3,node3)']
427     : -1------1---1-----------
427     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node0)']
428     : -1------------1---1-----
428     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node2)']
429     : -1-------------1-------1
429     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node3,node3)']
430     : --1-----1-------1-------
430     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node0)']
431     : --1----------1---1------
431     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']
432     : --1----------------1---1
432     : ['isleader(node2)', 'voted(node2,node3)', 'voted(node3,node3)']
433     : ---1----1-----------1---
433     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node3,node0)']
434     : ---1---------1-------1--
434     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node3,node1)']
435     : ---1--------------1---1-
435     : ['isleader(node3)', 'voted(node2,node2)', 'voted(node3,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 1
436 (*) : 1--------------1----0---
436     : ['isleader(node0)', 'voted(node1,node3)', '~voted(node3,node0)']
437     : 1-------------1-0-------
437     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node2,node0)']
438     : 1------------------10---
438     : ['isleader(node0)', 'voted(node2,node3)', '~voted(node3,node0)']
439     : 1-----------0----1------
439     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node1,node0)']
440     : 1---------------0-----1-
440     : ['isleader(node0)', 'voted(node3,node2)', '~voted(node2,node0)']
441     : 1-----------0--------1--
441     : ['isleader(node0)', 'voted(node3,node1)', '~voted(node1,node0)']
442     : -1---------1---------0--
442     : ['isleader(node1)', 'voted(node0,node3)', '~voted(node3,node1)']
443     : -1--------1------0------
443     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node2,node1)']
444     : -1-----------------1-0--
444     : ['isleader(node1)', 'voted(node2,node3)', '~voted(node3,node1)']
445     : -1-------0------1-------
445     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node0,node1)']
446     : -1---------------0----1-
446     : ['isleader(node1)', 'voted(node3,node2)', '~voted(node2,node1)']
447     : -1-------0----------1---
447     : ['isleader(node1)', 'voted(node3,node0)', '~voted(node0,node1)']
448     : --1--------1----------0-
448     : ['isleader(node2)', 'voted(node0,node3)', '~voted(node3,node2)']
449     : --1------1----0---------
449     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node1,node2)']
450     : --1------------1------0-
450     : ['isleader(node2)', 'voted(node1,node3)', '~voted(node3,node2)']
451     : --1-------0-1-----------
451     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node0,node2)']
452     : --1-----------0------1--
452     : ['isleader(node2)', 'voted(node3,node1)', '~voted(node1,node2)']
453     : --1-------0---------1---
453     : ['isleader(node2)', 'voted(node3,node0)', '~voted(node0,node2)']
454     : ---1------1--------0----
454     : ['isleader(node3)', 'voted(node0,node2)', '~voted(node2,node3)']
455     : ---1-----1-----0--------
455     : ['isleader(node3)', 'voted(node0,node1)', '~voted(node1,node3)']
456     : ---1----------1----0----
456     : ['isleader(node3)', 'voted(node1,node2)', '~voted(node2,node3)']
457     : ---1-------01-----------
457     : ['isleader(node3)', 'voted(node1,node0)', '~voted(node0,node3)']
458     : ---1-----------0-1------
458     : ['isleader(node3)', 'voted(node2,node1)', '~voted(node1,node3)']
459     : ---1-------0----1-------
459     : ['isleader(node3)', 'voted(node2,node0)', '~voted(node0,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 12
num_suborbits: 1
460 (*) : 1--------------1-----1--
460     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node1)']
461     : 1-------------1--1------
461     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']
462     : 1------------------1--1-
462     : ['isleader(node0)', 'voted(node2,node3)', 'voted(node3,node2)']
463     : -1---------1--------1---
463     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node3,node0)']
464     : -1--------1-----1-------
464     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node0)']
465     : -1-----------------1--1-
465     : ['isleader(node1)', 'voted(node2,node3)', 'voted(node3,node2)']
466     : --1--------1--------1---
466     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node3,node0)']
467     : --1------1--1-----------
467     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node0)']
468     : --1------------1-----1--
468     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node3,node1)']
469     : ---1------1-----1-------
469     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node2,node0)']
470     : ---1-----1--1-----------
470     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node1,node0)']
471     : ---1----------1--1------
471     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 24
num_suborbits: 1
472 (*) : 1--------------1------1-
472     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node2)']
473     : 1-------------1----1----
473     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node3)']
474     : 1------------------1-1--
474     : ['isleader(node0)', 'voted(node2,node3)', 'voted(node3,node1)']
475     : 1--------------1-1------
475     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node2,node1)']
476     : 1----------------1----1-
476     : ['isleader(node0)', 'voted(node2,node1)', 'voted(node3,node2)']
477     : 1-------------1------1--
477     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node1)']
478     : -1---------1----------1-
478     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node3,node2)']
479     : -1--------1--------1----
479     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node3)']
480     : -1-----------------11---
480     : ['isleader(node1)', 'voted(node2,node3)', 'voted(node3,node0)']
481     : -1---------1----1-------
481     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node2,node0)']
482     : -1--------------1-----1-
482     : ['isleader(node1)', 'voted(node2,node0)', 'voted(node3,node2)']
483     : -1--------1---------1---
483     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node3,node0)']
484     : --1--------1---------1--
484     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node3,node1)']
485     : --1------1-----1--------
485     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node3)']
486     : --1------------1----1---
486     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node3,node0)']
487     : --1--------11-----------
487     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node1,node0)']
488     : --1---------1--------1--
488     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node3,node1)']
489     : --1------1----------1---
489     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node3,node0)']
490     : ---1------1------1------
490     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node2,node1)']
491     : ---1-----1----1---------
491     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node1,node2)']
492     : ---1----------1-1-------
492     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node2,node0)']
493     : ---1------1-1-----------
493     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node1,node0)']
494     : ---1--------1----1------
494     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node2,node1)']
495     : ---1-----1------1-------
495     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 1
496 (*) : 1-----------0-------0---
496     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node3,node0)']
497     : 1-----------0---0-------
497     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node2,node0)']
498     : 1---------------0---0---
498     : ['isleader(node0)', '~voted(node2,node0)', '~voted(node3,node0)']
499     : -1-------0-----------0--
499     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node3,node1)']
500     : -1-------0-------0------
500     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']
501     : -1---------------0---0--
501     : ['isleader(node1)', '~voted(node2,node1)', '~voted(node3,node1)']
502     : --1-------0-----------0-
502     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node3,node2)']
503     : --1-------0---0---------
503     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node1,node2)']
504     : --1-----------0-------0-
504     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node3,node2)']
505     : ---1-------0-------0----
505     : ['isleader(node3)', '~voted(node0,node3)', '~voted(node2,node3)']
506     : ---1-------0---0--------
506     : ['isleader(node3)', '~voted(node0,node3)', '~voted(node1,node3)']
507     : ---1-----------0---0----
507     : ['isleader(node3)', '~voted(node1,node3)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 24
num_suborbits: 1
508 (*) : 1-----------0---------1-
508     : ['isleader(node0)', 'voted(node3,node2)', '~voted(node1,node0)']
509     : 1-----------0------1----
509     : ['isleader(node0)', 'voted(node2,node3)', '~voted(node1,node0)']
510     : 1---------------0----1--
510     : ['isleader(node0)', 'voted(node3,node1)', '~voted(node2,node0)']
511     : 1--------------10-------
511     : ['isleader(node0)', 'voted(node1,node3)', '~voted(node2,node0)']
512     : 1----------------1--0---
512     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node3,node0)']
513     : 1-------------1-----0---
513     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node3,node0)']
514     : -1-------0------------1-
514     : ['isleader(node1)', 'voted(node3,node2)', '~voted(node0,node1)']
515     : -1-------0---------1----
515     : ['isleader(node1)', 'voted(node2,node3)', '~voted(node0,node1)']
516     : -1---------------0--1---
516     : ['isleader(node1)', 'voted(node3,node0)', '~voted(node2,node1)']
517     : -1---------1-----0------
517     : ['isleader(node1)', 'voted(node0,node3)', '~voted(node2,node1)']
518     : -1--------------1----0--
518     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node3,node1)']
519     : -1--------1----------0--
519     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node3,node1)']
520     : --1-------0----------1--
520     : ['isleader(node2)', 'voted(node3,node1)', '~voted(node0,node2)']
521     : --1-------0----1--------
521     : ['isleader(node2)', 'voted(node1,node3)', '~voted(node0,node2)']
522     : --1-----------0-----1---
522     : ['isleader(node2)', 'voted(node3,node0)', '~voted(node1,node2)']
523     : --1--------1--0---------
523     : ['isleader(node2)', 'voted(node0,node3)', '~voted(node1,node2)']
524     : --1---------1---------0-
524     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node3,node2)']
525     : --1------1------------0-
525     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node3,node2)']
526     : ---1-------0-----1------
526     : ['isleader(node3)', 'voted(node2,node1)', '~voted(node0,node3)']
527     : ---1-------0--1---------
527     : ['isleader(node3)', 'voted(node1,node2)', '~voted(node0,node3)']
528     : ---1-----------01-------
528     : ['isleader(node3)', 'voted(node2,node0)', '~voted(node1,node3)']
529     : ---1------1----0--------
529     : ['isleader(node3)', 'voted(node0,node2)', '~voted(node1,node3)']
530     : ---1--------1------0----
530     : ['isleader(node3)', 'voted(node1,node0)', '~voted(node2,node3)']
531     : ---1-----1---------0----
531     : ['isleader(node3)', 'voted(node0,node1)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 24
num_suborbits: 1
532 (*) : 1------------1------0---
532     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node3,node0)']
533     : 1------------1--0-------
533     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node2,node0)']
534     : 1-----------------1-0---
534     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node3,node0)']
535     : 1-----------0-----1-----
535     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node1,node0)']
536     : 1---------------0------1
536     : ['isleader(node0)', 'voted(node3,node3)', '~voted(node2,node0)']
537     : 1-----------0----------1
537     : ['isleader(node0)', 'voted(node3,node3)', '~voted(node1,node0)']
538     : -1------1------------0--
538     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node3,node1)']
539     : -1------1--------0------
539     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node2,node1)']
540     : -1----------------1--0--
540     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node3,node1)']
541     : -1-------0--------1-----
541     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node0,node1)']
542     : -1---------------0-----1
542     : ['isleader(node1)', 'voted(node3,node3)', '~voted(node2,node1)']
543     : -1-------0-------------1
543     : ['isleader(node1)', 'voted(node3,node3)', '~voted(node0,node1)']
544     : --1-----1-------------0-
544     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node3,node2)']
545     : --1-----1-----0---------
545     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node1,node2)']
546     : --1----------1--------0-
546     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node3,node2)']
547     : --1-------0--1----------
547     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node0,node2)']
548     : --1-----------0--------1
548     : ['isleader(node2)', 'voted(node3,node3)', '~voted(node1,node2)']
549     : --1-------0------------1
549     : ['isleader(node2)', 'voted(node3,node3)', '~voted(node0,node2)']
550     : ---1----1----------0----
550     : ['isleader(node3)', 'voted(node0,node0)', '~voted(node2,node3)']
551     : ---1----1------0--------
551     : ['isleader(node3)', 'voted(node0,node0)', '~voted(node1,node3)']
552     : ---1---------1-----0----
552     : ['isleader(node3)', 'voted(node1,node1)', '~voted(node2,node3)']
553     : ---1-------0-1----------
553     : ['isleader(node3)', 'voted(node1,node1)', '~voted(node0,node3)']
554     : ---1-----------0--1-----
554     : ['isleader(node3)', 'voted(node2,node2)', '~voted(node1,node3)']
555     : ---1-------0------1-----
555     : ['isleader(node3)', 'voted(node2,node2)', '~voted(node0,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 24
num_suborbits: 1
556 (*) : 1------------1-------1--
556     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node1)']
557     : 1------------1---1------
557     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']
558     : 1-----------------1---1-
558     : ['isleader(node0)', 'voted(node2,node2)', 'voted(node3,node2)']
559     : 1-------------1---1-----
559     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node2)']
560     : 1------------------1---1
560     : ['isleader(node0)', 'voted(node2,node3)', 'voted(node3,node3)']
561     : 1--------------1-------1
561     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node3)']
562     : -1------1-----------1---
562     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node3,node0)']
563     : -1------1-------1-------
563     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node0)']
564     : -1----------------1---1-
564     : ['isleader(node1)', 'voted(node2,node2)', 'voted(node3,node2)']
565     : -1--------1-------1-----
565     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node2)']
566     : -1-----------------1---1
566     : ['isleader(node1)', 'voted(node2,node3)', 'voted(node3,node3)']
567     : -1---------1-----------1
567     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node3,node3)']
568     : --1-----1-----------1---
568     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node3,node0)']
569     : --1-----1---1-----------
569     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node0)']
570     : --1----------1-------1--
570     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node3,node1)']
571     : --1------1---1----------
571     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node1)']
572     : --1------------1-------1
572     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node3,node3)']
573     : --1--------1-----------1
573     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node3,node3)']
574     : ---1----1-------1-------
574     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node2,node0)']
575     : ---1----1---1-----------
575     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node1,node0)']
576     : ---1---------1---1------
576     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node2,node1)']
577     : ---1-----1---1----------
577     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node1,node1)']
578     : ---1----------1---1-----
578     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node2,node2)']
579     : ---1------1-------1-----
579     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 24
num_suborbits: 1
580 (*) : 1------------1--------1-
580     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node2)']
581     : 1------------1-----1----
581     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node3)']
582     : 1-----------------1--1--
582     : ['isleader(node0)', 'voted(node2,node2)', 'voted(node3,node1)']
583     : 1--------------1--1-----
583     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node2,node2)']
584     : 1----------------1-----1
584     : ['isleader(node0)', 'voted(node2,node1)', 'voted(node3,node3)']
585     : 1-------------1--------1
585     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node3)']
586     : -1------1-------------1-
586     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node3,node2)']
587     : -1------1----------1----
587     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node3)']
588     : -1----------------1-1---
588     : ['isleader(node1)', 'voted(node2,node2)', 'voted(node3,node0)']
589     : -1---------1------1-----
589     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node2,node2)']
590     : -1--------------1------1
590     : ['isleader(node1)', 'voted(node2,node0)', 'voted(node3,node3)']
591     : -1--------1------------1
591     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node3,node3)']
592     : --1-----1------------1--
592     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node3,node1)']
593     : --1-----1------1--------
593     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node3)']
594     : --1----------1------1---
594     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node3,node0)']
595     : --1--------1-1----------
595     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node1,node1)']
596     : --1---------1----------1
596     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node3,node3)']
597     : --1------1-------------1
597     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node3,node3)']
598     : ---1----1--------1------
598     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node2,node1)']
599     : ---1----1-----1---------
599     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node1,node2)']
600     : ---1---------1--1-------
600     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node2,node0)']
601     : ---1------1--1----------
601     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node1,node1)']
602     : ---1--------1-----1-----
602     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node2,node2)']
603     : ---1-----1--------1-----
603     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 34 =====================
size : 12
num_suborbits: 1
604 (*) : 1-------------1-------1-
604     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node2)']
605     : 1--------------1---1----
605     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node2,node3)']
606     : 1----------------1---1--
606     : ['isleader(node0)', 'voted(node2,node1)', 'voted(node3,node1)']
607     : -1--------1-----------1-
607     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node3,node2)']
608     : -1---------1-------1----
608     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node2,node3)']
609     : -1--------------1---1---
609     : ['isleader(node1)', 'voted(node2,node0)', 'voted(node3,node0)']
610     : --1------1-----------1--
610     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node3,node1)']
611     : --1--------1---1--------
611     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node1,node3)']
612     : --1---------1-------1---
612     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node3,node0)']
613     : ---1-----1-------1------
613     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node2,node1)']
614     : ---1------1---1---------
614     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node1,node2)']
615     : ---1--------1---1-------
615     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 35 =====================
size : 24
num_suborbits: 1
616 (*) : 1------1------1---------
616     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node1,node2)']
617     : 1------1-------1--------
617     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node1,node3)']
618     : 1------1---------1------
618     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node2,node1)']
619     : 1------1-----------1----
619     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node2,node3)']
620     : 1------1-------------1--
620     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node3,node1)']
621     : 1------1--------------1-
621     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node3,node2)']
622     : -1----1---1-------------
622     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node0,node2)']
623     : -1----1----1------------
623     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node0,node3)']
624     : -1----1---------1-------
624     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node2,node0)']
625     : -1----1------------1----
625     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node2,node3)']
626     : -1----1-------------1---
626     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node3,node0)']
627     : -1----1---------------1-
627     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node3,node2)']
628     : --1--1---1--------------
628     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node0,node1)']
629     : --1--1-----1------------
629     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node0,node3)']
630     : --1--1------1-----------
630     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node1,node0)']
631     : --1--1---------1--------
631     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node1,node3)']
632     : --1--1--------------1---
632     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node3,node0)']
633     : --1--1---------------1--
633     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node3,node1)']
634     : ---11----1--------------
634     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node0,node1)']
635     : ---11-----1-------------
635     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node0,node2)']
636     : ---11-------1-----------
636     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node1,node0)']
637     : ---11---------1---------
637     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node1,node2)']
638     : ---11-----------1-------
638     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node2,node0)']
639     : ---11------------1------
639     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 36 =====================
size : 12
num_suborbits: 1
640 (*) : 1------1----0-----------
640     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', '~voted(node1,node0)']
641     : 1------1--------0-------
641     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', '~voted(node2,node0)']
642     : 1------1------------0---
642     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', '~voted(node3,node0)']
643     : -1----1--0--------------
643     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', '~voted(node0,node1)']
644     : -1----1----------0------
644     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', '~voted(node2,node1)']
645     : -1----1--------------0--
645     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', '~voted(node3,node1)']
646     : --1--1----0-------------
646     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', '~voted(node0,node2)']
647     : --1--1--------0---------
647     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', '~voted(node1,node2)']
648     : --1--1----------------0-
648     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', '~voted(node3,node2)']
649     : ---11------0------------
649     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', '~voted(node0,node3)']
650     : ---11----------0--------
650     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', '~voted(node1,node3)']
651     : ---11--------------0----
651     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 37 =====================
size : 12
num_suborbits: 1
652 (*) : 1------1-----1----------
652     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node1,node1)']
653     : 1------1----------1-----
653     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node2,node2)']
654     : 1------1---------------1
654     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node3,node3)']
655     : -1----1-1---------------
655     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node0,node0)']
656     : -1----1-----------1-----
656     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node2,node2)']
657     : -1----1----------------1
657     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node3,node3)']
658     : --1--1--1---------------
658     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node0,node0)']
659     : --1--1-------1----------
659     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node1,node1)']
660     : --1--1-----------------1
660     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node3,node3)']
661     : ---11---1---------------
661     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node0,node0)']
662     : ---11--------1----------
662     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node1,node1)']
663     : ---11-------------1-----
663     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 38 =====================
size : 12
num_suborbits: 1
664 (*) : 1------------1----1-----
664     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']
665     : 1------------1---------1
665     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node3)']
666     : 1-----------------1----1
666     : ['isleader(node0)', 'voted(node2,node2)', 'voted(node3,node3)']
667     : -1------1---------1-----
667     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']
668     : -1------1--------------1
668     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node3,node3)']
669     : -1----------------1----1
669     : ['isleader(node1)', 'voted(node2,node2)', 'voted(node3,node3)']
670     : --1-----1----1----------
670     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node1)']
671     : --1-----1--------------1
671     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node3,node3)']
672     : --1----------1---------1
672     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node3,node3)']
673     : ---1----1----1----------
673     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node1,node1)']
674     : ---1----1---------1-----
674     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node2,node2)']
675     : ---1---------1----1-----
675     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 39 =====================
size : 1
num_suborbits: 1
676 (*) : ----0000----------------
676     : ['~(quorum=nset__node0_node1_node2)', '~(quorum=nset__node0_node1_node3)', '~(quorum=nset__node0_node2_node3)', '~(quorum=nset__node1_node2_node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 40

[PRIME NOTE]: number of orbits before merging: 40

[PRIME NOTE]: number of primes: 677

[QRM NOTE]: Time elapsed since start: 0.280 seconds

[QRM NOTE]: Time elapsed since last: 0.237 seconds

[QRM NOTE]: Peak memory: 2028102 bytes


============================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=4]

============================================================================================================

definition primes: {2, 39}


New level: 0
 pending : [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : []


Before reduction : 
 pending  : [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : []

Essensial at level 0 : {0, 1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 274877906944), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 274877906944), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 274877906944), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1]

[QRM NOTE]: Time elapsed since start: 0.380 seconds

[QRM NOTE]: Time elapsed since last: 0.100 seconds

[QRM NOTE]: Peak memory: 992256 bytes


================================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=4]

================================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 12
num_suborbits: 1
0 (*) : --------------11--------
0     : ['voted(node1,node2)', 'voted(node1,node3)']
1     : -----------------1-1----
1     : ['voted(node2,node1)', 'voted(node2,node3)']
2     : ---------------------11-
2     : ['voted(node3,node1)', 'voted(node3,node2)']
3     : ----------11------------
3     : ['voted(node0,node2)', 'voted(node0,node3)']
4     : ----------------1--1----
4     : ['voted(node2,node0)', 'voted(node2,node3)']
5     : --------------------1-1-
5     : ['voted(node3,node0)', 'voted(node3,node2)']
6     : ---------1-1------------
6     : ['voted(node0,node1)', 'voted(node0,node3)']
7     : ------------1--1--------
7     : ['voted(node1,node0)', 'voted(node1,node3)']
8     : --------------------11--
8     : ['voted(node3,node0)', 'voted(node3,node1)']
9     : ---------11-------------
9     : ['voted(node0,node1)', 'voted(node0,node2)']
10     : ------------1-1---------
10     : ['voted(node1,node0)', 'voted(node1,node2)']
11     : ----------------11------
11     : ['voted(node2,node0)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['voted(node1,node2)', 'voted(node1,node3)']

sign_func_name2args: {'0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$1]}

sig2const: {'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$voted$0$0; node$0$voted$0$1, node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$voted$0$0; node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$voted$0$0; node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['voted(node1,node2)', 'voted(node1,node3)']

func_name2symbol:  {'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$voted$0$0; node$0$voted$0$1, node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$voted$0$0; node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$0$voted$0': [node$0$voted$0$0; node$0$voted$0$1], 'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}

	identical_single_classes: {'node$0$voted$0; node$0$voted$0': node$0$voted$0$0; node$0$voted$0$1}

	identical_multi_classes: {'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE1)', 'voted(NODE0,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 1 =====================
size : 12
num_suborbits: 1
12 (*) : -------------11---------
12     : ['voted(node1,node1)', 'voted(node1,node2)']
13     : -------------1-1--------
13     : ['voted(node1,node1)', 'voted(node1,node3)']
14     : -----------------11-----
14     : ['voted(node2,node1)', 'voted(node2,node2)']
15     : ------------------11----
15     : ['voted(node2,node2)', 'voted(node2,node3)']
16     : ---------------------1-1
16     : ['voted(node3,node1)', 'voted(node3,node3)']
17     : ----------------------11
17     : ['voted(node3,node2)', 'voted(node3,node3)']
18     : --------1-1-------------
18     : ['voted(node0,node0)', 'voted(node0,node2)']
19     : --------1--1------------
19     : ['voted(node0,node0)', 'voted(node0,node3)']
20     : ----------------1-1-----
20     : ['voted(node2,node0)', 'voted(node2,node2)']
21     : --------------------1--1
21     : ['voted(node3,node0)', 'voted(node3,node3)']
22     : --------11--------------
22     : ['voted(node0,node0)', 'voted(node0,node1)']
23     : ------------11----------
23     : ['voted(node1,node0)', 'voted(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['voted(node1,node1)', 'voted(node1,node2)']

sign_func_name2args: {'0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$voted$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$1]}

sig2const: {'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['voted(node1,node1)', 'voted(node1,node2)']

func_name2symbol:  {'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$0], 'node$0$voted$1': [node$0$voted$1$1]}

	identical_single_classes: {'node$0$voted$0; node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$0$1; node$0$voted$1$0, 'node$0$voted$1': node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE1)', 'voted(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
30 (*) : -1-1--------------------
30     : ['isleader(node1)', 'isleader(node3)']
31     : -11---------------------
31     : ['isleader(node1)', 'isleader(node2)']
32     : --11--------------------
32     : ['isleader(node2)', 'isleader(node3)']
33     : 1--1--------------------
33     : ['isleader(node0)', 'isleader(node3)']
34     : 1-1---------------------
34     : ['isleader(node0)', 'isleader(node2)']
35     : 11----------------------
35     : ['isleader(node0)', 'isleader(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node1)', 'isleader(node3)']

sign_func_name2args: {'0$isleader': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),), (Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$isleader$0$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$isleader$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$isleader$0$1}

part_sig: ('node$0$isleader$0$0 | node$0$isleader$0$1',)


---------- SigGenerator ----------

terms:  ['isleader(node1)', 'isleader(node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),)}

sign_func_name2count:  {'0$isleader': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$isleader$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$isleader$0$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0, node$0$isleader$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$isleader$0': [node$0$isleader$0$0, node$0$isleader$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', 'isleader(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~isleader(NODE0) | ~isleader(NODE1) | NODE0 = NODE1


=== Prime Orbit 4 =====================
size : 24
num_suborbits: 1
36 (*) : 1---1-------0-----------
36     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', '~voted(node1,node0)']
37     : 1----1------0-----------
37     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', '~voted(node1,node0)']
38     : 1---1-----------0-------
38     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', '~voted(node2,node0)']
39     : 1-----1---------0-------
39     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', '~voted(node2,node0)']
40     : 1----1--------------0---
40     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', '~voted(node3,node0)']
41     : 1-----1-------------0---
41     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', '~voted(node3,node0)']
42     : -1--1----0--------------
42     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', '~voted(node0,node1)']
43     : -1---1---0--------------
43     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', '~voted(node0,node1)']
44     : -1--1------------0------
44     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', '~voted(node2,node1)']
45     : -1-----1---------0------
45     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', '~voted(node2,node1)']
46     : -1---1---------------0--
46     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', '~voted(node3,node1)']
47     : -1-----1-------------0--
47     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', '~voted(node3,node1)']
48     : --1-1-----0-------------
48     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', '~voted(node0,node2)']
49     : --1---1---0-------------
49     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', '~voted(node0,node2)']
50     : --1-1---------0---------
50     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', '~voted(node1,node2)']
51     : --1----1------0---------
51     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', '~voted(node1,node2)']
52     : --1---1---------------0-
52     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', '~voted(node3,node2)']
53     : --1----1--------------0-
53     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', '~voted(node3,node2)']
54     : ---1-1-----0------------
54     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', '~voted(node0,node3)']
55     : ---1--1----0------------
55     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', '~voted(node0,node3)']
56     : ---1-1---------0--------
56     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', '~voted(node1,node3)']
57     : ---1---1-------0--------
57     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', '~voted(node1,node3)']
58     : ---1--1------------0----
58     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', '~voted(node2,node3)']
59     : ---1---1-----------0----
59     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node0_node1_node2', '~voted(node1,node0)', 'member(node0,nset__node0_node1_node2)', 'member(node1,nset__node0_node1_node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$1$0, node$0$member$0$0], Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$1$voted$0$0, node$0$member$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$1': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, node$0$member$0$1; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$0$member$0$1; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$0$member$0$1; node$1$voted$0$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node0_node1_node2', '~voted(node1,node0)', 'member(node0,nset__node0_node1_node2)', 'member(node1,nset__node0_node1_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '1$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, node$0$member$0$1; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$0$member$0$1; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$1': [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0], 'node$0$member$0; node$1$voted$0': [node$0$member$0$1; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$1': node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, 'node$0$member$0; node$1$voted$0': node$0$member$0$1; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~voted(NODE1,NODE0)', 'isleader(NODE0)', 'member(NODE0,NSET0)', 'member(NODE1,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | voted(NODE1,NODE0) | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | NODE0 = NODE1


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
60 (*) : 1-----0-----0-----------
60     : ['isleader(node0)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node0)']
61     : 1----0----------0-------
61     : ['isleader(node0)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node0)']
62     : 1---0---------------0---
62     : ['isleader(node0)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node0)']
63     : -1-----0-0--------------
63     : ['isleader(node1)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node1)']
64     : -1---0-----------0------
64     : ['isleader(node1)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node1)']
65     : -1--0----------------0--
65     : ['isleader(node1)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node1)']
66     : --1----0--0-------------
66     : ['isleader(node2)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node2)']
67     : --1---0-------0---------
67     : ['isleader(node2)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node2)']
68     : --1-0-----------------0-
68     : ['isleader(node2)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node2)']
69     : ---1---0---0------------
69     : ['isleader(node3)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node3)']
70     : ---1--0--------0--------
70     : ['isleader(node3)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node3)']
71     : ---1-0-------------0----
71     : ['isleader(node3)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum ~= nset__node0_node2_node3', '~voted(node1,node0)', 'member(node0,nset__node0_node2_node3)', '~member(node1,nset__node0_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$quorum=': [(Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$1$0, node$0$member$0$0], Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$1$quorum=$0$0, nset$0$member$1$0, nset$1$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$quorum=$0$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$1$member$0$0; node$1$voted$0$0', 'nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum ~= nset__node0_node2_node3', '~voted(node1,node0)', 'member(node0,nset__node0_node2_node3)', '~member(node1,nset__node0_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '1$voted': 1, '0$member': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, node$1$member$0$0; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0 | node$1$member$0$0; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$1': [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0], 'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$1': node$0$isleader$0$0; node$0$member$0$0; node$1$voted$1$0, 'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1,NODE0)', 'isleader(NODE0)', 'member(NODE0,NSET0)', '~member(NODE1,NSET0)', 'quorum ~= NSET0']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. voted(NODE1,NODE0) | ~isleader(NODE0) | ~member(NODE0,NSET0) | member(NODE1,NSET0) | quorum = NSET0 | NODE0 = NODE1


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 1
72 (*) : 1-----0------1----------
72     : ['isleader(node0)', 'voted(node1,node1)', '~(quorum=nset__node0_node2_node3)']
73     : 1----0------------1-----
73     : ['isleader(node0)', 'voted(node2,node2)', '~(quorum=nset__node0_node1_node3)']
74     : 1---0------------------1
74     : ['isleader(node0)', 'voted(node3,node3)', '~(quorum=nset__node0_node1_node2)']
75     : -1-----01---------------
75     : ['isleader(node1)', 'voted(node0,node0)', '~(quorum=nset__node1_node2_node3)']
76     : -1---0------------1-----
76     : ['isleader(node1)', 'voted(node2,node2)', '~(quorum=nset__node0_node1_node3)']
77     : -1--0------------------1
77     : ['isleader(node1)', 'voted(node3,node3)', '~(quorum=nset__node0_node1_node2)']
78     : --1----01---------------
78     : ['isleader(node2)', 'voted(node0,node0)', '~(quorum=nset__node1_node2_node3)']
79     : --1---0------1----------
79     : ['isleader(node2)', 'voted(node1,node1)', '~(quorum=nset__node0_node2_node3)']
80     : --1-0------------------1
80     : ['isleader(node2)', 'voted(node3,node3)', '~(quorum=nset__node0_node1_node2)']
81     : ---1---01---------------
81     : ['isleader(node3)', 'voted(node0,node0)', '~(quorum=nset__node1_node2_node3)']
82     : ---1--0------1----------
82     : ['isleader(node3)', 'voted(node1,node1)', '~(quorum=nset__node0_node2_node3)']
83     : ---1-0------------1-----
83     : ['isleader(node3)', 'voted(node2,node2)', '~(quorum=nset__node0_node1_node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum ~= nset__node0_node2_node3', 'voted(node1,node1)', 'member(node0,nset__node0_node2_node3)', '~member(node1,nset__node0_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$quorum=': [(Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$member$0$0], Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$1$quorum=$0$0, nset$0$member$1$0, nset$1$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$0, node$1$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$quorum=$0$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0', 'nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum ~= nset__node0_node2_node3', 'voted(node1,node1)', 'member(node0,nset__node0_node2_node3)', '~member(node1,nset__node0_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '0$voted': 1, '0$member': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0': [node$0$isleader$0$0; node$0$member$0$0], 'node$0$voted$0; node$0$voted$1; node$1$member$0': [node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0': node$0$isleader$0$0; node$0$member$0$0, 'node$0$voted$0; node$0$voted$1; node$1$member$0': node$0$voted$0$0; node$0$voted$1$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['isleader(NODE0)', 'member(NODE0,NSET0)', '~member(NODE1,NSET0)', 'quorum ~= NSET0', 'voted(NODE1,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. ~isleader(NODE0) | ~member(NODE0,NSET0) | member(NODE1,NSET0) | quorum = NSET0 | ~voted(NODE1,NODE1) | NODE0 = NODE1


=== Prime Orbit 7 =====================
size : 24
num_suborbits: 1
84 (*) : 1---1--------1----------
84     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node1,node1)']
85     : 1----1-------1----------
85     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node1,node1)']
86     : 1---1-------------1-----
86     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node2,node2)']
87     : 1-----1-----------1-----
87     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node2,node2)']
88     : 1----1-----------------1
88     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node3,node3)']
89     : 1-----1----------------1
89     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node3,node3)']
90     : -1--1---1---------------
90     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node0,node0)']
91     : -1---1--1---------------
91     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node0,node0)']
92     : -1--1-------------1-----
92     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node2,node2)']
93     : -1-----1----------1-----
93     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node2,node2)']
94     : -1---1-----------------1
94     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node3,node3)']
95     : -1-----1---------------1
95     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node3,node3)']
96     : --1-1---1---------------
96     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node0,node0)']
97     : --1---1-1---------------
97     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node0,node0)']
98     : --1-1--------1----------
98     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node1,node1)']
99     : --1----1-----1----------
99     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node1,node1)']
100     : --1---1----------------1
100     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node3,node3)']
101     : --1----1---------------1
101     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node3,node3)']
102     : ---1-1--1---------------
102     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node0,node0)']
103     : ---1--1-1---------------
103     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node0,node0)']
104     : ---1-1-------1----------
104     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node1,node1)']
105     : ---1---1-----1----------
105     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node1,node1)']
106     : ---1--1-----------1-----
106     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node2,node2)']
107     : ---1---1----------1-----
107     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node0_node1_node2', 'voted(node1,node1)', 'member(node0,nset__node0_node1_node2)', 'member(node1,nset__node0_node1_node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$member$0$0], Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$member$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$1': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node0_node1_node2', 'voted(node1,node1)', 'member(node0,nset__node0_node1_node2)', 'member(node1,nset__node0_node1_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0': [node$0$isleader$0$0; node$0$member$0$0], 'node$0$member$0; node$0$voted$0; node$0$voted$1': [node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0': node$0$isleader$0$0; node$0$member$0$0, 'node$0$member$0; node$0$voted$0; node$0$voted$1': node$0$member$0$1; node$0$voted$0$0; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', 'isleader(NODE0)', 'member(NODE0,NSET0)', 'voted(NODE1,NODE1)', 'member(NODE1,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~voted(NODE1,NODE1) | ~member(NODE1,NSET0) | NODE0 = NODE1


=== Prime Orbit 8 =====================
size : 24
num_suborbits: 1
108 (*) : 1-----0--------1--------
108     : ['isleader(node0)', 'voted(node1,node3)', '~(quorum=nset__node0_node2_node3)']
109     : 1-----0-------1---------
109     : ['isleader(node0)', 'voted(node1,node2)', '~(quorum=nset__node0_node2_node3)']
110     : 1----0-------------1----
110     : ['isleader(node0)', 'voted(node2,node3)', '~(quorum=nset__node0_node1_node3)']
111     : 1----0-----------1------
111     : ['isleader(node0)', 'voted(node2,node1)', '~(quorum=nset__node0_node1_node3)']
112     : 1---0-----------------1-
112     : ['isleader(node0)', 'voted(node3,node2)', '~(quorum=nset__node0_node1_node2)']
113     : 1---0----------------1--
113     : ['isleader(node0)', 'voted(node3,node1)', '~(quorum=nset__node0_node1_node2)']
114     : -1-----0---1------------
114     : ['isleader(node1)', 'voted(node0,node3)', '~(quorum=nset__node1_node2_node3)']
115     : -1-----0--1-------------
115     : ['isleader(node1)', 'voted(node0,node2)', '~(quorum=nset__node1_node2_node3)']
116     : -1---0-------------1----
116     : ['isleader(node1)', 'voted(node2,node3)', '~(quorum=nset__node0_node1_node3)']
117     : -1---0----------1-------
117     : ['isleader(node1)', 'voted(node2,node0)', '~(quorum=nset__node0_node1_node3)']
118     : -1--0-----------------1-
118     : ['isleader(node1)', 'voted(node3,node2)', '~(quorum=nset__node0_node1_node2)']
119     : -1--0---------------1---
119     : ['isleader(node1)', 'voted(node3,node0)', '~(quorum=nset__node0_node1_node2)']
120     : --1----0---1------------
120     : ['isleader(node2)', 'voted(node0,node3)', '~(quorum=nset__node1_node2_node3)']
121     : --1----0-1--------------
121     : ['isleader(node2)', 'voted(node0,node1)', '~(quorum=nset__node1_node2_node3)']
122     : --1---0--------1--------
122     : ['isleader(node2)', 'voted(node1,node3)', '~(quorum=nset__node0_node2_node3)']
123     : --1---0-----1-----------
123     : ['isleader(node2)', 'voted(node1,node0)', '~(quorum=nset__node0_node2_node3)']
124     : --1-0----------------1--
124     : ['isleader(node2)', 'voted(node3,node1)', '~(quorum=nset__node0_node1_node2)']
125     : --1-0---------------1---
125     : ['isleader(node2)', 'voted(node3,node0)', '~(quorum=nset__node0_node1_node2)']
126     : ---1---0--1-------------
126     : ['isleader(node3)', 'voted(node0,node2)', '~(quorum=nset__node1_node2_node3)']
127     : ---1---0-1--------------
127     : ['isleader(node3)', 'voted(node0,node1)', '~(quorum=nset__node1_node2_node3)']
128     : ---1--0-------1---------
128     : ['isleader(node3)', 'voted(node1,node2)', '~(quorum=nset__node0_node2_node3)']
129     : ---1--0-----1-----------
129     : ['isleader(node3)', 'voted(node1,node0)', '~(quorum=nset__node0_node2_node3)']
130     : ---1-0-----------1------
130     : ['isleader(node3)', 'voted(node2,node1)', '~(quorum=nset__node0_node1_node3)']
131     : ---1-0----------1-------
131     : ['isleader(node3)', 'voted(node2,node0)', '~(quorum=nset__node0_node1_node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum ~= nset__node0_node2_node3', 'voted(node1,node3)', 'member(node0,nset__node0_node2_node3)', '~member(node1,nset__node0_node2_node3)', 'member(node3,nset__node0_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$quorum=': [(Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))), (Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$member$0$0], Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$1$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1, nset$1$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$1$member$0$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$member$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$quorum=$0$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$1': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$1$0, node$0$voted$0$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$1$0 | node$0$voted$0$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$1$0 | node$0$voted$0$0; node$1$member$0$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum ~= nset__node0_node2_node3', 'voted(node1,node3)', 'member(node0,nset__node0_node2_node3)', '~member(node1,nset__node0_node2_node3)', 'member(node3,nset__node0_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '0$voted': 1, '0$member': 2, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$1$0, node$0$voted$0$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$1$0 | node$0$voted$0$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0': [node$0$isleader$0$0; node$0$member$0$0], 'node$0$member$0; node$0$voted$1': [node$0$member$0$1; node$0$voted$1$0], 'node$0$voted$0; node$1$member$0': [node$0$voted$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0': node$0$isleader$0$0; node$0$member$0$0, 'node$0$member$0; node$0$voted$1': node$0$member$0$1; node$0$voted$1$0, 'node$0$voted$0; node$1$member$0': node$0$voted$0$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': [nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': nset$0$member$1$0; nset$0$member$1$1; nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$member': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,NSET0)', '~member(NODE2,NSET0)', 'voted(NODE2,NODE1)', 'isleader(NODE0)', 'member(NODE1,NSET0)', 'quorum ~= NSET0']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NSET0. ~member(NODE0,NSET0) | member(NODE2,NSET0) | ~voted(NODE2,NODE1) | ~isleader(NODE0) | ~member(NODE1,NSET0) | quorum = NSET0 | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 9 =====================
size : 24
num_suborbits: 1
132 (*) : 1---1----------1--------
132     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node1,node3)']
133     : 1----1--------1---------
133     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node1,node2)']
134     : 1---1--------------1----
134     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node2,node3)']
135     : 1-----1----------1------
135     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node2,node1)']
136     : 1----1----------------1-
136     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node3,node2)']
137     : 1-----1--------------1--
137     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node3,node1)']
138     : -1--1------1------------
138     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node0,node3)']
139     : -1---1----1-------------
139     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node0,node2)']
140     : -1--1--------------1----
140     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node2,node3)']
141     : -1-----1--------1-------
141     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node2,node0)']
142     : -1---1----------------1-
142     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node3,node2)']
143     : -1-----1------------1---
143     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node3,node0)']
144     : --1-1------1------------
144     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node0,node3)']
145     : --1---1--1--------------
145     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node0,node1)']
146     : --1-1----------1--------
146     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node1,node3)']
147     : --1----1----1-----------
147     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node1,node0)']
148     : --1---1--------------1--
148     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node3,node1)']
149     : --1----1------------1---
149     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node3,node0)']
150     : ---1-1----1-------------
150     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node0,node2)']
151     : ---1--1--1--------------
151     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node0,node1)']
152     : ---1-1--------1---------
152     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node1,node2)']
153     : ---1---1----1-----------
153     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node1,node0)']
154     : ---1--1----------1------
154     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node2,node1)']
155     : ---1---1--------1-------
155     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node0_node1_node2', 'voted(node1,node3)', 'member(node0,nset__node0_node1_node2)', 'member(node1,nset__node0_node1_node2)', '~member(node3,nset__node0_node1_node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))], '1$member': [(Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$member$0$0], Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1, nset$1$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$member$0$1], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$1$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$1': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$member$0$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0, node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node0_node1_node2', 'voted(node1,node3)', 'member(node0,nset__node0_node1_node2)', 'member(node1,nset__node0_node1_node2)', '~member(node3,nset__node0_node1_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '0$member': 2, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0, node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0': [node$0$isleader$0$0; node$0$member$0$0], 'node$0$member$0; node$0$voted$0': [node$0$member$0$1; node$0$voted$0$0], 'node$0$voted$1; node$1$member$0': [node$0$voted$1$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0': node$0$isleader$0$0; node$0$member$0$0, 'node$0$member$0; node$0$voted$0': node$0$member$0$1; node$0$voted$0$0, 'node$0$voted$1; node$1$member$0': node$0$voted$1$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$member': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~member(NODE2,NSET0)', 'voted(NODE1,NODE2)', 'isleader(NODE0)', 'member(NODE0,NSET0)', 'member(NODE1,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NSET0. quorum ~= NSET0 | member(NODE2,NSET0) | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 10 =====================
size : 24
num_suborbits: 1
156 (*) : 1---1---------1---------
156     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node1,node2)']
157     : 1----1---------1--------
157     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node1,node3)']
158     : 1---1------------1------
158     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node2,node1)']
159     : 1-----1------------1----
159     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node2,node3)']
160     : 1----1---------------1--
160     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node3,node1)']
161     : 1-----1---------------1-
161     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node3,node2)']
162     : -1--1-----1-------------
162     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node0,node2)']
163     : -1---1-----1------------
163     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node0,node3)']
164     : -1--1-----------1-------
164     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node2,node0)']
165     : -1-----1-----------1----
165     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node2,node3)']
166     : -1---1--------------1---
166     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node3,node0)']
167     : -1-----1--------------1-
167     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node3,node2)']
168     : --1-1----1--------------
168     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node0,node1)']
169     : --1---1----1------------
169     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node0,node3)']
170     : --1-1-------1-----------
170     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node1,node0)']
171     : --1----1-------1--------
171     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node1,node3)']
172     : --1---1-------------1---
172     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node3,node0)']
173     : --1----1-------------1--
173     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node3,node1)']
174     : ---1-1---1--------------
174     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node0,node1)']
175     : ---1--1---1-------------
175     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node0,node2)']
176     : ---1-1------1-----------
176     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node1,node0)']
177     : ---1---1------1---------
177     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node1,node2)']
178     : ---1--1---------1-------
178     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node2,node0)']
179     : ---1---1---------1------
179     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node0_node1_node2', 'voted(node1,node2)', 'member(node0,nset__node0_node1_node2)', 'member(node1,nset__node0_node1_node2)', 'member(node2,nset__node0_node1_node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$member$0$0], Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1, nset$0$member$1$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$member$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$member$0$2]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$1': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$2': Const('nset__node0_node1_node2', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0, node$0$member$0$2; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$member$1$2; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0 | node$0$member$0$2; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$member$1$2; nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0 | node$0$member$0$2; node$0$voted$1$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$member$1$2; nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node0_node1_node2', 'voted(node1,node2)', 'member(node0,nset__node0_node1_node2)', 'member(node1,nset__node0_node1_node2)', 'member(node2,nset__node0_node1_node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '0$member': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0, node$0$member$0$1; node$0$voted$0$0, node$0$member$0$2; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$member$1$2; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0 | node$0$member$0$1; node$0$voted$0$0 | node$0$member$0$2; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$member$1$2; nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0': [node$0$isleader$0$0; node$0$member$0$0], 'node$0$member$0; node$0$voted$0': [node$0$member$0$1; node$0$voted$0$0], 'node$0$member$0; node$0$voted$1': [node$0$member$0$2; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0': node$0$isleader$0$0; node$0$member$0$0, 'node$0$member$0; node$0$voted$0': node$0$member$0$1; node$0$voted$0$0, 'node$0$member$0; node$0$voted$1': node$0$member$0$2; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': [nset$0$member$1$0; nset$0$member$1$1; nset$0$member$1$2; nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': nset$0$member$1$0; nset$0$member$1$1; nset$0$member$1$2; nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', 'member(NODE2,NSET0)', 'voted(NODE1,NODE2)', 'isleader(NODE0)', 'member(NODE0,NSET0)', 'member(NODE1,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NSET0. quorum ~= NSET0 | ~member(NODE2,NSET0) | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 11 =====================
size : 24
num_suborbits: 1
180 (*) : 1-------0-----1---------
180     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node0,node0)']
181     : 1-------0------1--------
181     : ['isleader(node0)', 'voted(node1,node3)', '~voted(node0,node0)']
182     : 1-------0--------1------
182     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node0,node0)']
183     : 1-------0----------1----
183     : ['isleader(node0)', 'voted(node2,node3)', '~voted(node0,node0)']
184     : 1-------0------------1--
184     : ['isleader(node0)', 'voted(node3,node1)', '~voted(node0,node0)']
185     : 1-------0-------------1-
185     : ['isleader(node0)', 'voted(node3,node2)', '~voted(node0,node0)']
186     : -1--------1--0----------
186     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node1,node1)']
187     : -1---------1-0----------
187     : ['isleader(node1)', 'voted(node0,node3)', '~voted(node1,node1)']
188     : -1-----------0--1-------
188     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node1,node1)']
189     : -1-----------0-----1----
189     : ['isleader(node1)', 'voted(node2,node3)', '~voted(node1,node1)']
190     : -1-----------0------1---
190     : ['isleader(node1)', 'voted(node3,node0)', '~voted(node1,node1)']
191     : -1-----------0--------1-
191     : ['isleader(node1)', 'voted(node3,node2)', '~voted(node1,node1)']
192     : --1------1--------0-----
192     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node2,node2)']
193     : --1--------1------0-----
193     : ['isleader(node2)', 'voted(node0,node3)', '~voted(node2,node2)']
194     : --1---------1-----0-----
194     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node2,node2)']
195     : --1------------1--0-----
195     : ['isleader(node2)', 'voted(node1,node3)', '~voted(node2,node2)']
196     : --1---------------0-1---
196     : ['isleader(node2)', 'voted(node3,node0)', '~voted(node2,node2)']
197     : --1---------------0--1--
197     : ['isleader(node2)', 'voted(node3,node1)', '~voted(node2,node2)']
198     : ---1-----1-------------0
198     : ['isleader(node3)', 'voted(node0,node1)', '~voted(node3,node3)']
199     : ---1------1------------0
199     : ['isleader(node3)', 'voted(node0,node2)', '~voted(node3,node3)']
200     : ---1--------1----------0
200     : ['isleader(node3)', 'voted(node1,node0)', '~voted(node3,node3)']
201     : ---1----------1--------0
201     : ['isleader(node3)', 'voted(node1,node2)', '~voted(node3,node3)']
202     : ---1------------1------0
202     : ['isleader(node3)', 'voted(node2,node0)', '~voted(node3,node3)']
203     : ---1-------------1-----0
203     : ['isleader(node3)', 'voted(node2,node1)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', '~voted(node0,node0)', 'voted(node1,node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', '~voted(node0,node0)', 'voted(node1,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0], 'node$0$voted$0': [node$0$voted$0$0], 'node$0$voted$1': [node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, 'node$0$voted$0': node$0$voted$0$0, 'node$0$voted$1': node$0$voted$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0,NODE0)', 'isleader(NODE0)', 'voted(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. voted(NODE0,NODE0) | ~isleader(NODE0) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 12 =====================
size : 24
num_suborbits: 1
204 (*) : 1--------1----1---------
204     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']
205     : 1--------1-----1--------
205     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node3)']
206     : 1---------1------1------
206     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']
207     : 1---------1--------1----
207     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node3)']
208     : 1----------1---------1--
208     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node3,node1)']
209     : 1----------1----------1-
209     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node3,node2)']
210     : -1--------1-1-----------
210     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node0)']
211     : -1---------11-----------
211     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node1,node0)']
212     : -1------------1-1-------
212     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node0)']
213     : -1------------1----1----
213     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node3)']
214     : -1-------------1----1---
214     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node3,node0)']
215     : -1-------------1------1-
215     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node3,node2)']
216     : --1------1------1-------
216     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node0)']
217     : --1--------1----1-------
217     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node2,node0)']
218     : --1---------1----1------
218     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node1)']
219     : --1------------1-1------
219     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node2,node1)']
220     : --1----------------11---
220     : ['isleader(node2)', 'voted(node2,node3)', 'voted(node3,node0)']
221     : --1----------------1-1--
221     : ['isleader(node2)', 'voted(node2,node3)', 'voted(node3,node1)']
222     : ---1-----1----------1---
222     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node3,node0)']
223     : ---1------1---------1---
223     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node3,node0)']
224     : ---1--------1--------1--
224     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node3,node1)']
225     : ---1----------1------1--
225     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node3,node1)']
226     : ---1------------1-----1-
226     : ['isleader(node3)', 'voted(node2,node0)', 'voted(node3,node2)']
227     : ---1-------------1----1-
227     : ['isleader(node3)', 'voted(node2,node1)', 'voted(node3,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$voted$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0': [node$0$isleader$0$0; node$0$voted$0$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$1; node$0$voted$1$0], 'node$0$voted$1': [node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0': node$0$isleader$0$0; node$0$voted$0$0, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$1; node$0$voted$1$0, 'node$0$voted$1': node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE2)', 'voted(NODE0,NODE1)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE2) | ~voted(NODE0,NODE1) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 13 =====================
size : 24
num_suborbits: 1
228 (*) : 1----------1--1---------
228     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node2)']
229     : 1---------1----1--------
229     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node3)']
230     : 1----------1-----1------
230     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node2,node1)']
231     : 1--------1---------1----
231     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node3)']
232     : 1---------1----------1--
232     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node3,node1)']
233     : 1--------1------------1-
233     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node3,node2)']
234     : -1--------1----1--------
234     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node3)']
235     : -1---------1--1---------
235     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node1,node2)']
236     : -1-------------11-------
236     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node2,node0)']
237     : -1----------1------1----
237     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node3)']
238     : -1------------1-----1---
238     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node3,node0)']
239     : -1----------1---------1-
239     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node3,node2)']
240     : --1------1---------1----
240     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node3)']
241     : --1--------1-----1------
241     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node2,node1)']
242     : --1---------1------1----
242     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node3)']
243     : --1------------11-------
243     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node2,node0)']
244     : --1--------------1--1---
244     : ['isleader(node2)', 'voted(node2,node1)', 'voted(node3,node0)']
245     : --1-------------1----1--
245     : ['isleader(node2)', 'voted(node2,node0)', 'voted(node3,node1)']
246     : ---1-----1------------1-
246     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node3,node2)']
247     : ---1------1----------1--
247     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node3,node1)']
248     : ---1--------1---------1-
248     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node3,node2)']
249     : ---1----------1-----1---
249     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node3,node0)']
250     : ---1------------1----1--
250     : ['isleader(node3)', 'voted(node2,node0)', 'voted(node3,node1)']
251     : ---1-------------1--1---
251     : ['isleader(node3)', 'voted(node2,node1)', 'voted(node3,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0': [node$0$isleader$0$0; node$0$voted$0$0], 'node$0$voted$0': [node$0$voted$0$1], 'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0': node$0$isleader$0$0; node$0$voted$0$0, 'node$0$voted$0': node$0$voted$0$1}

	identical_multi_classes: {'node$0$voted$1': [node$0$voted$1$0, node$0$voted$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE3)', 'isleader(NODE0)', 'voted(NODE0,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NODE3. ~voted(NODE1,NODE3) | ~isleader(NODE0) | ~voted(NODE0,NODE2) | (NODE2 = NODE3 | NODE0 = NODE1 | NODE1 = NODE2 | NODE1 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3)


=== Prime Orbit 14 =====================
size : 24
num_suborbits: 1
252 (*) : 1---------1---1---------
252     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']
253     : 1----------1---1--------
253     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node3)']
254     : 1--------1-------1------
254     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']
255     : 1----------1-------1----
255     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node2,node3)']
256     : 1--------1-----------1--
256     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node3,node1)']
257     : 1---------1-----------1-
257     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node3,node2)']
258     : -1--------1---1---------
258     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node2)']
259     : -1---------1---1--------
259     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node1,node3)']
260     : -1----------1---1-------
260     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node0)']
261     : -1-------------1---1----
261     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node2,node3)']
262     : -1----------1-------1---
262     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node3,node0)']
263     : -1------------1-------1-
263     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node3,node2)']
264     : --1------1-------1------
264     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node1)']
265     : --1--------1-------1----
265     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node2,node3)']
266     : --1---------1---1-------
266     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node0)']
267     : --1------------1---1----
267     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node2,node3)']
268     : --1-------------1---1---
268     : ['isleader(node2)', 'voted(node2,node0)', 'voted(node3,node0)']
269     : --1--------------1---1--
269     : ['isleader(node2)', 'voted(node2,node1)', 'voted(node3,node1)']
270     : ---1-----1-----------1--
270     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node3,node1)']
271     : ---1------1-----------1-
271     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node3,node2)']
272     : ---1--------1-------1---
272     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node3,node0)']
273     : ---1----------1-------1-
273     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node3,node2)']
274     : ---1------------1---1---
274     : ['isleader(node3)', 'voted(node2,node0)', 'voted(node3,node0)']
275     : ---1-------------1---1--
275     : ['isleader(node3)', 'voted(node2,node1)', 'voted(node3,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$voted$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0': [node$0$isleader$0$0; node$0$voted$0$0], 'node$0$voted$0': [node$0$voted$0$1], 'node$0$voted$1; node$0$voted$1': [node$0$voted$1$0; node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0': node$0$isleader$0$0; node$0$voted$0$0, 'node$0$voted$0': node$0$voted$0$1, 'node$0$voted$1; node$0$voted$1': node$0$voted$1$0; node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE2)', 'isleader(NODE0)', 'voted(NODE0,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 15 =====================
size : 4
num_suborbits: 1
276 (*) : 1------00---------------
276     : ['isleader(node0)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node0)']
277     : -1----0------0----------
277     : ['isleader(node1)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node1)']
278     : --1--0------------0-----
278     : ['isleader(node2)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node2)']
279     : ---10------------------0
279     : ['isleader(node3)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum ~= nset__node1_node2_node3', '~voted(node0,node0)', '~member(node0,nset__node1_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$quorum=': [(Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0, node$1$member$0$0], Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$1$quorum=$0$0, nset$1$member$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$quorum=$0$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0', 'nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum ~= nset__node1_node2_node3', '~voted(node0,node0)', '~member(node0,nset__node1_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$member$0; node$1$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$member$0; node$1$voted$0; node$1$voted$1': node$0$isleader$0$0; node$1$member$0$0; node$1$voted$0$0; node$1$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$1$member$1; nset$1$quorum=$0': [nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$1$member$1; nset$1$quorum=$0': nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0,NODE0)', 'quorum ~= NSET0', 'isleader(NODE0)', '~member(NODE0,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NSET0. voted(NODE0,NODE0) | quorum = NSET0 | ~isleader(NODE0) | member(NODE0,NSET0)


=== Prime Orbit 16 =====================
size : 12
num_suborbits: 1
280 (*) : 1-------0---0-----------
280     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']
281     : 1-------0-------0-------
281     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node2,node0)']
282     : 1-------0-----------0---
282     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node3,node0)']
283     : -1-------0---0----------
283     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']
284     : -1-----------0---0------
284     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node2,node1)']
285     : -1-----------0-------0--
285     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node3,node1)']
286     : --1-------0-------0-----
286     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node2,node2)']
287     : --1-----------0---0-----
287     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node2,node2)']
288     : --1---------------0---0-
288     : ['isleader(node2)', '~voted(node2,node2)', '~voted(node3,node2)']
289     : ---1-------0-----------0
289     : ['isleader(node3)', '~voted(node0,node3)', '~voted(node3,node3)']
290     : ---1-----------0-------0
290     : ['isleader(node3)', '~voted(node1,node3)', '~voted(node3,node3)']
291     : ---1---------------0---0
291     : ['isleader(node3)', '~voted(node2,node3)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0, node$1$voted$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$1$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$1}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0; node$1$voted$1$1], 'node$1$voted$0': [node$1$voted$0$1]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1; node$1$voted$1': node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0; node$1$voted$1$1, 'node$1$voted$0': node$1$voted$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0,NODE0)', 'isleader(NODE0)', '~voted(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. voted(NODE0,NODE0) | ~isleader(NODE0) | voted(NODE1,NODE0) | NODE0 = NODE1


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
292 (*) : 1-----1-0---------------
292     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', '~voted(node0,node0)']
293     : 1----1--0---------------
293     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', '~voted(node0,node0)']
294     : 1---1---0---------------
294     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', '~voted(node0,node0)']
295     : -1-----1-----0----------
295     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', '~voted(node1,node1)']
296     : -1---1-------0----------
296     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', '~voted(node1,node1)']
297     : -1--1--------0----------
297     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', '~voted(node1,node1)']
298     : --1----1----------0-----
298     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', '~voted(node2,node2)']
299     : --1---1-----------0-----
299     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', '~voted(node2,node2)']
300     : --1-1-------------0-----
300     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', '~voted(node2,node2)']
301     : ---1---1---------------0
301     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', '~voted(node3,node3)']
302     : ---1--1----------------0
302     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', '~voted(node3,node3)']
303     : ---1-1-----------------0
303     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node0_node2_node3', '~voted(node0,node0)', 'member(node0,nset__node0_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0, node$0$member$0$0], Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$0$member$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0', 'nset$0$member$1$0; nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node0_node2_node3', '~voted(node0,node0)', 'member(node0,nset__node0_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '1$voted': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$1$voted$0; node$1$voted$1': node$0$isleader$0$0; node$0$member$0$0; node$1$voted$0$0; node$1$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$quorum=$0': [nset$0$member$1$0; nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$quorum=$0': nset$0$member$1$0; nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0,NODE0)', 'member(NODE0,NSET0)', 'isleader(NODE0)', 'quorum = NSET0']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NSET0. voted(NODE0,NODE0) | ~member(NODE0,NSET0) | ~isleader(NODE0) | quorum ~= NSET0


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
304 (*) : 1------0---1------------
304     : ['isleader(node0)', 'voted(node0,node3)', '~(quorum=nset__node1_node2_node3)']
305     : 1------0--1-------------
305     : ['isleader(node0)', 'voted(node0,node2)', '~(quorum=nset__node1_node2_node3)']
306     : 1------0-1--------------
306     : ['isleader(node0)', 'voted(node0,node1)', '~(quorum=nset__node1_node2_node3)']
307     : -1----0--------1--------
307     : ['isleader(node1)', 'voted(node1,node3)', '~(quorum=nset__node0_node2_node3)']
308     : -1----0-------1---------
308     : ['isleader(node1)', 'voted(node1,node2)', '~(quorum=nset__node0_node2_node3)']
309     : -1----0-----1-----------
309     : ['isleader(node1)', 'voted(node1,node0)', '~(quorum=nset__node0_node2_node3)']
310     : --1--0-------------1----
310     : ['isleader(node2)', 'voted(node2,node3)', '~(quorum=nset__node0_node1_node3)']
311     : --1--0-----------1------
311     : ['isleader(node2)', 'voted(node2,node1)', '~(quorum=nset__node0_node1_node3)']
312     : --1--0----------1-------
312     : ['isleader(node2)', 'voted(node2,node0)', '~(quorum=nset__node0_node1_node3)']
313     : ---10-----------------1-
313     : ['isleader(node3)', 'voted(node3,node2)', '~(quorum=nset__node0_node1_node2)']
314     : ---10----------------1--
314     : ['isleader(node3)', 'voted(node3,node1)', '~(quorum=nset__node0_node1_node2)']
315     : ---10---------------1---
315     : ['isleader(node3)', 'voted(node3,node0)', '~(quorum=nset__node0_node1_node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum ~= nset__node1_node2_node3', 'voted(node0,node3)', '~member(node0,nset__node1_node2_node3)', 'member(node3,nset__node1_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$quorum=': [(Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))], '0$member': [(Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0, node$1$member$0$0], Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$1$quorum=$0$0, nset$1$member$1$0, nset$0$member$1$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$quorum=$0$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$1$0', 'nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum ~= nset__node1_node2_node3', 'voted(node0,node3)', '~member(node0,nset__node1_node2_node3)', 'member(node3,nset__node1_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$quorum=': 1, '0$voted': 1, '1$member': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0; node$1$member$0': [node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0], 'node$0$member$0; node$0$voted$1': [node$0$member$0$0; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0; node$1$member$0': node$0$isleader$0$0; node$0$voted$0$0; node$1$member$0$0, 'node$0$member$0; node$0$voted$1': node$0$member$0$0; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': [nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$1$member$1; nset$1$quorum=$0': nset$0$member$1$0; nset$1$member$1$0; nset$1$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,NSET0)', 'voted(NODE0,NODE1)', 'isleader(NODE0)', 'member(NODE1,NSET0)', 'quorum ~= NSET0']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. member(NODE0,NSET0) | ~voted(NODE0,NODE1) | ~isleader(NODE0) | ~member(NODE1,NSET0) | quorum = NSET0 | NODE0 = NODE1


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 1
316 (*) : 1----------10-----------
316     : ['isleader(node0)', 'voted(node0,node3)', '~voted(node1,node0)']
317     : 1---------1-0-----------
317     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node1,node0)']
318     : 1----------1----0-------
318     : ['isleader(node0)', 'voted(node0,node3)', '~voted(node2,node0)']
319     : 1--------1------0-------
319     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node2,node0)']
320     : 1---------1---------0---
320     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node3,node0)']
321     : 1--------1----------0---
321     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node3,node0)']
322     : -1-------0-----1--------
322     : ['isleader(node1)', 'voted(node1,node3)', '~voted(node0,node1)']
323     : -1-------0----1---------
323     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node0,node1)']
324     : -1-------------1-0------
324     : ['isleader(node1)', 'voted(node1,node3)', '~voted(node2,node1)']
325     : -1----------1----0------
325     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node2,node1)']
326     : -1------------1------0--
326     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node3,node1)']
327     : -1----------1--------0--
327     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node3,node1)']
328     : --1-------0--------1----
328     : ['isleader(node2)', 'voted(node2,node3)', '~voted(node0,node2)']
329     : --1-------0------1------
329     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node0,node2)']
330     : --1-----------0----1----
330     : ['isleader(node2)', 'voted(node2,node3)', '~voted(node1,node2)']
331     : --1-----------0-1-------
331     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node1,node2)']
332     : --1--------------1----0-
332     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node3,node2)']
333     : --1-------------1-----0-
333     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node3,node2)']
334     : ---1-------0----------1-
334     : ['isleader(node3)', 'voted(node3,node2)', '~voted(node0,node3)']
335     : ---1-------0---------1--
335     : ['isleader(node3)', 'voted(node3,node1)', '~voted(node0,node3)']
336     : ---1-----------0------1-
336     : ['isleader(node3)', 'voted(node3,node2)', '~voted(node1,node3)']
337     : ---1-----------0----1---
337     : ['isleader(node3)', 'voted(node3,node0)', '~voted(node1,node3)']
338     : ---1---------------0-1--
338     : ['isleader(node3)', 'voted(node3,node1)', '~voted(node2,node3)']
339     : ---1---------------01---
339     : ['isleader(node3)', 'voted(node3,node0)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node3)', '~voted(node1,node0)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0, node$1$voted$1$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0 | node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node0,node3)', '~voted(node1,node0)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0 | node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0], 'node$0$voted$1': [node$0$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0; node$1$voted$1': node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, 'node$0$voted$1': node$0$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$voted': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE1)', '~voted(NODE2,NODE0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE0,NODE1) | voted(NODE2,NODE0) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 20 =====================
size : 24
num_suborbits: 1
340 (*) : 1-----1----1------------
340     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node0,node3)']
341     : 1-----1---1-------------
341     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node0,node2)']
342     : 1----1-----1------------
342     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node0,node3)']
343     : 1----1---1--------------
343     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node0,node1)']
344     : 1---1-----1-------------
344     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node0,node2)']
345     : 1---1----1--------------
345     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node0,node1)']
346     : -1-----1-------1--------
346     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node1,node3)']
347     : -1-----1------1---------
347     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node1,node2)']
348     : -1---1---------1--------
348     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node1,node3)']
349     : -1---1------1-----------
349     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node1,node0)']
350     : -1--1---------1---------
350     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node1,node2)']
351     : -1--1-------1-----------
351     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node1,node0)']
352     : --1----1-----------1----
352     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node2,node3)']
353     : --1----1---------1------
353     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node2,node1)']
354     : --1---1------------1----
354     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node2,node3)']
355     : --1---1---------1-------
355     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node2,node0)']
356     : --1-1------------1------
356     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node2,node1)']
357     : --1-1-----------1-------
357     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node2,node0)']
358     : ---1---1--------------1-
358     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node3,node2)']
359     : ---1---1-------------1--
359     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node3,node1)']
360     : ---1--1---------------1-
360     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node3,node2)']
361     : ---1--1-------------1---
361     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node3,node0)']
362     : ---1-1---------------1--
362     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node3,node1)']
363     : ---1-1--------------1---
363     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node3,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node0_node2_node3', 'voted(node0,node3)', 'member(node0,nset__node0_node2_node3)', 'member(node3,nset__node0_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))), (Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0, node$0$member$0$0], Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$0$member$1$1], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$member$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$1': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0, node$0$member$0$1; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0 | node$0$member$0$1; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0 | node$0$member$0$1; node$0$voted$1$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node0_node2_node3', 'voted(node0,node3)', 'member(node0,nset__node0_node2_node3)', 'member(node3,nset__node0_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0, node$0$member$0$1; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0 | node$0$member$0$1; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$0$voted$0': [node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0], 'node$0$member$0; node$0$voted$1': [node$0$member$0$1; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$0$voted$0': node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0, 'node$0$member$0; node$0$voted$1': node$0$member$0$1; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', 'voted(NODE0,NODE1)', 'isleader(NODE0)', 'member(NODE0,NSET0)', 'member(NODE1,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~voted(NODE0,NODE1) | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | NODE0 = NODE1


=== Prime Orbit 21 =====================
size : 12
num_suborbits: 1
364 (*) : 1-----1--1--------------
364     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node0,node1)']
365     : 1----1----1-------------
365     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node0,node2)']
366     : 1---1------1------------
366     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node0,node3)']
367     : -1-----1----1-----------
367     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node1,node0)']
368     : -1---1--------1---------
368     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node1,node2)']
369     : -1--1----------1--------
369     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node1,node3)']
370     : --1----1--------1-------
370     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node2,node0)']
371     : --1---1----------1------
371     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node2,node1)']
372     : --1-1--------------1----
372     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node2,node3)']
373     : ---1---1------------1---
373     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node3,node0)']
374     : ---1--1--------------1--
374     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node3,node1)']
375     : ---1-1----------------1-
375     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node3,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node0_node2_node3', 'voted(node0,node1)', 'member(node0,nset__node0_node2_node3)', '~member(node1,nset__node0_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0, node$0$member$0$0], Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$0$member$1$0, nset$1$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$1$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node0_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0, node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0', 'nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node0_node2_node3', 'voted(node0,node1)', 'member(node0,nset__node0_node2_node3)', '~member(node1,nset__node0_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '0$member': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0, node$0$voted$1$0; node$1$member$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0 | node$0$voted$1$0; node$1$member$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$member$0; node$0$voted$0': [node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0], 'node$0$voted$1; node$1$member$0': [node$0$voted$1$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$member$0; node$0$voted$0': node$0$isleader$0$0; node$0$member$0$0; node$0$voted$0$0, 'node$0$voted$1; node$1$member$0': node$0$voted$1$0; node$1$member$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', 'voted(NODE0,NODE1)', 'isleader(NODE0)', 'member(NODE0,NSET0)', '~member(NODE1,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~voted(NODE0,NODE1) | ~isleader(NODE0) | ~member(NODE0,NSET0) | member(NODE1,NSET0) | NODE0 = NODE1


=== Prime Orbit 22 =====================
size : 12
num_suborbits: 1
376 (*) : 1--------1--0-----------
376     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']
377     : 1---------1-----0-------
377     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node2,node0)']
378     : 1----------1--------0---
378     : ['isleader(node0)', 'voted(node0,node3)', '~voted(node3,node0)']
379     : -1-------0--1-----------
379     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node0,node1)']
380     : -1------------1--0------
380     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node2,node1)']
381     : -1-------------1-----0--
381     : ['isleader(node1)', 'voted(node1,node3)', '~voted(node3,node1)']
382     : --1-------0-----1-------
382     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node0,node2)']
383     : --1-----------0--1------
383     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node1,node2)']
384     : --1----------------1--0-
384     : ['isleader(node2)', 'voted(node2,node3)', '~voted(node3,node2)']
385     : ---1-------0--------1---
385     : ['isleader(node3)', 'voted(node3,node0)', '~voted(node0,node3)']
386     : ---1-----------0-----1--
386     : ['isleader(node3)', 'voted(node3,node1)', '~voted(node1,node3)']
387     : ---1---------------0--1-
387     : ['isleader(node3)', 'voted(node3,node2)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0, node$1$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0; node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0; node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0 | node$0$voted$1$0; node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0], 'node$0$voted$1; node$1$voted$0': [node$0$voted$1$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0; node$1$voted$1': node$0$isleader$0$0; node$0$voted$0$0; node$1$voted$1$0, 'node$0$voted$1; node$1$voted$0': node$0$voted$1$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE1)', 'isleader(NODE0)', '~voted(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~isleader(NODE0) | voted(NODE1,NODE0) | NODE0 = NODE1


=== Prime Orbit 23 =====================
size : 12
num_suborbits: 1
388 (*) : 1-------0----1----------
388     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node0,node0)']
389     : 1-------0---------1-----
389     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node0,node0)']
390     : 1-------0--------------1
390     : ['isleader(node0)', 'voted(node3,node3)', '~voted(node0,node0)']
391     : -1------1----0----------
391     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node1,node1)']
392     : -1-----------0----1-----
392     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node1,node1)']
393     : -1-----------0---------1
393     : ['isleader(node1)', 'voted(node3,node3)', '~voted(node1,node1)']
394     : --1-----1---------0-----
394     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node2,node2)']
395     : --1----------1----0-----
395     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node2,node2)']
396     : --1---------------0----1
396     : ['isleader(node2)', 'voted(node3,node3)', '~voted(node2,node2)']
397     : ---1----1--------------0
397     : ['isleader(node3)', 'voted(node0,node0)', '~voted(node3,node3)']
398     : ---1---------1---------0
398     : ['isleader(node3)', 'voted(node1,node1)', '~voted(node3,node3)']
399     : ---1--------------1----0
399     : ['isleader(node3)', 'voted(node2,node2)', '~voted(node3,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', '~voted(node0,node0)', 'voted(node1,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$0$0, node$1$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', '~voted(node0,node0)', 'voted(node1,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$0$0; node$1$voted$1$0, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0,NODE0)', 'voted(NODE1,NODE1)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. voted(NODE0,NODE0) | ~voted(NODE1,NODE1) | ~isleader(NODE0) | NODE0 = NODE1


=== Prime Orbit 24 =====================
size : 24
num_suborbits: 1
400 (*) : 1----------1-1----------
400     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node1)']
401     : 1---------1--1----------
401     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node1)']
402     : 1----------1------1-----
402     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node2,node2)']
403     : 1--------1--------1-----
403     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node2)']
404     : 1---------1------------1
404     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node3,node3)']
405     : 1--------1-------------1
405     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node3,node3)']
406     : -1------1------1--------
406     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node3)']
407     : -1------1-----1---------
407     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node2)']
408     : -1-------------1--1-----
408     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node2,node2)']
409     : -1----------1-----1-----
409     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node2)']
410     : -1------------1--------1
410     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node3,node3)']
411     : -1----------1----------1
411     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node3,node3)']
412     : --1-----1----------1----
412     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node3)']
413     : --1-----1--------1------
413     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']
414     : --1----------1-----1----
414     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node3)']
415     : --1----------1--1-------
415     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node0)']
416     : --1--------------1-----1
416     : ['isleader(node2)', 'voted(node2,node1)', 'voted(node3,node3)']
417     : --1-------------1------1
417     : ['isleader(node2)', 'voted(node2,node0)', 'voted(node3,node3)']
418     : ---1----1-------------1-
418     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node3,node2)']
419     : ---1----1------------1--
419     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node3,node1)']
420     : ---1---------1--------1-
420     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node3,node2)']
421     : ---1---------1------1---
421     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node3,node0)']
422     : ---1--------------1--1--
422     : ['isleader(node3)', 'voted(node2,node2)', 'voted(node3,node1)']
423     : ---1--------------1-1---
423     : ['isleader(node3)', 'voted(node2,node2)', 'voted(node3,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$1, node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$1, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$1, node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$1 | node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0': [node$0$isleader$0$0; node$0$voted$0$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$1; node$0$voted$1$1], 'node$0$voted$1': [node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0': node$0$isleader$0$0; node$0$voted$0$0, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$1; node$0$voted$1$1, 'node$0$voted$1': node$0$voted$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE1)', 'isleader(NODE0)', 'voted(NODE0,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE1) | ~isleader(NODE0) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 25 =====================
size : 12
num_suborbits: 1
424 (*) : 1--------1---1----------
424     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']
425     : 1---------1-------1-----
425     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node2)']
426     : 1----------1-----------1
426     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node3,node3)']
427     : -1------1---1-----------
427     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node0)']
428     : -1------------1---1-----
428     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node2)']
429     : -1-------------1-------1
429     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node3,node3)']
430     : --1-----1-------1-------
430     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node0)']
431     : --1----------1---1------
431     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']
432     : --1----------------1---1
432     : ['isleader(node2)', 'voted(node2,node3)', 'voted(node3,node3)']
433     : ---1----1-----------1---
433     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node3,node0)']
434     : ---1---------1-------1--
434     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node3,node1)']
435     : ---1--------------1---1-
435     : ['isleader(node3)', 'voted(node2,node2)', 'voted(node3,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$0$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$voted$0$1, node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0; node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0; node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$0$voted$0': [node$0$isleader$0$0; node$0$voted$0$0], 'node$0$voted$0; node$0$voted$1; node$0$voted$1': [node$0$voted$0$1; node$0$voted$1$0; node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0; node$0$voted$0': node$0$isleader$0$0; node$0$voted$0$0, 'node$0$voted$0; node$0$voted$1; node$0$voted$1': node$0$voted$0$1; node$0$voted$1$0; node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE1)', 'isleader(NODE0)', 'voted(NODE1,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~isleader(NODE0) | ~voted(NODE1,NODE1) | NODE0 = NODE1


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 1
436 (*) : 1--------------1----0---
436     : ['isleader(node0)', 'voted(node1,node3)', '~voted(node3,node0)']
437     : 1-------------1-0-------
437     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node2,node0)']
438     : 1------------------10---
438     : ['isleader(node0)', 'voted(node2,node3)', '~voted(node3,node0)']
439     : 1-----------0----1------
439     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node1,node0)']
440     : 1---------------0-----1-
440     : ['isleader(node0)', 'voted(node3,node2)', '~voted(node2,node0)']
441     : 1-----------0--------1--
441     : ['isleader(node0)', 'voted(node3,node1)', '~voted(node1,node0)']
442     : -1---------1---------0--
442     : ['isleader(node1)', 'voted(node0,node3)', '~voted(node3,node1)']
443     : -1--------1------0------
443     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node2,node1)']
444     : -1-----------------1-0--
444     : ['isleader(node1)', 'voted(node2,node3)', '~voted(node3,node1)']
445     : -1-------0------1-------
445     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node0,node1)']
446     : -1---------------0----1-
446     : ['isleader(node1)', 'voted(node3,node2)', '~voted(node2,node1)']
447     : -1-------0----------1---
447     : ['isleader(node1)', 'voted(node3,node0)', '~voted(node0,node1)']
448     : --1--------1----------0-
448     : ['isleader(node2)', 'voted(node0,node3)', '~voted(node3,node2)']
449     : --1------1----0---------
449     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node1,node2)']
450     : --1------------1------0-
450     : ['isleader(node2)', 'voted(node1,node3)', '~voted(node3,node2)']
451     : --1-------0-1-----------
451     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node0,node2)']
452     : --1-----------0------1--
452     : ['isleader(node2)', 'voted(node3,node1)', '~voted(node1,node2)']
453     : --1-------0---------1---
453     : ['isleader(node2)', 'voted(node3,node0)', '~voted(node0,node2)']
454     : ---1------1--------0----
454     : ['isleader(node3)', 'voted(node0,node2)', '~voted(node2,node3)']
455     : ---1-----1-----0--------
455     : ['isleader(node3)', 'voted(node0,node1)', '~voted(node1,node3)']
456     : ---1----------1----0----
456     : ['isleader(node3)', 'voted(node1,node2)', '~voted(node2,node3)']
457     : ---1-------01-----------
457     : ['isleader(node3)', 'voted(node1,node0)', '~voted(node0,node3)']
458     : ---1-----------0-1------
458     : ['isleader(node3)', 'voted(node2,node1)', '~voted(node1,node3)']
459     : ---1-------0----1-------
459     : ['isleader(node3)', 'voted(node2,node0)', '~voted(node0,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node3)', '~voted(node3,node0)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '1$voted': [(Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0; node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0; node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node3)', '~voted(node3,node0)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0; node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$0$voted$0': [node$0$voted$0$0], 'node$0$voted$1; node$1$voted$0': [node$0$voted$1$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$0$voted$0': node$0$voted$0$0, 'node$0$voted$1; node$1$voted$0': node$0$voted$1$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$voted': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE2)', '~voted(NODE2,NODE0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE2) | voted(NODE2,NODE0) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 27 =====================
size : 12
num_suborbits: 1
460 (*) : 1--------------1-----1--
460     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node1)']
461     : 1-------------1--1------
461     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']
462     : 1------------------1--1-
462     : ['isleader(node0)', 'voted(node2,node3)', 'voted(node3,node2)']
463     : -1---------1--------1---
463     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node3,node0)']
464     : -1--------1-----1-------
464     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node0)']
465     : -1-----------------1--1-
465     : ['isleader(node1)', 'voted(node2,node3)', 'voted(node3,node2)']
466     : --1--------1--------1---
466     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node3,node0)']
467     : --1------1--1-----------
467     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node0)']
468     : --1------------1-----1--
468     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node3,node1)']
469     : ---1------1-----1-------
469     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node2,node0)']
470     : ---1-----1--1-----------
470     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node1,node0)']
471     : ---1----------1--1------
471     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$1], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$1, node$0$voted$0$1; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$1 | node$0$voted$0$1; node$0$voted$1$0}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$1 | node$0$voted$0$1; node$0$voted$1$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$1, node$0$voted$0$1; node$0$voted$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$1 | node$0$voted$0$1; node$0$voted$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$1, node$0$voted$0$1; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0}

	identical_multi_classes: {'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0, node$0$voted$1$1, node$0$voted$0$1, node$0$voted$1$0]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE2)', 'isleader(NODE0)', 'voted(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~voted(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 28 =====================
size : 24
num_suborbits: 1
472 (*) : 1--------------1------1-
472     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node2)']
473     : 1-------------1----1----
473     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node3)']
474     : 1------------------1-1--
474     : ['isleader(node0)', 'voted(node2,node3)', 'voted(node3,node1)']
475     : 1--------------1-1------
475     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node2,node1)']
476     : 1----------------1----1-
476     : ['isleader(node0)', 'voted(node2,node1)', 'voted(node3,node2)']
477     : 1-------------1------1--
477     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node1)']
478     : -1---------1----------1-
478     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node3,node2)']
479     : -1--------1--------1----
479     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node3)']
480     : -1-----------------11---
480     : ['isleader(node1)', 'voted(node2,node3)', 'voted(node3,node0)']
481     : -1---------1----1-------
481     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node2,node0)']
482     : -1--------------1-----1-
482     : ['isleader(node1)', 'voted(node2,node0)', 'voted(node3,node2)']
483     : -1--------1---------1---
483     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node3,node0)']
484     : --1--------1---------1--
484     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node3,node1)']
485     : --1------1-----1--------
485     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node3)']
486     : --1------------1----1---
486     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node3,node0)']
487     : --1--------11-----------
487     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node1,node0)']
488     : --1---------1--------1--
488     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node3,node1)']
489     : --1------1----------1---
489     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node3,node0)']
490     : ---1------1------1------
490     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node2,node1)']
491     : ---1-----1----1---------
491     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node1,node2)']
492     : ---1----------1-1-------
492     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node2,node0)']
493     : ---1------1-1-----------
493     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node1,node0)']
494     : ---1--------1----1------
494     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node2,node1)']
495     : ---1-----1------1-------
495     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$voted$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$0$1; node$0$voted$1$0, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$0$1; node$0$voted$1$0 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0': [node$0$voted$0$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$1; node$0$voted$1$0], 'node$0$voted$1': [node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0, 'node$0$voted$0': node$0$voted$0$0, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$1; node$0$voted$1$0, 'node$0$voted$1': node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE2)', 'isleader(NODE0)', 'voted(NODE2,NODE3)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NODE3. ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~voted(NODE2,NODE3) | (NODE2 = NODE3 | NODE0 = NODE1 | NODE1 = NODE2 | NODE1 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3)


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 1
496 (*) : 1-----------0-------0---
496     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node3,node0)']
497     : 1-----------0---0-------
497     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node2,node0)']
498     : 1---------------0---0---
498     : ['isleader(node0)', '~voted(node2,node0)', '~voted(node3,node0)']
499     : -1-------0-----------0--
499     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node3,node1)']
500     : -1-------0-------0------
500     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']
501     : -1---------------0---0--
501     : ['isleader(node1)', '~voted(node2,node1)', '~voted(node3,node1)']
502     : --1-------0-----------0-
502     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node3,node2)']
503     : --1-------0---0---------
503     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node1,node2)']
504     : --1-----------0-------0-
504     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node3,node2)']
505     : ---1-------0-------0----
505     : ['isleader(node3)', '~voted(node0,node3)', '~voted(node2,node3)']
506     : ---1-------0---0--------
506     : ['isleader(node3)', '~voted(node0,node3)', '~voted(node1,node3)']
507     : ---1-----------0---0----
507     : ['isleader(node3)', '~voted(node1,node3)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', '~voted(node1,node0)', '~voted(node3,node0)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$1$0, node$1$voted$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$1$voted$0$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$1$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0 | node$1$voted$0$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', '~voted(node1,node0)', '~voted(node3,node0)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1, node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1 | node$1$voted$0$0 | node$1$voted$0$1}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1], 'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0; node$1$voted$1$1}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE2,NODE0)', 'isleader(NODE0)', '~voted(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. voted(NODE2,NODE0) | ~isleader(NODE0) | voted(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 30 =====================
size : 24
num_suborbits: 1
508 (*) : 1-----------0---------1-
508     : ['isleader(node0)', 'voted(node3,node2)', '~voted(node1,node0)']
509     : 1-----------0------1----
509     : ['isleader(node0)', 'voted(node2,node3)', '~voted(node1,node0)']
510     : 1---------------0----1--
510     : ['isleader(node0)', 'voted(node3,node1)', '~voted(node2,node0)']
511     : 1--------------10-------
511     : ['isleader(node0)', 'voted(node1,node3)', '~voted(node2,node0)']
512     : 1----------------1--0---
512     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node3,node0)']
513     : 1-------------1-----0---
513     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node3,node0)']
514     : -1-------0------------1-
514     : ['isleader(node1)', 'voted(node3,node2)', '~voted(node0,node1)']
515     : -1-------0---------1----
515     : ['isleader(node1)', 'voted(node2,node3)', '~voted(node0,node1)']
516     : -1---------------0--1---
516     : ['isleader(node1)', 'voted(node3,node0)', '~voted(node2,node1)']
517     : -1---------1-----0------
517     : ['isleader(node1)', 'voted(node0,node3)', '~voted(node2,node1)']
518     : -1--------------1----0--
518     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node3,node1)']
519     : -1--------1----------0--
519     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node3,node1)']
520     : --1-------0----------1--
520     : ['isleader(node2)', 'voted(node3,node1)', '~voted(node0,node2)']
521     : --1-------0----1--------
521     : ['isleader(node2)', 'voted(node1,node3)', '~voted(node0,node2)']
522     : --1-----------0-----1---
522     : ['isleader(node2)', 'voted(node3,node0)', '~voted(node1,node2)']
523     : --1--------1--0---------
523     : ['isleader(node2)', 'voted(node0,node3)', '~voted(node1,node2)']
524     : --1---------1---------0-
524     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node3,node2)']
525     : --1------1------------0-
525     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node3,node2)']
526     : ---1-------0-----1------
526     : ['isleader(node3)', 'voted(node2,node1)', '~voted(node0,node3)']
527     : ---1-------0--1---------
527     : ['isleader(node3)', 'voted(node1,node2)', '~voted(node0,node3)']
528     : ---1-----------01-------
528     : ['isleader(node3)', 'voted(node2,node0)', '~voted(node1,node3)']
529     : ---1------1----0--------
529     : ['isleader(node3)', 'voted(node0,node2)', '~voted(node1,node3)']
530     : ---1--------1------0----
530     : ['isleader(node3)', 'voted(node1,node0)', '~voted(node2,node3)']
531     : ---1-----1---------0----
531     : ['isleader(node3)', 'voted(node0,node1)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', '~voted(node1,node0)', 'voted(node3,node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '0$voted': [(Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$1$voted$0$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0 | node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', '~voted(node1,node0)', 'voted(node3,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '1$voted': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0, node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0 | node$0$voted$1$0 | node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$0$voted$0': [node$0$voted$0$0], 'node$0$voted$1': [node$0$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$0$voted$0': node$0$voted$0$0, 'node$0$voted$1': node$0$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$voted': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE3,NODE0)', 'isleader(NODE0)', 'voted(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NODE3. voted(NODE3,NODE0) | ~isleader(NODE0) | ~voted(NODE1,NODE2) | (NODE2 = NODE3 | NODE0 = NODE1 | NODE1 = NODE2 | NODE1 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3)


=== Prime Orbit 31 =====================
size : 24
num_suborbits: 1
532 (*) : 1------------1------0---
532     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node3,node0)']
533     : 1------------1--0-------
533     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node2,node0)']
534     : 1-----------------1-0---
534     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node3,node0)']
535     : 1-----------0-----1-----
535     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node1,node0)']
536     : 1---------------0------1
536     : ['isleader(node0)', 'voted(node3,node3)', '~voted(node2,node0)']
537     : 1-----------0----------1
537     : ['isleader(node0)', 'voted(node3,node3)', '~voted(node1,node0)']
538     : -1------1------------0--
538     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node3,node1)']
539     : -1------1--------0------
539     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node2,node1)']
540     : -1----------------1--0--
540     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node3,node1)']
541     : -1-------0--------1-----
541     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node0,node1)']
542     : -1---------------0-----1
542     : ['isleader(node1)', 'voted(node3,node3)', '~voted(node2,node1)']
543     : -1-------0-------------1
543     : ['isleader(node1)', 'voted(node3,node3)', '~voted(node0,node1)']
544     : --1-----1-------------0-
544     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node3,node2)']
545     : --1-----1-----0---------
545     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node1,node2)']
546     : --1----------1--------0-
546     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node3,node2)']
547     : --1-------0--1----------
547     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node0,node2)']
548     : --1-----------0--------1
548     : ['isleader(node2)', 'voted(node3,node3)', '~voted(node1,node2)']
549     : --1-------0------------1
549     : ['isleader(node2)', 'voted(node3,node3)', '~voted(node0,node2)']
550     : ---1----1----------0----
550     : ['isleader(node3)', 'voted(node0,node0)', '~voted(node2,node3)']
551     : ---1----1------0--------
551     : ['isleader(node3)', 'voted(node0,node0)', '~voted(node1,node3)']
552     : ---1---------1-----0----
552     : ['isleader(node3)', 'voted(node1,node1)', '~voted(node2,node3)']
553     : ---1-------0-1----------
553     : ['isleader(node3)', 'voted(node1,node1)', '~voted(node0,node3)']
554     : ---1-----------0--1-----
554     : ['isleader(node3)', 'voted(node2,node2)', '~voted(node1,node3)']
555     : ---1-------0------1-----
555     : ['isleader(node3)', 'voted(node2,node2)', '~voted(node0,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node1)', '~voted(node3,node0)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '1$voted': [(Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$1$voted$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$0$0': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0 | node$1$voted$0$0}

part_sig: ('node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0 | node$1$voted$0$0',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node1)', '~voted(node3,node0)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$voted$1$0, node$0$voted$0$0; node$0$voted$1$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$voted$1$0 | node$0$voted$0$0; node$0$voted$1$0 | node$1$voted$0$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$voted$1': [node$0$isleader$0$0; node$1$voted$1$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$voted$1': node$0$isleader$0$0; node$1$voted$1$0, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$1$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$voted': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE1)', '~voted(NODE2,NODE0)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE1) | voted(NODE2,NODE0) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 32 =====================
size : 24
num_suborbits: 1
556 (*) : 1------------1-------1--
556     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node1)']
557     : 1------------1---1------
557     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']
558     : 1-----------------1---1-
558     : ['isleader(node0)', 'voted(node2,node2)', 'voted(node3,node2)']
559     : 1-------------1---1-----
559     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node2)']
560     : 1------------------1---1
560     : ['isleader(node0)', 'voted(node2,node3)', 'voted(node3,node3)']
561     : 1--------------1-------1
561     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node3)']
562     : -1------1-----------1---
562     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node3,node0)']
563     : -1------1-------1-------
563     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node0)']
564     : -1----------------1---1-
564     : ['isleader(node1)', 'voted(node2,node2)', 'voted(node3,node2)']
565     : -1--------1-------1-----
565     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node2)']
566     : -1-----------------1---1
566     : ['isleader(node1)', 'voted(node2,node3)', 'voted(node3,node3)']
567     : -1---------1-----------1
567     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node3,node3)']
568     : --1-----1-----------1---
568     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node3,node0)']
569     : --1-----1---1-----------
569     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node0)']
570     : --1----------1-------1--
570     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node3,node1)']
571     : --1------1---1----------
571     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node1)']
572     : --1------------1-------1
572     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node3,node3)']
573     : --1--------1-----------1
573     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node3,node3)']
574     : ---1----1-------1-------
574     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node2,node0)']
575     : ---1----1---1-----------
575     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node1,node0)']
576     : ---1---------1---1------
576     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node2,node1)']
577     : ---1-----1---1----------
577     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node1,node1)']
578     : ---1----------1---1-----
578     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node2,node2)']
579     : ---1------1-------1-----
579     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node1)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$voted$1$1], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1, node$0$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1 | node$0$voted$0$1}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1 | node$0$voted$0$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node1)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1, node$0$voted$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1 | node$0$voted$0$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0; node$0$voted$1; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1], 'node$0$voted$0': [node$0$voted$0$1]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0, 'node$0$voted$0; node$0$voted$1; node$0$voted$1': node$0$voted$0$0; node$0$voted$1$0; node$0$voted$1$1, 'node$0$voted$0': node$0$voted$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE2,NODE1)', 'voted(NODE1,NODE1)', 'isleader(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE2,NODE1) | ~voted(NODE1,NODE1) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 33 =====================
size : 24
num_suborbits: 1
580 (*) : 1------------1--------1-
580     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node2)']
581     : 1------------1-----1----
581     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node3)']
582     : 1-----------------1--1--
582     : ['isleader(node0)', 'voted(node2,node2)', 'voted(node3,node1)']
583     : 1--------------1--1-----
583     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node2,node2)']
584     : 1----------------1-----1
584     : ['isleader(node0)', 'voted(node2,node1)', 'voted(node3,node3)']
585     : 1-------------1--------1
585     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node3)']
586     : -1------1-------------1-
586     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node3,node2)']
587     : -1------1----------1----
587     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node3)']
588     : -1----------------1-1---
588     : ['isleader(node1)', 'voted(node2,node2)', 'voted(node3,node0)']
589     : -1---------1------1-----
589     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node2,node2)']
590     : -1--------------1------1
590     : ['isleader(node1)', 'voted(node2,node0)', 'voted(node3,node3)']
591     : -1--------1------------1
591     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node3,node3)']
592     : --1-----1------------1--
592     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node3,node1)']
593     : --1-----1------1--------
593     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node3)']
594     : --1----------1------1---
594     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node3,node0)']
595     : --1--------1-1----------
595     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node1,node1)']
596     : --1---------1----------1
596     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node3,node3)']
597     : --1------1-------------1
597     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node3,node3)']
598     : ---1----1--------1------
598     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node2,node1)']
599     : ---1----1-----1---------
599     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node1,node2)']
600     : ---1---------1--1-------
600     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node2,node0)']
601     : ---1------1--1----------
601     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node1,node1)']
602     : ---1--------1-----1-----
602     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node2,node2)']
603     : ---1-----1--------1-----
603     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$0], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$0$1, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1 | node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1 | node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$0$1, node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1 | node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0], 'node$0$voted$0': [node$0$voted$0$1], 'node$0$voted$1': [node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0, 'node$0$voted$0; node$0$voted$1': node$0$voted$0$0; node$0$voted$1$0, 'node$0$voted$0': node$0$voted$0$1, 'node$0$voted$1': node$0$voted$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE1)', 'isleader(NODE0)', 'voted(NODE2,NODE3)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NODE3. ~voted(NODE1,NODE1) | ~isleader(NODE0) | ~voted(NODE2,NODE3) | (NODE2 = NODE3 | NODE0 = NODE1 | NODE1 = NODE2 | NODE1 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3)


=== Prime Orbit 34 =====================
size : 12
num_suborbits: 1
604 (*) : 1-------------1-------1-
604     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node2)']
605     : 1--------------1---1----
605     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node2,node3)']
606     : 1----------------1---1--
606     : ['isleader(node0)', 'voted(node2,node1)', 'voted(node3,node1)']
607     : -1--------1-----------1-
607     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node3,node2)']
608     : -1---------1-------1----
608     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node2,node3)']
609     : -1--------------1---1---
609     : ['isleader(node1)', 'voted(node2,node0)', 'voted(node3,node0)']
610     : --1------1-----------1--
610     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node3,node1)']
611     : --1--------1---1--------
611     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node1,node3)']
612     : --1---------1-------1---
612     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node3,node0)']
613     : ---1-----1-------1------
613     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node2,node1)']
614     : ---1------1---1---------
614     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node1,node2)']
615     : ---1--------1---1-------
615     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$voted$1$1], Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node3', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0, node$0$voted$0$1, node$0$voted$1$0; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0 | node$0$voted$0$1 | node$0$voted$1$0; node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0': [node$0$voted$0$0, node$0$voted$0$1], 'node$0$voted$1; node$0$voted$1': [node$0$voted$1$0; node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0, 'node$0$voted$1; node$0$voted$1': node$0$voted$1$0; node$0$voted$1$1}

	identical_multi_classes: {'node$0$voted$0': [node$0$voted$0$0, node$0$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0,NODE2)', 'isleader(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1. ~isleader(NODE1) | (exists NODE0. (~voted(NODE0,NODE2) & (NODE0 ~= NODE2 & NODE0 ~= NODE1))) | NODE1 = NODE2


=== Prime Orbit 35 =====================
size : 24
num_suborbits: 1
616 (*) : 1------1------1---------
616     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node1,node2)']
617     : 1------1-------1--------
617     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node1,node3)']
618     : 1------1---------1------
618     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node2,node1)']
619     : 1------1-----------1----
619     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node2,node3)']
620     : 1------1-------------1--
620     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node3,node1)']
621     : 1------1--------------1-
621     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node3,node2)']
622     : -1----1---1-------------
622     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node0,node2)']
623     : -1----1----1------------
623     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node0,node3)']
624     : -1----1---------1-------
624     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node2,node0)']
625     : -1----1------------1----
625     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node2,node3)']
626     : -1----1-------------1---
626     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node3,node0)']
627     : -1----1---------------1-
627     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node3,node2)']
628     : --1--1---1--------------
628     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node0,node1)']
629     : --1--1-----1------------
629     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node0,node3)']
630     : --1--1------1-----------
630     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node1,node0)']
631     : --1--1---------1--------
631     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node1,node3)']
632     : --1--1--------------1---
632     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node3,node0)']
633     : --1--1---------------1--
633     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node3,node1)']
634     : ---11----1--------------
634     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node0,node1)']
635     : ---11-----1-------------
635     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node0,node2)']
636     : ---11-------1-----------
636     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node1,node0)']
637     : ---11---------1---------
637     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node1,node2)']
638     : ---11-----------1-------
638     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node2,node0)']
639     : ---11------------1------
639     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node1_node2_node3', 'voted(node1,node2)', '~member(node0,nset__node1_node2_node3)', 'member(node1,nset__node1_node2_node3)', 'member(node2,nset__node1_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$member$0$0], Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$1$member$1$0, nset$0$member$1$0, nset$0$member$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$member$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$1$0, node$0$member$0$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$1': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$0$0, node$0$member$0$1; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$0$0 | node$0$member$0$1; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$0$0 | node$0$member$0$1; node$0$voted$1$0', 'nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node1_node2_node3', 'voted(node1,node2)', '~member(node0,nset__node1_node2_node3)', 'member(node1,nset__node1_node2_node3)', 'member(node2,nset__node1_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '1$member': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$0$0, node$0$member$0$1; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$0$0 | node$0$member$0$1; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$member$0': [node$0$isleader$0$0; node$1$member$0$0], 'node$0$member$0; node$0$voted$0': [node$0$member$0$0; node$0$voted$0$0], 'node$0$member$0; node$0$voted$1': [node$0$member$0$1; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$member$0': node$0$isleader$0$0; node$1$member$0$0, 'node$0$member$0; node$0$voted$0': node$0$member$0$0; node$0$voted$0$0, 'node$0$member$0; node$0$voted$1': node$0$member$0$1; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$member$1$1; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~member(NODE0,NSET0)', 'member(NODE2,NSET0)', 'voted(NODE1,NODE2)', 'isleader(NODE0)', 'member(NODE1,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1,NSET0. quorum ~= NSET0 | member(NODE0,NSET0) | ~member(NODE2,NSET0) | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~member(NODE1,NSET0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 36 =====================
size : 12
num_suborbits: 1
640 (*) : 1------1----0-----------
640     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', '~voted(node1,node0)']
641     : 1------1--------0-------
641     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', '~voted(node2,node0)']
642     : 1------1------------0---
642     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', '~voted(node3,node0)']
643     : -1----1--0--------------
643     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', '~voted(node0,node1)']
644     : -1----1----------0------
644     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', '~voted(node2,node1)']
645     : -1----1--------------0--
645     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', '~voted(node3,node1)']
646     : --1--1----0-------------
646     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', '~voted(node0,node2)']
647     : --1--1--------0---------
647     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', '~voted(node1,node2)']
648     : --1--1----------------0-
648     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', '~voted(node3,node2)']
649     : ---11------0------------
649     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', '~voted(node0,node3)']
650     : ---11----------0--------
650     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', '~voted(node1,node3)']
651     : ---11--------------0----
651     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', '~voted(node2,node3)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node1_node2_node3', '~voted(node1,node0)', '~member(node0,nset__node1_node2_node3)', 'member(node1,nset__node1_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$voted$1$0, node$1$member$0$0], Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$1$member$1$0, nset$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$1$voted$0$0, node$0$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$voted$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0, node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0 | node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0 | node$0$member$0$0; node$1$voted$0$0', 'nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node1_node2_node3', '~voted(node1,node0)', '~member(node0,nset__node1_node2_node3)', 'member(node1,nset__node1_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '1$voted': 1, '1$member': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0, node$0$member$0$0; node$1$voted$0$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0 | node$0$member$0$0; node$1$voted$0$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$member$0; node$1$voted$1': [node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0], 'node$0$member$0; node$1$voted$0': [node$0$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$member$0; node$1$voted$1': node$0$isleader$0$0; node$1$member$0$0; node$1$voted$1$0, 'node$0$member$0; node$1$voted$0': node$0$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~voted(NODE1,NODE0)', '~member(NODE0,NSET0)', 'isleader(NODE0)', 'member(NODE1,NSET0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | voted(NODE1,NODE0) | member(NODE0,NSET0) | ~isleader(NODE0) | ~member(NODE1,NSET0) | NODE0 = NODE1


=== Prime Orbit 37 =====================
size : 12
num_suborbits: 1
652 (*) : 1------1-----1----------
652     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node1,node1)']
653     : 1------1----------1-----
653     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node2,node2)']
654     : 1------1---------------1
654     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node3,node3)']
655     : -1----1-1---------------
655     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node0,node0)']
656     : -1----1-----------1-----
656     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node2,node2)']
657     : -1----1----------------1
657     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node3,node3)']
658     : --1--1--1---------------
658     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node0,node0)']
659     : --1--1-------1----------
659     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node1,node1)']
660     : --1--1-----------------1
660     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node3,node3)']
661     : ---11---1---------------
661     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node0,node0)']
662     : ---11--------1----------
662     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node1,node1)']
663     : ---11-------------1-----
663     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'quorum = nset__node1_node2_node3', 'voted(node1,node1)', '~member(node0,nset__node1_node2_node3)', 'member(node1,nset__node1_node2_node3)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$quorum=': [(Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0, node$1$member$0$0], Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))): [nset$0$quorum=$0$0, nset$1$member$1$0, nset$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$0, node$0$member$0$0]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$quorum=$0$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$1$member$1$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'nset$0$member$1$0': Const('nset__node1_node2_node3', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

part_sig: ('node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0', 'nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0')


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'quorum = nset__node1_node2_node3', 'voted(node1,node1)', '~member(node0,nset__node1_node2_node3)', 'member(node1,nset__node1_node2_node3)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'quorum=': Const('quorum', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'quorum=': (EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$quorum=': 1, '0$voted': 1, '1$member': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0; node$1$member$0$0, node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0], EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0; node$1$member$0$0 | node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0, EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')): nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	sort: node

	identical_classes: {'node$0$isleader$0; node$1$member$0': [node$0$isleader$0$0; node$1$member$0$0], 'node$0$member$0; node$0$voted$0; node$0$voted$1': [node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0]}

	identical_single_classes: {'node$0$isleader$0; node$1$member$0': node$0$isleader$0$0; node$1$member$0$0, 'node$0$member$0; node$0$voted$0; node$0$voted$1': node$0$member$0$0; node$0$voted$0$0; node$0$voted$1$0}

	identical_multi_classes: {}

	sort: nset

	identical_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': [nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0]}

	identical_single_classes: {'nset$0$member$1; nset$0$quorum=$0; nset$1$member$1': nset$0$member$1$0; nset$0$quorum=$0$0; nset$1$member$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: nset: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$quorum=': [[Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]], '0$member': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NSET0', EnumeratedSort('nset', ('nset__node0_node1_node2', 'nset__node0_node1_node3', 'nset__node0_node2_node3', 'nset__node1_node2_node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['quorum = NSET0', '~member(NODE0,NSET0)', 'isleader(NODE0)', 'member(NODE1,NSET0)', 'voted(NODE1,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NSET0. quorum ~= NSET0 | member(NODE0,NSET0) | ~isleader(NODE0) | ~member(NODE1,NSET0) | ~voted(NODE1,NODE1) | NODE0 = NODE1


=== Prime Orbit 38 =====================
size : 12
num_suborbits: 1
664 (*) : 1------------1----1-----
664     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']
665     : 1------------1---------1
665     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node3)']
666     : 1-----------------1----1
666     : ['isleader(node0)', 'voted(node2,node2)', 'voted(node3,node3)']
667     : -1------1---------1-----
667     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']
668     : -1------1--------------1
668     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node3,node3)']
669     : -1----------------1----1
669     : ['isleader(node1)', 'voted(node2,node2)', 'voted(node3,node3)']
670     : --1-----1----1----------
670     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node1)']
671     : --1-----1--------------1
671     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node3,node3)']
672     : --1----------1---------1
672     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node3,node3)']
673     : ---1----1----1----------
673     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node1,node1)']
674     : ---1----1---------1-----
674     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node2,node2)']
675     : ---1---------1----1-----
675     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node2,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']

sign_func_name2args: {'0$isleader': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))),)], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$isleader$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$0, node$0$voted$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))): [node$0$voted$0$1, node$0$voted$1$1]}

sig2const: {'node$0$isleader$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), 'node$0$voted$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$0$1; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1; node$0$voted$1$1}

part_sig: ('node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1; node$0$voted$1$1',)


---------- SigGenerator ----------

terms:  ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']

func_name2symbol:  {'isleader': Const('isleader', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), BooleanSort()))}

func_name2args_sort:  {'isleader': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')), EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

sign_func_name2count:  {'0$isleader': 1, '0$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): [node$0$isleader$0$0, node$0$voted$0$0; node$0$voted$1$0, node$0$voted$0$1; node$0$voted$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')): node$0$isleader$0$0 | node$0$voted$0$0; node$0$voted$1$0 | node$0$voted$0$1; node$0$voted$1$1}

	sort: node

	identical_classes: {'node$0$isleader$0': [node$0$isleader$0$0], 'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0; node$0$voted$1$0, node$0$voted$0$1; node$0$voted$1$1]}

	identical_single_classes: {'node$0$isleader$0': node$0$isleader$0$0}

	identical_multi_classes: {'node$0$voted$0; node$0$voted$1': [node$0$voted$0$0, node$0$voted$1$0, node$0$voted$0$1, node$0$voted$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$isleader': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]], '0$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2', 'node3')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE1,NODE1)', 'isleader(NODE0)', 'voted(NODE2,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE1) | ~isleader(NODE0) | ~voted(NODE2,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


==========================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=4]

==========================================================================================================================


=== Prime Orbit 0 =====================
size : 12
num_suborbits: 1
0 (*) : --------------11--------
0     : ['voted(node1,node2)', 'voted(node1,node3)']
1     : -----------------1-1----
1     : ['voted(node2,node1)', 'voted(node2,node3)']
2     : ---------------------11-
2     : ['voted(node3,node1)', 'voted(node3,node2)']
3     : ----------11------------
3     : ['voted(node0,node2)', 'voted(node0,node3)']
4     : ----------------1--1----
4     : ['voted(node2,node0)', 'voted(node2,node3)']
5     : --------------------1-1-
5     : ['voted(node3,node0)', 'voted(node3,node2)']
6     : ---------1-1------------
6     : ['voted(node0,node1)', 'voted(node0,node3)']
7     : ------------1--1--------
7     : ['voted(node1,node0)', 'voted(node1,node3)']
8     : --------------------11--
8     : ['voted(node3,node0)', 'voted(node3,node1)']
9     : ---------11-------------
9     : ['voted(node0,node1)', 'voted(node0,node2)']
10     : ------------1-1---------
10     : ['voted(node1,node0)', 'voted(node1,node2)']
11     : ----------------11------
11     : ['voted(node2,node0)', 'voted(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 5
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 8




=== Prime Orbit 1 =====================
size : 12
num_suborbits: 1
12 (*) : -------------11---------
12     : ['voted(node1,node1)', 'voted(node1,node2)']
13     : -------------1-1--------
13     : ['voted(node1,node1)', 'voted(node1,node3)']
14     : -----------------11-----
14     : ['voted(node2,node1)', 'voted(node2,node2)']
15     : ------------------11----
15     : ['voted(node2,node2)', 'voted(node2,node3)']
16     : ---------------------1-1
16     : ['voted(node3,node1)', 'voted(node3,node3)']
17     : ----------------------11
17     : ['voted(node3,node2)', 'voted(node3,node3)']
18     : --------1-1-------------
18     : ['voted(node0,node0)', 'voted(node0,node2)']
19     : --------1--1------------
19     : ['voted(node0,node0)', 'voted(node0,node3)']
20     : ----------------1-1-----
20     : ['voted(node2,node0)', 'voted(node2,node2)']
21     : --------------------1--1
21     : ['voted(node3,node0)', 'voted(node3,node3)']
22     : --------11--------------
22     : ['voted(node0,node0)', 'voted(node0,node1)']
23     : ------------11----------
23     : ['voted(node1,node0)', 'voted(node1,node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
30 (*) : -1-1--------------------
30     : ['isleader(node1)', 'isleader(node3)']
31     : -11---------------------
31     : ['isleader(node1)', 'isleader(node2)']
32     : --11--------------------
32     : ['isleader(node2)', 'isleader(node3)']
33     : 1--1--------------------
33     : ['isleader(node0)', 'isleader(node3)']
34     : 1-1---------------------
34     : ['isleader(node0)', 'isleader(node2)']
35     : 11----------------------
35     : ['isleader(node0)', 'isleader(node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~isleader(NODE0) | ~isleader(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 4 =====================
size : 24
num_suborbits: 1
36 (*) : 1---1-------0-----------
36     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', '~voted(node1,node0)']
37     : 1----1------0-----------
37     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', '~voted(node1,node0)']
38     : 1---1-----------0-------
38     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', '~voted(node2,node0)']
39     : 1-----1---------0-------
39     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', '~voted(node2,node0)']
40     : 1----1--------------0---
40     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', '~voted(node3,node0)']
41     : 1-----1-------------0---
41     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', '~voted(node3,node0)']
42     : -1--1----0--------------
42     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', '~voted(node0,node1)']
43     : -1---1---0--------------
43     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', '~voted(node0,node1)']
44     : -1--1------------0------
44     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', '~voted(node2,node1)']
45     : -1-----1---------0------
45     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', '~voted(node2,node1)']
46     : -1---1---------------0--
46     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', '~voted(node3,node1)']
47     : -1-----1-------------0--
47     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', '~voted(node3,node1)']
48     : --1-1-----0-------------
48     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', '~voted(node0,node2)']
49     : --1---1---0-------------
49     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', '~voted(node0,node2)']
50     : --1-1---------0---------
50     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', '~voted(node1,node2)']
51     : --1----1------0---------
51     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', '~voted(node1,node2)']
52     : --1---1---------------0-
52     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', '~voted(node3,node2)']
53     : --1----1--------------0-
53     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', '~voted(node3,node2)']
54     : ---1-1-----0------------
54     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', '~voted(node0,node3)']
55     : ---1--1----0------------
55     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', '~voted(node0,node3)']
56     : ---1-1---------0--------
56     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', '~voted(node1,node3)']
57     : ---1---1-------0--------
57     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', '~voted(node1,node3)']
58     : ---1--1------------0----
58     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', '~voted(node2,node3)']
59     : ---1---1-----------0----
59     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', '~voted(node2,node3)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | voted(NODE1,NODE0) | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
60 (*) : 1-----0-----0-----------
60     : ['isleader(node0)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node0)']
61     : 1----0----------0-------
61     : ['isleader(node0)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node0)']
62     : 1---0---------------0---
62     : ['isleader(node0)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node0)']
63     : -1-----0-0--------------
63     : ['isleader(node1)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node1)']
64     : -1---0-----------0------
64     : ['isleader(node1)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node1)']
65     : -1--0----------------0--
65     : ['isleader(node1)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node1)']
66     : --1----0--0-------------
66     : ['isleader(node2)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node2)']
67     : --1---0-------0---------
67     : ['isleader(node2)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node2)']
68     : --1-0-----------------0-
68     : ['isleader(node2)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node2)']
69     : ---1---0---0------------
69     : ['isleader(node3)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node3)']
70     : ---1--0--------0--------
70     : ['isleader(node3)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node3)']
71     : ---1-0-------------0----
71     : ['isleader(node3)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node3)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. voted(NODE1,NODE0) | ~isleader(NODE0) | ~member(NODE0,NSET0) | member(NODE1,NSET0) | quorum = NSET0 | NODE0 = NODE1
qcost : 9




=== Prime Orbit 6 =====================
size : 12
num_suborbits: 1
72 (*) : 1-----0------1----------
72     : ['isleader(node0)', 'voted(node1,node1)', '~(quorum=nset__node0_node2_node3)']
73     : 1----0------------1-----
73     : ['isleader(node0)', 'voted(node2,node2)', '~(quorum=nset__node0_node1_node3)']
74     : 1---0------------------1
74     : ['isleader(node0)', 'voted(node3,node3)', '~(quorum=nset__node0_node1_node2)']
75     : -1-----01---------------
75     : ['isleader(node1)', 'voted(node0,node0)', '~(quorum=nset__node1_node2_node3)']
76     : -1---0------------1-----
76     : ['isleader(node1)', 'voted(node2,node2)', '~(quorum=nset__node0_node1_node3)']
77     : -1--0------------------1
77     : ['isleader(node1)', 'voted(node3,node3)', '~(quorum=nset__node0_node1_node2)']
78     : --1----01---------------
78     : ['isleader(node2)', 'voted(node0,node0)', '~(quorum=nset__node1_node2_node3)']
79     : --1---0------1----------
79     : ['isleader(node2)', 'voted(node1,node1)', '~(quorum=nset__node0_node2_node3)']
80     : --1-0------------------1
80     : ['isleader(node2)', 'voted(node3,node3)', '~(quorum=nset__node0_node1_node2)']
81     : ---1---01---------------
81     : ['isleader(node3)', 'voted(node0,node0)', '~(quorum=nset__node1_node2_node3)']
82     : ---1--0------1----------
82     : ['isleader(node3)', 'voted(node1,node1)', '~(quorum=nset__node0_node2_node3)']
83     : ---1-0------------1-----
83     : ['isleader(node3)', 'voted(node2,node2)', '~(quorum=nset__node0_node1_node3)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. ~isleader(NODE0) | ~member(NODE0,NSET0) | member(NODE1,NSET0) | quorum = NSET0 | ~voted(NODE1,NODE1) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 7 =====================
size : 24
num_suborbits: 1
84 (*) : 1---1--------1----------
84     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node1,node1)']
85     : 1----1-------1----------
85     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node1,node1)']
86     : 1---1-------------1-----
86     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node2,node2)']
87     : 1-----1-----------1-----
87     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node2,node2)']
88     : 1----1-----------------1
88     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node3,node3)']
89     : 1-----1----------------1
89     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node3,node3)']
90     : -1--1---1---------------
90     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node0,node0)']
91     : -1---1--1---------------
91     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node0,node0)']
92     : -1--1-------------1-----
92     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node2,node2)']
93     : -1-----1----------1-----
93     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node2,node2)']
94     : -1---1-----------------1
94     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node3,node3)']
95     : -1-----1---------------1
95     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node3,node3)']
96     : --1-1---1---------------
96     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node0,node0)']
97     : --1---1-1---------------
97     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node0,node0)']
98     : --1-1--------1----------
98     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node1,node1)']
99     : --1----1-----1----------
99     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node1,node1)']
100     : --1---1----------------1
100     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node3,node3)']
101     : --1----1---------------1
101     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node3,node3)']
102     : ---1-1--1---------------
102     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node0,node0)']
103     : ---1--1-1---------------
103     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node0,node0)']
104     : ---1-1-------1----------
104     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node1,node1)']
105     : ---1---1-----1----------
105     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node1,node1)']
106     : ---1--1-----------1-----
106     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node2,node2)']
107     : ---1---1----------1-----
107     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node2,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~voted(NODE1,NODE1) | ~member(NODE1,NSET0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 8 =====================
size : 24
num_suborbits: 1
108 (*) : 1-----0--------1--------
108     : ['isleader(node0)', 'voted(node1,node3)', '~(quorum=nset__node0_node2_node3)']
109     : 1-----0-------1---------
109     : ['isleader(node0)', 'voted(node1,node2)', '~(quorum=nset__node0_node2_node3)']
110     : 1----0-------------1----
110     : ['isleader(node0)', 'voted(node2,node3)', '~(quorum=nset__node0_node1_node3)']
111     : 1----0-----------1------
111     : ['isleader(node0)', 'voted(node2,node1)', '~(quorum=nset__node0_node1_node3)']
112     : 1---0-----------------1-
112     : ['isleader(node0)', 'voted(node3,node2)', '~(quorum=nset__node0_node1_node2)']
113     : 1---0----------------1--
113     : ['isleader(node0)', 'voted(node3,node1)', '~(quorum=nset__node0_node1_node2)']
114     : -1-----0---1------------
114     : ['isleader(node1)', 'voted(node0,node3)', '~(quorum=nset__node1_node2_node3)']
115     : -1-----0--1-------------
115     : ['isleader(node1)', 'voted(node0,node2)', '~(quorum=nset__node1_node2_node3)']
116     : -1---0-------------1----
116     : ['isleader(node1)', 'voted(node2,node3)', '~(quorum=nset__node0_node1_node3)']
117     : -1---0----------1-------
117     : ['isleader(node1)', 'voted(node2,node0)', '~(quorum=nset__node0_node1_node3)']
118     : -1--0-----------------1-
118     : ['isleader(node1)', 'voted(node3,node2)', '~(quorum=nset__node0_node1_node2)']
119     : -1--0---------------1---
119     : ['isleader(node1)', 'voted(node3,node0)', '~(quorum=nset__node0_node1_node2)']
120     : --1----0---1------------
120     : ['isleader(node2)', 'voted(node0,node3)', '~(quorum=nset__node1_node2_node3)']
121     : --1----0-1--------------
121     : ['isleader(node2)', 'voted(node0,node1)', '~(quorum=nset__node1_node2_node3)']
122     : --1---0--------1--------
122     : ['isleader(node2)', 'voted(node1,node3)', '~(quorum=nset__node0_node2_node3)']
123     : --1---0-----1-----------
123     : ['isleader(node2)', 'voted(node1,node0)', '~(quorum=nset__node0_node2_node3)']
124     : --1-0----------------1--
124     : ['isleader(node2)', 'voted(node3,node1)', '~(quorum=nset__node0_node1_node2)']
125     : --1-0---------------1---
125     : ['isleader(node2)', 'voted(node3,node0)', '~(quorum=nset__node0_node1_node2)']
126     : ---1---0--1-------------
126     : ['isleader(node3)', 'voted(node0,node2)', '~(quorum=nset__node1_node2_node3)']
127     : ---1---0-1--------------
127     : ['isleader(node3)', 'voted(node0,node1)', '~(quorum=nset__node1_node2_node3)']
128     : ---1--0-------1---------
128     : ['isleader(node3)', 'voted(node1,node2)', '~(quorum=nset__node0_node2_node3)']
129     : ---1--0-----1-----------
129     : ['isleader(node3)', 'voted(node1,node0)', '~(quorum=nset__node0_node2_node3)']
130     : ---1-0-----------1------
130     : ['isleader(node3)', 'voted(node2,node1)', '~(quorum=nset__node0_node1_node3)']
131     : ---1-0----------1-------
131     : ['isleader(node3)', 'voted(node2,node0)', '~(quorum=nset__node0_node1_node3)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NSET0. ~member(NODE0,NSET0) | member(NODE2,NSET0) | ~voted(NODE2,NODE1) | ~isleader(NODE0) | ~member(NODE1,NSET0) | quorum = NSET0 | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 9 =====================
size : 24
num_suborbits: 1
132 (*) : 1---1----------1--------
132     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node1,node3)']
133     : 1----1--------1---------
133     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node1,node2)']
134     : 1---1--------------1----
134     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node2,node3)']
135     : 1-----1----------1------
135     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node2,node1)']
136     : 1----1----------------1-
136     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node3,node2)']
137     : 1-----1--------------1--
137     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node3,node1)']
138     : -1--1------1------------
138     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node0,node3)']
139     : -1---1----1-------------
139     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node0,node2)']
140     : -1--1--------------1----
140     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node2,node3)']
141     : -1-----1--------1-------
141     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node2,node0)']
142     : -1---1----------------1-
142     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node3,node2)']
143     : -1-----1------------1---
143     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node3,node0)']
144     : --1-1------1------------
144     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node0,node3)']
145     : --1---1--1--------------
145     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node0,node1)']
146     : --1-1----------1--------
146     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node1,node3)']
147     : --1----1----1-----------
147     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node1,node0)']
148     : --1---1--------------1--
148     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node3,node1)']
149     : --1----1------------1---
149     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node3,node0)']
150     : ---1-1----1-------------
150     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node0,node2)']
151     : ---1--1--1--------------
151     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node0,node1)']
152     : ---1-1--------1---------
152     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node1,node2)']
153     : ---1---1----1-----------
153     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node1,node0)']
154     : ---1--1----------1------
154     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node2,node1)']
155     : ---1---1--------1-------
155     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node2,node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NSET0. quorum ~= NSET0 | member(NODE2,NSET0) | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 10 =====================
size : 24
num_suborbits: 1
156 (*) : 1---1---------1---------
156     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node1,node2)']
157     : 1----1---------1--------
157     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node1,node3)']
158     : 1---1------------1------
158     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node2,node1)']
159     : 1-----1------------1----
159     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node2,node3)']
160     : 1----1---------------1--
160     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node3,node1)']
161     : 1-----1---------------1-
161     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node3,node2)']
162     : -1--1-----1-------------
162     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node0,node2)']
163     : -1---1-----1------------
163     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node0,node3)']
164     : -1--1-----------1-------
164     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node2,node0)']
165     : -1-----1-----------1----
165     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node2,node3)']
166     : -1---1--------------1---
166     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node3,node0)']
167     : -1-----1--------------1-
167     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node3,node2)']
168     : --1-1----1--------------
168     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node0,node1)']
169     : --1---1----1------------
169     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node0,node3)']
170     : --1-1-------1-----------
170     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node1,node0)']
171     : --1----1-------1--------
171     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node1,node3)']
172     : --1---1-------------1---
172     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node3,node0)']
173     : --1----1-------------1--
173     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node3,node1)']
174     : ---1-1---1--------------
174     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node0,node1)']
175     : ---1--1---1-------------
175     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node0,node2)']
176     : ---1-1------1-----------
176     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node1,node0)']
177     : ---1---1------1---------
177     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node1,node2)']
178     : ---1--1---------1-------
178     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node2,node0)']
179     : ---1---1---------1------
179     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node2,node1)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NSET0. quorum ~= NSET0 | ~member(NODE2,NSET0) | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 11 =====================
size : 24
num_suborbits: 1
180 (*) : 1-------0-----1---------
180     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node0,node0)']
181     : 1-------0------1--------
181     : ['isleader(node0)', 'voted(node1,node3)', '~voted(node0,node0)']
182     : 1-------0--------1------
182     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node0,node0)']
183     : 1-------0----------1----
183     : ['isleader(node0)', 'voted(node2,node3)', '~voted(node0,node0)']
184     : 1-------0------------1--
184     : ['isleader(node0)', 'voted(node3,node1)', '~voted(node0,node0)']
185     : 1-------0-------------1-
185     : ['isleader(node0)', 'voted(node3,node2)', '~voted(node0,node0)']
186     : -1--------1--0----------
186     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node1,node1)']
187     : -1---------1-0----------
187     : ['isleader(node1)', 'voted(node0,node3)', '~voted(node1,node1)']
188     : -1-----------0--1-------
188     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node1,node1)']
189     : -1-----------0-----1----
189     : ['isleader(node1)', 'voted(node2,node3)', '~voted(node1,node1)']
190     : -1-----------0------1---
190     : ['isleader(node1)', 'voted(node3,node0)', '~voted(node1,node1)']
191     : -1-----------0--------1-
191     : ['isleader(node1)', 'voted(node3,node2)', '~voted(node1,node1)']
192     : --1------1--------0-----
192     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node2,node2)']
193     : --1--------1------0-----
193     : ['isleader(node2)', 'voted(node0,node3)', '~voted(node2,node2)']
194     : --1---------1-----0-----
194     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node2,node2)']
195     : --1------------1--0-----
195     : ['isleader(node2)', 'voted(node1,node3)', '~voted(node2,node2)']
196     : --1---------------0-1---
196     : ['isleader(node2)', 'voted(node3,node0)', '~voted(node2,node2)']
197     : --1---------------0--1--
197     : ['isleader(node2)', 'voted(node3,node1)', '~voted(node2,node2)']
198     : ---1-----1-------------0
198     : ['isleader(node3)', 'voted(node0,node1)', '~voted(node3,node3)']
199     : ---1------1------------0
199     : ['isleader(node3)', 'voted(node0,node2)', '~voted(node3,node3)']
200     : ---1--------1----------0
200     : ['isleader(node3)', 'voted(node1,node0)', '~voted(node3,node3)']
201     : ---1----------1--------0
201     : ['isleader(node3)', 'voted(node1,node2)', '~voted(node3,node3)']
202     : ---1------------1------0
202     : ['isleader(node3)', 'voted(node2,node0)', '~voted(node3,node3)']
203     : ---1-------------1-----0
203     : ['isleader(node3)', 'voted(node2,node1)', '~voted(node3,node3)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. voted(NODE0,NODE0) | ~isleader(NODE0) | ~voted(NODE1,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 24
num_suborbits: 1
204 (*) : 1--------1----1---------
204     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node2)']
205     : 1--------1-----1--------
205     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node3)']
206     : 1---------1------1------
206     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node1)']
207     : 1---------1--------1----
207     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node3)']
208     : 1----------1---------1--
208     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node3,node1)']
209     : 1----------1----------1-
209     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node3,node2)']
210     : -1--------1-1-----------
210     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node0)']
211     : -1---------11-----------
211     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node1,node0)']
212     : -1------------1-1-------
212     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node0)']
213     : -1------------1----1----
213     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node3)']
214     : -1-------------1----1---
214     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node3,node0)']
215     : -1-------------1------1-
215     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node3,node2)']
216     : --1------1------1-------
216     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node0)']
217     : --1--------1----1-------
217     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node2,node0)']
218     : --1---------1----1------
218     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node1)']
219     : --1------------1-1------
219     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node2,node1)']
220     : --1----------------11---
220     : ['isleader(node2)', 'voted(node2,node3)', 'voted(node3,node0)']
221     : --1----------------1-1--
221     : ['isleader(node2)', 'voted(node2,node3)', 'voted(node3,node1)']
222     : ---1-----1----------1---
222     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node3,node0)']
223     : ---1------1---------1---
223     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node3,node0)']
224     : ---1--------1--------1--
224     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node3,node1)']
225     : ---1----------1------1--
225     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node3,node1)']
226     : ---1------------1-----1-
226     : ['isleader(node3)', 'voted(node2,node0)', 'voted(node3,node2)']
227     : ---1-------------1----1-
227     : ['isleader(node3)', 'voted(node2,node1)', 'voted(node3,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE2) | ~voted(NODE0,NODE1) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 13 =====================
size : 24
num_suborbits: 1
228 (*) : 1----------1--1---------
228     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node2)']
229     : 1---------1----1--------
229     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node3)']
230     : 1----------1-----1------
230     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node2,node1)']
231     : 1--------1---------1----
231     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node3)']
232     : 1---------1----------1--
232     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node3,node1)']
233     : 1--------1------------1-
233     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node3,node2)']
234     : -1--------1----1--------
234     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node3)']
235     : -1---------1--1---------
235     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node1,node2)']
236     : -1-------------11-------
236     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node2,node0)']
237     : -1----------1------1----
237     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node3)']
238     : -1------------1-----1---
238     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node3,node0)']
239     : -1----------1---------1-
239     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node3,node2)']
240     : --1------1---------1----
240     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node3)']
241     : --1--------1-----1------
241     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node2,node1)']
242     : --1---------1------1----
242     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node3)']
243     : --1------------11-------
243     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node2,node0)']
244     : --1--------------1--1---
244     : ['isleader(node2)', 'voted(node2,node1)', 'voted(node3,node0)']
245     : --1-------------1----1--
245     : ['isleader(node2)', 'voted(node2,node0)', 'voted(node3,node1)']
246     : ---1-----1------------1-
246     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node3,node2)']
247     : ---1------1----------1--
247     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node3,node1)']
248     : ---1--------1---------1-
248     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node3,node2)']
249     : ---1----------1-----1---
249     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node3,node0)']
250     : ---1------------1----1--
250     : ['isleader(node3)', 'voted(node2,node0)', 'voted(node3,node1)']
251     : ---1-------------1--1---
251     : ['isleader(node3)', 'voted(node2,node1)', 'voted(node3,node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NODE3. ~voted(NODE1,NODE3) | ~isleader(NODE0) | ~voted(NODE0,NODE2) | (NODE2 = NODE3 | NODE0 = NODE1 | NODE1 = NODE2 | NODE1 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3)
qcost : 13




=== Prime Orbit 14 =====================
size : 24
num_suborbits: 1
252 (*) : 1---------1---1---------
252     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node2)']
253     : 1----------1---1--------
253     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node3)']
254     : 1--------1-------1------
254     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node1)']
255     : 1----------1-------1----
255     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node2,node3)']
256     : 1--------1-----------1--
256     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node3,node1)']
257     : 1---------1-----------1-
257     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node3,node2)']
258     : -1--------1---1---------
258     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node1,node2)']
259     : -1---------1---1--------
259     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node1,node3)']
260     : -1----------1---1-------
260     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node0)']
261     : -1-------------1---1----
261     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node2,node3)']
262     : -1----------1-------1---
262     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node3,node0)']
263     : -1------------1-------1-
263     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node3,node2)']
264     : --1------1-------1------
264     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node2,node1)']
265     : --1--------1-------1----
265     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node2,node3)']
266     : --1---------1---1-------
266     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node2,node0)']
267     : --1------------1---1----
267     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node2,node3)']
268     : --1-------------1---1---
268     : ['isleader(node2)', 'voted(node2,node0)', 'voted(node3,node0)']
269     : --1--------------1---1--
269     : ['isleader(node2)', 'voted(node2,node1)', 'voted(node3,node1)']
270     : ---1-----1-----------1--
270     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node3,node1)']
271     : ---1------1-----------1-
271     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node3,node2)']
272     : ---1--------1-------1---
272     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node3,node0)']
273     : ---1----------1-------1-
273     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node3,node2)']
274     : ---1------------1---1---
274     : ['isleader(node3)', 'voted(node2,node0)', 'voted(node3,node0)']
275     : ---1-------------1---1--
275     : ['isleader(node3)', 'voted(node2,node1)', 'voted(node3,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 4
num_suborbits: 1
276 (*) : 1------00---------------
276     : ['isleader(node0)', '~(quorum=nset__node1_node2_node3)', '~voted(node0,node0)']
277     : -1----0------0----------
277     : ['isleader(node1)', '~(quorum=nset__node0_node2_node3)', '~voted(node1,node1)']
278     : --1--0------------0-----
278     : ['isleader(node2)', '~(quorum=nset__node0_node1_node3)', '~voted(node2,node2)']
279     : ---10------------------0
279     : ['isleader(node3)', '~(quorum=nset__node0_node1_node2)', '~voted(node3,node3)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NSET0. voted(NODE0,NODE0) | quorum = NSET0 | ~isleader(NODE0) | member(NODE0,NSET0)
qcost : 6




=== Prime Orbit 16 =====================
size : 12
num_suborbits: 1
280 (*) : 1-------0---0-----------
280     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node1,node0)']
281     : 1-------0-------0-------
281     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node2,node0)']
282     : 1-------0-----------0---
282     : ['isleader(node0)', '~voted(node0,node0)', '~voted(node3,node0)']
283     : -1-------0---0----------
283     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node1,node1)']
284     : -1-----------0---0------
284     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node2,node1)']
285     : -1-----------0-------0--
285     : ['isleader(node1)', '~voted(node1,node1)', '~voted(node3,node1)']
286     : --1-------0-------0-----
286     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node2,node2)']
287     : --1-----------0---0-----
287     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node2,node2)']
288     : --1---------------0---0-
288     : ['isleader(node2)', '~voted(node2,node2)', '~voted(node3,node2)']
289     : ---1-------0-----------0
289     : ['isleader(node3)', '~voted(node0,node3)', '~voted(node3,node3)']
290     : ---1-----------0-------0
290     : ['isleader(node3)', '~voted(node1,node3)', '~voted(node3,node3)']
291     : ---1---------------0---0
291     : ['isleader(node3)', '~voted(node2,node3)', '~voted(node3,node3)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. voted(NODE0,NODE0) | ~isleader(NODE0) | voted(NODE1,NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
292 (*) : 1-----1-0---------------
292     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', '~voted(node0,node0)']
293     : 1----1--0---------------
293     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', '~voted(node0,node0)']
294     : 1---1---0---------------
294     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', '~voted(node0,node0)']
295     : -1-----1-----0----------
295     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', '~voted(node1,node1)']
296     : -1---1-------0----------
296     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', '~voted(node1,node1)']
297     : -1--1--------0----------
297     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', '~voted(node1,node1)']
298     : --1----1----------0-----
298     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', '~voted(node2,node2)']
299     : --1---1-----------0-----
299     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', '~voted(node2,node2)']
300     : --1-1-------------0-----
300     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', '~voted(node2,node2)']
301     : ---1---1---------------0
301     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', '~voted(node3,node3)']
302     : ---1--1----------------0
302     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', '~voted(node3,node3)']
303     : ---1-1-----------------0
303     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', '~voted(node3,node3)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NSET0. voted(NODE0,NODE0) | ~member(NODE0,NSET0) | ~isleader(NODE0) | quorum ~= NSET0
qcost : 6




=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
304 (*) : 1------0---1------------
304     : ['isleader(node0)', 'voted(node0,node3)', '~(quorum=nset__node1_node2_node3)']
305     : 1------0--1-------------
305     : ['isleader(node0)', 'voted(node0,node2)', '~(quorum=nset__node1_node2_node3)']
306     : 1------0-1--------------
306     : ['isleader(node0)', 'voted(node0,node1)', '~(quorum=nset__node1_node2_node3)']
307     : -1----0--------1--------
307     : ['isleader(node1)', 'voted(node1,node3)', '~(quorum=nset__node0_node2_node3)']
308     : -1----0-------1---------
308     : ['isleader(node1)', 'voted(node1,node2)', '~(quorum=nset__node0_node2_node3)']
309     : -1----0-----1-----------
309     : ['isleader(node1)', 'voted(node1,node0)', '~(quorum=nset__node0_node2_node3)']
310     : --1--0-------------1----
310     : ['isleader(node2)', 'voted(node2,node3)', '~(quorum=nset__node0_node1_node3)']
311     : --1--0-----------1------
311     : ['isleader(node2)', 'voted(node2,node1)', '~(quorum=nset__node0_node1_node3)']
312     : --1--0----------1-------
312     : ['isleader(node2)', 'voted(node2,node0)', '~(quorum=nset__node0_node1_node3)']
313     : ---10-----------------1-
313     : ['isleader(node3)', 'voted(node3,node2)', '~(quorum=nset__node0_node1_node2)']
314     : ---10----------------1--
314     : ['isleader(node3)', 'voted(node3,node1)', '~(quorum=nset__node0_node1_node2)']
315     : ---10---------------1---
315     : ['isleader(node3)', 'voted(node3,node0)', '~(quorum=nset__node0_node1_node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. member(NODE0,NSET0) | ~voted(NODE0,NODE1) | ~isleader(NODE0) | ~member(NODE1,NSET0) | quorum = NSET0 | NODE0 = NODE1
qcost : 9




=== Prime Orbit 19 =====================
size : 24
num_suborbits: 1
316 (*) : 1----------10-----------
316     : ['isleader(node0)', 'voted(node0,node3)', '~voted(node1,node0)']
317     : 1---------1-0-----------
317     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node1,node0)']
318     : 1----------1----0-------
318     : ['isleader(node0)', 'voted(node0,node3)', '~voted(node2,node0)']
319     : 1--------1------0-------
319     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node2,node0)']
320     : 1---------1---------0---
320     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node3,node0)']
321     : 1--------1----------0---
321     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node3,node0)']
322     : -1-------0-----1--------
322     : ['isleader(node1)', 'voted(node1,node3)', '~voted(node0,node1)']
323     : -1-------0----1---------
323     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node0,node1)']
324     : -1-------------1-0------
324     : ['isleader(node1)', 'voted(node1,node3)', '~voted(node2,node1)']
325     : -1----------1----0------
325     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node2,node1)']
326     : -1------------1------0--
326     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node3,node1)']
327     : -1----------1--------0--
327     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node3,node1)']
328     : --1-------0--------1----
328     : ['isleader(node2)', 'voted(node2,node3)', '~voted(node0,node2)']
329     : --1-------0------1------
329     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node0,node2)']
330     : --1-----------0----1----
330     : ['isleader(node2)', 'voted(node2,node3)', '~voted(node1,node2)']
331     : --1-----------0-1-------
331     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node1,node2)']
332     : --1--------------1----0-
332     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node3,node2)']
333     : --1-------------1-----0-
333     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node3,node2)']
334     : ---1-------0----------1-
334     : ['isleader(node3)', 'voted(node3,node2)', '~voted(node0,node3)']
335     : ---1-------0---------1--
335     : ['isleader(node3)', 'voted(node3,node1)', '~voted(node0,node3)']
336     : ---1-----------0------1-
336     : ['isleader(node3)', 'voted(node3,node2)', '~voted(node1,node3)']
337     : ---1-----------0----1---
337     : ['isleader(node3)', 'voted(node3,node0)', '~voted(node1,node3)']
338     : ---1---------------0-1--
338     : ['isleader(node3)', 'voted(node3,node1)', '~voted(node2,node3)']
339     : ---1---------------01---
339     : ['isleader(node3)', 'voted(node3,node0)', '~voted(node2,node3)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE0,NODE1) | voted(NODE2,NODE0) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 20 =====================
size : 24
num_suborbits: 1
340 (*) : 1-----1----1------------
340     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node0,node3)']
341     : 1-----1---1-------------
341     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node0,node2)']
342     : 1----1-----1------------
342     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node0,node3)']
343     : 1----1---1--------------
343     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node0,node1)']
344     : 1---1-----1-------------
344     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node0,node2)']
345     : 1---1----1--------------
345     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node0,node1)']
346     : -1-----1-------1--------
346     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node1,node3)']
347     : -1-----1------1---------
347     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node1,node2)']
348     : -1---1---------1--------
348     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node1,node3)']
349     : -1---1------1-----------
349     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node1,node0)']
350     : -1--1---------1---------
350     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node1,node2)']
351     : -1--1-------1-----------
351     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node1,node0)']
352     : --1----1-----------1----
352     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node2,node3)']
353     : --1----1---------1------
353     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node2,node1)']
354     : --1---1------------1----
354     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node2,node3)']
355     : --1---1---------1-------
355     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node2,node0)']
356     : --1-1------------1------
356     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node2,node1)']
357     : --1-1-----------1-------
357     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node2,node0)']
358     : ---1---1--------------1-
358     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node3,node2)']
359     : ---1---1-------------1--
359     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node3,node1)']
360     : ---1--1---------------1-
360     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node3,node2)']
361     : ---1--1-------------1---
361     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node3,node0)']
362     : ---1-1---------------1--
362     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node3,node1)']
363     : ---1-1--------------1---
363     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node3,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~voted(NODE0,NODE1) | ~isleader(NODE0) | ~member(NODE0,NSET0) | ~member(NODE1,NSET0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 21 =====================
size : 12
num_suborbits: 1
364 (*) : 1-----1--1--------------
364     : ['(quorum=nset__node0_node2_node3)', 'isleader(node0)', 'voted(node0,node1)']
365     : 1----1----1-------------
365     : ['(quorum=nset__node0_node1_node3)', 'isleader(node0)', 'voted(node0,node2)']
366     : 1---1------1------------
366     : ['(quorum=nset__node0_node1_node2)', 'isleader(node0)', 'voted(node0,node3)']
367     : -1-----1----1-----------
367     : ['(quorum=nset__node1_node2_node3)', 'isleader(node1)', 'voted(node1,node0)']
368     : -1---1--------1---------
368     : ['(quorum=nset__node0_node1_node3)', 'isleader(node1)', 'voted(node1,node2)']
369     : -1--1----------1--------
369     : ['(quorum=nset__node0_node1_node2)', 'isleader(node1)', 'voted(node1,node3)']
370     : --1----1--------1-------
370     : ['(quorum=nset__node1_node2_node3)', 'isleader(node2)', 'voted(node2,node0)']
371     : --1---1----------1------
371     : ['(quorum=nset__node0_node2_node3)', 'isleader(node2)', 'voted(node2,node1)']
372     : --1-1--------------1----
372     : ['(quorum=nset__node0_node1_node2)', 'isleader(node2)', 'voted(node2,node3)']
373     : ---1---1------------1---
373     : ['(quorum=nset__node1_node2_node3)', 'isleader(node3)', 'voted(node3,node0)']
374     : ---1--1--------------1--
374     : ['(quorum=nset__node0_node2_node3)', 'isleader(node3)', 'voted(node3,node1)']
375     : ---1-1----------------1-
375     : ['(quorum=nset__node0_node1_node3)', 'isleader(node3)', 'voted(node3,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | ~voted(NODE0,NODE1) | ~isleader(NODE0) | ~member(NODE0,NSET0) | member(NODE1,NSET0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 22 =====================
size : 12
num_suborbits: 1
376 (*) : 1--------1--0-----------
376     : ['isleader(node0)', 'voted(node0,node1)', '~voted(node1,node0)']
377     : 1---------1-----0-------
377     : ['isleader(node0)', 'voted(node0,node2)', '~voted(node2,node0)']
378     : 1----------1--------0---
378     : ['isleader(node0)', 'voted(node0,node3)', '~voted(node3,node0)']
379     : -1-------0--1-----------
379     : ['isleader(node1)', 'voted(node1,node0)', '~voted(node0,node1)']
380     : -1------------1--0------
380     : ['isleader(node1)', 'voted(node1,node2)', '~voted(node2,node1)']
381     : -1-------------1-----0--
381     : ['isleader(node1)', 'voted(node1,node3)', '~voted(node3,node1)']
382     : --1-------0-----1-------
382     : ['isleader(node2)', 'voted(node2,node0)', '~voted(node0,node2)']
383     : --1-----------0--1------
383     : ['isleader(node2)', 'voted(node2,node1)', '~voted(node1,node2)']
384     : --1----------------1--0-
384     : ['isleader(node2)', 'voted(node2,node3)', '~voted(node3,node2)']
385     : ---1-------0--------1---
385     : ['isleader(node3)', 'voted(node3,node0)', '~voted(node0,node3)']
386     : ---1-----------0-----1--
386     : ['isleader(node3)', 'voted(node3,node1)', '~voted(node1,node3)']
387     : ---1---------------0--1-
387     : ['isleader(node3)', 'voted(node3,node2)', '~voted(node2,node3)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~isleader(NODE0) | voted(NODE1,NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 23 =====================
size : 12
num_suborbits: 1
388 (*) : 1-------0----1----------
388     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node0,node0)']
389     : 1-------0---------1-----
389     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node0,node0)']
390     : 1-------0--------------1
390     : ['isleader(node0)', 'voted(node3,node3)', '~voted(node0,node0)']
391     : -1------1----0----------
391     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node1,node1)']
392     : -1-----------0----1-----
392     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node1,node1)']
393     : -1-----------0---------1
393     : ['isleader(node1)', 'voted(node3,node3)', '~voted(node1,node1)']
394     : --1-----1---------0-----
394     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node2,node2)']
395     : --1----------1----0-----
395     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node2,node2)']
396     : --1---------------0----1
396     : ['isleader(node2)', 'voted(node3,node3)', '~voted(node2,node2)']
397     : ---1----1--------------0
397     : ['isleader(node3)', 'voted(node0,node0)', '~voted(node3,node3)']
398     : ---1---------1---------0
398     : ['isleader(node3)', 'voted(node1,node1)', '~voted(node3,node3)']
399     : ---1--------------1----0
399     : ['isleader(node3)', 'voted(node2,node2)', '~voted(node3,node3)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. voted(NODE0,NODE0) | ~voted(NODE1,NODE1) | ~isleader(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 24 =====================
size : 24
num_suborbits: 1
400 (*) : 1----------1-1----------
400     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node1,node1)']
401     : 1---------1--1----------
401     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node1,node1)']
402     : 1----------1------1-----
402     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node2,node2)']
403     : 1--------1--------1-----
403     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node2,node2)']
404     : 1---------1------------1
404     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node3,node3)']
405     : 1--------1-------------1
405     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node3,node3)']
406     : -1------1------1--------
406     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node3)']
407     : -1------1-----1---------
407     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node2)']
408     : -1-------------1--1-----
408     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node2,node2)']
409     : -1----------1-----1-----
409     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node2,node2)']
410     : -1------------1--------1
410     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node3,node3)']
411     : -1----------1----------1
411     : ['isleader(node1)', 'voted(node1,node0)', 'voted(node3,node3)']
412     : --1-----1----------1----
412     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node3)']
413     : --1-----1--------1------
413     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node1)']
414     : --1----------1-----1----
414     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node3)']
415     : --1----------1--1-------
415     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node0)']
416     : --1--------------1-----1
416     : ['isleader(node2)', 'voted(node2,node1)', 'voted(node3,node3)']
417     : --1-------------1------1
417     : ['isleader(node2)', 'voted(node2,node0)', 'voted(node3,node3)']
418     : ---1----1-------------1-
418     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node3,node2)']
419     : ---1----1------------1--
419     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node3,node1)']
420     : ---1---------1--------1-
420     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node3,node2)']
421     : ---1---------1------1---
421     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node3,node0)']
422     : ---1--------------1--1--
422     : ['isleader(node3)', 'voted(node2,node2)', 'voted(node3,node1)']
423     : ---1--------------1-1---
423     : ['isleader(node3)', 'voted(node2,node2)', 'voted(node3,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE1) | ~isleader(NODE0) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 25 =====================
size : 12
num_suborbits: 1
424 (*) : 1--------1---1----------
424     : ['isleader(node0)', 'voted(node0,node1)', 'voted(node1,node1)']
425     : 1---------1-------1-----
425     : ['isleader(node0)', 'voted(node0,node2)', 'voted(node2,node2)']
426     : 1----------1-----------1
426     : ['isleader(node0)', 'voted(node0,node3)', 'voted(node3,node3)']
427     : -1------1---1-----------
427     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node1,node0)']
428     : -1------------1---1-----
428     : ['isleader(node1)', 'voted(node1,node2)', 'voted(node2,node2)']
429     : -1-------------1-------1
429     : ['isleader(node1)', 'voted(node1,node3)', 'voted(node3,node3)']
430     : --1-----1-------1-------
430     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node2,node0)']
431     : --1----------1---1------
431     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node2,node1)']
432     : --1----------------1---1
432     : ['isleader(node2)', 'voted(node2,node3)', 'voted(node3,node3)']
433     : ---1----1-----------1---
433     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node3,node0)']
434     : ---1---------1-------1--
434     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node3,node1)']
435     : ---1--------------1---1-
435     : ['isleader(node3)', 'voted(node2,node2)', 'voted(node3,node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~isleader(NODE0) | ~voted(NODE1,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 26 =====================
size : 24
num_suborbits: 1
436 (*) : 1--------------1----0---
436     : ['isleader(node0)', 'voted(node1,node3)', '~voted(node3,node0)']
437     : 1-------------1-0-------
437     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node2,node0)']
438     : 1------------------10---
438     : ['isleader(node0)', 'voted(node2,node3)', '~voted(node3,node0)']
439     : 1-----------0----1------
439     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node1,node0)']
440     : 1---------------0-----1-
440     : ['isleader(node0)', 'voted(node3,node2)', '~voted(node2,node0)']
441     : 1-----------0--------1--
441     : ['isleader(node0)', 'voted(node3,node1)', '~voted(node1,node0)']
442     : -1---------1---------0--
442     : ['isleader(node1)', 'voted(node0,node3)', '~voted(node3,node1)']
443     : -1--------1------0------
443     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node2,node1)']
444     : -1-----------------1-0--
444     : ['isleader(node1)', 'voted(node2,node3)', '~voted(node3,node1)']
445     : -1-------0------1-------
445     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node0,node1)']
446     : -1---------------0----1-
446     : ['isleader(node1)', 'voted(node3,node2)', '~voted(node2,node1)']
447     : -1-------0----------1---
447     : ['isleader(node1)', 'voted(node3,node0)', '~voted(node0,node1)']
448     : --1--------1----------0-
448     : ['isleader(node2)', 'voted(node0,node3)', '~voted(node3,node2)']
449     : --1------1----0---------
449     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node1,node2)']
450     : --1------------1------0-
450     : ['isleader(node2)', 'voted(node1,node3)', '~voted(node3,node2)']
451     : --1-------0-1-----------
451     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node0,node2)']
452     : --1-----------0------1--
452     : ['isleader(node2)', 'voted(node3,node1)', '~voted(node1,node2)']
453     : --1-------0---------1---
453     : ['isleader(node2)', 'voted(node3,node0)', '~voted(node0,node2)']
454     : ---1------1--------0----
454     : ['isleader(node3)', 'voted(node0,node2)', '~voted(node2,node3)']
455     : ---1-----1-----0--------
455     : ['isleader(node3)', 'voted(node0,node1)', '~voted(node1,node3)']
456     : ---1----------1----0----
456     : ['isleader(node3)', 'voted(node1,node2)', '~voted(node2,node3)']
457     : ---1-------01-----------
457     : ['isleader(node3)', 'voted(node1,node0)', '~voted(node0,node3)']
458     : ---1-----------0-1------
458     : ['isleader(node3)', 'voted(node2,node1)', '~voted(node1,node3)']
459     : ---1-------0----1-------
459     : ['isleader(node3)', 'voted(node2,node0)', '~voted(node0,node3)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE2) | voted(NODE2,NODE0) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 27 =====================
size : 12
num_suborbits: 1
460 (*) : 1--------------1-----1--
460     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node1)']
461     : 1-------------1--1------
461     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node1)']
462     : 1------------------1--1-
462     : ['isleader(node0)', 'voted(node2,node3)', 'voted(node3,node2)']
463     : -1---------1--------1---
463     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node3,node0)']
464     : -1--------1-----1-------
464     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node0)']
465     : -1-----------------1--1-
465     : ['isleader(node1)', 'voted(node2,node3)', 'voted(node3,node2)']
466     : --1--------1--------1---
466     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node3,node0)']
467     : --1------1--1-----------
467     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node0)']
468     : --1------------1-----1--
468     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node3,node1)']
469     : ---1------1-----1-------
469     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node2,node0)']
470     : ---1-----1--1-----------
470     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node1,node0)']
471     : ---1----------1--1------
471     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~voted(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 28 =====================
size : 24
num_suborbits: 1
472 (*) : 1--------------1------1-
472     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node2)']
473     : 1-------------1----1----
473     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node3)']
474     : 1------------------1-1--
474     : ['isleader(node0)', 'voted(node2,node3)', 'voted(node3,node1)']
475     : 1--------------1-1------
475     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node2,node1)']
476     : 1----------------1----1-
476     : ['isleader(node0)', 'voted(node2,node1)', 'voted(node3,node2)']
477     : 1-------------1------1--
477     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node1)']
478     : -1---------1----------1-
478     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node3,node2)']
479     : -1--------1--------1----
479     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node3)']
480     : -1-----------------11---
480     : ['isleader(node1)', 'voted(node2,node3)', 'voted(node3,node0)']
481     : -1---------1----1-------
481     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node2,node0)']
482     : -1--------------1-----1-
482     : ['isleader(node1)', 'voted(node2,node0)', 'voted(node3,node2)']
483     : -1--------1---------1---
483     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node3,node0)']
484     : --1--------1---------1--
484     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node3,node1)']
485     : --1------1-----1--------
485     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node3)']
486     : --1------------1----1---
486     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node3,node0)']
487     : --1--------11-----------
487     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node1,node0)']
488     : --1---------1--------1--
488     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node3,node1)']
489     : --1------1----------1---
489     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node3,node0)']
490     : ---1------1------1------
490     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node2,node1)']
491     : ---1-----1----1---------
491     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node1,node2)']
492     : ---1----------1-1-------
492     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node2,node0)']
493     : ---1------1-1-----------
493     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node1,node0)']
494     : ---1--------1----1------
494     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node2,node1)']
495     : ---1-----1------1-------
495     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node2,node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NODE3. ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~voted(NODE2,NODE3) | (NODE2 = NODE3 | NODE0 = NODE1 | NODE1 = NODE2 | NODE1 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3)
qcost : 13




=== Prime Orbit 29 =====================
size : 12
num_suborbits: 1
496 (*) : 1-----------0-------0---
496     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node3,node0)']
497     : 1-----------0---0-------
497     : ['isleader(node0)', '~voted(node1,node0)', '~voted(node2,node0)']
498     : 1---------------0---0---
498     : ['isleader(node0)', '~voted(node2,node0)', '~voted(node3,node0)']
499     : -1-------0-----------0--
499     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node3,node1)']
500     : -1-------0-------0------
500     : ['isleader(node1)', '~voted(node0,node1)', '~voted(node2,node1)']
501     : -1---------------0---0--
501     : ['isleader(node1)', '~voted(node2,node1)', '~voted(node3,node1)']
502     : --1-------0-----------0-
502     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node3,node2)']
503     : --1-------0---0---------
503     : ['isleader(node2)', '~voted(node0,node2)', '~voted(node1,node2)']
504     : --1-----------0-------0-
504     : ['isleader(node2)', '~voted(node1,node2)', '~voted(node3,node2)']
505     : ---1-------0-------0----
505     : ['isleader(node3)', '~voted(node0,node3)', '~voted(node2,node3)']
506     : ---1-------0---0--------
506     : ['isleader(node3)', '~voted(node0,node3)', '~voted(node1,node3)']
507     : ---1-----------0---0----
507     : ['isleader(node3)', '~voted(node1,node3)', '~voted(node2,node3)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. voted(NODE2,NODE0) | ~isleader(NODE0) | voted(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 30 =====================
size : 24
num_suborbits: 1
508 (*) : 1-----------0---------1-
508     : ['isleader(node0)', 'voted(node3,node2)', '~voted(node1,node0)']
509     : 1-----------0------1----
509     : ['isleader(node0)', 'voted(node2,node3)', '~voted(node1,node0)']
510     : 1---------------0----1--
510     : ['isleader(node0)', 'voted(node3,node1)', '~voted(node2,node0)']
511     : 1--------------10-------
511     : ['isleader(node0)', 'voted(node1,node3)', '~voted(node2,node0)']
512     : 1----------------1--0---
512     : ['isleader(node0)', 'voted(node2,node1)', '~voted(node3,node0)']
513     : 1-------------1-----0---
513     : ['isleader(node0)', 'voted(node1,node2)', '~voted(node3,node0)']
514     : -1-------0------------1-
514     : ['isleader(node1)', 'voted(node3,node2)', '~voted(node0,node1)']
515     : -1-------0---------1----
515     : ['isleader(node1)', 'voted(node2,node3)', '~voted(node0,node1)']
516     : -1---------------0--1---
516     : ['isleader(node1)', 'voted(node3,node0)', '~voted(node2,node1)']
517     : -1---------1-----0------
517     : ['isleader(node1)', 'voted(node0,node3)', '~voted(node2,node1)']
518     : -1--------------1----0--
518     : ['isleader(node1)', 'voted(node2,node0)', '~voted(node3,node1)']
519     : -1--------1----------0--
519     : ['isleader(node1)', 'voted(node0,node2)', '~voted(node3,node1)']
520     : --1-------0----------1--
520     : ['isleader(node2)', 'voted(node3,node1)', '~voted(node0,node2)']
521     : --1-------0----1--------
521     : ['isleader(node2)', 'voted(node1,node3)', '~voted(node0,node2)']
522     : --1-----------0-----1---
522     : ['isleader(node2)', 'voted(node3,node0)', '~voted(node1,node2)']
523     : --1--------1--0---------
523     : ['isleader(node2)', 'voted(node0,node3)', '~voted(node1,node2)']
524     : --1---------1---------0-
524     : ['isleader(node2)', 'voted(node1,node0)', '~voted(node3,node2)']
525     : --1------1------------0-
525     : ['isleader(node2)', 'voted(node0,node1)', '~voted(node3,node2)']
526     : ---1-------0-----1------
526     : ['isleader(node3)', 'voted(node2,node1)', '~voted(node0,node3)']
527     : ---1-------0--1---------
527     : ['isleader(node3)', 'voted(node1,node2)', '~voted(node0,node3)']
528     : ---1-----------01-------
528     : ['isleader(node3)', 'voted(node2,node0)', '~voted(node1,node3)']
529     : ---1------1----0--------
529     : ['isleader(node3)', 'voted(node0,node2)', '~voted(node1,node3)']
530     : ---1--------1------0----
530     : ['isleader(node3)', 'voted(node1,node0)', '~voted(node2,node3)']
531     : ---1-----1---------0----
531     : ['isleader(node3)', 'voted(node0,node1)', '~voted(node2,node3)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NODE3. voted(NODE3,NODE0) | ~isleader(NODE0) | ~voted(NODE1,NODE2) | (NODE2 = NODE3 | NODE0 = NODE1 | NODE1 = NODE2 | NODE1 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3)
qcost : 13




=== Prime Orbit 31 =====================
size : 24
num_suborbits: 1
532 (*) : 1------------1------0---
532     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node3,node0)']
533     : 1------------1--0-------
533     : ['isleader(node0)', 'voted(node1,node1)', '~voted(node2,node0)']
534     : 1-----------------1-0---
534     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node3,node0)']
535     : 1-----------0-----1-----
535     : ['isleader(node0)', 'voted(node2,node2)', '~voted(node1,node0)']
536     : 1---------------0------1
536     : ['isleader(node0)', 'voted(node3,node3)', '~voted(node2,node0)']
537     : 1-----------0----------1
537     : ['isleader(node0)', 'voted(node3,node3)', '~voted(node1,node0)']
538     : -1------1------------0--
538     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node3,node1)']
539     : -1------1--------0------
539     : ['isleader(node1)', 'voted(node0,node0)', '~voted(node2,node1)']
540     : -1----------------1--0--
540     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node3,node1)']
541     : -1-------0--------1-----
541     : ['isleader(node1)', 'voted(node2,node2)', '~voted(node0,node1)']
542     : -1---------------0-----1
542     : ['isleader(node1)', 'voted(node3,node3)', '~voted(node2,node1)']
543     : -1-------0-------------1
543     : ['isleader(node1)', 'voted(node3,node3)', '~voted(node0,node1)']
544     : --1-----1-------------0-
544     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node3,node2)']
545     : --1-----1-----0---------
545     : ['isleader(node2)', 'voted(node0,node0)', '~voted(node1,node2)']
546     : --1----------1--------0-
546     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node3,node2)']
547     : --1-------0--1----------
547     : ['isleader(node2)', 'voted(node1,node1)', '~voted(node0,node2)']
548     : --1-----------0--------1
548     : ['isleader(node2)', 'voted(node3,node3)', '~voted(node1,node2)']
549     : --1-------0------------1
549     : ['isleader(node2)', 'voted(node3,node3)', '~voted(node0,node2)']
550     : ---1----1----------0----
550     : ['isleader(node3)', 'voted(node0,node0)', '~voted(node2,node3)']
551     : ---1----1------0--------
551     : ['isleader(node3)', 'voted(node0,node0)', '~voted(node1,node3)']
552     : ---1---------1-----0----
552     : ['isleader(node3)', 'voted(node1,node1)', '~voted(node2,node3)']
553     : ---1-------0-1----------
553     : ['isleader(node3)', 'voted(node1,node1)', '~voted(node0,node3)']
554     : ---1-----------0--1-----
554     : ['isleader(node3)', 'voted(node2,node2)', '~voted(node1,node3)']
555     : ---1-------0------1-----
555     : ['isleader(node3)', 'voted(node2,node2)', '~voted(node0,node3)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE1) | voted(NODE2,NODE0) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 32 =====================
size : 24
num_suborbits: 1
556 (*) : 1------------1-------1--
556     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node1)']
557     : 1------------1---1------
557     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node1)']
558     : 1-----------------1---1-
558     : ['isleader(node0)', 'voted(node2,node2)', 'voted(node3,node2)']
559     : 1-------------1---1-----
559     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node2,node2)']
560     : 1------------------1---1
560     : ['isleader(node0)', 'voted(node2,node3)', 'voted(node3,node3)']
561     : 1--------------1-------1
561     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node3,node3)']
562     : -1------1-----------1---
562     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node3,node0)']
563     : -1------1-------1-------
563     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node0)']
564     : -1----------------1---1-
564     : ['isleader(node1)', 'voted(node2,node2)', 'voted(node3,node2)']
565     : -1--------1-------1-----
565     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node2,node2)']
566     : -1-----------------1---1
566     : ['isleader(node1)', 'voted(node2,node3)', 'voted(node3,node3)']
567     : -1---------1-----------1
567     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node3,node3)']
568     : --1-----1-----------1---
568     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node3,node0)']
569     : --1-----1---1-----------
569     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node0)']
570     : --1----------1-------1--
570     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node3,node1)']
571     : --1------1---1----------
571     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node1,node1)']
572     : --1------------1-------1
572     : ['isleader(node2)', 'voted(node1,node3)', 'voted(node3,node3)']
573     : --1--------1-----------1
573     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node3,node3)']
574     : ---1----1-------1-------
574     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node2,node0)']
575     : ---1----1---1-----------
575     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node1,node0)']
576     : ---1---------1---1------
576     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node2,node1)']
577     : ---1-----1---1----------
577     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node1,node1)']
578     : ---1----------1---1-----
578     : ['isleader(node3)', 'voted(node1,node2)', 'voted(node2,node2)']
579     : ---1------1-------1-----
579     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node2,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE2,NODE1) | ~voted(NODE1,NODE1) | ~isleader(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 33 =====================
size : 24
num_suborbits: 1
580 (*) : 1------------1--------1-
580     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node2)']
581     : 1------------1-----1----
581     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node3)']
582     : 1-----------------1--1--
582     : ['isleader(node0)', 'voted(node2,node2)', 'voted(node3,node1)']
583     : 1--------------1--1-----
583     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node2,node2)']
584     : 1----------------1-----1
584     : ['isleader(node0)', 'voted(node2,node1)', 'voted(node3,node3)']
585     : 1-------------1--------1
585     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node3)']
586     : -1------1-------------1-
586     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node3,node2)']
587     : -1------1----------1----
587     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node3)']
588     : -1----------------1-1---
588     : ['isleader(node1)', 'voted(node2,node2)', 'voted(node3,node0)']
589     : -1---------1------1-----
589     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node2,node2)']
590     : -1--------------1------1
590     : ['isleader(node1)', 'voted(node2,node0)', 'voted(node3,node3)']
591     : -1--------1------------1
591     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node3,node3)']
592     : --1-----1------------1--
592     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node3,node1)']
593     : --1-----1------1--------
593     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node3)']
594     : --1----------1------1---
594     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node3,node0)']
595     : --1--------1-1----------
595     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node1,node1)']
596     : --1---------1----------1
596     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node3,node3)']
597     : --1------1-------------1
597     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node3,node3)']
598     : ---1----1--------1------
598     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node2,node1)']
599     : ---1----1-----1---------
599     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node1,node2)']
600     : ---1---------1--1-------
600     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node2,node0)']
601     : ---1------1--1----------
601     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node1,node1)']
602     : ---1--------1-----1-----
602     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node2,node2)']
603     : ---1-----1--------1-----
603     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node2,node2)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NODE3. ~voted(NODE1,NODE1) | ~isleader(NODE0) | ~voted(NODE2,NODE3) | (NODE2 = NODE3 | NODE0 = NODE1 | NODE1 = NODE2 | NODE1 = NODE3 | NODE0 = NODE2 | NODE0 = NODE3)
qcost : 13




=== Prime Orbit 34 =====================
size : 12
num_suborbits: 1
604 (*) : 1-------------1-------1-
604     : ['isleader(node0)', 'voted(node1,node2)', 'voted(node3,node2)']
605     : 1--------------1---1----
605     : ['isleader(node0)', 'voted(node1,node3)', 'voted(node2,node3)']
606     : 1----------------1---1--
606     : ['isleader(node0)', 'voted(node2,node1)', 'voted(node3,node1)']
607     : -1--------1-----------1-
607     : ['isleader(node1)', 'voted(node0,node2)', 'voted(node3,node2)']
608     : -1---------1-------1----
608     : ['isleader(node1)', 'voted(node0,node3)', 'voted(node2,node3)']
609     : -1--------------1---1---
609     : ['isleader(node1)', 'voted(node2,node0)', 'voted(node3,node0)']
610     : --1------1-----------1--
610     : ['isleader(node2)', 'voted(node0,node1)', 'voted(node3,node1)']
611     : --1--------1---1--------
611     : ['isleader(node2)', 'voted(node0,node3)', 'voted(node1,node3)']
612     : --1---------1-------1---
612     : ['isleader(node2)', 'voted(node1,node0)', 'voted(node3,node0)']
613     : ---1-----1-------1------
613     : ['isleader(node3)', 'voted(node0,node1)', 'voted(node2,node1)']
614     : ---1------1---1---------
614     : ['isleader(node3)', 'voted(node0,node2)', 'voted(node1,node2)']
615     : ---1--------1---1-------
615     : ['isleader(node3)', 'voted(node1,node0)', 'voted(node2,node0)']
num_forall :   2
num_exists :   1
num_literals : 5
quantified form : forall NODE2,NODE1. ~isleader(NODE1) | (exists NODE0. (~voted(NODE0,NODE2) & (NODE0 ~= NODE2 & NODE0 ~= NODE1))) | NODE1 = NODE2
qcost : 8




=== Prime Orbit 35 =====================
size : 24
num_suborbits: 1
616 (*) : 1------1------1---------
616     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node1,node2)']
617     : 1------1-------1--------
617     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node1,node3)']
618     : 1------1---------1------
618     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node2,node1)']
619     : 1------1-----------1----
619     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node2,node3)']
620     : 1------1-------------1--
620     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node3,node1)']
621     : 1------1--------------1-
621     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node3,node2)']
622     : -1----1---1-------------
622     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node0,node2)']
623     : -1----1----1------------
623     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node0,node3)']
624     : -1----1---------1-------
624     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node2,node0)']
625     : -1----1------------1----
625     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node2,node3)']
626     : -1----1-------------1---
626     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node3,node0)']
627     : -1----1---------------1-
627     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node3,node2)']
628     : --1--1---1--------------
628     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node0,node1)']
629     : --1--1-----1------------
629     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node0,node3)']
630     : --1--1------1-----------
630     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node1,node0)']
631     : --1--1---------1--------
631     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node1,node3)']
632     : --1--1--------------1---
632     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node3,node0)']
633     : --1--1---------------1--
633     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node3,node1)']
634     : ---11----1--------------
634     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node0,node1)']
635     : ---11-----1-------------
635     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node0,node2)']
636     : ---11-------1-----------
636     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node1,node0)']
637     : ---11---------1---------
637     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node1,node2)']
638     : ---11-----------1-------
638     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node2,node0)']
639     : ---11------------1------
639     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node2,node1)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE2,NODE1,NSET0. quorum ~= NSET0 | member(NODE0,NSET0) | ~member(NODE2,NSET0) | ~voted(NODE1,NODE2) | ~isleader(NODE0) | ~member(NODE1,NSET0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 13




=== Prime Orbit 36 =====================
size : 12
num_suborbits: 1
640 (*) : 1------1----0-----------
640     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', '~voted(node1,node0)']
641     : 1------1--------0-------
641     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', '~voted(node2,node0)']
642     : 1------1------------0---
642     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', '~voted(node3,node0)']
643     : -1----1--0--------------
643     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', '~voted(node0,node1)']
644     : -1----1----------0------
644     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', '~voted(node2,node1)']
645     : -1----1--------------0--
645     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', '~voted(node3,node1)']
646     : --1--1----0-------------
646     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', '~voted(node0,node2)']
647     : --1--1--------0---------
647     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', '~voted(node1,node2)']
648     : --1--1----------------0-
648     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', '~voted(node3,node2)']
649     : ---11------0------------
649     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', '~voted(node0,node3)']
650     : ---11----------0--------
650     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', '~voted(node1,node3)']
651     : ---11--------------0----
651     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', '~voted(node2,node3)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | voted(NODE1,NODE0) | member(NODE0,NSET0) | ~isleader(NODE0) | ~member(NODE1,NSET0) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 37 =====================
size : 12
num_suborbits: 1
652 (*) : 1------1-----1----------
652     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node1,node1)']
653     : 1------1----------1-----
653     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node2,node2)']
654     : 1------1---------------1
654     : ['(quorum=nset__node1_node2_node3)', 'isleader(node0)', 'voted(node3,node3)']
655     : -1----1-1---------------
655     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node0,node0)']
656     : -1----1-----------1-----
656     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node2,node2)']
657     : -1----1----------------1
657     : ['(quorum=nset__node0_node2_node3)', 'isleader(node1)', 'voted(node3,node3)']
658     : --1--1--1---------------
658     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node0,node0)']
659     : --1--1-------1----------
659     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node1,node1)']
660     : --1--1-----------------1
660     : ['(quorum=nset__node0_node1_node3)', 'isleader(node2)', 'voted(node3,node3)']
661     : ---11---1---------------
661     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node0,node0)']
662     : ---11--------1----------
662     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node1,node1)']
663     : ---11-------------1-----
663     : ['(quorum=nset__node0_node1_node2)', 'isleader(node3)', 'voted(node2,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NSET0. quorum ~= NSET0 | member(NODE0,NSET0) | ~isleader(NODE0) | ~member(NODE1,NSET0) | ~voted(NODE1,NODE1) | NODE0 = NODE1
qcost : 9




=== Prime Orbit 38 =====================
size : 12
num_suborbits: 1
664 (*) : 1------------1----1-----
664     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node2,node2)']
665     : 1------------1---------1
665     : ['isleader(node0)', 'voted(node1,node1)', 'voted(node3,node3)']
666     : 1-----------------1----1
666     : ['isleader(node0)', 'voted(node2,node2)', 'voted(node3,node3)']
667     : -1------1---------1-----
667     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node2,node2)']
668     : -1------1--------------1
668     : ['isleader(node1)', 'voted(node0,node0)', 'voted(node3,node3)']
669     : -1----------------1----1
669     : ['isleader(node1)', 'voted(node2,node2)', 'voted(node3,node3)']
670     : --1-----1----1----------
670     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node1,node1)']
671     : --1-----1--------------1
671     : ['isleader(node2)', 'voted(node0,node0)', 'voted(node3,node3)']
672     : --1----------1---------1
672     : ['isleader(node2)', 'voted(node1,node1)', 'voted(node3,node3)']
673     : ---1----1----1----------
673     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node1,node1)']
674     : ---1----1---------1-----
674     : ['isleader(node3)', 'voted(node0,node0)', 'voted(node2,node2)']
675     : ---1---------1----1-----
675     : ['isleader(node3)', 'voted(node1,node1)', 'voted(node2,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE2,NODE1. ~voted(NODE1,NODE1) | ~isleader(NODE0) | ~voted(NODE2,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9



[QRM NOTE]: Time elapsed since start: 0.643 seconds

[QRM NOTE]: Time elapsed since last: 0.263 seconds

[QRM NOTE]: Peak memory: 2815014 bytes


=========================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=4]

=========================================================================================================


New level: 1
 pending : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 274877906944), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 274877906944), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1]


Solution : [0, 1] has cost 13.


Decide in level 1 among pending : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 274877906944), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Decide 3 with phase True at level 1

After decision at level 1
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1, 3]


New level: 2
 pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1, 3]


Before reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1, 3]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 274877906944), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 17179869184), (6, 2147483648), (7, 268435456), (8, 2147483648), (9, 268435456), (10, 268435456), (11, 2147483648), (12, 268435456), (13, 268435456), (14, 268435456), (15, 17179869184), (16, 17179869184), (17, 2147483648), (18, 2147483648), (19, 2147483648), (20, 268435456), (21, 268435456), (22, 2147483648), (23, 2147483648), (24, 268435456), (25, 268435456), (26, 2147483648), (27, 268435456), (28, 268435456), (29, 17179869184), (30, 2147483648), (31, 2147483648), (32, 268435456), (33, 268435456), (34, 268435456), (35, 268435456), (36, 2147483648), (37, 268435456), (38, 268435456), (39, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1, 3]


Solution : [0, 1, 3] has cost 18.


Decide in level 2 among pending : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 17179869184), (6, 2147483648), (7, 268435456), (8, 2147483648), (9, 268435456), (10, 268435456), (11, 2147483648), (12, 268435456), (13, 268435456), (14, 268435456), (15, 17179869184), (16, 17179869184), (17, 2147483648), (18, 2147483648), (19, 2147483648), (20, 268435456), (21, 268435456), (22, 2147483648), (23, 2147483648), (24, 268435456), (25, 268435456), (26, 2147483648), (27, 268435456), (28, 268435456), (29, 17179869184), (30, 2147483648), (31, 2147483648), (32, 268435456), (33, 268435456), (34, 268435456), (35, 268435456), (36, 2147483648), (37, 268435456), (38, 268435456), (39, -1)]

Decide 5 with phase True at level 2

After decision at level 2
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1, 3, 5]


New level: 3
 pending : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1, 3, 5]


Before reduction : 
 pending  : [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
 solution : [0, 1, 3, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 17179869184), (6, 2147483648), (7, 268435456), (8, 2147483648), (9, 268435456), (10, 268435456), (11, 2147483648), (12, 268435456), (13, 268435456), (14, 268435456), (15, 17179869184), (16, 17179869184), (17, 2147483648), (18, 2147483648), (19, 2147483648), (20, 268435456), (21, 268435456), (22, 2147483648), (23, 2147483648), (24, 268435456), (25, 268435456), (26, 2147483648), (27, 268435456), (28, 268435456), (29, 17179869184), (30, 2147483648), (31, 2147483648), (32, 268435456), (33, 268435456), (34, 268435456), (35, 268435456), (36, 2147483648), (37, 268435456), (38, 268435456), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, 17179869184), (16, 4194304), (17, 8388608), (18, 2147483648), (19, 524288), (20, 1048576), (21, 1048576), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, 0), (37, 0), (38, 0), (39, -1)]

Covered at level 3 : {4, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38}

After reduction : 
 pending  : [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5]


Before reduction : 
 pending  : [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, 17179869184), (16, 4194304), (17, 8388608), (18, 2147483648), (19, 524288), (20, 1048576), (21, 1048576), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, 0), (37, 0), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, 17179869184), (16, 4194304), (17, 8388608), (18, 2147483648), (19, 524288), (20, 1048576), (21, 1048576), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5]


Solution : [0, 1, 3, 5] has cost 27.


Decide in level 3 among pending : [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, 17179869184), (16, 4194304), (17, 8388608), (18, 2147483648), (19, 524288), (20, 1048576), (21, 1048576), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5, 15]


New level: 4
 pending : [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5, 15]


Before reduction : 
 pending  : [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, 17179869184), (16, 4194304), (17, 8388608), (18, 2147483648), (19, 524288), (20, 1048576), (21, 1048576), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 4 : {11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25}

After reduction : 
 pending  : []
 solution : [0, 1, 3, 5, 15]


Before reduction : 
 pending  : []
 solution : [0, 1, 3, 5, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 3, 5, 15]


Solution : [0, 1, 3, 5, 15] has cost 33.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 3, 5, 15]

After backtrack at level 4
 pending : [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5]


Before reduction : 
 pending  : [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5]

Essensial at level 4 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 4 : {11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25}

After reduction : 
 pending  : []
 solution : [0, 1, 3, 5, 17]


Before reduction : 
 pending  : []
 solution : [0, 1, 3, 5, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 3, 5, 17]


Solution : [0, 1, 3, 5, 17] has cost 33.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 3, 5, 17]

After backtrack at level 4
 pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5]


Before backtrack at level 3
 pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25]
 solution : [0, 1, 3, 5]

After backtrack at level 3
 pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 4, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 15]
 solution : [0, 1, 3, 5]


Invert decision for 5 at level 2


New level: 3
 pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 4, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 15]
 solution : [0, 1, 3]


Before reduction : 
 pending  : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 4, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 15]
 solution : [0, 1, 3]

Essensial at level 3 : {4, 36}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, 17179869184), (16, 4194304), (17, 8388608), (18, 2147483648), (19, 524288), (20, 1048576), (21, 1048576), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, -1), (37, 0), (38, 0), (39, -1)]

Covered at level 3 : {32, 33, 34, 35, 37, 6, 7, 8, 9, 10, 38, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15]
 solution : [0, 1, 3, 4, 36]


Before reduction : 
 pending  : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15]
 solution : [0, 1, 3, 4, 36]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, 17179869184), (16, 4194304), (17, 8388608), (18, 2147483648), (19, 524288), (20, 1048576), (21, 1048576), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, -1), (37, 0), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, 17179869184), (16, 4194304), (17, 8388608), (18, 2147483648), (19, 524288), (20, 1048576), (21, 1048576), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15]
 solution : [0, 1, 3, 4, 36]


Solution : [0, 1, 3, 4, 36] has cost 36.


Before backtrack at level 3
 pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15]
 solution : [0, 1, 3, 4, 36]

After backtrack at level 3
 pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38]
 solution : [0, 1, 3]


Before backtrack at level 2
 pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38]
 solution : [0, 1, 3]

After backtrack at level 2
 pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 3]


Invert decision for 3 at level 1


New level: 2
 pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1]


Before reduction : 
 pending  : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, 17179869184), (16, 4194304), (17, 8388608), (18, 2147483648), (19, 524288), (20, 1048576), (21, 1048576), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1]


Solution : [0, 1] has cost 13.


Decide in level 2 among pending : [17, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Decide 16 with phase True at level 2

After decision at level 2
 pending : [17, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 16]


New level: 3
 pending : [17, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 16]


Before reduction : 
 pending  : [17, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 16]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, 137438953472), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 8589934592), (6, 1073741824), (7, 134217728), (8, 536870912), (9, 67108864), (10, 67108864), (11, 0), (12, 0), (13, 0), (14, 0), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, 0), (20, 65536), (21, 65536), (22, 0), (23, 0), (24, 0), (25, 0), (26, 536870912), (27, 33554432), (28, 33554432), (29, 8589934592), (30, 536870912), (31, 1073741824), (32, 67108864), (33, 67108864), (34, 33554432), (35, 67108864), (36, 1073741824), (37, 134217728), (38, 134217728), (39, -1)]

Covered at level 3 : {11, 12, 13, 14, 19, 22, 23, 24, 25}

After reduction : 
 pending  : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 16]


Before reduction : 
 pending  : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 16]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 8589934592), (6, 1073741824), (7, 134217728), (8, 536870912), (9, 67108864), (10, 67108864), (11, 0), (12, 0), (13, 0), (14, 0), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, 0), (20, 65536), (21, 65536), (22, 0), (23, 0), (24, 0), (25, 0), (26, 536870912), (27, 33554432), (28, 33554432), (29, 8589934592), (30, 536870912), (31, 1073741824), (32, 67108864), (33, 67108864), (34, 33554432), (35, 67108864), (36, 1073741824), (37, 134217728), (38, 134217728), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 8589934592), (6, 1073741824), (7, 134217728), (8, 536870912), (9, 67108864), (10, 67108864), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 536870912), (27, 33554432), (28, 33554432), (29, 8589934592), (30, 536870912), (31, 1073741824), (32, 67108864), (33, 67108864), (34, 33554432), (35, 67108864), (36, 1073741824), (37, 134217728), (38, 134217728), (39, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 16]


Solution : [0, 1, 16] has cost 19.


Decide in level 3 among pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 8589934592), (6, 1073741824), (7, 134217728), (8, 536870912), (9, 67108864), (10, 67108864), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 536870912), (27, 33554432), (28, 33554432), (29, 8589934592), (30, 536870912), (31, 1073741824), (32, 67108864), (33, 67108864), (34, 33554432), (35, 67108864), (36, 1073741824), (37, 134217728), (38, 134217728), (39, -1)]

Decide 29 with phase True at level 3

After decision at level 3
 pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 16, 29]


New level: 4
 pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 16, 29]


Before reduction : 
 pending  : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 5]
 solution : [0, 1, 16, 29]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 8589934592), (6, 1073741824), (7, 134217728), (8, 536870912), (9, 67108864), (10, 67108864), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 536870912), (27, 33554432), (28, 33554432), (29, 8589934592), (30, 536870912), (31, 1073741824), (32, 67108864), (33, 67108864), (34, 33554432), (35, 67108864), (36, 1073741824), (37, 134217728), (38, 134217728), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 65536), (36, 524288), (37, 65536), (38, 0), (39, -1)]

Covered at level 4 : {32, 33, 34, 38, 26, 27, 28, 30, 31}

After reduction : 
 pending  : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29]


Before reduction : 
 pending  : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 65536), (36, 524288), (37, 65536), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29]


Solution : [0, 1, 16, 29] has cost 28.


Decide in level 4 among pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [17, 18, 20, 21, 4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 15]


New level: 5
 pending : [17, 18, 20, 21, 4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 15]


Before reduction : 
 pending  : [17, 18, 20, 21, 4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

Covered at level 5 : {17, 18, 20, 21}

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 15]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 15]


Solution : [0, 1, 16, 29, 15] has cost 34.


Before backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 15]

After backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21]
 solution : [0, 1, 16, 29, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21]
 solution : [0, 1, 16, 29]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21]
 solution : [0, 1, 16, 29]

Essensial at level 5 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

Covered at level 5 : {18, 20, 21}

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 17]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 17]


Solution : [0, 1, 16, 29, 17] has cost 34.


Before backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5]
 solution : [0, 1, 16, 29, 17]

After backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21]
 solution : [0, 1, 16, 29]


Before backtrack at level 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21]
 solution : [0, 1, 16, 29]

After backtrack at level 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16, 29]


Invert decision for 29 at level 3


New level: 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 4194304), (6, 524288), (7, 65536), (8, 524288), (9, 65536), (10, 65536), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 65536), (36, 524288), (37, 65536), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 8589934592), (6, 1073741824), (7, 134217728), (8, 536870912), (9, 67108864), (10, 67108864), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 536870912), (27, 33554432), (28, 33554432), (29, -1), (30, 536870912), (31, 1073741824), (32, 67108864), (33, 67108864), (34, 33554432), (35, 67108864), (36, 1073741824), (37, 134217728), (38, 134217728), (39, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16]


Solution : [0, 1, 16] has cost 19.


Decide in level 4 among pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 5, 17, 18, 20, 21, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 8589934592), (6, 1073741824), (7, 134217728), (8, 536870912), (9, 67108864), (10, 67108864), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 536870912), (27, 33554432), (28, 33554432), (29, -1), (30, 536870912), (31, 1073741824), (32, 67108864), (33, 67108864), (34, 33554432), (35, 67108864), (36, 1073741824), (37, 134217728), (38, 134217728), (39, -1)]

Decide 5 with phase True at level 4

After decision at level 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 17, 18, 20, 21, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16, 5]


New level: 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 17, 18, 20, 21, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16, 5]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 17, 18, 20, 21, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 8589934592), (6, 1073741824), (7, 134217728), (8, 536870912), (9, 67108864), (10, 67108864), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 536870912), (27, 33554432), (28, 33554432), (29, -1), (30, 536870912), (31, 1073741824), (32, 67108864), (33, 67108864), (34, 33554432), (35, 67108864), (36, 1073741824), (37, 134217728), (38, 134217728), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, 0), (37, 0), (38, 0), (39, -1)]

Covered at level 5 : {32, 33, 34, 35, 4, 36, 6, 7, 8, 9, 10, 37, 38, 26, 27, 28, 30, 31}

After reduction : 
 pending  : [17, 18, 20, 21, 15]
 solution : [0, 1, 16, 5]


Before reduction : 
 pending  : [17, 18, 20, 21, 15]
 solution : [0, 1, 16, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, 0), (37, 0), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [17, 18, 20, 21, 15]
 solution : [0, 1, 16, 5]


Solution : [0, 1, 16, 5] has cost 28.


Decide in level 5 among pending : [17, 18, 20, 21, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Decide 15 with phase True at level 5

After decision at level 5
 pending : [17, 18, 20, 21]
 solution : [0, 1, 16, 5, 15]


New level: 6
 pending : [17, 18, 20, 21]
 solution : [0, 1, 16, 5, 15]


Before reduction : 
 pending  : [17, 18, 20, 21]
 solution : [0, 1, 16, 5, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 6 : {17, 18, 20, 21}

After reduction : 
 pending  : []
 solution : [0, 1, 16, 5, 15]


Before reduction : 
 pending  : []
 solution : [0, 1, 16, 5, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 16, 5, 15]


Solution : [0, 1, 16, 5, 15] has cost 34.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 16, 5, 15]

After backtrack at level 6
 pending : [17, 18, 20, 21]
 solution : [0, 1, 16, 5, 15]


Invert decision for 15 at level 5


New level: 6
 pending : [17, 18, 20, 21]
 solution : [0, 1, 16, 5]


Before reduction : 
 pending  : [17, 18, 20, 21]
 solution : [0, 1, 16, 5]

Essensial at level 6 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 6 : {18, 20, 21}

After reduction : 
 pending  : []
 solution : [0, 1, 16, 5, 17]


Before reduction : 
 pending  : []
 solution : [0, 1, 16, 5, 17]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 16, 5, 17]


Solution : [0, 1, 16, 5, 17] has cost 34.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 16, 5, 17]

After backtrack at level 6
 pending : [17, 18, 20, 21]
 solution : [0, 1, 16, 5]


Before backtrack at level 5
 pending : [17, 18, 20, 21]
 solution : [0, 1, 16, 5]

After backtrack at level 5
 pending : [17, 18, 20, 21, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16, 5]


Invert decision for 5 at level 4


New level: 5
 pending : [17, 18, 20, 21, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16]


Before reduction : 
 pending  : [17, 18, 20, 21, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 15]
 solution : [0, 1, 16]

Essensial at level 5 : {4, 36}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, -1), (37, 0), (38, 0), (39, -1)]

Covered at level 5 : {32, 33, 34, 35, 37, 6, 7, 8, 9, 10, 38, 26, 27, 28, 30, 31}

After reduction : 
 pending  : [17, 18, 20, 21, 15]
 solution : [0, 1, 16, 4, 36]


Before reduction : 
 pending  : [17, 18, 20, 21, 15]
 solution : [0, 1, 16, 4, 36]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, -1), (37, 0), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [17, 18, 20, 21, 15]
 solution : [0, 1, 16, 4, 36]


Solution : [0, 1, 16, 4, 36] has cost 37.


Before backtrack at level 5
 pending : [17, 18, 20, 21, 15]
 solution : [0, 1, 16, 4, 36]

After backtrack at level 5
 pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 16]


Before backtrack at level 4
 pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 16]

After backtrack at level 4
 pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5]
 solution : [0, 1, 16]


Before backtrack at level 3
 pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5]
 solution : [0, 1, 16]

After backtrack at level 3
 pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 16]


Invert decision for 16 at level 2


New level: 3
 pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1]


Before reduction : 
 pending  : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 4194304), (16, -1), (17, 524288), (18, 524288), (19, -1), (20, 65536), (21, 65536), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, -1), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1]


Solution : [0, 1] has cost 13.


Decide in level 3 among pending : [17, 18, 20, 21, 15, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, -1), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [17, 18, 20, 21, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]


New level: 4
 pending : [17, 18, 20, 21, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]


Before reduction : 
 pending  : [17, 18, 20, 21, 4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 17179869184), (5, 137438953472), (6, 17179869184), (7, 2147483648), (8, 17179869184), (9, 2147483648), (10, 2147483648), (11, 17179869184), (12, 2147483648), (13, 2147483648), (14, 2147483648), (15, 137438953472), (16, -1), (17, 17179869184), (18, 17179869184), (19, 17179869184), (20, 2147483648), (21, 2147483648), (22, 17179869184), (23, 17179869184), (24, 2147483648), (25, 2147483648), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 2147483648), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 8589934592), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, 0), (18, 0), (19, 1073741824), (20, 0), (21, 0), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 4 : {17, 18, 20, 21}

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 8589934592), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, 0), (18, 0), (19, 1073741824), (20, 0), (21, 0), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 8589934592), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, -1), (19, 1073741824), (20, -1), (21, -1), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]


Solution : [0, 1, 15] has cost 19.


Decide in level 4 among pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 8589934592), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, -1), (19, 1073741824), (20, -1), (21, -1), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Decide 5 with phase True at level 4

After decision at level 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15, 5]


New level: 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15, 5]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 8589934592), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, -1), (19, 1073741824), (20, -1), (21, -1), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, 0), (37, 0), (38, 0), (39, -1)]

Covered at level 5 : {4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38}

After reduction : 
 pending  : []
 solution : [0, 1, 15, 5]


Before reduction : 
 pending  : []
 solution : [0, 1, 15, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, 0), (37, 0), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 15, 5]


Solution : [0, 1, 15, 5] has cost 28.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 15, 5]

After backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15, 5]


Invert decision for 5 at level 4


New level: 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]

Essensial at level 5 : {4, 36}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, -1), (37, 0), (38, 0), (39, -1)]

Covered at level 5 : {6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38}

After reduction : 
 pending  : []
 solution : [0, 1, 15, 4, 36]


Before reduction : 
 pending  : []
 solution : [0, 1, 15, 4, 36]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, -1), (37, 0), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 15, 4, 36]


Solution : [0, 1, 15, 4, 36] has cost 37.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 15, 4, 36]

After backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]


Before backtrack at level 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29]
 solution : [0, 1, 15]

After backtrack at level 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29, 17, 18, 20, 21, 5]
 solution : [0, 1, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29, 17, 18, 20, 21, 5]
 solution : [0, 1]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29, 17, 18, 20, 21, 5]
 solution : [0, 1]

Essensial at level 4 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 17179869184), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, 0), (19, 1073741824), (20, 0), (21, 0), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 4 : {18, 20, 21}

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29, 5]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29, 5]
 solution : [0, 1, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 17179869184), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, 0), (19, 1073741824), (20, 0), (21, 0), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 17179869184), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, -1), (19, 1073741824), (20, -1), (21, -1), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29, 5]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 19.


Decide in level 4 among pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 29, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 17179869184), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, -1), (19, 1073741824), (20, -1), (21, -1), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Decide 29 with phase True at level 4

After decision at level 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 5]
 solution : [0, 1, 17, 29]


New level: 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 5]
 solution : [0, 1, 17, 29]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 26, 27, 28, 30, 31, 32, 33, 34, 38, 11, 12, 13, 14, 19, 22, 23, 24, 25, 5]
 solution : [0, 1, 17, 29]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 17179869184), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, -1), (19, 1073741824), (20, -1), (21, -1), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, 137438953472), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 268435456), (6, 8388608), (7, 65536), (8, 16777216), (9, 65536), (10, 65536), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, -1), (16, -1), (17, -1), (18, -1), (19, 524288), (20, -1), (21, -1), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 1048576), (36, 8388608), (37, 1048576), (38, 0), (39, -1)]

Covered at level 5 : {32, 33, 34, 38, 26, 27, 28, 30, 31}

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 5]
 solution : [0, 1, 17, 29]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 5]
 solution : [0, 1, 17, 29]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 268435456), (6, 8388608), (7, 65536), (8, 16777216), (9, 65536), (10, 65536), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, -1), (16, -1), (17, -1), (18, -1), (19, 524288), (20, -1), (21, -1), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 1048576), (36, 8388608), (37, 1048576), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 268435456), (6, 8388608), (7, 65536), (8, 16777216), (9, 65536), (10, 65536), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, -1), (16, -1), (17, -1), (18, -1), (19, 524288), (20, -1), (21, -1), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 1048576), (36, 8388608), (37, 1048576), (38, -1), (39, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 5]
 solution : [0, 1, 17, 29]


Solution : [0, 1, 17, 29] has cost 28.


Decide in level 5 among pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 268435456), (6, 8388608), (7, 65536), (8, 16777216), (9, 65536), (10, 65536), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, -1), (16, -1), (17, -1), (18, -1), (19, 524288), (20, -1), (21, -1), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 1048576), (36, 8388608), (37, 1048576), (38, -1), (39, -1)]

Decide 5 with phase True at level 5

After decision at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25]
 solution : [0, 1, 17, 29, 5]


New level: 6
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25]
 solution : [0, 1, 17, 29, 5]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25]
 solution : [0, 1, 17, 29, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 524288), (5, 268435456), (6, 8388608), (7, 65536), (8, 16777216), (9, 65536), (10, 65536), (11, 524288), (12, 65536), (13, 65536), (14, 65536), (15, -1), (16, -1), (17, -1), (18, -1), (19, 524288), (20, -1), (21, -1), (22, 524288), (23, 524288), (24, 65536), (25, 65536), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 1048576), (36, 8388608), (37, 1048576), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 0), (36, 0), (37, 0), (38, -1), (39, -1)]

Covered at level 6 : {35, 4, 36, 6, 7, 8, 9, 10, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 29, 5]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 29, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 0), (36, 0), (37, 0), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 29, 5]


Solution : [0, 1, 17, 29, 5] has cost 37.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 17, 29, 5]

After backtrack at level 6
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25]
 solution : [0, 1, 17, 29, 5]


Invert decision for 5 at level 5


New level: 6
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25]
 solution : [0, 1, 17, 29]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25]
 solution : [0, 1, 17, 29]

Essensial at level 6 : {4, 36}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 0), (36, -1), (37, 0), (38, -1), (39, -1)]

Covered at level 6 : {35, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 22, 23, 24, 25}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 29, 4, 36]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 29, 4, 36]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, 0), (36, -1), (37, 0), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 29, 4, 36]


Solution : [0, 1, 17, 29, 4, 36] has cost 46.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 17, 29, 4, 36]

After backtrack at level 6
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25]
 solution : [0, 1, 17, 29]


Before backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25]
 solution : [0, 1, 17, 29]

After backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5]
 solution : [0, 1, 17, 29]


Invert decision for 29 at level 4


New level: 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5]
 solution : [0, 1, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 17179869184), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, -1), (19, 1073741824), (20, -1), (21, -1), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, -1), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5]
 solution : [0, 1, 17]


Solution : [0, 1, 17] has cost 19.


Decide in level 5 among pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 17179869184), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, -1), (19, 1073741824), (20, -1), (21, -1), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, -1), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

Decide 5 with phase True at level 5

After decision at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 17, 5]


New level: 6
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 17, 5]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 17, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1073741824), (5, 137438953472), (6, 17179869184), (7, 134217728), (8, 17179869184), (9, 67108864), (10, 67108864), (11, 536870912), (12, 67108864), (13, 67108864), (14, 67108864), (15, -1), (16, -1), (17, -1), (18, -1), (19, 1073741824), (20, -1), (21, -1), (22, 1073741824), (23, 1073741824), (24, 134217728), (25, 134217728), (26, 17179869184), (27, 2147483648), (28, 2147483648), (29, -1), (30, 17179869184), (31, 17179869184), (32, 2147483648), (33, 2147483648), (34, 2147483648), (35, 1073741824), (36, 17179869184), (37, 2147483648), (38, 2147483648), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, 0), (37, 0), (38, 0), (39, -1)]

Covered at level 6 : {4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 5]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, 0), (37, 0), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 5]


Solution : [0, 1, 17, 5] has cost 28.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 17, 5]

After backtrack at level 6
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 17, 5]


Invert decision for 5 at level 5


New level: 6
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 17]


Before reduction : 
 pending  : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 17]

Essensial at level 6 : {4, 36}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, -1), (37, 0), (38, 0), (39, -1)]

Covered at level 6 : {6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38}

After reduction : 
 pending  : []
 solution : [0, 1, 17, 4, 36]


Before reduction : 
 pending  : []
 solution : [0, 1, 17, 4, 36]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 0), (36, -1), (37, 0), (38, 0), (39, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 17, 4, 36]


Solution : [0, 1, 17, 4, 36] has cost 37.


Before backtrack at level 6
 pending : []
 solution : [0, 1, 17, 4, 36]

After backtrack at level 6
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 17]


Before backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38]
 solution : [0, 1, 17]

After backtrack at level 5
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5]
 solution : [0, 1, 17]


Before backtrack at level 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5]
 solution : [0, 1, 17]

After backtrack at level 4
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 17, 18, 20, 21, 29]
 solution : [0, 1]


Before backtrack at level 3
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 17, 18, 20, 21, 29]
 solution : [0, 1]

After backtrack at level 3
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 17, 18, 20, 21, 29, 15]
 solution : [0, 1]


Before backtrack at level 2
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 17, 18, 20, 21, 29, 15]
 solution : [0, 1]

After backtrack at level 2
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 17, 18, 20, 21, 29, 15, 16]
 solution : [0, 1]


Before backtrack at level 1
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 17, 18, 20, 21, 29, 15, 16]
 solution : [0, 1]

After backtrack at level 1
 pending : [4, 36, 6, 7, 8, 9, 10, 35, 37, 11, 12, 13, 14, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 38, 5, 17, 18, 20, 21, 29, 15, 16, 3]
 solution : [0, 1]


========================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=4]

========================================================================================================================

[MIN NOTE]: number of minimal solution found: 2

[MIN NOTE]: upper bound: 28

[MIN NOTE]: maximum branch and bound depth: 6

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 15, 5]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall NODE0,NODE2,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) # qcost: 8

invariant [invar_1] forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_15] forall NODE0,NSET0. voted(NODE0,NODE0) | quorum = NSET0 | ~isleader(NODE0) | member(NODE0,NSET0) # qcost: 6

invariant [invar_5] forall NODE0,NODE1,NSET0. voted(NODE1,NODE0) | ~isleader(NODE0) | ~member(NODE0,NSET0) | member(NODE1,NSET0) | quorum = NSET0 | NODE0 = NODE1 # qcost: 9

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 28




[MIN NOTE]: Solution 1 : [0, 1, 17, 5]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall NODE0,NODE2,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE2) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) # qcost: 8

invariant [invar_1] forall NODE0,NODE1. ~voted(NODE0,NODE1) | ~voted(NODE0,NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_17] forall NODE0,NSET0. voted(NODE0,NODE0) | ~member(NODE0,NSET0) | ~isleader(NODE0) | quorum ~= NSET0 # qcost: 6

invariant [invar_5] forall NODE0,NODE1,NSET0. voted(NODE1,NODE0) | ~isleader(NODE0) | ~member(NODE0,NSET0) | member(NODE1,NSET0) | quorum = NSET0 | NODE0 = NODE1 # qcost: 9

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 28




[QRM NOTE]: Time elapsed since start: 0.859 seconds

[QRM NOTE]: Time elapsed since last: 0.216 seconds

[QRM NOTE]: Peak memory: 2788733 bytes


*************************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.ivy: node=4]

*************************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_4.0.ivy -s node=5 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/quorum-leader-election-wo-maj.node_4.0.ivy: node=5]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 40

[FW NOTE]: number of interpreted atoms (e.g. member,le): 50

[FW NOTE]: symmetric group order: 120

[QRM NOTE]: Time elapsed since start: 0.608 seconds

[QRM NOTE]: Time elapsed since last: 0.608 seconds

[QRM NOTE]: Peak memory: 1266278 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

