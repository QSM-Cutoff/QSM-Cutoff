
************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.ivy

************************************************************************


******************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

******************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=2,value=1 -f 1 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

============================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 3

ivy_to_cpp target=qrm toy_consensus_epr.node_2_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_2_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_2_value_1.finite.cpp toy_consensus_epr.node_2_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_2_value_1.finite.o toy_consensus_epr.node_2_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.782 seconds

[QRM NOTE]: Time elapsed since last: 7.782 seconds

[QRM NOTE]: Peak memory: 1177653 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        5

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 1


===================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

===================================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0']
sort: quorum=['quorum__node0_node1']
predicate: voted('node',)
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'voted(node0)', 'voted(node1)']
representative states : 3, 23, 191, 255


=== State Orbit 0 =====================
size : 1
repr state: 000000
lex min decimal: 3
states:
000000




=== State Orbit 1 =====================
size : 2
repr state: 001010
lex min decimal: 23
states:
001010
000101




=== State Orbit 2 =====================
size : 1
repr state: 101111
lex min decimal: 191
states:
101111




=== State Orbit 3 =====================
size : 1
repr state: 111111
lex min decimal: 255
states:
111111



[QRM NOTE]: Time elapsed since start: 7.915 seconds

[QRM NOTE]: Time elapsed since last: 0.133 seconds

[QRM NOTE]: Peak memory: 1205215 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.922 seconds

[QRM NOTE]: Time elapsed since last: 0.007 seconds

[QRM NOTE]: Peak memory: 154860 bytes


===================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

===================================================================================================================


==============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : --1-0-
0     : ['vote(node0,value0)', '~voted(node0)']
1     : ---1-0
1     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-0--
2     : ['decided(value0)', '~vote(node1,value0)']
3     : -10---
3     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01----
4     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : -1--0-
5     : ['decided(value0)', '~voted(node0)']
6     : -1---0
6     : ['decided(value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1-0---
7     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
8     : 1--0--
8     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
9 (*) : 1---0-
9     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
10     : 1----0
10     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --0-1-
11     : ['voted(node0)', '~vote(node0,value0)']
12     : ---0-1
12     : ['voted(node1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : 0--11-
13     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)']
14     : 0-1--1
14     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
15 (*) : 0-11--
15     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
16 (*) : 0---11
16     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 10

[PRIME NOTE]: number of primes: 17

[QRM NOTE]: Time elapsed since start: 7.942 seconds

[QRM NOTE]: Time elapsed since last: 0.020 seconds

[QRM NOTE]: Peak memory: 1235937 bytes


========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

========================================================================================================

definition primes: {8, 4}


New level: 0
 pending : [0, 1, 2, 3, 5, 6, 7, 9]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 5, 6, 7, 9]
 solution : []

Essensial at level 0 : {0, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0)]

Covered at level 0 : {9, 5, 7}

After reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]


Before reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0)]

After removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]

[QRM NOTE]: Time elapsed since start: 7.952 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 190128 bytes


============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : --1-0-
0     : ['vote(node0,value0)', '~voted(node0)']
1     : ---1-0
1     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', '~voted(node0)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', '~voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --0-1-
11     : ['voted(node0)', '~vote(node0,value0)']
12     : ---0-1
12     : ['voted(node1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$vote$1$0]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0', 'value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$vote': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-0--
2     : ['decided(value0)', '~vote(node1,value0)']
3     : -10---
3     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

part_sig: ('node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0)


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01----
4     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$chosenAt$1$0, value$0$decided$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$chosenAt$1$0}

part_sig: ('quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',))), 'decided': (EnumeratedSort('value', ('value0',)),)}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$chosenAt$1$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0]}

	identical_single_classes: {'quorum$1$chosenAt$0': quorum$1$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : -1--0-
5     : ['decided(value0)', '~voted(node0)']
6     : -1---0
6     : ['decided(value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

part_sig: ('node$1$voted$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0)


======================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

======================================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : --1-0-
0     : ['vote(node0,value0)', '~voted(node0)']
1     : ---1-0
1     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --0-1-
11     : ['voted(node0)', '~vote(node0,value0)']
12     : ---0-1
12     : ['voted(node1)', '~vote(node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)
qcost : 4




=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-0--
2     : ['decided(value0)', '~vote(node1,value0)']
3     : -10---
3     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01----
4     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall QUORUM0,VALUE0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : -1--0-
5     : ['decided(value0)', '~voted(node0)']
6     : -1---0
6     : ['decided(value0)', '~voted(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 8.056 seconds

[QRM NOTE]: Time elapsed since last: 0.104 seconds

[QRM NOTE]: Peak memory: 1918897 bytes


=====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

=====================================================================================================


New level: 1
 pending : [1, 2, 3]
 solution : [0, 6]


Before reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]


Solution : [0, 6] has cost 8.


Decide in level 1 among pending : [1, 2, 3]

Coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [1, 3]
 solution : [0, 6, 2]


New level: 2
 pending : [1, 3]
 solution : [0, 6, 2]


Before reduction : 
 pending  : [1, 3]
 solution : [0, 6, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : {1, 3}

After reduction : 
 pending  : []
 solution : [0, 6, 2]


Before reduction : 
 pending  : []
 solution : [0, 6, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 2]


Solution : [0, 6, 2] has cost 12.


Before backtrack at level 2
 pending : []
 solution : [0, 6, 2]

After backtrack at level 2
 pending : [1, 3]
 solution : [0, 6, 2]


Invert decision for 2 at level 1


New level: 2
 pending : [1, 3]
 solution : [0, 6]


Before reduction : 
 pending  : [1, 3]
 solution : [0, 6]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 16), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [1, 3]
 solution : [0, 6]


Solution : [0, 6] has cost 8.


Decide in level 2 among pending : [1, 3]

Coverage : [(0, -1), (1, 16), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Decide 1 with phase True at level 2

After decision at level 2
 pending : [3]
 solution : [0, 6, 1]


New level: 3
 pending : [3]
 solution : [0, 6, 1]


Before reduction : 
 pending  : [3]
 solution : [0, 6, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : {3}

After reduction : 
 pending  : []
 solution : [0, 6, 1]


Before reduction : 
 pending  : []
 solution : [0, 6, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 1]


Solution : [0, 6, 1] has cost 12.


Before backtrack at level 3
 pending : []
 solution : [0, 6, 1]

After backtrack at level 3
 pending : [3]
 solution : [0, 6, 1]


Invert decision for 1 at level 2


New level: 3
 pending : [3]
 solution : [0, 6]


Before reduction : 
 pending  : [3]
 solution : [0, 6]

Essensial at level 3 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 6, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 3]


Solution : [0, 6, 3] has cost 12.


Before backtrack at level 3
 pending : []
 solution : [0, 6, 3]

After backtrack at level 3
 pending : [3]
 solution : [0, 6]


Before backtrack at level 2
 pending : [3]
 solution : [0, 6]

After backtrack at level 2
 pending : [3, 1]
 solution : [0, 6]


Before backtrack at level 1
 pending : [3, 1]
 solution : [0, 6]

After backtrack at level 1
 pending : [3, 1, 2]
 solution : [0, 6]


====================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

====================================================================================================================

[MIN NOTE]: number of minimal solution found: 3

[MIN NOTE]: upper bound: 12

[MIN NOTE]: maximum branch and bound depth: 3

[MIN NOTE]: number of definitions: 1

invariant [def_chosenAt] forall V,Q. chosenAt(Q,V) = (forall N. member(N,Q) -> vote(N,V)) # definition, qcost: 6

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 6, 2]

[MIN NOTE]: solution length: 3

invariant [invar_0] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_6] forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_2] forall QUORUM0,VALUE0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) # qcost: 4

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 18




[MIN NOTE]: Solution 1 : [0, 6, 1]

[MIN NOTE]: solution length: 3

invariant [invar_0] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_6] forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_1] forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0) # qcost: 4

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 18




[MIN NOTE]: Solution 2 : [0, 6, 3]

[MIN NOTE]: solution length: 3

invariant [invar_0] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_6] forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_3] forall NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) # qcost: 4

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 18




[QRM NOTE]: Time elapsed since start: 8.176 seconds

[QRM NOTE]: Time elapsed since last: 0.120 seconds

[QRM NOTE]: Peak memory: 1912283 bytes


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=3,value=1]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_1.finite.cpp toy_consensus_epr.node_3_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_1.finite.o toy_consensus_epr.node_3_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.806 seconds

[QRM NOTE]: Time elapsed since last: 6.806 seconds

[QRM NOTE]: Peak memory: 1182440 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        12

[FW NOTE]: number of dfs representative states:     6

[FW NOTE]: number of dfs non-representative states: 6


====================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=3,value=1]

====================================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
predicate: decided('value',)
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', 'decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 79787, 491435, 524203, 112555


=== State Orbit 0 =====================
size : 1
repr state: 0000000000
lex min decimal: 427
states:
0000000000




=== State Orbit 1 =====================
size : 3
repr state: 0000100100
lex min decimal: 5035
states:
0000010010
0000100100
0000001001




=== State Orbit 2 =====================
size : 3
repr state: 1000110110
lex min decimal: 79787
states:
0100101101
1000110110
0010011011




=== State Orbit 3 =====================
size : 1
repr state: 1110111111
lex min decimal: 491435
states:
1110111111




=== State Orbit 4 =====================
size : 1
repr state: 1111111111
lex min decimal: 524203
states:
1111111111




=== State Orbit 5 =====================
size : 3
repr state: 1001110110
lex min decimal: 112555
states:
1001110110
0101101101
0011011011



[QRM NOTE]: Time elapsed since start: 6.892 seconds

[QRM NOTE]: Time elapsed since last: 0.085 seconds

[QRM NOTE]: Peak memory: 1214489 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=3,value=1]

=========================================================================================================================================================

Representatitive states in reachability not in Rmin

{112555}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.969 seconds

[QRM NOTE]: Time elapsed since last: 0.077 seconds

[QRM NOTE]: Peak memory: 206024 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy -s node=2,value=2 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=2,value=2]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 4

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm toy_consensus_epr.node_2_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_2_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_2_value_2.finite.cpp toy_consensus_epr.node_2_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_2_value_2.finite.o toy_consensus_epr.node_2_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.510 seconds

[QRM NOTE]: Time elapsed since last: 7.510 seconds

[QRM NOTE]: Peak memory: 1179051 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        11

[FW NOTE]: number of dfs representative states:     5

[FW NOTE]: number of dfs non-representative states: 6


====================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=2,value=2]

====================================================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1']
predicate: voted('node',)
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'voted(node0)', 'voted(node1)']
representative states : 3, 23, 1119, 1375, 111


=== State Orbit 0 =====================
size : 1
repr state: 0000000000
lex min decimal: 3
states:
0000000000




=== State Orbit 1 =====================
size : 4
repr state: 0000100010
lex min decimal: 23
states:
0000010010
0000100010
0000000101
0000001001




=== State Orbit 2 =====================
size : 2
repr state: 1000101011
lex min decimal: 1119
states:
1000101011
0100010111




=== State Orbit 3 =====================
size : 2
repr state: 1010101011
lex min decimal: 1375
states:
0101010111
1010101011




=== State Orbit 4 =====================
size : 2
repr state: 0000100111
lex min decimal: 111
states:
0000100111
0000011011



[QRM NOTE]: Time elapsed since start: 7.591 seconds

[QRM NOTE]: Time elapsed since last: 0.081 seconds

[QRM NOTE]: Peak memory: 1209094 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=2,value=2]

=========================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 4095, binary: 1111111111

Found a representative state in Rmin not in reachability: decimal: 3583, binary: 1101111111

Found a representative state in Rmin not in reachability: decimal: 3327, binary: 1100111111

Found a representative state in Rmin not in reachability: decimal: 55, binary: 0000001101

Representatitive states in reachability not in Rmin

{1375, 23, 1119, 111}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.622 seconds

[QRM NOTE]: Time elapsed since last: 0.031 seconds

[QRM NOTE]: Peak memory: 175025 bytes

next size: node=3,value=2


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy -s node=3,value=1 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: node=3,value=1]

=========================================================================================================================================================

Representatitive states in reachability not in Rmin

{112555}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.092 seconds

[QRM NOTE]: Time elapsed since last: 0.092 seconds

[QRM NOTE]: Peak memory: 46719 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy -s node=2,value=2 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: node=2,value=2]

=========================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 4095, binary: 1111111111

Found a representative state in Rmin not in reachability: decimal: 3583, binary: 1101111111

Found a representative state in Rmin not in reachability: decimal: 3327, binary: 1100111111

Found a representative state in Rmin not in reachability: decimal: 55, binary: 0000001101

Representatitive states in reachability not in Rmin

{1375, 23, 1119, 111}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.053 seconds

[QRM NOTE]: Time elapsed since last: 0.053 seconds

[QRM NOTE]: Peak memory: 22093 bytes

next size: node=3,value=2


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy -s node=3,value=1 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: node=3,value=1]

=========================================================================================================================================================

Representatitive states in reachability not in Rmin

{112555}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.091 seconds

[QRM NOTE]: Time elapsed since last: 0.091 seconds

[QRM NOTE]: Peak memory: 46655 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy -s node=2,value=2 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: node=2,value=2]

=========================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 4095, binary: 1111111111

Found a representative state in Rmin not in reachability: decimal: 3583, binary: 1101111111

Found a representative state in Rmin not in reachability: decimal: 3327, binary: 1100111111

Found a representative state in Rmin not in reachability: decimal: 55, binary: 0000001101

Representatitive states in reachability not in Rmin

{1375, 23, 1119, 111}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.053 seconds

[QRM NOTE]: Time elapsed since last: 0.053 seconds

[QRM NOTE]: Peak memory: 21997 bytes

next size: node=3,value=2


******************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

******************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=3,value=2 -f 1 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

============================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 12

[FW NOTE]: number of branching actions: 12

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_2.finite.cpp toy_consensus_epr.node_3_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_2.finite.o toy_consensus_epr.node_3_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.718 seconds

[QRM NOTE]: Time elapsed since last: 6.718 seconds

[QRM NOTE]: Peak memory: 1185511 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        41

[FW NOTE]: number of dfs representative states:     9

[FW NOTE]: number of dfs non-representative states: 32


===================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

===================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
predicate: voted('node',)
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 1071019, 22110123, 22372267, 1204139, 1466283, 1333163, 26539


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000000
lex min decimal: 427
states:
00000000000000000




=== State Orbit 1 =====================
size : 6
repr state: 00000000100000100
lex min decimal: 5035
states:
00000000100000100
00000000000100010
00000000010000100
00000000001000010
00000000000010001
00000000000001001




=== State Orbit 2 =====================
size : 6
repr state: 10000000101000110
lex min decimal: 1071019
states:
00000100000101011
01000000010100110
00100000100010101
10000000101000110
00010000010001101
00001000001010011




=== State Orbit 3 =====================
size : 2
repr state: 10101000101010111
lex min decimal: 22110123
states:
01010100010101111
10101000101010111




=== State Orbit 4 =====================
size : 2
repr state: 10101010101010111
lex min decimal: 22372267
states:
01010101010101111
10101010101010111




=== State Orbit 5 =====================
size : 6
repr state: 10000000101001111
lex min decimal: 1204139
states:
00010000011001111
00001000011010111
01000000010110111
00100000100110111
10000000101001111
00000100100101111




=== State Orbit 6 =====================
size : 6
repr state: 10000010101001111
lex min decimal: 1466283
states:
00001010011010111
00100010100110111
10000010101001111
00000101100101111
00010001011001111
01000001010110111




=== State Orbit 7 =====================
size : 6
repr state: 10000010101000110
lex min decimal: 1333163
states:
10000010101000110
01000001010100110
00010001010001101
00100010100010101
00000101000101011
00001010001010011




=== State Orbit 8 =====================
size : 6
repr state: 00000000100100110
lex min decimal: 26539
states:
00000000001001011
00000000011000110
00000000100100110
00000000010010101
00000000100001101
00000000000110011



[QRM NOTE]: Time elapsed since start: 6.830 seconds

[QRM NOTE]: Time elapsed since last: 0.113 seconds

[QRM NOTE]: Peak memory: 1229739 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.832 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 186588 bytes


===================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

===================================================================================================================


==============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 12
num_suborbits: 1
0 (*) : -----1----------0
0     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node2)']
1     : ----1-----------0
1     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node2)']
2     : -----1---------0-
2     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node1)']
3     : ----1----------0-
3     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node1)']
4     : ---1------------0
4     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node2)']
5     : --1-------------0
5     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node2)']
6     : ---1----------0--
6     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node0)']
7     : --1-----------0--
7     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node0)']
8     : -1-------------0-
8     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node1)']
9     : 1--------------0-
9     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
10     : -1------------0--
10     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node0)']
11     : 1-------------0--
11     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : --1----1---------
18     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
19     : ---1--1----------
19     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
20     : 1------1---------
20     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
21     : -1----1----------
21     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
22     : ----1--1---------
22     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
23     : -----11----------
23     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
24 (*) : ------11---------
24     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 9
num_suborbits: 2
25 (*) : ----11-----------
25     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
26     : --11-------------
26     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
27     : 11---------------
27     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
28 (*) : --1--1-----------
28     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
29     : ---11------------
29     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
30     : 1----1-----------
30     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
31     : -1--1------------
31     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
32     : 1--1-------------
32     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
33     : -11--------------
33     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
34 (*) : -----1------1----
34     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
35     : ----1--------1---
35     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
36     : -----1----1------
36     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
37     : ----1------1-----
37     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
38     : ---1--------1----
38     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
39     : --1----------1---
39     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
40     : ---1----1--------
40     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
41     : --1------1-------
41     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
42     : -1--------1------
42     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
43     : 1----------1-----
43     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
44     : -1------1--------
44     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
45     : 1--------1-------
45     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 1
46 (*) : -----1-----0-----
46     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
47     : ----1-----0------
47     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
48     : -----1-------0---
48     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
49     : ----1-------0----
49     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
50     : ---1-----0-------
50     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
51     : --1-----0--------
51     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
52     : ---1---------0---
52     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
53     : --1---------0----
53     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
54     : -1-------0-------
54     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
55     : 1-------0--------
55     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
56     : -1---------0-----
56     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
57     : 1---------0------
57     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
58 (*) : ----------11-----
58     : ['vote(node1,value0)', 'vote(node1,value1)']
59     : ------------11---
59     : ['vote(node2,value0)', 'vote(node2,value1)']
60     : --------11-------
60     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 12
num_suborbits: 1
61 (*) : 1-0---------1----
61     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
62     : -1-0---------1---
62     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
63     : 0-1-------1------
63     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
64     : -0-1-------1-----
64     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
65     : 1---0-------1----
65     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
66     : -1---0-------1---
66     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
67     : 0---1---1--------
67     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
68     : -0---1---1-------
68     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
69     : --1-0-----1------
69     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
70     : ---1-0-----1-----
70     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
71     : --0-1---1--------
71     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
72     : ---0-1---1-------
72     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
73 (*) : --0-----1---1----
73     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
74     : ---0-----1---1---
74     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
75     : 0-------1-1------
75     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
76     : -0-------1-1-----
76     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
77     : ----0-----1-1----
77     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
78     : -----0-----1-1---
78     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
79 (*) : -0-----1----1----
79     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
80     : 0-----1------1---
80     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
81     : ---0---1--1------
81     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
82     : --0---1----1-----
82     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
83     : -----0-11--------
83     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
84     : ----0-1--1-------
84     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 12
num_suborbits: 1
85 (*) : -------1---01----
85     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
86     : ------1---0--1---
86     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
87     : -------1--1--0---
87     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
88     : ------1----10----
88     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
89     : -------1-0--1----
89     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
90     : ------1-0----1---
90     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
91     : -------11----0---
91     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
92     : ------1--1--0----
92     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
93     : -------1-01------
93     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
94     : ------1-0--1-----
94     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
95     : -------11--0-----
95     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
96     : ------1--10------
96     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
97 (*) : -------11---1----
97     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
98     : ------1--1---1---
98     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
99     : -------11-1------
99     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
100     : ------1--1-1-----
100     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
101     : -------1--1-1----
101     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
102     : ------1----1-1---
102     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 12
num_suborbits: 1
103 (*) : -------1----1-0--
103     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
104     : ------1------10--
104     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
105     : -------1--1---0--
105     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
106     : ------1----1--0--
106     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
107     : -------1----1--0-
107     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
108     : ------1------1-0-
108     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
109     : -------11------0-
109     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
110     : ------1--1-----0-
110     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
111     : -------1--1-----0
111     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
112     : ------1----1----0
112     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
113     : -------11-------0
113     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
114     : ------1--1------0
114     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
115 (*) : -0-----1-----0---
115     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
116     : 0-----1-----0----
116     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
117     : ---0---1---0-----
117     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
118     : --0---1---0------
118     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
119     : -----0-1-0-------
119     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
120     : ----0-1-0--------
120     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
121 (*) : -------1---0-0---
121     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
122     : ------1---0-0----
122     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
123     : -------1-0---0---
123     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
124     : ------1-0---0----
124     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
125     : -------1-0-0-----
125     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
126     : ------1-0-0------
126     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : ---0---1-------0-
127     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
128     : --0---1--------0-
128     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
129     : -0-----1--------0
129     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
130     : 0-----1---------0
130     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
131     : -----0-1------0--
131     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
132     : ----0-1-------0--
132     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
133 (*) : -------1-----0-0-
133     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
134     : ------1-----0--0-
134     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
135     : -------1---0----0
135     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
136     : ------1---0-----0
136     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
137     : -------1-----00--
137     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
138     : ------1-----0-0--
138     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
139     : -------1-0------0
139     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
140     : ------1-0-------0
140     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
141     : -------1---0--0--
141     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
142     : ------1---0---0--
142     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
143     : -------1-0-----0-
143     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
144     : ------1-0------0-
144     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
145 (*) : -------1------00-
145     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
146     : ------1-------00-
146     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
147     : -------1------0-0
147     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
148     : ------1-------0-0
148     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
149     : -------1-------00
149     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
150     : ------1--------00
150     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 3
num_suborbits: 1
151 (*) : ----------00---1-
151     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
152     : ------------00--1
152     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
153     : --------00----1--
153     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
154 (*) : 0-1-1------------
154     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
155     : -0-1-1-----------
155     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
156     : 1-0-1------------
156     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
157     : -1-0-1-----------
157     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
158     : 1-1-0------------
158     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
159     : -1-1-0-----------
159     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 12
num_suborbits: 1
160 (*) : -1-0--------0---1
160     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
161     : 1-0----------0--1
161     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
162     : -0-1------0----1-
162     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)']
163     : 0-1--------0---1-
163     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)']
164     : -1---0------0---1
164     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
165     : 1---0--------0--1
165     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
166     : -0---1--0-----1--
166     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)']
167     : 0---1----0----1--
167     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)']
168     : ---1-0----0----1-
168     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
169     : --1-0------0---1-
169     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
170     : ---0-1--0-----1--
170     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
171     : --0-1----0----1--
171     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 2
num_suborbits: 1
172 (*) : -0-0-0-1---------
172     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
173     : 0-0-0-1----------
173     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
174 (*) : -0---0-1---1-----
174     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
175     : 0---0-1---1------
175     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
176     : ---0-0-1-----1---
176     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
177     : --0-0-1-----1----
177     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
178     : -0-0---1-1-------
178     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
179     : 0-0---1-1--------
179     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 12
num_suborbits: 1
180 (*) : ----0-----1--0--1
180     : ['vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
181     : -----0-----10---1
181     : ['vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
182     : ----0------01--1-
182     : ['vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
183     : -----0----0--1-1-
183     : ['vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
184     : --0-----1----0--1
184     : ['vote(node0,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
185     : ---0-----1--0---1
185     : ['vote(node0,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
186     : --0------0--1-1--
186     : ['vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
187     : ---0----0----11--
187     : ['vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
188     : 0-------1--0---1-
188     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)']
189     : -0-------10----1-
189     : ['vote(node0,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)']
190     : 0--------01---1--
190     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)']
191     : -0------0--1--1--
191     : ['vote(node1,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
192 (*) : 0--0------1--11--
192     : ['vote(node1,value0)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
193     : -00--------11-1--
193     : ['vote(node1,value1)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
194     : 0----0--1----1-1-
194     : ['vote(node0,value0)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)']
195     : -0--0----1--1--1-
195     : ['vote(node0,value1)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)']
196     : --0--0--1--1----1
196     : ['vote(node0,value0)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
197     : ---00----11-----1
197     : ['vote(node0,value1)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
198 (*) : --0-0-1------0--1
198     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
199     : ---0-0-1----0---1
199     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
200     : 0---0-1----0---1-
200     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
201     : -0---0-1--0----1-
201     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
202     : 0-0---1--0----1--
202     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
203     : -0-0---10-----1--
203     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
204 (*) : ---0----0---0-1-1
204     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)']
205     : --0------0---01-1
205     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
206     : -0------0-0---11-
206     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node1,value0)']
207     : 0--------0-0--11-
207     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
208     : -----0----0-0--11
208     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
209     : ----0------0-0-11
209     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
210 (*) : -00--0-----1--1-1
210     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
211     : 0--00-----1---1-1
211     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
212     : 0--0-0-------111-
212     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
213     : -00-0-------1-11-
213     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
214     : -0-00----1-----11
214     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
215     : 0-0--0--1------11
215     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 1
216 (*) : --0--0---0-1--1-1
216     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
217     : ---00---0-1---1-1
217     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
218     : 0----0---0---111-
218     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
219     : -0--0---0---1-11-
219     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
220     : ---00----1-0---11
220     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
221     : --0--0--1-0----11
221     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
222     : 0--0-------0-111-
222     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
223     : -00-------0-1-11-
223     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
224     : -0--0----1---0-11
224     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
225     : 0----0--1---0--11
225     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
226     : -00--------1-01-1
226     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
227     : 0--0------1-0-1-1
227     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
228 (*) : 0-0--0---0----111
228     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
229     : -0-00---0-----111
229     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
230     : 0--00------0--111
230     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
231     : -00--0----0---111
231     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
232     : -00-0--------0111
232     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
233     : 0--0-0------0-111
233     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
234 (*) : --0--0---00---111
234     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node1,value0)']
235     : ---00---0--0--111
235     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node1,value1)']
236     : 0----0---0--0-111
236     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node2,value0)']
237     : -0--0---0----0111
237     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node2,value1)']
238     : 0--0-------00-111
238     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)', '~vote(node2,value0)']
239     : -00-------0--0111
239     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 1
num_suborbits: 1
240 (*) : 000000--------111
240     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 34

[PRIME NOTE]: number of primes: 241

[QRM NOTE]: Time elapsed since start: 6.920 seconds

[QRM NOTE]: Time elapsed since last: 0.088 seconds

[QRM NOTE]: Peak memory: 1521395 bytes


========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

========================================================================================================

definition primes: {8, 9, 20, 6}


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []

Essensial at level 0 : {1, 19, 7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, 0), (1, -1), (2, 32768), (3, 16777216), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, 0), (22, 4194304), (23, 32768), (24, 0), (25, 0), (26, 32768), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

Covered at level 0 : {0, 32, 4, 5, 21, 24, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7]

Essensial at level 0 : set()

Before removed
 coverage : [(0, 0), (1, -1), (2, 32768), (3, 16777216), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, 0), (22, 4194304), (23, 32768), (24, 0), (25, 0), (26, 32768), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, 4194304), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7]

[QRM NOTE]: Time elapsed since start: 6.988 seconds

[QRM NOTE]: Time elapsed since last: 0.069 seconds

[QRM NOTE]: Peak memory: 485617 bytes


============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', '~voted(node2)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', '~voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)


=== Prime Orbit 19 =====================
size : 3
num_suborbits: 1
151 (*) : ----------00---1-
151     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
152     : ------------00--1
152     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
153     : --------00----1--
153     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node1,value0)', '~vote(node1,value1)', 'voted(node1)']

sign_func_name2args: {'1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$1]}

sig2const: {'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~vote(node1,value0)', '~vote(node1,value1)', 'voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 2, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
58 (*) : ----------11-----
58     : ['vote(node1,value0)', 'vote(node1,value1)']
59     : ------------11---
59     : ['vote(node2,value0)', 'vote(node2,value1)']
60     : --------11-------
60     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', 'vote(node1,value1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', 'vote(node1,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : --1----1---------
18     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
19     : ---1--1----------
19     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
20     : 1------1---------
20     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
21     : -1----1----------
21     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
22     : ----1--1---------
22     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
23     : -----11----------
23     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$chosenAt$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decided$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decided$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,VALUE1. ~decided(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
24 (*) : ------11---------
24     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: exists VALUE0. ~decided(VALUE0)


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
79 (*) : -0-----1----1----
79     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
80     : 0-----1------1---
80     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
81     : ---0---1--1------
81     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
82     : --0---1----1-----
82     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
83     : -----0-11--------
83     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
84     : ----0-1--1-------
84     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', 'vote(node2,value0)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', 'vote(node2,value0)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0,VALUE1. ~vote(NODE0,VALUE1) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 11 =====================
size : 12
num_suborbits: 1
85 (*) : -------1---01----
85     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
86     : ------1---0--1---
86     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
87     : -------1--1--0---
87     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
88     : ------1----10----
88     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
89     : -------1-0--1----
89     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
90     : ------1-0----1---
90     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
91     : -------11----0---
91     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
92     : ------1--1--0----
92     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
93     : -------1-01------
93     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
94     : ------1-0--1-----
94     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
95     : -------11--0-----
95     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
96     : ------1--10------
96     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', 'vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', 'vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1,VALUE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
97 (*) : -------11---1----
97     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
98     : ------1--1---1---
98     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
99     : -------11-1------
99     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
100     : ------1--1-1-----
100     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
101     : -------1--1-1----
101     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
102     : ------1----1-1---
102     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE1)', 'vote(NODE0,VALUE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1,VALUE1. ~vote(NODE1,VALUE1) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 13 =====================
size : 12
num_suborbits: 1
103 (*) : -------1----1-0--
103     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
104     : ------1------10--
104     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
105     : -------1--1---0--
105     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
106     : ------1----1--0--
106     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
107     : -------1----1--0-
107     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
108     : ------1------1-0-
108     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
109     : -------11------0-
109     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
110     : ------1--1-----0-
110     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
111     : -------1--1-----0
111     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
112     : ------1----1----0
112     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
113     : -------11-------0
113     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
114     : ------1--1------0
114     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'vote(NODE0,VALUE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1,VALUE1. voted(NODE1) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
115 (*) : -0-----1-----0---
115     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
116     : 0-----1-----0----
116     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
117     : ---0---1---0-----
117     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
118     : --0---1---0------
118     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
119     : -----0-1-0-------
119     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
120     : ----0-1-0--------
120     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0)


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
121 (*) : -------1---0-0---
121     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
122     : ------1---0-0----
122     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
123     : -------1-0---0---
123     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
124     : ------1-0---0----
124     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
125     : -------1-0-0-----
125     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
126     : ------1-0-0------
126     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : ---0---1-------0-
127     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
128     : --0---1--------0-
128     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
129     : -0-----1--------0
129     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
130     : 0-----1---------0
130     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
131     : -----0-1------0--
131     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
132     : ----0-1-------0--
132     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decided(value1)', '~voted(node1)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decided(value1)', '~voted(node1)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. voted(NODE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0)


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
133 (*) : -------1-----0-0-
133     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
134     : ------1-----0--0-
134     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
135     : -------1---0----0
135     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
136     : ------1---0-----0
136     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
137     : -------1-----00--
137     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
138     : ------1-----0-0--
138     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
139     : -------1-0------0
139     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
140     : ------1-0-------0
140     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
141     : -------1---0--0--
141     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
142     : ------1---0---0--
142     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
143     : -------1-0-----0-
143     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
144     : ------1-0------0-
144     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', '~vote(NODE0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. voted(NODE1) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
145 (*) : -------1------00-
145     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
146     : ------1-------00-
146     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
147     : -------1------0-0
147     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
148     : ------1-------0-0
148     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
149     : -------1-------00
149     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
150     : ------1--------00
150     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'decided(VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. voted(NODE1) | ~decided(VALUE0) | voted(NODE0) | NODE0 = NODE1


=== Prime Orbit 22 =====================
size : 2
num_suborbits: 1
172 (*) : -0-0-0-1---------
172     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
173     : 0-0-0-1----------
173     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
174 (*) : -0---0-1---1-----
174     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
175     : 0---0-1---1------
175     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
176     : ---0-0-1-----1---
176     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
177     : --0-0-1-----1----
177     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
178     : -0-0---1-1-------
178     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
179     : 0-0---1-1--------
179     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', 'vote(node1,value1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', 'vote(node1,value1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~chosenAt(QUORUM1,VALUE0)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0,QUORUM1. ~decided(VALUE0) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | QUORUM0 = QUORUM1


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
198 (*) : --0-0-1------0--1
198     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
199     : ---0-0-1----0---1
199     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
200     : 0---0-1----0---1-
200     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
201     : -0---0-1--0----1-
201     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
202     : 0-0---1--0----1--
202     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
203     : -0-0---10-----1--
203     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node2,value1)', 'voted(node2)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$voted$0$0, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node2,value1)', 'voted(node2)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '1$vote': 1, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, 'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', 'decided(VALUE0)', '~chosenAt(QUORUM1,VALUE0)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM0)', '~vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM1,NODE0,QUORUM0,VALUE1. ~voted(NODE0) | ~decided(VALUE0) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | vote(NODE0,VALUE1) | (QUORUM0 = QUORUM1 | VALUE0 = VALUE1)


======================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

======================================================================================================================


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 19 =====================
size : 3
num_suborbits: 1
151 (*) : ----------00---1-
151     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
152     : ------------00--1
152     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
153     : --------00----1--
153     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))
qcost : 4




=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
58 (*) : ----------11-----
58     : ['vote(node1,value0)', 'vote(node1,value1)']
59     : ------------11---
59     : ['vote(node2,value0)', 'vote(node2,value1)']
60     : --------11-------
60     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : --1----1---------
18     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
19     : ---1--1----------
19     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
20     : 1------1---------
20     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
21     : -1----1----------
21     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
22     : ----1--1---------
22     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
23     : -----11----------
23     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,QUORUM0,VALUE1. ~decided(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
24 (*) : ------11---------
24     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists VALUE0. ~decided(VALUE0)
qcost : 2




=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
79 (*) : -0-----1----1----
79     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
80     : 0-----1------1---
80     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
81     : ---0---1--1------
81     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
82     : --0---1----1-----
82     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
83     : -----0-11--------
83     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
84     : ----0-1--1-------
84     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,QUORUM0,VALUE1. ~vote(NODE0,VALUE1) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 11 =====================
size : 12
num_suborbits: 1
85 (*) : -------1---01----
85     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
86     : ------1---0--1---
86     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
87     : -------1--1--0---
87     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
88     : ------1----10----
88     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
89     : -------1-0--1----
89     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
90     : ------1-0----1---
90     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
91     : -------11----0---
91     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
92     : ------1--1--0----
92     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
93     : -------1-01------
93     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
94     : ------1-0--1-----
94     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
95     : -------11--0-----
95     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
96     : ------1--10------
96     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1,VALUE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
97 (*) : -------11---1----
97     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
98     : ------1--1---1---
98     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
99     : -------11-1------
99     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
100     : ------1--1-1-----
100     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
101     : -------1--1-1----
101     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
102     : ------1----1-1---
102     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1,VALUE1. ~vote(NODE1,VALUE1) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 13 =====================
size : 12
num_suborbits: 1
103 (*) : -------1----1-0--
103     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
104     : ------1------10--
104     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
105     : -------1--1---0--
105     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
106     : ------1----1--0--
106     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
107     : -------1----1--0-
107     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
108     : ------1------1-0-
108     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
109     : -------11------0-
109     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
110     : ------1--1-----0-
110     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
111     : -------1--1-----0
111     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
112     : ------1----1----0
112     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
113     : -------11-------0
113     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
114     : ------1--1------0
114     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1,VALUE1. voted(NODE1) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
115 (*) : -0-----1-----0---
115     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
116     : 0-----1-----0----
116     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
117     : ---0---1---0-----
117     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
118     : --0---1---0------
118     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
119     : -----0-1-0-------
119     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
120     : ----0-1-0--------
120     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,QUORUM0. vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0)
qcost : 7




=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
121 (*) : -------1---0-0---
121     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
122     : ------1---0-0----
122     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
123     : -------1-0---0---
123     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
124     : ------1-0---0----
124     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
125     : -------1-0-0-----
125     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
126     : ------1-0-0------
126     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : ---0---1-------0-
127     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
128     : --0---1--------0-
128     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
129     : -0-----1--------0
129     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
130     : 0-----1---------0
130     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
131     : -----0-1------0--
131     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
132     : ----0-1-------0--
132     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,QUORUM0. voted(NODE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0)
qcost : 7




=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
133 (*) : -------1-----0-0-
133     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
134     : ------1-----0--0-
134     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
135     : -------1---0----0
135     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
136     : ------1---0-----0
136     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
137     : -------1-----00--
137     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
138     : ------1-----0-0--
138     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
139     : -------1-0------0
139     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
140     : ------1-0-------0
140     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
141     : -------1---0--0--
141     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
142     : ------1---0---0--
142     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
143     : -------1-0-----0-
143     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
144     : ------1-0------0-
144     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. voted(NODE1) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
145 (*) : -------1------00-
145     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
146     : ------1-------00-
146     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
147     : -------1------0-0
147     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
148     : ------1-------0-0
148     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
149     : -------1-------00
149     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
150     : ------1--------00
150     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. voted(NODE1) | ~decided(VALUE0) | voted(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 22 =====================
size : 2
num_suborbits: 1
172 (*) : -0-0-0-1---------
172     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
173     : 0-0-0-1----------
173     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))
qcost : 4




=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
174 (*) : -0---0-1---1-----
174     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
175     : 0---0-1---1------
175     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
176     : ---0-0-1-----1---
176     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
177     : --0-0-1-----1----
177     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
178     : -0-0---1-1-------
178     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
179     : 0-0---1-1--------
179     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,NODE0,QUORUM0,QUORUM1. ~decided(VALUE0) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
198 (*) : --0-0-1------0--1
198     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
199     : ---0-0-1----0---1
199     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
200     : 0---0-1----0---1-
200     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
201     : -0---0-1--0----1-
201     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
202     : 0-0---1--0----1--
202     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
203     : -0-0---10-----1--
203     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
num_forall :   5
num_exists :   0
num_literals : 9
quantified form : forall VALUE0,QUORUM1,NODE0,QUORUM0,VALUE1. ~voted(NODE0) | ~decided(VALUE0) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | vote(NODE0,VALUE1) | (QUORUM0 = QUORUM1 | VALUE0 = VALUE1)
qcost : 14



[QRM NOTE]: Time elapsed since start: 7.144 seconds

[QRM NOTE]: Time elapsed since last: 0.156 seconds

[QRM NOTE]: Peak memory: 2253087 bytes


=====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

=====================================================================================================


New level: 1
 pending : [2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, 4194304), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, 4194304), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7]


Solution : [1, 19, 7] has cost 11.


Decide in level 1 among pending : [2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, 4194304), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 3 with phase True at level 1

After decision at level 1
 pending : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7, 3]


New level: 2
 pending : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7, 3]


Before reduction : 
 pending  : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7, 3]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, 4194304), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, 1048576), (15, 524288), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, 2097152), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]
 solution : [1, 19, 7, 3]


Solution : [1, 19, 7, 3] has cost 13.


Decide in level 2 among pending : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, 1048576), (15, 524288), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, 2097152), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 22]


New level: 3
 pending : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 22]


Before reduction : 
 pending  : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, 1048576), (15, 524288), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, 2097152), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26}

After reduction : 
 pending  : []
 solution : [1, 19, 7, 3, 22]


Before reduction : 
 pending  : []
 solution : [1, 19, 7, 3, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 19, 7, 3, 22]


Solution : [1, 19, 7, 3, 22] has cost 17.


Before backtrack at level 3
 pending : []
 solution : [1, 19, 7, 3, 22]

After backtrack at level 3
 pending : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3]


Before reduction : 
 pending  : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, 1048576), (15, 524288), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3]


Solution : [1, 19, 7, 3] has cost 13.


Decide in level 3 among pending : [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, 1048576), (15, 524288), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 14 with phase True at level 3

After decision at level 3
 pending : [2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 14]


New level: 4
 pending : [2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 14]


Before reduction : 
 pending  : [2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, 1048576), (15, 524288), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26}

After reduction : 
 pending  : []
 solution : [1, 19, 7, 3, 14]


Before reduction : 
 pending  : []
 solution : [1, 19, 7, 3, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 19, 7, 3, 14]


Solution : [1, 19, 7, 3, 14] has cost 20.


Before backtrack at level 4
 pending : []
 solution : [1, 19, 7, 3, 14]

After backtrack at level 4
 pending : [2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 14]


Invert decision for 14 at level 3


New level: 4
 pending : [2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3]


Before reduction : 
 pending  : [2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, -1), (15, 524288), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3]


Solution : [1, 19, 7, 3] has cost 13.


Decide in level 4 among pending : [2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, -1), (15, 524288), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [2, 10, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 15]


New level: 5
 pending : [2, 10, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 15]


Before reduction : 
 pending  : [2, 10, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, -1), (15, 524288), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {2, 10, 11, 12, 13, 16, 17, 18, 23, 26}

After reduction : 
 pending  : []
 solution : [1, 19, 7, 3, 15]


Before reduction : 
 pending  : []
 solution : [1, 19, 7, 3, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 19, 7, 3, 15]


Solution : [1, 19, 7, 3, 15] has cost 20.


Before backtrack at level 5
 pending : []
 solution : [1, 19, 7, 3, 15]

After backtrack at level 5
 pending : [2, 10, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [2, 10, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3]


Before reduction : 
 pending  : [2, 10, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 10, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3]


Solution : [1, 19, 7, 3] has cost 13.


Decide in level 5 among pending : [2, 10, 11, 12, 13, 16, 17, 18, 23, 26]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [2, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 10]


New level: 6
 pending : [2, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 10]


Before reduction : 
 pending  : [2, 11, 12, 13, 16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 131072), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, 8192), (17, 2048), (18, 2048), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {2, 11, 12, 13}

After reduction : 
 pending  : [16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 10]


Before reduction : 
 pending  : [16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, 8192), (17, 2048), (18, 2048), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, 2048), (18, 2048), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 10]


Solution : [1, 19, 7, 3, 10] has cost 22.


Before backtrack at level 6
 pending : [16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 10]

After backtrack at level 6
 pending : [16, 17, 18, 23, 26, 2, 11, 12, 13]
 solution : [1, 19, 7, 3, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [16, 17, 18, 23, 26, 2, 11, 12, 13]
 solution : [1, 19, 7, 3]


Before reduction : 
 pending  : [16, 17, 18, 23, 26, 2, 11, 12, 13]
 solution : [1, 19, 7, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, 2048), (18, 2048), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 131072), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [16, 17, 18, 23, 26, 2, 11, 12, 13]
 solution : [1, 19, 7, 3]


Solution : [1, 19, 7, 3] has cost 13.


Decide in level 6 among pending : [16, 17, 18, 23, 26, 2, 11, 12, 13]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 131072), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [16, 17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 11]


New level: 7
 pending : [16, 17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 11]


Before reduction : 
 pending  : [16, 17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 131072), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 8192), (17, 2048), (18, 2048), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {2, 12, 13}

After reduction : 
 pending  : [16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 11]


Before reduction : 
 pending  : [16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 8192), (17, 2048), (18, 2048), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, 2048), (18, 2048), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 11]


Solution : [1, 19, 7, 3, 11] has cost 22.


Before backtrack at level 7
 pending : [16, 17, 18, 23, 26]
 solution : [1, 19, 7, 3, 11]

After backtrack at level 7
 pending : [16, 17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [16, 17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3]


Before reduction : 
 pending  : [16, 17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8192), (17, 2048), (18, 2048), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3]


Solution : [1, 19, 7, 3] has cost 13.


Decide in level 7 among pending : [16, 17, 18, 23, 26, 2, 12, 13]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 16]


New level: 8
 pending : [17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 16]


Before reduction : 
 pending  : [17, 18, 23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, 65536), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {17, 18, 13}

After reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 3, 16]


Before reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 3, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 3, 16]


Solution : [1, 19, 7, 3, 16] has cost 20.


Before backtrack at level 8
 pending : [23, 26, 2, 12]
 solution : [1, 19, 7, 3, 16]

After backtrack at level 8
 pending : [23, 26, 2, 12, 17, 18, 13]
 solution : [1, 19, 7, 3, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [23, 26, 2, 12, 17, 18, 13]
 solution : [1, 19, 7, 3]


Before reduction : 
 pending  : [23, 26, 2, 12, 17, 18, 13]
 solution : [1, 19, 7, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 17, 18, 13]
 solution : [1, 19, 7, 3]


Solution : [1, 19, 7, 3] has cost 13.


Decide in level 8 among pending : [23, 26, 2, 12, 17, 18, 13]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 3, 17]


New level: 9
 pending : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 3, 17]


Before reduction : 
 pending  : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 3, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 8192), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {18, 13}

After reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 3, 17]


Before reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 3, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 3, 17]


Solution : [1, 19, 7, 3, 17] has cost 20.


Before backtrack at level 9
 pending : [23, 26, 2, 12]
 solution : [1, 19, 7, 3, 17]

After backtrack at level 9
 pending : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 3, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 3]


Before reduction : 
 pending  : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 3]

Essensial at level 9 : {18}

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 18]


Before reduction : 
 pending  : [23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 18]


Solution : [1, 19, 7, 3, 18] has cost 20.


Before backtrack at level 9
 pending : [23, 26, 2, 12, 13]
 solution : [1, 19, 7, 3, 18]

After backtrack at level 9
 pending : [23, 26, 2, 12, 13, 18]
 solution : [1, 19, 7, 3]


Before backtrack at level 8
 pending : [23, 26, 2, 12, 13, 18]
 solution : [1, 19, 7, 3]

After backtrack at level 8
 pending : [23, 26, 2, 12, 13, 18, 17]
 solution : [1, 19, 7, 3]


Before backtrack at level 7
 pending : [23, 26, 2, 12, 13, 18, 17]
 solution : [1, 19, 7, 3]

After backtrack at level 7
 pending : [23, 26, 2, 12, 13, 18, 17, 16]
 solution : [1, 19, 7, 3]


Before backtrack at level 6
 pending : [23, 26, 2, 12, 13, 18, 17, 16]
 solution : [1, 19, 7, 3]

After backtrack at level 6
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11]
 solution : [1, 19, 7, 3]


Before backtrack at level 5
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11]
 solution : [1, 19, 7, 3]

After backtrack at level 5
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7, 3]


Before backtrack at level 4
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7, 3]

After backtrack at level 4
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7, 3]


Before backtrack at level 3
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7, 3]

After backtrack at level 3
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7, 3]


Before backtrack at level 2
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7, 3]

After backtrack at level 2
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14, 22]
 solution : [1, 19, 7, 3]


Invert decision for 3 at level 1


New level: 2
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14, 22]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14, 22]
 solution : [1, 19, 7]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 4096), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, 4194304), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14, 22]
 solution : [1, 19, 7]


Solution : [1, 19, 7] has cost 11.


Decide in level 2 among pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14, 22]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, 4194304), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7, 22]


New level: 3
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7, 22]


Before reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, 4194304), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26}

After reduction : 
 pending  : []
 solution : [1, 19, 7, 22]


Before reduction : 
 pending  : []
 solution : [1, 19, 7, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 19, 7, 22]


Solution : [1, 19, 7, 22] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [1, 19, 7, 22]

After backtrack at level 3
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7]


Solution : [1, 19, 7] has cost 11.


Decide in level 3 among pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 14 with phase True at level 3

After decision at level 3
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7, 14]


New level: 4
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7, 14]


Before reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, 2097152), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {2, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26}

After reduction : 
 pending  : []
 solution : [1, 19, 7, 14]


Before reduction : 
 pending  : []
 solution : [1, 19, 7, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 19, 7, 14]


Solution : [1, 19, 7, 14] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [1, 19, 7, 14]

After backtrack at level 4
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7, 14]


Invert decision for 14 at level 3


New level: 4
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, -1), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7]


Solution : [1, 19, 7] has cost 11.


Decide in level 4 among pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, -1), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7, 15]


New level: 5
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7, 15]


Before reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, -1), (15, 1048576), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {2, 10, 11, 12, 13, 16, 17, 18, 23, 26}

After reduction : 
 pending  : []
 solution : [1, 19, 7, 15]


Before reduction : 
 pending  : []
 solution : [1, 19, 7, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 19, 7, 15]


Solution : [1, 19, 7, 15] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [1, 19, 7, 15]

After backtrack at level 5
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7]


Solution : [1, 19, 7] has cost 11.


Decide in level 5 among pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11]
 solution : [1, 19, 7, 10]


New level: 6
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11]
 solution : [1, 19, 7, 10]


Before reduction : 
 pending  : [23, 26, 2, 12, 13, 18, 17, 16, 11]
 solution : [1, 19, 7, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 524288), (11, 262144), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, 16384), (17, 4096), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {2, 11, 12, 13}

After reduction : 
 pending  : [23, 26, 18, 17, 16]
 solution : [1, 19, 7, 10]


Before reduction : 
 pending  : [23, 26, 18, 17, 16]
 solution : [1, 19, 7, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, 16384), (17, 4096), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16384), (17, 4096), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 26, 18, 17, 16]
 solution : [1, 19, 7, 10]


Solution : [1, 19, 7, 10] has cost 20.


Before backtrack at level 6
 pending : [23, 26, 18, 17, 16]
 solution : [1, 19, 7, 10]

After backtrack at level 6
 pending : [23, 26, 18, 17, 16, 2, 12, 13, 11]
 solution : [1, 19, 7, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [23, 26, 18, 17, 16, 2, 12, 13, 11]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [23, 26, 18, 17, 16, 2, 12, 13, 11]
 solution : [1, 19, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16384), (17, 4096), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 26, 18, 17, 16, 2, 12, 13, 11]
 solution : [1, 19, 7]


Solution : [1, 19, 7] has cost 11.


Decide in level 6 among pending : [23, 26, 18, 17, 16, 2, 12, 13, 11]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [23, 26, 18, 17, 16, 2, 12, 13]
 solution : [1, 19, 7, 11]


New level: 7
 pending : [23, 26, 18, 17, 16, 2, 12, 13]
 solution : [1, 19, 7, 11]


Before reduction : 
 pending  : [23, 26, 18, 17, 16, 2, 12, 13]
 solution : [1, 19, 7, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 16384), (17, 4096), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {2, 12, 13}

After reduction : 
 pending  : [23, 26, 18, 17, 16]
 solution : [1, 19, 7, 11]


Before reduction : 
 pending  : [23, 26, 18, 17, 16]
 solution : [1, 19, 7, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 16384), (17, 4096), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16384), (17, 4096), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 26, 18, 17, 16]
 solution : [1, 19, 7, 11]


Solution : [1, 19, 7, 11] has cost 20.


Before backtrack at level 7
 pending : [23, 26, 18, 17, 16]
 solution : [1, 19, 7, 11]

After backtrack at level 7
 pending : [23, 26, 18, 17, 16, 2, 12, 13]
 solution : [1, 19, 7, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [23, 26, 18, 17, 16, 2, 12, 13]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [23, 26, 18, 17, 16, 2, 12, 13]
 solution : [1, 19, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16384), (17, 4096), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 26, 18, 17, 16, 2, 12, 13]
 solution : [1, 19, 7]


Solution : [1, 19, 7] has cost 11.


Decide in level 7 among pending : [23, 26, 18, 17, 16, 2, 12, 13]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [23, 26, 18, 17, 2, 12, 13]
 solution : [1, 19, 7, 16]


New level: 8
 pending : [23, 26, 18, 17, 2, 12, 13]
 solution : [1, 19, 7, 16]


Before reduction : 
 pending  : [23, 26, 18, 17, 2, 12, 13]
 solution : [1, 19, 7, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, 131072), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {17, 18, 13}

After reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 16]


Before reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 16]


Solution : [1, 19, 7, 16] has cost 18.


Before backtrack at level 8
 pending : [23, 26, 2, 12]
 solution : [1, 19, 7, 16]

After backtrack at level 8
 pending : [23, 26, 2, 12, 18, 17, 13]
 solution : [1, 19, 7, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [23, 26, 2, 12, 18, 17, 13]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [23, 26, 2, 12, 18, 17, 13]
 solution : [1, 19, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 18, 17, 13]
 solution : [1, 19, 7]


Solution : [1, 19, 7] has cost 11.


Decide in level 8 among pending : [23, 26, 2, 12, 18, 17, 13]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 17]


New level: 9
 pending : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 17]


Before reduction : 
 pending  : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 32768), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {18, 13}

After reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 17]


Before reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 26, 2, 12]
 solution : [1, 19, 7, 17]


Solution : [1, 19, 7, 17] has cost 18.


Before backtrack at level 9
 pending : [23, 26, 2, 12]
 solution : [1, 19, 7, 17]

After backtrack at level 9
 pending : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7]


Before reduction : 
 pending  : [23, 26, 2, 12, 18, 13]
 solution : [1, 19, 7]

Essensial at level 9 : {18}

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 32768), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 13]
 solution : [1, 19, 7, 18]


Before reduction : 
 pending  : [23, 26, 2, 12, 13]
 solution : [1, 19, 7, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 32768), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 32768), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 26, 2, 12, 13]
 solution : [1, 19, 7, 18]


Solution : [1, 19, 7, 18] has cost 18.


Before backtrack at level 9
 pending : [23, 26, 2, 12, 13]
 solution : [1, 19, 7, 18]

After backtrack at level 9
 pending : [23, 26, 2, 12, 13, 18]
 solution : [1, 19, 7]


Before backtrack at level 8
 pending : [23, 26, 2, 12, 13, 18]
 solution : [1, 19, 7]

After backtrack at level 8
 pending : [23, 26, 2, 12, 13, 18, 17]
 solution : [1, 19, 7]


Before backtrack at level 7
 pending : [23, 26, 2, 12, 13, 18, 17]
 solution : [1, 19, 7]

After backtrack at level 7
 pending : [23, 26, 2, 12, 13, 18, 17, 16]
 solution : [1, 19, 7]


Before backtrack at level 6
 pending : [23, 26, 2, 12, 13, 18, 17, 16]
 solution : [1, 19, 7]

After backtrack at level 6
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11]
 solution : [1, 19, 7]


Before backtrack at level 5
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11]
 solution : [1, 19, 7]

After backtrack at level 5
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7]


Before backtrack at level 4
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10]
 solution : [1, 19, 7]

After backtrack at level 4
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7]


Before backtrack at level 3
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15]
 solution : [1, 19, 7]

After backtrack at level 3
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7]


Before backtrack at level 2
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14]
 solution : [1, 19, 7]

After backtrack at level 2
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14, 22]
 solution : [1, 19, 7]


Before backtrack at level 1
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14, 22]
 solution : [1, 19, 7]

After backtrack at level 1
 pending : [23, 26, 2, 12, 13, 18, 17, 16, 11, 10, 15, 14, 22, 3]
 solution : [1, 19, 7]


====================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

====================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 15

[MIN NOTE]: maximum branch and bound depth: 9

[MIN NOTE]: number of definitions: 1

invariant [def_chosenAt] forall V,Q. chosenAt(Q,V) = (forall N. member(N,Q) -> vote(N,V)) # definition, qcost: 6

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [1, 19, 7, 22]

[MIN NOTE]: solution length: 4

invariant [invar_1] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_19] forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)) # qcost: 4

invariant [invar_7] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_22] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)) # qcost: 4

[MIN NOTE]: number of total invariants: 5

[MIN NOTE]: total qCost: 21




[QRM NOTE]: Time elapsed since start: 7.248 seconds

[QRM NOTE]: Time elapsed since last: 0.104 seconds

[QRM NOTE]: Peak memory: 2222402 bytes


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy -s node=4,value=2 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=4,value=2]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 22

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 48

[FW NOTE]: number of branching actions: 16

ivy_to_cpp target=qrm toy_consensus_epr.node_4_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_4_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_4_value_2.finite.cpp toy_consensus_epr.node_4_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_4_value_2.finite.o toy_consensus_epr.node_4_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.089 seconds

[QRM NOTE]: Time elapsed since last: 7.089 seconds

[QRM NOTE]: Peak memory: 1192118 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        99

[FW NOTE]: number of dfs representative states:     12

[FW NOTE]: number of dfs non-representative states: 87


====================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=4,value=2]

====================================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: voted('node',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)']
representative states : 60855, 1174967, 5500343, 1096281527, 91358227895, 91626663351, 1231023543, 1499458999, 1364716983, 23588279, 95415735, 6548919


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000
lex min decimal: 60855
states:
0000000000000000000000




=== State Orbit 1 =====================
size : 8
repr state: 0000000000100000001000
lex min decimal: 1174967
states:
0000000000010000001000
0000000000001000000100
0000000000100000001000
0000000000000000010001
0000000000000100000100
0000000000000010000010
0000000000000000100001
0000000000000001000010




=== State Orbit 2 =====================
size : 12
repr state: 0000000000101000001100
lex min decimal: 5500343
states:
0000000000101000001100
0000000000100010001010
0000000000000101000110
0000000000010100001100
0000000000001000100101
0000000000010001001010
0000000000000100010101
0000000000000001010011
0000000000000010100011
0000000000100000101001
0000000000010000011001
0000000000001010000110




=== State Orbit 3 =====================
size : 8
repr state: 1000000000101010001110
lex min decimal: 1096281527
states:
0000100000100010101011
0000000100000101010111
0000010000010001011011
0000001000001010100111
1000000000101010001110
0001000000010100011101
0010000000101000101101
0100000000010101001110




=== State Orbit 4 =====================
size : 2
repr state: 1010101000101010101111
lex min decimal: 91358227895
states:
0101010100010101011111
1010101000101010101111




=== State Orbit 5 =====================
size : 2
repr state: 1010101010101010101111
lex min decimal: 91626663351
states:
1010101010101010101111
0101010101010101011111




=== State Orbit 6 =====================
size : 8
repr state: 1000000000101010011111
lex min decimal: 1231023543
states:
0100000000010101101111
0000010000011001011111
0001000000010110011111
0000100000100110101111
0000001000011010101111
0000000100100101011111
0010000000101001101111
1000000000101010011111




=== State Orbit 7 =====================
size : 8
repr state: 1000000010101010011111
lex min decimal: 1499458999
states:
0000100010100110101111
0000000101100101011111
0100000001010101101111
0001000001010110011111
0000001010011010101111
0010000010101001101111
0000010001011001011111
1000000010101010011111




=== State Orbit 8 =====================
size : 8
repr state: 1000000010101010001110
lex min decimal: 1364716983
states:
0000010001010001011011
0000000101000101010111
0000001010001010100111
0001000001010100011101
0000100010100010101011
0100000001010101001110
0010000010101000101101
1000000010101010001110




=== State Orbit 9 =====================
size : 24
repr state: 0000000000101001001110
lex min decimal: 23588279
states:
0000000000101000011101
0000000000100001011011
0000000000011000101101
0000000000000110010111
0000000000010100101101
0000000000001010010111
0000000000010010011011
0000000000011000011101
0000000000011010001110
0000000000100100101101
0000000000100010011011
0000000000101001001110
0000000000010010101011
0000000000010110001110
0000000000100101001110
0000000000001001100111
0000000000100001101011
0000000000001001010111
0000000000010001101011
0000000000011001001110
0000000000100100011101
0000000000000101100111
0000000000000110100111
0000000000100110001110




=== State Orbit 10 =====================
size : 6
repr state: 0000000000101001011111
lex min decimal: 95415735
states:
0000000000010110101111
0000000000100101101111
0000000000100110011111
0000000000101001011111
0000000000011010011111
0000000000011001101111




=== State Orbit 11 =====================
size : 12
repr state: 0000000000100100001100
lex min decimal: 6548919
states:
0000000000000010010011
0000000000100001001010
0000000000000110000110
0000000000010010001010
0000000000001000010101
0000000000011000001100
0000000000100000011001
0000000000000001100011
0000000000100100001100
0000000000001001000110
0000000000010000101001
0000000000000100100101



[QRM NOTE]: Time elapsed since start: 7.360 seconds

[QRM NOTE]: Time elapsed since last: 0.271 seconds

[QRM NOTE]: Peak memory: 1260274 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=4,value=2]

=========================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.744 seconds

[QRM NOTE]: Time elapsed since last: 0.385 seconds

[QRM NOTE]: Peak memory: 331194 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=3,value=3]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_3.finite.cpp toy_consensus_epr.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_3.finite.o toy_consensus_epr.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.026 seconds

[QRM NOTE]: Time elapsed since last: 7.026 seconds

[QRM NOTE]: Peak memory: 1190495 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        94

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 84


====================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=3,value=3]

====================================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: member('node', 'quorum')
predicate: decided('value',)
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 16816043, 1225039787, 1227136939, 17342379, 19439531, 18913195, 42923, 348075


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000
lex min decimal: 427
states:
000000000000000000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000100000000100
lex min decimal: 5035
states:
000000000000100000000100
000000000000000000001001
000000000000000010000010
000000000000000000100001
000000000000000100000010
000000000000001000000100
000000000000000000010001
000000000000000001000010
000000000000010000000100




=== State Orbit 2 =====================
size : 9
repr state: 100000000000100100000110
lex min decimal: 16816043
states:
010000000000010010000110
000001000000001000001101
000010000000010000010101
000100000000100000100101
000000010000000010010011
001000000000001001000110
000000100000000100100011
100000000000100100000110
000000001000000001001011




=== State Orbit 3 =====================
size : 3
repr state: 100100100000100100100111
lex min decimal: 1225039787
states:
100100100000100100100111
001001001000001001001111
010010010000010010010111




=== State Orbit 4 =====================
size : 3
repr state: 100100100100100100100111
lex min decimal: 1227136939
states:
100100100100100100100111
001001001001001001001111
010010010010010010010111




=== State Orbit 5 =====================
size : 18
repr state: 100000000000100100010111
lex min decimal: 17342379
states:
000100000000100010100111
000000001000010001001111
000010000000010001010111
000001000000001100001111
100000000000100100001111
000000100000010100100111
000000100000001100100111
000000010000001010010111
001000000000001001010111
000100000000100001100111
001000000000001001100111
000010000000010100010111
000000001000100001001111
010000000000010010100111
100000000000100100010111
000000010000100010010111
010000000000010010001111
000001000000001010001111




=== State Orbit 6 =====================
size : 18
repr state: 100000000100100100010111
lex min decimal: 19439531
states:
000000010010100010010111
000010000010010100010111
000010000010010001010111
000001000001001100001111
100000000100100100001111
000100000100100010100111
001000000001001001100111
100000000100100100010111
000001000001001010001111
000000100100001100100111
000000001001100001001111
000000001001010001001111
010000000010010010100111
010000000010010010001111
000100000100100001100111
000000100100010100100111
000000010010001010010111
001000000001001001010111




=== State Orbit 7 =====================
size : 9
repr state: 100000000100100100000110
lex min decimal: 18913195
states:
000000010010000010010011
000000001001000001001011
010000000010010010000110
000010000010010000010101
100000000100100100000110
001000000001001001000110
000000100100000100100011
000001000001001000001101
000100000100100000100101




=== State Orbit 8 =====================
size : 18
repr state: 000000000000100010000110
lex min decimal: 42923
states:
000000000000000100001011
000000000000001100000110
000000000000100000010101
000000000000100001000110
000000000000001010000110
000000000000010000100101
000000000000000001010011
000000000000100010000110
000000000000010100000110
000000000000000100010011
000000000000010001000110
000000000000000001100011
000000000000000010100011
000000000000000010001011
000000000000001000100101
000000000000010000001101
000000000000100000001101
000000000000001000010101




=== State Orbit 9 =====================
size : 6
repr state: 000000000000100010001111
lex min decimal: 348075
states:
000000000000010001100111
000000000000100001010111
000000000000001010100111
000000000000100010001111
000000000000001100010111
000000000000010100001111



[QRM NOTE]: Time elapsed since start: 7.281 seconds

[QRM NOTE]: Time elapsed since last: 0.255 seconds

[QRM NOTE]: Peak memory: 1253134 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=3,value=3]

=========================================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 13227, binary: 000000000000000000011001

Found a representative state in Rmin not in reachability: decimal: 16897963, binary: 000000001000000011101011

Found a representative state in Rmin not in reachability: decimal: 3681402795, binary: 011011011011011011011111

Found a representative state in Rmin not in reachability: decimal: 3677208491, binary: 011011011001011011011111

Found a representative state in Rmin not in reachability: decimal: 57786283, binary: 000000011011100011011111

Found a representative state in Rmin not in reachability: decimal: 18995115, binary: 000000001001000011101011

Found a representative state in Rmin not in reachability: decimal: 18921387, binary: 000000001001000001011011

Found a representative state in Rmin not in reachability: decimal: 16824235, binary: 000000001000000001011011

Found a representative state in Rmin not in reachability: decimal: 59307, binary: 000000000000000001110011

Found a representative state in Rmin not in reachability: decimal: 50444203, binary: 000000011000000011011011

Found a representative state in Rmin not in reachability: decimal: 52541355, binary: 000000011001000011011011

Found a representative state in Rmin not in reachability: decimal: 56735659, binary: 000000011011000011011011

Found a representative state in Rmin not in reachability: decimal: 19455915, binary: 000000001001010001101111

Found a representative state in Rmin not in reachability: decimal: 17358763, binary: 000000001000010001101111

Found a representative state in Rmin not in reachability: decimal: 1225121707, binary: 001001001000001011101111

Found a representative state in Rmin not in reachability: decimal: 1227218859, binary: 001001001001001011101111

Found a representative state in Rmin not in reachability: decimal: 1227145131, binary: 001001001001001001011111

Found a representative state in Rmin not in reachability: decimal: 1225047979, binary: 001001001000001001011111

Found a representative state in Rmin not in reachability: decimal: 1261813675, binary: 001001011001101011011111

Found a representative state in Rmin not in reachability: decimal: 1266007979, binary: 001001011011101011011111

Found a representative state in Rmin not in reachability: decimal: 1263910827, binary: 001001011010101011011111

Found a representative state in Rmin not in reachability: decimal: 1259716523, binary: 001001011000101011011111

Found a representative state in Rmin not in reachability: decimal: 170344363, binary: 000001010001001110011111

Found a representative state in Rmin not in reachability: decimal: 168247211, binary: 000001010000001110011111

Found a representative state in Rmin not in reachability: decimal: 171261867, binary: 000001010001101010011111

Found a representative state in Rmin not in reachability: decimal: 174538667, binary: 000001010011001110011111

Found a representative state in Rmin not in reachability: decimal: 18390955, binary: 000000001000110001001111

Found a representative state in Rmin not in reachability: decimal: 20488107, binary: 000000001001110001001111

Found a representative state in Rmin not in reachability: decimal: 51494827, binary: 000000011000100011011111

Found a representative state in Rmin not in reachability: decimal: 53591979, binary: 000000011001100011011111

Found a representative state in Rmin not in reachability: decimal: 1416556459, binary: 001010100011011101110111

Found a representative state in Rmin not in reachability: decimal: 1412362155, binary: 001010100001011101110111

Found a representative state in Rmin not in reachability: decimal: 1424945067, binary: 001010100111011101110111

Found a representative state in Rmin not in reachability: decimal: 1410265003, binary: 001010100000011101110111

Found a representative state in Rmin not in reachability: decimal: 1258667947, binary: 001001011000001011011111

Found a representative state in Rmin not in reachability: decimal: 1260765099, binary: 001001011001001011011111

Found a representative state in Rmin not in reachability: decimal: 1264959403, binary: 001001011011001011011111

Found a representative state in Rmin not in reachability: decimal: 1262862251, binary: 001001011010001011011111

Found a representative state in Rmin not in reachability: decimal: 170213291, binary: 000001010001001010011111

Found a representative state in Rmin not in reachability: decimal: 174407595, binary: 000001010011001010011111

Found a representative state in Rmin not in reachability: decimal: 168116139, binary: 000001010000001010011111

Found a representative state in Rmin not in reachability: decimal: 3675111339, binary: 011011011000011011011111

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 8.202 seconds

[QRM NOTE]: Time elapsed since last: 0.921 seconds

[QRM NOTE]: Peak memory: 303869 bytes

next size: node=3,value=3


******************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

******************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=3,value=3 -f 1 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.023 seconds

[QRM NOTE]: Time elapsed since last: 0.023 seconds

[QRM NOTE]: Peak memory: 36492 bytes


===================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

===================================================================================================================


==============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
9 (*) : ---------------1------0-
9     : ['vote(node1,value0)', '~voted(node1)']
10     : ----------------1-----0-
10     : ['vote(node1,value1)', '~voted(node1)']
11     : -----------------1----0-
11     : ['vote(node1,value2)', '~voted(node1)']
12     : ------------------1----0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------------1---0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : --------------------1--0
14     : ['vote(node2,value2)', '~voted(node2)']
15     : ------------1--------0--
15     : ['vote(node0,value0)', '~voted(node0)']
16     : -------------1-------0--
16     : ['vote(node0,value1)', '~voted(node0)']
17     : --------------1------0--
17     : ['vote(node0,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 36
num_suborbits: 1
18 (*) : --------1------1--------
18     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
19     : -------1-------1--------
19     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
20     : --------1-------1-------
20     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
21     : ------1---------1-------
21     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
22     : -------1---------1------
22     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
23     : ------1----------1------
23     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
24     : --------1---------1-----
24     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
25     : -------1----------1-----
25     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
26     : --------1----------1----
26     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
27     : ------1------------1----
27     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
28     : -------1------------1---
28     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
29     : ------1-------------1---
29     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
30     : -----1------1-----------
30     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
31     : ----1-------1-----------
31     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
32     : -----1-------1----------
32     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
33     : ---1---------1----------
33     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
34     : ----1---------1---------
34     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
35     : ---1----------1---------
35     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
36     : -----1------------1-----
36     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
37     : ----1-------------1-----
37     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
38     : -----1-------------1----
38     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
39     : ---1---------------1----
39     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
40     : ----1---------------1---
40     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
41     : ---1----------------1---
41     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
42     : --1---------1-----------
42     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
43     : -1----------1-----------
43     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
44     : --1----------1----------
44     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
45     : 1------------1----------
45     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
46     : -1------------1---------
46     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
47     : 1-------------1---------
47     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
48     : --1------------1--------
48     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
49     : -1-------------1--------
49     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
50     : --1-------------1-------
50     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
51     : 1---------------1-------
51     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
52     : -1---------------1------
52     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
53     : 1----------------1------
53     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : ------1----1------------
54     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
55     : ------1---1-------------
55     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
56     : -------1---1------------
56     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
57     : -------1-1--------------
57     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
58     : --------1-1-------------
58     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
59     : --------11--------------
59     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
60     : ---1-------1------------
60     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
61     : ---1------1-------------
61     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
62     : ----1------1------------
62     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
63     : ----1----1--------------
63     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
64     : -----1----1-------------
64     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
65     : -----1---1--------------
65     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
66     : 1----------1------------
66     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
67     : 1---------1-------------
67     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
68     : -1---------1------------
68     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
69     : -1-------1--------------
69     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
70     : --1-------1-------------
70     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
71     : --1------1--------------
71     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ----------11------------
72     : ['decided(value1)', 'decided(value2)']
73     : ---------1-1------------
73     : ['decided(value0)', 'decided(value2)']
74     : ---------11-------------
74     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : --1-----------0---------
75     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
76     : -1-----------0----------
76     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
77     : 1-----------0-----------
77     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
78     : -----1--------0---------
78     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
79     : ----1--------0----------
79     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
80     : ---1--------0-----------
80     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
81     : --1--------------0------
81     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
82     : -1--------------0-------
82     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
83     : 1--------------0--------
83     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
84     : --------1--------0------
84     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
85     : -------1--------0-------
85     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
86     : ------1--------0--------
86     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
87     : -----1--------------0---
87     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
88     : ----1--------------0----
88     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
89     : ---1--------------0-----
89     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
90     : --------1-----------0---
90     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
91     : -------1-----------0----
91     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
92     : ------1-----------0-----
92     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
93 (*) : --1-------------------0-
93     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node1)']
94     : -1--------------------0-
94     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node1)']
95     : 1---------------------0-
95     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
96     : -----1-----------------0
96     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node2)']
97     : ----1------------------0
97     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node2)']
98     : ---1-------------------0
98     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node2)']
99     : --1------------------0--
99     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node0)']
100     : -1-------------------0--
100     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node0)']
101     : 1--------------------0--
101     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
102     : --------1--------------0
102     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node2)']
103     : -------1---------------0
103     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node2)']
104     : ------1----------------0
104     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node2)']
105     : -----1---------------0--
105     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node0)']
106     : ----1----------------0--
106     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node0)']
107     : ---1-----------------0--
107     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node0)']
108     : --------1-------------0-
108     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node1)']
109     : -------1--------------0-
109     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node1)']
110     : ------1---------------0-
110     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 27
num_suborbits: 2
111 (*) : --1---1-----------------
111     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
112     : -1----1-----------------
112     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
113     : --1----1----------------
113     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
114     : 1------1----------------
114     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
115     : -1------1---------------
115     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
116     : 1-------1---------------
116     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
117     : -----11-----------------
117     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
118     : ----1-1-----------------
118     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
119     : -----1-1----------------
119     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
120     : ---1---1----------------
120     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
121     : ----1---1---------------
121     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
122     : ---1----1---------------
122     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
123     : --11--------------------
123     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
124     : -1-1--------------------
124     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
125     : --1-1-------------------
125     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
126     : 1---1-------------------
126     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
127     : -1---1------------------
127     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
128     : 1----1------------------
128     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
129 (*) : -11---------------------
129     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
130     : 1-1---------------------
130     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
131     : 11----------------------
131     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
132     : ----11------------------
132     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
133     : ---1-1------------------
133     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
134     : ---11-------------------
134     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
135     : -------11---------------
135     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
136     : ------1-1---------------
136     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
137     : ------11----------------
137     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
138 (*) : 0-----1-----1-----------
138     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
139     : -0-----1-----1----------
139     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
140     : --0-----1-----1---------
140     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
141     : ---0--1-----1-----------
141     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
142     : ----0--1-----1----------
142     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
143     : -----0--1-----1---------
143     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
144     : 0--1-----------1--------
144     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
145     : -0--1-----------1-------
145     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
146     : --0--1-----------1------
146     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
147     : ---1--0--------1--------
147     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
148     : ----1--0--------1-------
148     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
149     : -----1--0--------1------
149     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
150     : 1--0--------------1-----
150     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
151     : -1--0--------------1----
151     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
152     : --1--0--------------1---
152     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
153     : 1-----0-----------1-----
153     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
154     : -1-----0-----------1----
154     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
155     : --1-----0-----------1---
155     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
156 (*) : 0--1--1-----------------
156     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
157     : -0--1--1----------------
157     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
158     : --0--1--1---------------
158     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
159     : 1--0--1-----------------
159     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
160     : -1--0--1----------------
160     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
161     : --1--0--1---------------
161     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
162     : 1--1--0-----------------
162     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
163     : -1--1--0----------------
163     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
164     : --1--1--0---------------
164     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 2
165 (*) : ---------1---1------1---
165     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
166     : ---------1----1----1----
166     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
167     : ----------1-1-------1---
167     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
168     : ----------1---1---1-----
168     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
169     : -----------11------1----
169     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
170     : -----------1-1----1-----
170     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
171     : ---------1---1---1------
171     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
172     : ---------1----1-1-------
172     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
173     : ----------1-1----1------
173     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
174     : ----------1---11--------
174     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
175     : -----------11---1-------
175     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
176     : -----------1-1-1--------
176     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
177     : ---------1------1---1---
177     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
178     : ---------1-------1-1----
178     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
179     : ----------1----1----1---
179     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
180     : ----------1------11-----
180     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
181     : -----------1---1---1----
181     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
182     : -----------1----1-1-----
182     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
219 (*) : ---------1----1-----1---
219     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
220     : ---------1---1-----1----
220     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
221     : ----------1---1-----1---
221     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
222     : ----------1-1-----1-----
222     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
223     : -----------1-1-----1----
223     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
224     : -----------11-----1-----
224     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
225     : ---------1----1--1------
225     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
226     : ---------1---1--1-------
226     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
227     : ----------1---1--1------
227     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
228     : ----------1-1--1--------
228     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
229     : -----------1-1--1-------
229     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
230     : -----------11--1--------
230     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
231     : ---------1-------1--1---
231     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
232     : ---------1------1--1----
232     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
233     : ----------1------1--1---
233     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
234     : ----------1----1--1-----
234     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
235     : -----------1----1--1----
235     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
236     : -----------1---1--1-----
236     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
183 (*) : ---------1-----0----1---
183     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
184     : ---------1-----0---1----
184     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
185     : ----------1-----0---1---
185     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
186     : ----------1-----0-1-----
186     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
187     : -----------1-----0-1----
187     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
188     : -----------1-----01-----
188     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
189     : ---------1-------10-----
189     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
190     : ---------1------1-0-----
190     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
191     : ----------1------1-0----
191     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
192     : ----------1----1---0----
192     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
193     : -----------1----1---0---
193     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
194     : -----------1---1----0---
194     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
195     : ---------1--0-------1---
195     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
196     : ---------1--0------1----
196     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
197     : ----------1--0------1---
197     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
198     : ----------1--0----1-----
198     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
199     : -----------1--0----1----
199     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
200     : -----------1--0---1-----
200     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
201     : ---------1----1---0-----
201     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
202     : ---------1---1----0-----
202     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
203     : ----------1---1----0----
203     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
204     : ----------1-1------0----
204     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
205     : -----------1-1------0---
205     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
206     : -----------11-------0---
206     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
207     : ---------1--0----1------
207     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
208     : ---------1--0---1-------
208     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
209     : ----------1--0---1------
209     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
210     : ----------1--0-1--------
210     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
211     : -----------1--0-1-------
211     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
212     : -----------1--01--------
212     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
213     : ---------1----10--------
213     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
214     : ---------1---1-0--------
214     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
215     : ----------1---1-0-------
215     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
216     : ----------1-1---0-------
216     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
217     : -----------1-1---0------
217     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
218     : -----------11----0------
218     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 18
num_suborbits: 1
237 (*) : 0--------1----------1---
237     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
238     : 0--------1---------1----
238     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
239     : -0--------1---------1---
239     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
240     : -0--------1-------1-----
240     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
241     : --0--------1-------1----
241     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
242     : --0--------1------1-----
242     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
243     : ---0-----1-------1------
243     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
244     : ---0-----1------1-------
244     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
245     : ----0-----1------1------
245     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
246     : ----0-----1----1--------
246     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
247     : -----0-----1----1-------
247     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
248     : -----0-----1---1--------
248     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
249     : ------0--1----1---------
249     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
250     : ------0--1---1----------
250     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
251     : -------0--1---1---------
251     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
252     : -------0--1-1-----------
252     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
253     : --------0--1-1----------
253     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
254     : --------0--11-----------
254     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
255 (*) : -----0--------1-----1---
255     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
256     : ----0--------1-----1----
256     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
257     : ---0--------1-----1-----
257     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
258     : --0-----------1--1------
258     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
259     : -0-----------1--1-------
259     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
260     : 0-----------1--1--------
260     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
261     : --------0--------1--1---
261     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
262     : -------0--------1--1----
262     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
263     : ------0--------1--1-----
263     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
264 (*) : ---------1----------1-0-
264     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
265     : ---------1---------1--0-
265     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
266     : ----------1---------1-0-
266     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
267     : ----------1-------1---0-
267     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
268     : -----------1-------1--0-
268     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
269     : -----------1------1---0-
269     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
270     : ---------1-------1-----0
270     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
271     : ---------1------1------0
271     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
272     : ----------1------1-----0
272     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
273     : ----------1----1-------0
273     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
274     : -----------1----1------0
274     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
275     : -----------1---1-------0
275     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
276     : ---------1----------10--
276     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
277     : ---------1---------1-0--
277     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
278     : ----------1---------10--
278     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
279     : ----------1-------1--0--
279     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
280     : -----------1-------1-0--
280     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
281     : -----------1------1--0--
281     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
282     : ---------1----1--------0
282     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
283     : ---------1---1---------0
283     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
284     : ----------1---1--------0
284     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
285     : ----------1-1----------0
285     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
286     : -----------1-1---------0
286     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
287     : -----------11----------0
287     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
288     : ---------1-------1---0--
288     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
289     : ---------1------1----0--
289     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
290     : ----------1------1---0--
290     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
291     : ----------1----1-----0--
291     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
292     : -----------1----1----0--
292     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
293     : -----------1---1-----0--
293     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
294     : ---------1----1-------0-
294     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
295     : ---------1---1--------0-
295     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
296     : ----------1---1-------0-
296     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
297     : ----------1-1---------0-
297     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
298     : -----------1-1--------0-
298     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
299     : -----------11---------0-
299     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : -----------1---------00-
300     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
301     : ----------1----------00-
301     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
302     : ---------1-----------00-
302     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
303     : -----------1---------0-0
303     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
304     : ----------1----------0-0
304     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
305     : ---------1-----------0-0
305     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
306     : -----------1----------00
306     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
307     : ----------1-----------00
307     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
308     : ---------1------------00
308     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : -----0-----1----------0-
309     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
310     : ----0-----1-----------0-
310     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
311     : ---0-----1------------0-
311     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
312     : --0--------1-----------0
312     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
313     : -0--------1------------0
313     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
314     : 0--------1-------------0
314     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
315     : --------0--1---------0--
315     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
316     : -------0--1----------0--
316     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
317     : ------0--1-----------0--
317     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
318 (*) : -----------1--0-------0-
318     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
319     : ----------1--0--------0-
319     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
320     : ---------1--0---------0-
320     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
321     : -----------1--0--------0
321     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
322     : ----------1--0---------0
322     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
323     : ---------1--0----------0
323     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
324     : -----------1-----0---0--
324     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
325     : ----------1-----0----0--
325     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
326     : ---------1-----0-----0--
326     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
327     : -----------1-----0-----0
327     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
328     : ----------1-----0------0
328     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
329     : ---------1-----0-------0
329     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
330     : -----------1--------00--
330     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
331     : ----------1--------0-0--
331     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
332     : ---------1--------0--0--
332     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
333     : -----------1--------0-0-
333     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
334     : ----------1--------0--0-
334     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
335     : ---------1--------0---0-
335     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : ---0-----1-----0--------
336     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
337     : ----0-----1-----0-------
337     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
338     : -----0-----1-----0------
338     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
339     : 0--------1--------0-----
339     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
340     : -0--------1--------0----
340     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
341     : --0--------1--------0---
341     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
342     : ------0--1--0-----------
342     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
343     : -------0--1--0----------
343     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
344     : --------0--1--0---------
344     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ---------1-----0--0-----
345     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
346     : ----------1-----0--0----
346     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
347     : -----------1-----0--0---
347     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
348     : ---------1--0-----0-----
348     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
349     : ----------1--0-----0----
349     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
350     : -----------1--0-----0---
350     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
351     : ---------1--0--0--------
351     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
352     : ----------1--0--0-------
352     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
353     : -----------1--0--0------
353     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : ------------------000--1
354     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
355     : ---------------000----1-
355     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : ------------000------1--
356     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : -----0--0--1--------1---
357     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : ----0--0--1--------1----
358     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : ---0--0--1--------1-----
359     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : --0-----0--1-----1------
360     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
361     : -0-----0--1-----1-------
361     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : 0-----0--1-----1--------
362     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : --0--0-----1--1---------
363     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
364     : -0--0-----1--1----------
364     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : --0--0--0--1------------
366     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
367     : -0--0--0--1-------------
367     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
368     : 0--0--0--1--------------
368     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 1
369 (*) : -0--1----------0-0----1-
369     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
370     : --0--1---------00-----1-
370     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
371     : 0--1------------00----1-
371     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
372     : -1--0-------------0-0--1
372     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
373     : --1--0------------00---1
373     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
374     : 1--0---------------00--1
374     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
375     : -0-----1----0-0------1--
375     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
376     : --0-----1---00-------1--
376     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
377     : 0-----1------00------1--
377     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
378     : -1-----0----------0-0--1
378     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
379     : --1-----0---------00---1
379     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
380     : 1-----0------------00--1
380     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
381     : ----0--1----0-0------1--
381     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
382     : -----0--1---00-------1--
382     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
383     : ---0--1------00------1--
383     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
384     : ----1--0-------0-0----1-
384     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
385     : -----1--0------00-----1-
385     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
386     : ---1--0---------00----1-
386     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 1
387 (*) : --0---------00---1---1--
387     : ['vote(node1,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
388     : -0----------0-0-1----1--
388     : ['vote(node1,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
389     : 0------------001-----1--
389     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
390     : -----0------00------11--
390     : ['vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
391     : ----0-------0-0----1-1--
391     : ['vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
392     : ---0---------00---1--1--
392     : ['vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
393     : --0-----------100-----1-
393     : ['vote(node0,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
394     : -0-----------1-0-0----1-
394     : ['vote(node0,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
395     : 0-----------1---00----1-
395     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
396     : --------0------00---1-1-
396     : ['vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
397     : -------0-------0-0-1--1-
397     : ['vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
398     : ------0---------001---1-
398     : ['vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
399     : -----0--------1---00---1
399     : ['vote(node0,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
400     : ----0--------1----0-0--1
400     : ['vote(node0,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
401     : ---0--------1------00--1
401     : ['vote(node0,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
402     : --------0--------100---1
402     : ['vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
403     : -------0--------1-0-0--1
403     : ['vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
404     : ------0--------1---00--1
404     : ['vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 1
405 (*) : --00---------0---11--1--
405     : ['vote(node1,value2)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
406     : -0-0----------0-1-1--1--
406     : ['vote(node1,value1)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)']
407     : --0-0-------0----1-1-1--
407     : ['vote(node1,value2)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
408     : 0---0---------01---1-1--
408     : ['vote(node1,value0)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)']
409     : -0---0------0---1---11--
409     : ['vote(node1,value1)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)']
410     : 0----0-------0-1----11--
410     : ['vote(node1,value0)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)']
411     : --0---0-------1-0-1---1-
411     : ['vote(node0,value2)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
412     : -0----0------1---01---1-
412     : ['vote(node0,value1)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)']
413     : --0----0------10---1--1-
413     : ['vote(node0,value2)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
414     : 0------0----1----0-1--1-
414     : ['vote(node0,value0)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)']
415     : -0------0----1-0----1-1-
415     : ['vote(node0,value1)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)']
416     : 0-------0---1---0---1-1-
416     : ['vote(node0,value0)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)']
417     : -----00-------11---0---1
417     : ['vote(node0,value2)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
418     : ----0-0------1-1----0--1
418     : ['vote(node0,value1)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value2)']
419     : -----0-0------1-1-0----1
419     : ['vote(node0,value2)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
420     : ---0---0----1---1---0--1
420     : ['vote(node0,value0)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value2)']
421     : ----0---0----1---10----1
421     : ['vote(node0,value1)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)']
422     : ---0----0---1----1-0---1
422     : ['vote(node0,value0)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : --0--0-----100-------1--
423     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
424     : -0--0-----1-0-0------1--
424     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
425     : 0--0-----1---00------1--
425     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
426     : --0-----0--1---00-----1-
426     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
427     : -0-----0--1----0-0----1-
427     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : 0-----0--1------00----1-
428     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
429     : -----0--0--1------00---1
429     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
430     : ----0--0--1-------0-0--1
430     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
431     : ---0--0--1---------00--1
431     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
432 (*) : --0---------00-00----11-
432     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
433     : -0----------0-00-0---11-
433     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
434     : 0------------00-00---11-
434     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
435     : -----0------00----00-1-1
435     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
436     : ----0-------0-0---0-01-1
436     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
437     : ---0---------00----001-1
437     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
438     : --------0------00-00--11
438     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
439     : -------0-------0-00-0-11
439     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
440     : ------0---------00-00-11
440     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 18
num_suborbits: 1
441 (*) : --00----0----0---1-0-1-1
441     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node2,value1)']
442     : -0-0---0------0-1---01-1
442     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
443     : --0-0---0---0----10--1-1
443     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)']
444     : 0---0-0-------01----01-1
444     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
445     : -0---0-0----0---1-0--1-1
445     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)']
446     : 0----00------0-1---0-1-1
446     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
447     : 0----0--0----0--0---111-
447     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)']
448     : 0---0--0------0--0-1-11-
448     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
449     : -0---0--0---0--0----111-
449     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)']
450     : -0-0--0-------0--01--11-
450     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
451     : --0-0--0----0--0---1-11-
451     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)']
452     : --00--0------0--0-1--11-
452     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
453     : --0--00-------1-0--0--11
453     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
454     : -0--0-0------1---0--0-11
454     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
455     : --0--0-0------10--0---11
455     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
456     : 0--0---0----1----0--0-11
456     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
457     : -0--0---0----1-0--0---11
457     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
458     : 0--0----0---1---0--0--11
458     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 36
num_suborbits: 1
459 (*) : --00---------0---1-001-1
459     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
460     : -0-0----------0-1--001-1
460     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
461     : --0-0-------0----10-01-1
461     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
462     : 0---0---------01--0-01-1
462     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
463     : -0---0------0---1-00-1-1
463     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
464     : 0----0-------0-1--00-1-1
464     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
465     : 0----0-------0--00--111-
465     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
466     : 0---0---------0-00-1-11-
466     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
467     : -0---0------0--0-0--111-
467     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
468     : -0-0----------00-01--11-
468     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
469     : --0-0-------0--00--1-11-
469     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
470     : --00---------0-00-1--11-
470     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
471     : --0---0-------1-0--00-11
471     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
472     : -0----0------1---0-00-11
472     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
473     : --0----0------10--0-0-11
473     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
474     : 0------0----1----00-0-11
474     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
475     : -0------0----1-0--00--11
475     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
476     : 0-------0---1---0-00--11
476     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
477     : 0-------0----00-0---111-
477     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
478     : 0------0-----00--0-1-11-
478     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
479     : -0------0---0-00----111-
479     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
480     : -0----0-----0-0--01--11-
480     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
481     : --0----0----00-0---1-11-
481     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
482     : --0---0-----00--0-1--11-
482     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
483     : -----00-------1-00-0--11
483     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
484     : ----0-0------1--00--0-11
484     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
485     : -----0-0------10-00---11
485     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
486     : ---0---0----1--0-0--0-11
486     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
487     : ----0---0----1-00-0---11
487     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
488     : ---0----0---1--00--0--11
488     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
489     : ---0----0----00--1-0-1-1
489     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
490     : ---0---0-----00-1---01-1
490     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
491     : ----0---0---0-0--10--1-1
491     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
492     : ----0-0-----0-01----01-1
492     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
493     : -----0-0----00--1-0--1-1
493     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
494     : -----00-----00-1---0-1-1
494     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
495 (*) : --00----0----0-00--0-111
495     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
496     : -0-0---0------00-0--0111
496     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
497     : --0-0---0---0--00-0--111
497     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
498     : 0---0-0-------0-00--0111
498     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
499     : -0---0-0----0--0-00--111
499     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
500     : 0----00------0--00-0-111
500     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
501     : 0----0--0----0--0-00-111
501     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
502     : 0---0--0------0--00-0111
502     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
503     : -0---0--0---0--0--00-111
503     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
504     : -0-0--0-------0--0-00111
504     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
505     : --0-0--0----0--0--0-0111
505     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
506     : --00--0------0--0--00111
506     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
507     : --0--00-----00--0--0-111
507     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
508     : -0--0-0-----0-0--0--0111
508     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
509     : --0--0-0----00-0--0--111
509     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
510     : 0--0---0-----00--0--0111
510     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
511     : -0--0---0---0-00--0--111
511     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
512     : 0--0----0----00-0--0-111
512     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
513 (*) : --00---------0-00--00111
513     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
514     : -0-0----------00-0-00111
514     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
515     : --0-0-------0--00-0-0111
515     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
516     : 0---0---------0-000-0111
516     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
517     : -0---0------0--0-000-111
517     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
518     : 0----0-------0--0000-111
518     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
519     : --0---0-----00--0--00111
519     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
520     : -0----0-----0-0--0-00111
520     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
521     : --0----0----00-0--0-0111
521     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
522     : 0------0-----00--00-0111
522     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
523     : -0------0---0-00--00-111
523     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
524     : 0-------0----00-0-00-111
524     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
525     : -----00-----00--00-0-111
525     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
526     : ----0-0-----0-0-00--0111
526     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
527     : -----0-0----00-0-00--111
527     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
528     : ---0---0-----000-0--0111
528     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
529     : ----0---0---0-000-0--111
529     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
530     : ---0----0----0000--0-111
530     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
531 (*) : 0-00-00-0----0--0--0-111
531     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
532     : 00-00-00------0--0--0111
532     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
533     : -00-00-00---0--0--0--111
533     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 0.242 seconds

[QRM NOTE]: Time elapsed since last: 0.218 seconds

[QRM NOTE]: Peak memory: 1736844 bytes


========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

========================================================================================================

definition primes: {8, 9, 13, 5}


New level: 0
 pending : [0, 1, 2, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []

Essensial at level 0 : {0, 1, 20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 131072), (4, 2147483648), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, 0), (24, 0), (25, 0), (26, 524288), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

Covered at level 0 : {32, 2, 6, 7, 23, 24, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 131072), (4, 2147483648), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, 0), (24, 0), (25, 0), (26, 524288), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20]

[QRM NOTE]: Time elapsed since start: 0.320 seconds

[QRM NOTE]: Time elapsed since last: 0.079 seconds

[QRM NOTE]: Peak memory: 673276 bytes


============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', 'vote(node1,value1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', 'vote(node1,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
9 (*) : ---------------1------0-
9     : ['vote(node1,value0)', '~voted(node1)']
10     : ----------------1-----0-
10     : ['vote(node1,value1)', '~voted(node1)']
11     : -----------------1----0-
11     : ['vote(node1,value2)', '~voted(node1)']
12     : ------------------1----0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------------1---0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : --------------------1--0
14     : ['vote(node2,value2)', '~voted(node2)']
15     : ------------1--------0--
15     : ['vote(node0,value0)', '~voted(node0)']
16     : -------------1-------0--
16     : ['vote(node0,value1)', '~voted(node0)']
17     : --------------1------0--
17     : ['vote(node0,value2)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', '~voted(node1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', '~voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : ------------------000--1
354     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
355     : ---------------000----1-
355     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : ------------000------1--
356     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)']

sign_func_name2args: {'1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$1$vote$0$2, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$2]}

sig2const: {'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2', 'value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2')


---------- SigGenerator ----------

terms:  ['~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 3, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : ------1----1------------
54     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
55     : ------1---1-------------
55     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
56     : -------1---1------------
56     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
57     : -------1-1--------------
57     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
58     : --------1-1-------------
58     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
59     : --------11--------------
59     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
60     : ---1-------1------------
60     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
61     : ---1------1-------------
61     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
62     : ----1------1------------
62     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
63     : ----1----1--------------
63     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
64     : -----1----1-------------
64     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
65     : -----1---1--------------
65     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
66     : 1----------1------------
66     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
67     : 1---------1-------------
67     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
68     : -1---------1------------
68     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
69     : -1-------1--------------
69     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
70     : --1-------1-------------
70     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
71     : --1------1--------------
71     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,QUORUM0,VALUE0. ~decided(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ----------11------------
72     : ['decided(value1)', 'decided(value2)']
73     : ---------1-1------------
73     : ['decided(value0)', 'decided(value2)']
74     : ---------11-------------
74     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'decided(value2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value1)', 'decided(value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0. ~decided(VALUE1) | ~decided(VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 2
165 (*) : ---------1---1------1---
165     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
166     : ---------1----1----1----
166     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
167     : ----------1-1-------1---
167     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
168     : ----------1---1---1-----
168     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
169     : -----------11------1----
169     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
170     : -----------1-1----1-----
170     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
171     : ---------1---1---1------
171     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
172     : ---------1----1-1-------
172     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
173     : ----------1-1----1------
173     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
174     : ----------1---11--------
174     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
175     : -----------11---1-------
175     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
176     : -----------1-1-1--------
176     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
177     : ---------1------1---1---
177     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
178     : ---------1-------1-1----
178     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
179     : ----------1----1----1---
179     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
180     : ----------1------11-----
180     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
181     : -----------1---1---1----
181     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
182     : -----------1----1-1-----
182     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
219 (*) : ---------1----1-----1---
219     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
220     : ---------1---1-----1----
220     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
221     : ----------1---1-----1---
221     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
222     : ----------1-1-----1-----
222     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
223     : -----------1-1-----1----
223     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
224     : -----------11-----1-----
224     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
225     : ---------1----1--1------
225     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
226     : ---------1---1--1-------
226     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
227     : ----------1---1--1------
227     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
228     : ----------1-1--1--------
228     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
229     : -----------1-1--1-------
229     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
230     : -----------11--1--------
230     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
231     : ---------1-------1--1---
231     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
232     : ---------1------1--1----
232     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
233     : ----------1------1--1---
233     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
234     : ----------1----1--1-----
234     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
235     : -----------1----1--1----
235     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
236     : -----------1---1--1-----
236     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE2)', 'vote(NODE0,VALUE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE1,NODE0,VALUE0,VALUE2. ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | VALUE0 = VALUE2 | NODE0 = NODE1)


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
183 (*) : ---------1-----0----1---
183     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
184     : ---------1-----0---1----
184     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
185     : ----------1-----0---1---
185     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
186     : ----------1-----0-1-----
186     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
187     : -----------1-----0-1----
187     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
188     : -----------1-----01-----
188     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
189     : ---------1-------10-----
189     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
190     : ---------1------1-0-----
190     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
191     : ----------1------1-0----
191     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
192     : ----------1----1---0----
192     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
193     : -----------1----1---0---
193     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
194     : -----------1---1----0---
194     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
195     : ---------1--0-------1---
195     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
196     : ---------1--0------1----
196     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
197     : ----------1--0------1---
197     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
198     : ----------1--0----1-----
198     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
199     : -----------1--0----1----
199     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
200     : -----------1--0---1-----
200     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
201     : ---------1----1---0-----
201     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
202     : ---------1---1----0-----
202     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
203     : ----------1---1----0----
203     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
204     : ----------1-1------0----
204     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
205     : -----------1-1------0---
205     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
206     : -----------11-------0---
206     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
207     : ---------1--0----1------
207     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
208     : ---------1--0---1-------
208     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
209     : ----------1--0---1------
209     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
210     : ----------1--0-1--------
210     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
211     : -----------1--0-1-------
211     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
212     : -----------1--01--------
212     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
213     : ---------1----10--------
213     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
214     : ---------1---1-0--------
214     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
215     : ----------1---1-0-------
215     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
216     : ----------1-1---0-------
216     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
217     : -----------1-1---0------
217     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
218     : -----------11----0------
218     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node1,value0)', 'vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node1,value0)', 'vote(node2,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE1,NODE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 12 =====================
size : 18
num_suborbits: 1
237 (*) : 0--------1----------1---
237     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
238     : 0--------1---------1----
238     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
239     : -0--------1---------1---
239     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
240     : -0--------1-------1-----
240     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
241     : --0--------1-------1----
241     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
242     : --0--------1------1-----
242     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
243     : ---0-----1-------1------
243     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
244     : ---0-----1------1-------
244     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
245     : ----0-----1------1------
245     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
246     : ----0-----1----1--------
246     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
247     : -----0-----1----1-------
247     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
248     : -----0-----1---1--------
248     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
249     : ------0--1----1---------
249     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
250     : ------0--1---1----------
250     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
251     : -------0--1---1---------
251     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
252     : -------0--1-1-----------
252     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
253     : --------0--1-1----------
253     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
254     : --------0--11-----------
254     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)', 'vote(node2,value2)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)', 'vote(node2,value2)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', '~member(NODE0,QUORUM0)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,QUORUM0,VALUE0,NODE0. ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
264 (*) : ---------1----------1-0-
264     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
265     : ---------1---------1--0-
265     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
266     : ----------1---------1-0-
266     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
267     : ----------1-------1---0-
267     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
268     : -----------1-------1--0-
268     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
269     : -----------1------1---0-
269     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
270     : ---------1-------1-----0
270     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
271     : ---------1------1------0
271     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
272     : ----------1------1-----0
272     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
273     : ----------1----1-------0
273     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
274     : -----------1----1------0
274     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
275     : -----------1---1-------0
275     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
276     : ---------1----------10--
276     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
277     : ---------1---------1-0--
277     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
278     : ----------1---------10--
278     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
279     : ----------1-------1--0--
279     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
280     : -----------1-------1-0--
280     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
281     : -----------1------1--0--
281     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
282     : ---------1----1--------0
282     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
283     : ---------1---1---------0
283     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
284     : ----------1---1--------0
284     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
285     : ----------1-1----------0
285     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
286     : -----------1-1---------0
286     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
287     : -----------11----------0
287     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
288     : ---------1-------1---0--
288     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
289     : ---------1------1----0--
289     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
290     : ----------1------1---0--
290     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
291     : ----------1----1-----0--
291     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
292     : -----------1----1----0--
292     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
293     : -----------1---1-----0--
293     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
294     : ---------1----1-------0-
294     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
295     : ---------1---1--------0-
295     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
296     : ----------1---1-------0-
296     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
297     : ----------1-1---------0-
297     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
298     : -----------1-1--------0-
298     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
299     : -----------11---------0-
299     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'vote(NODE0,VALUE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE1,NODE0. voted(NODE1) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : -----------1---------00-
300     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
301     : ----------1----------00-
301     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
302     : ---------1-----------00-
302     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
303     : -----------1---------0-0
303     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
304     : ----------1----------0-0
304     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
305     : ---------1-----------0-0
305     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
306     : -----------1----------00
306     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
307     : ----------1-----------00
307     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
308     : ---------1------------00
308     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~voted(node0)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~voted(node0)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', '~voted(NODE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. voted(NODE0) | voted(NODE1) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : -----0-----1----------0-
309     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
310     : ----0-----1-----------0-
310     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
311     : ---0-----1------------0-
311     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
312     : --0--------1-----------0
312     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
313     : -0--------1------------0
313     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
314     : 0--------1-------------0
314     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
315     : --------0--1---------0--
315     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
316     : -------0--1----------0--
316     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
317     : ------0--1-----------0--
317     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value2)', 'decided(value2)', '~voted(node1)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value2)', 'decided(value2)', '~voted(node1)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', '~member(NODE0,QUORUM0)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,NODE0. voted(NODE0) | member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
318 (*) : -----------1--0-------0-
318     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
319     : ----------1--0--------0-
319     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
320     : ---------1--0---------0-
320     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
321     : -----------1--0--------0
321     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
322     : ----------1--0---------0
322     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
323     : ---------1--0----------0
323     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
324     : -----------1-----0---0--
324     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
325     : ----------1-----0----0--
325     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
326     : ---------1-----0-----0--
326     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
327     : -----------1-----0-----0
327     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
328     : ----------1-----0------0
328     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
329     : ---------1-----0-------0
329     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
330     : -----------1--------00--
330     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
331     : ----------1--------0-0--
331     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
332     : ---------1--------0--0--
332     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
333     : -----------1--------0-0-
333     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
334     : ----------1--------0--0-
334     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
335     : ---------1--------0---0-
335     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', '~voted(NODE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. vote(NODE0,VALUE0) | voted(NODE1) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : ---0-----1-----0--------
336     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
337     : ----0-----1-----0-------
337     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
338     : -----0-----1-----0------
338     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
339     : 0--------1--------0-----
339     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
340     : -0--------1--------0----
340     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
341     : --0--------1--------0---
341     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
342     : ------0--1--0-----------
342     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
343     : -------0--1--0----------
343     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
344     : --------0--1--0---------
344     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value0)', 'decided(value0)', '~vote(node1,value0)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value0)', 'decided(value0)', '~vote(node1,value0)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', '~member(NODE0,QUORUM0)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,NODE0. vote(NODE0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ---------1-----0--0-----
345     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
346     : ----------1-----0--0----
346     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
347     : -----------1-----0--0---
347     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
348     : ---------1--0-----0-----
348     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
349     : ----------1--0-----0----
349     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
350     : -----------1--0-----0---
350     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
351     : ---------1--0--0--------
351     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
352     : ----------1--0--0-------
352     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
353     : -----------1--0--0------
353     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. vote(NODE0,VALUE0) | ~decided(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : -----0--0--1--------1---
357     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : ----0--0--1--------1----
358     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : ---0--0--1--------1-----
359     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : --0-----0--1-----1------
360     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
361     : -0-----0--1-----1-------
361     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : 0-----0--1-----1--------
362     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : --0--0-----1--1---------
363     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
364     : -0--0-----1--1----------
364     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', 'vote(node2,value2)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', 'vote(node2,value2)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM1,VALUE0)', 'member(NODE0,QUORUM1)', 'decided(VALUE0)', 'member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,QUORUM1,NODE0. chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | ~decided(VALUE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | QUORUM0 = QUORUM1


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : --0--0--0--1------------
366     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
367     : -0--0--0--1-------------
367     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
368     : 0--0--0--1--------------
368     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : --0--0-----100-------1--
423     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
424     : -0--0-----1-0-0------1--
424     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
425     : 0--0-----1---00------1--
425     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
426     : --0-----0--1---00-----1-
426     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
427     : -0-----0--1----0-0----1-
427     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : 0-----0--1------00----1-
428     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
429     : -----0--0--1------00---1
429     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
430     : ----0--0--1-------0-0--1
430     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
431     : ---0--0--1---------00--1
431     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', 'decided(value2)', '~vote(node0,value0)', '~vote(node0,value1)', 'voted(node0)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0, node$0$member$0$0, node$0$member$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', 'decided(value2)', '~vote(node0,value0)', '~vote(node0,value1)', 'voted(node0)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '1$vote': 2, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE1)', 'voted(NODE0)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM0,VALUE1)', '~chosenAt(QUORUM1,VALUE1)', 'member(NODE0,QUORUM0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,QUORUM0,QUORUM1,NODE0. ~decided(VALUE1) | ~voted(NODE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE1) | chosenAt(QUORUM1,VALUE1) | ~member(NODE0,QUORUM0) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


======================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

======================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 1 =====================
size : 9
num_suborbits: 1
9 (*) : ---------------1------0-
9     : ['vote(node1,value0)', '~voted(node1)']
10     : ----------------1-----0-
10     : ['vote(node1,value1)', '~voted(node1)']
11     : -----------------1----0-
11     : ['vote(node1,value2)', '~voted(node1)']
12     : ------------------1----0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------------1---0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : --------------------1--0
14     : ['vote(node2,value2)', '~voted(node2)']
15     : ------------1--------0--
15     : ['vote(node0,value0)', '~voted(node0)']
16     : -------------1-------0--
16     : ['vote(node0,value1)', '~voted(node0)']
17     : --------------1------0--
17     : ['vote(node0,value2)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : ------------------000--1
354     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
355     : ---------------000----1-
355     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : ------------000------1--
356     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))
qcost : 4




=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : ------1----1------------
54     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
55     : ------1---1-------------
55     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
56     : -------1---1------------
56     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
57     : -------1-1--------------
57     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
58     : --------1-1-------------
58     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
59     : --------11--------------
59     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
60     : ---1-------1------------
60     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
61     : ---1------1-------------
61     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
62     : ----1------1------------
62     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
63     : ----1----1--------------
63     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
64     : -----1----1-------------
64     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
65     : -----1---1--------------
65     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
66     : 1----------1------------
66     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
67     : 1---------1-------------
67     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
68     : -1---------1------------
68     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
69     : -1-------1--------------
69     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
70     : --1-------1-------------
70     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
71     : --1------1--------------
71     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,QUORUM0,VALUE0. ~decided(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ----------11------------
72     : ['decided(value1)', 'decided(value2)']
73     : ---------1-1------------
73     : ['decided(value0)', 'decided(value2)']
74     : ---------11-------------
74     : ['decided(value0)', 'decided(value1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0. ~decided(VALUE1) | ~decided(VALUE0) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 10 =====================
size : 36
num_suborbits: 2
165 (*) : ---------1---1------1---
165     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
166     : ---------1----1----1----
166     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
167     : ----------1-1-------1---
167     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
168     : ----------1---1---1-----
168     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
169     : -----------11------1----
169     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
170     : -----------1-1----1-----
170     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
171     : ---------1---1---1------
171     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
172     : ---------1----1-1-------
172     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
173     : ----------1-1----1------
173     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
174     : ----------1---11--------
174     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
175     : -----------11---1-------
175     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
176     : -----------1-1-1--------
176     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
177     : ---------1------1---1---
177     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
178     : ---------1-------1-1----
178     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
179     : ----------1----1----1---
179     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
180     : ----------1------11-----
180     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
181     : -----------1---1---1----
181     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
182     : -----------1----1-1-----
182     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
219 (*) : ---------1----1-----1---
219     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
220     : ---------1---1-----1----
220     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
221     : ----------1---1-----1---
221     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
222     : ----------1-1-----1-----
222     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
223     : -----------1-1-----1----
223     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
224     : -----------11-----1-----
224     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
225     : ---------1----1--1------
225     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
226     : ---------1---1--1-------
226     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
227     : ----------1---1--1------
227     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
228     : ----------1-1--1--------
228     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
229     : -----------1-1--1-------
229     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
230     : -----------11--1--------
230     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
231     : ---------1-------1--1---
231     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
232     : ---------1------1--1----
232     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
233     : ----------1------1--1---
233     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
234     : ----------1----1--1-----
234     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
235     : -----------1----1--1----
235     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
236     : -----------1---1--1-----
236     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
num_forall :   5
num_exists :   0
num_literals : 6
quantified form : forall VALUE1,NODE1,NODE0,VALUE0,VALUE2. ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | VALUE0 = VALUE2 | NODE0 = NODE1)
qcost : 11




=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
183 (*) : ---------1-----0----1---
183     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
184     : ---------1-----0---1----
184     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
185     : ----------1-----0---1---
185     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
186     : ----------1-----0-1-----
186     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
187     : -----------1-----0-1----
187     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
188     : -----------1-----01-----
188     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
189     : ---------1-------10-----
189     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
190     : ---------1------1-0-----
190     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
191     : ----------1------1-0----
191     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
192     : ----------1----1---0----
192     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
193     : -----------1----1---0---
193     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
194     : -----------1---1----0---
194     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
195     : ---------1--0-------1---
195     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
196     : ---------1--0------1----
196     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
197     : ----------1--0------1---
197     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
198     : ----------1--0----1-----
198     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
199     : -----------1--0----1----
199     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
200     : -----------1--0---1-----
200     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
201     : ---------1----1---0-----
201     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
202     : ---------1---1----0-----
202     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
203     : ----------1---1----0----
203     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
204     : ----------1-1------0----
204     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
205     : -----------1-1------0---
205     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
206     : -----------11-------0---
206     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
207     : ---------1--0----1------
207     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
208     : ---------1--0---1-------
208     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
209     : ----------1--0---1------
209     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
210     : ----------1--0-1--------
210     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
211     : -----------1--0-1-------
211     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
212     : -----------1--01--------
212     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
213     : ---------1----10--------
213     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
214     : ---------1---1-0--------
214     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
215     : ----------1---1-0-------
215     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
216     : ----------1-1---0-------
216     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
217     : -----------1-1---0------
217     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
218     : -----------11----0------
218     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE1,NODE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 18
num_suborbits: 1
237 (*) : 0--------1----------1---
237     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
238     : 0--------1---------1----
238     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
239     : -0--------1---------1---
239     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
240     : -0--------1-------1-----
240     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
241     : --0--------1-------1----
241     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
242     : --0--------1------1-----
242     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
243     : ---0-----1-------1------
243     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
244     : ---0-----1------1-------
244     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
245     : ----0-----1------1------
245     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
246     : ----0-----1----1--------
246     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
247     : -----0-----1----1-------
247     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
248     : -----0-----1---1--------
248     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
249     : ------0--1----1---------
249     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
250     : ------0--1---1----------
250     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
251     : -------0--1---1---------
251     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
252     : -------0--1-1-----------
252     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
253     : --------0--1-1----------
253     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
254     : --------0--11-----------
254     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,QUORUM0,VALUE0,NODE0. ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
264 (*) : ---------1----------1-0-
264     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
265     : ---------1---------1--0-
265     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
266     : ----------1---------1-0-
266     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
267     : ----------1-------1---0-
267     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
268     : -----------1-------1--0-
268     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
269     : -----------1------1---0-
269     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
270     : ---------1-------1-----0
270     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
271     : ---------1------1------0
271     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
272     : ----------1------1-----0
272     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
273     : ----------1----1-------0
273     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
274     : -----------1----1------0
274     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
275     : -----------1---1-------0
275     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
276     : ---------1----------10--
276     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
277     : ---------1---------1-0--
277     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
278     : ----------1---------10--
278     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
279     : ----------1-------1--0--
279     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
280     : -----------1-------1-0--
280     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
281     : -----------1------1--0--
281     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
282     : ---------1----1--------0
282     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
283     : ---------1---1---------0
283     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
284     : ----------1---1--------0
284     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
285     : ----------1-1----------0
285     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
286     : -----------1-1---------0
286     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
287     : -----------11----------0
287     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
288     : ---------1-------1---0--
288     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
289     : ---------1------1----0--
289     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
290     : ----------1------1---0--
290     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
291     : ----------1----1-----0--
291     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
292     : -----------1----1----0--
292     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
293     : -----------1---1-----0--
293     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
294     : ---------1----1-------0-
294     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
295     : ---------1---1--------0-
295     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
296     : ----------1---1-------0-
296     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
297     : ----------1-1---------0-
297     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
298     : -----------1-1--------0-
298     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
299     : -----------11---------0-
299     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,NODE1,NODE0. voted(NODE1) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : -----------1---------00-
300     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
301     : ----------1----------00-
301     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
302     : ---------1-----------00-
302     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
303     : -----------1---------0-0
303     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
304     : ----------1----------0-0
304     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
305     : ---------1-----------0-0
305     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
306     : -----------1----------00
306     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
307     : ----------1-----------00
307     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
308     : ---------1------------00
308     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. voted(NODE0) | voted(NODE1) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : -----0-----1----------0-
309     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
310     : ----0-----1-----------0-
310     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
311     : ---0-----1------------0-
311     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
312     : --0--------1-----------0
312     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
313     : -0--------1------------0
313     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
314     : 0--------1-------------0
314     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
315     : --------0--1---------0--
315     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
316     : -------0--1----------0--
316     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
317     : ------0--1-----------0--
317     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,VALUE0,NODE0. voted(NODE0) | member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
318 (*) : -----------1--0-------0-
318     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
319     : ----------1--0--------0-
319     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
320     : ---------1--0---------0-
320     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
321     : -----------1--0--------0
321     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
322     : ----------1--0---------0
322     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
323     : ---------1--0----------0
323     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
324     : -----------1-----0---0--
324     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
325     : ----------1-----0----0--
325     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
326     : ---------1-----0-----0--
326     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
327     : -----------1-----0-----0
327     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
328     : ----------1-----0------0
328     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
329     : ---------1-----0-------0
329     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
330     : -----------1--------00--
330     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
331     : ----------1--------0-0--
331     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
332     : ---------1--------0--0--
332     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
333     : -----------1--------0-0-
333     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
334     : ----------1--------0--0-
334     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
335     : ---------1--------0---0-
335     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. vote(NODE0,VALUE0) | voted(NODE1) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : ---0-----1-----0--------
336     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
337     : ----0-----1-----0-------
337     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
338     : -----0-----1-----0------
338     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
339     : 0--------1--------0-----
339     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
340     : -0--------1--------0----
340     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
341     : --0--------1--------0---
341     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
342     : ------0--1--0-----------
342     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
343     : -------0--1--0----------
343     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
344     : --------0--1--0---------
344     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,VALUE0,NODE0. vote(NODE0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ---------1-----0--0-----
345     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
346     : ----------1-----0--0----
346     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
347     : -----------1-----0--0---
347     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
348     : ---------1--0-----0-----
348     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
349     : ----------1--0-----0----
349     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
350     : -----------1--0-----0---
350     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
351     : ---------1--0--0--------
351     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
352     : ----------1--0--0-------
352     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
353     : -----------1--0--0------
353     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. vote(NODE0,VALUE0) | ~decided(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
357 (*) : -----0--0--1--------1---
357     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : ----0--0--1--------1----
358     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : ---0--0--1--------1-----
359     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : --0-----0--1-----1------
360     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
361     : -0-----0--1-----1-------
361     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : 0-----0--1-----1--------
362     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : --0--0-----1--1---------
363     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
364     : -0--0-----1--1----------
364     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall QUORUM0,VALUE0,QUORUM1,NODE0. chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | ~decided(VALUE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : --0--0--0--1------------
366     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
367     : -0--0--0--1-------------
367     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
368     : 0--0--0--1--------------
368     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : --0--0-----100-------1--
423     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
424     : -0--0-----1-0-0------1--
424     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
425     : 0--0-----1---00------1--
425     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
426     : --0-----0--1---00-----1-
426     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
427     : -0-----0--1----0-0----1-
427     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : 0-----0--1------00----1-
428     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
429     : -----0--0--1------00---1
429     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
430     : ----0--0--1-------0-0--1
430     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
431     : ---0--0--1---------00--1
431     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall VALUE1,QUORUM0,QUORUM1,NODE0. ~decided(VALUE1) | ~voted(NODE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE1) | chosenAt(QUORUM1,VALUE1) | ~member(NODE0,QUORUM0) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 2.495 seconds

[QRM NOTE]: Time elapsed since last: 2.175 seconds

[QRM NOTE]: Peak memory: 2527839 bytes


=====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

=====================================================================================================


New level: 1
 pending : [3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20]


Solution : [0, 1, 20] has cost 14.


Decide in level 1 among pending : [3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 4 with phase True at level 1

After decision at level 1
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20, 4]


New level: 2
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20, 4]


Before reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 1, 20, 4]


Solution : [0, 1, 20, 4] has cost 19.


Decide in level 2 among pending : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 1, 20, 4, 22]


New level: 3
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 1, 20, 4, 22]


Before reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 1, 20, 4, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, 134217728), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 1, 20, 4, 22]


Before reduction : 
 pending  : []
 solution : [0, 1, 20, 4, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 20, 4, 22]


Solution : [0, 1, 20, 4, 22] has cost 23.


Before backtrack at level 3
 pending : []
 solution : [0, 1, 20, 4, 22]

After backtrack at level 3
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 1, 20, 4, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 1, 20, 4]


Before reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 1, 20, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [0, 1, 20, 4]


Solution : [0, 1, 20, 4] has cost 19.


Decide in level 3 among pending : [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 3

After decision at level 3
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26]
 solution : [0, 1, 20, 4, 18]


New level: 4
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26]
 solution : [0, 1, 20, 4, 18]


Before reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26]
 solution : [0, 1, 20, 4, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, 67108864), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 1, 20, 4, 18]


Before reduction : 
 pending  : []
 solution : [0, 1, 20, 4, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 20, 4, 18]


Solution : [0, 1, 20, 4, 18] has cost 26.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 20, 4, 18]

After backtrack at level 4
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26]
 solution : [0, 1, 20, 4, 18]


Invert decision for 18 at level 3


New level: 4
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26]
 solution : [0, 1, 20, 4]


Before reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26]
 solution : [0, 1, 20, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26]
 solution : [0, 1, 20, 4]


Solution : [0, 1, 20, 4] has cost 19.


Decide in level 4 among pending : [3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 19 with phase True at level 4

After decision at level 4
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 19]


New level: 5
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 19]


Before reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, 33554432), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {3, 10, 11, 12, 14, 15, 16, 17, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 1, 20, 4, 19]


Before reduction : 
 pending  : []
 solution : [0, 1, 20, 4, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 20, 4, 19]


Solution : [0, 1, 20, 4, 19] has cost 26.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 20, 4, 19]

After backtrack at level 5
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 19]


Invert decision for 19 at level 4


New level: 5
 pending : [3, 10, 11, 12, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4]


Before reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 10, 11, 12, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4]


Solution : [0, 1, 20, 4] has cost 19.


Decide in level 5 among pending : [3, 10, 11, 12, 14, 15, 16, 17, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 5

After decision at level 5
 pending : [3, 10, 11, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 12]


New level: 6
 pending : [3, 10, 11, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 12]


Before reduction : 
 pending  : [3, 10, 11, 14, 15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, 2097152), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {11, 10, 3, 14}

After reduction : 
 pending  : [15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 12]


Before reduction : 
 pending  : [15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 12]


Solution : [0, 1, 20, 4, 12] has cost 28.


Before backtrack at level 6
 pending : [15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 12]

After backtrack at level 6
 pending : [15, 16, 17, 21, 26, 3, 10, 11, 14]
 solution : [0, 1, 20, 4, 12]


Invert decision for 12 at level 5


New level: 6
 pending : [15, 16, 17, 21, 26, 3, 10, 11, 14]
 solution : [0, 1, 20, 4]


Before reduction : 
 pending  : [15, 16, 17, 21, 26, 3, 10, 11, 14]
 solution : [0, 1, 20, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [15, 16, 17, 21, 26, 3, 10, 11, 14]
 solution : [0, 1, 20, 4]


Solution : [0, 1, 20, 4] has cost 19.


Decide in level 6 among pending : [15, 16, 17, 21, 26, 3, 10, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [15, 16, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 11]


New level: 7
 pending : [15, 16, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 11]


Before reduction : 
 pending  : [15, 16, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, 1048576), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {10, 3, 14}

After reduction : 
 pending  : [15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 11]


Before reduction : 
 pending  : [15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 11]


Solution : [0, 1, 20, 4, 11] has cost 28.


Before backtrack at level 7
 pending : [15, 16, 17, 21, 26]
 solution : [0, 1, 20, 4, 11]

After backtrack at level 7
 pending : [15, 16, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [15, 16, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4]


Before reduction : 
 pending  : [15, 16, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 2048), (16, 8192), (17, 2048), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [15, 16, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4]


Solution : [0, 1, 20, 4] has cost 19.


Decide in level 7 among pending : [15, 16, 17, 21, 26, 3, 10, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [15, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 16]


New level: 8
 pending : [15, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 16]


Before reduction : 
 pending  : [15, 17, 21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, 524288), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {17, 14, 15}

After reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 4, 16]


Before reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 4, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 4, 16]


Solution : [0, 1, 20, 4, 16] has cost 26.


Before backtrack at level 8
 pending : [21, 26, 3, 10]
 solution : [0, 1, 20, 4, 16]

After backtrack at level 8
 pending : [21, 26, 3, 10, 15, 17, 14]
 solution : [0, 1, 20, 4, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [21, 26, 3, 10, 15, 17, 14]
 solution : [0, 1, 20, 4]


Before reduction : 
 pending  : [21, 26, 3, 10, 15, 17, 14]
 solution : [0, 1, 20, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, -1), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 15, 17, 14]
 solution : [0, 1, 20, 4]


Solution : [0, 1, 20, 4] has cost 19.


Decide in level 8 among pending : [21, 26, 3, 10, 15, 17, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, -1), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 4, 17]


New level: 9
 pending : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 4, 17]


Before reduction : 
 pending  : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 4, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, -1), (17, 262144), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {14, 15}

After reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 4, 17]


Before reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 4, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 4, 17]


Solution : [0, 1, 20, 4, 17] has cost 26.


Before backtrack at level 9
 pending : [21, 26, 3, 10]
 solution : [0, 1, 20, 4, 17]

After backtrack at level 9
 pending : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 4, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 4]


Before reduction : 
 pending  : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 4]

Essensial at level 9 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 24576), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 15]


Before reduction : 
 pending  : [21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 15]


Solution : [0, 1, 20, 4, 15] has cost 26.


Before backtrack at level 9
 pending : [21, 26, 3, 10, 14]
 solution : [0, 1, 20, 4, 15]

After backtrack at level 9
 pending : [21, 26, 3, 10, 14, 15]
 solution : [0, 1, 20, 4]


Before backtrack at level 8
 pending : [21, 26, 3, 10, 14, 15]
 solution : [0, 1, 20, 4]

After backtrack at level 8
 pending : [21, 26, 3, 10, 14, 15, 17]
 solution : [0, 1, 20, 4]


Before backtrack at level 7
 pending : [21, 26, 3, 10, 14, 15, 17]
 solution : [0, 1, 20, 4]

After backtrack at level 7
 pending : [21, 26, 3, 10, 14, 15, 17, 16]
 solution : [0, 1, 20, 4]


Before backtrack at level 6
 pending : [21, 26, 3, 10, 14, 15, 17, 16]
 solution : [0, 1, 20, 4]

After backtrack at level 6
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11]
 solution : [0, 1, 20, 4]


Before backtrack at level 5
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11]
 solution : [0, 1, 20, 4]

After backtrack at level 5
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20, 4]


Before backtrack at level 4
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20, 4]

After backtrack at level 4
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20, 4]


Before backtrack at level 3
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20, 4]

After backtrack at level 3
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20, 4]


Before backtrack at level 2
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20, 4]

After backtrack at level 2
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18, 22]
 solution : [0, 1, 20, 4]


Invert decision for 4 at level 1


New level: 2
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18, 22]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18, 22]
 solution : [0, 1, 20]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 49152), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18, 22]
 solution : [0, 1, 20]


Solution : [0, 1, 20] has cost 14.


Decide in level 2 among pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20, 22]


New level: 3
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20, 22]


Before reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, 536870912), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 1, 20, 22]


Before reduction : 
 pending  : []
 solution : [0, 1, 20, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 20, 22]


Solution : [0, 1, 20, 22] has cost 18.


Before backtrack at level 3
 pending : []
 solution : [0, 1, 20, 22]

After backtrack at level 3
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20]


Solution : [0, 1, 20] has cost 14.


Decide in level 3 among pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 3

After decision at level 3
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20, 18]


New level: 4
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20, 18]


Before reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, 268435456), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {3, 10, 11, 12, 14, 15, 16, 17, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 1, 20, 18]


Before reduction : 
 pending  : []
 solution : [0, 1, 20, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 20, 18]


Solution : [0, 1, 20, 18] has cost 21.


Before backtrack at level 4
 pending : []
 solution : [0, 1, 20, 18]

After backtrack at level 4
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20, 18]


Invert decision for 18 at level 3


New level: 4
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20]


Solution : [0, 1, 20] has cost 14.


Decide in level 4 among pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 19 with phase True at level 4

After decision at level 4
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20, 19]


New level: 5
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20, 19]


Before reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, 134217728), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {3, 10, 11, 12, 14, 15, 16, 17, 21, 26}

After reduction : 
 pending  : []
 solution : [0, 1, 20, 19]


Before reduction : 
 pending  : []
 solution : [0, 1, 20, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 20, 19]


Solution : [0, 1, 20, 19] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [0, 1, 20, 19]

After backtrack at level 5
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20, 19]


Invert decision for 19 at level 4


New level: 5
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20]


Solution : [0, 1, 20] has cost 14.


Decide in level 5 among pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 5

After decision at level 5
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11]
 solution : [0, 1, 20, 12]


New level: 6
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11]
 solution : [0, 1, 20, 12]


Before reduction : 
 pending  : [21, 26, 3, 10, 14, 15, 17, 16, 11]
 solution : [0, 1, 20, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, 8388608), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {11, 10, 3, 14}

After reduction : 
 pending  : [21, 26, 15, 17, 16]
 solution : [0, 1, 20, 12]


Before reduction : 
 pending  : [21, 26, 15, 17, 16]
 solution : [0, 1, 20, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 26, 15, 17, 16]
 solution : [0, 1, 20, 12]


Solution : [0, 1, 20, 12] has cost 23.


Before backtrack at level 6
 pending : [21, 26, 15, 17, 16]
 solution : [0, 1, 20, 12]

After backtrack at level 6
 pending : [21, 26, 15, 17, 16, 3, 10, 14, 11]
 solution : [0, 1, 20, 12]


Invert decision for 12 at level 5


New level: 6
 pending : [21, 26, 15, 17, 16, 3, 10, 14, 11]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [21, 26, 15, 17, 16, 3, 10, 14, 11]
 solution : [0, 1, 20]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, -1), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 26, 15, 17, 16, 3, 10, 14, 11]
 solution : [0, 1, 20]


Solution : [0, 1, 20] has cost 14.


Decide in level 6 among pending : [21, 26, 15, 17, 16, 3, 10, 14, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, -1), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [21, 26, 15, 17, 16, 3, 10, 14]
 solution : [0, 1, 20, 11]


New level: 7
 pending : [21, 26, 15, 17, 16, 3, 10, 14]
 solution : [0, 1, 20, 11]


Before reduction : 
 pending  : [21, 26, 15, 17, 16, 3, 10, 14]
 solution : [0, 1, 20, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, 4194304), (12, -1), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {10, 3, 14}

After reduction : 
 pending  : [21, 26, 15, 17, 16]
 solution : [0, 1, 20, 11]


Before reduction : 
 pending  : [21, 26, 15, 17, 16]
 solution : [0, 1, 20, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, 0), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 26, 15, 17, 16]
 solution : [0, 1, 20, 11]


Solution : [0, 1, 20, 11] has cost 23.


Before backtrack at level 7
 pending : [21, 26, 15, 17, 16]
 solution : [0, 1, 20, 11]

After backtrack at level 7
 pending : [21, 26, 15, 17, 16, 3, 10, 14]
 solution : [0, 1, 20, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [21, 26, 15, 17, 16, 3, 10, 14]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [21, 26, 15, 17, 16, 3, 10, 14]
 solution : [0, 1, 20]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 32768), (17, 8192), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, -1), (12, -1), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 26, 15, 17, 16, 3, 10, 14]
 solution : [0, 1, 20]


Solution : [0, 1, 20] has cost 14.


Decide in level 7 among pending : [21, 26, 15, 17, 16, 3, 10, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, -1), (12, -1), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [21, 26, 15, 17, 3, 10, 14]
 solution : [0, 1, 20, 16]


New level: 8
 pending : [21, 26, 15, 17, 3, 10, 14]
 solution : [0, 1, 20, 16]


Before reduction : 
 pending  : [21, 26, 15, 17, 3, 10, 14]
 solution : [0, 1, 20, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, -1), (12, -1), (13, -1), (14, 65536), (15, 32768), (16, 2097152), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {17, 14, 15}

After reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 16]


Before reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 16]


Solution : [0, 1, 20, 16] has cost 21.


Before backtrack at level 8
 pending : [21, 26, 3, 10]
 solution : [0, 1, 20, 16]

After backtrack at level 8
 pending : [21, 26, 3, 10, 15, 17, 14]
 solution : [0, 1, 20, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [21, 26, 3, 10, 15, 17, 14]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [21, 26, 3, 10, 15, 17, 14]
 solution : [0, 1, 20]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, -1), (12, -1), (13, -1), (14, 65536), (15, 32768), (16, -1), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 15, 17, 14]
 solution : [0, 1, 20]


Solution : [0, 1, 20] has cost 14.


Decide in level 8 among pending : [21, 26, 3, 10, 15, 17, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, -1), (12, -1), (13, -1), (14, 65536), (15, 32768), (16, -1), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 17]


New level: 9
 pending : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 17]


Before reduction : 
 pending  : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, -1), (12, -1), (13, -1), (14, 65536), (15, 32768), (16, -1), (17, 1048576), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {14, 15}

After reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 17]


Before reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 10]
 solution : [0, 1, 20, 17]


Solution : [0, 1, 20, 17] has cost 21.


Before backtrack at level 9
 pending : [21, 26, 3, 10]
 solution : [0, 1, 20, 17]

After backtrack at level 9
 pending : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20]


Before reduction : 
 pending  : [21, 26, 3, 10, 15, 14]
 solution : [0, 1, 20]

Essensial at level 9 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 98304), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 131072), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, -1), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 14]
 solution : [0, 1, 20, 15]


Before reduction : 
 pending  : [21, 26, 3, 10, 14]
 solution : [0, 1, 20, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, -1), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 196608), (11, -1), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 524288), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 3, 10, 14]
 solution : [0, 1, 20, 15]


Solution : [0, 1, 20, 15] has cost 21.


Before backtrack at level 9
 pending : [21, 26, 3, 10, 14]
 solution : [0, 1, 20, 15]

After backtrack at level 9
 pending : [21, 26, 3, 10, 14, 15]
 solution : [0, 1, 20]


Before backtrack at level 8
 pending : [21, 26, 3, 10, 14, 15]
 solution : [0, 1, 20]

After backtrack at level 8
 pending : [21, 26, 3, 10, 14, 15, 17]
 solution : [0, 1, 20]


Before backtrack at level 7
 pending : [21, 26, 3, 10, 14, 15, 17]
 solution : [0, 1, 20]

After backtrack at level 7
 pending : [21, 26, 3, 10, 14, 15, 17, 16]
 solution : [0, 1, 20]


Before backtrack at level 6
 pending : [21, 26, 3, 10, 14, 15, 17, 16]
 solution : [0, 1, 20]

After backtrack at level 6
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11]
 solution : [0, 1, 20]


Before backtrack at level 5
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11]
 solution : [0, 1, 20]

After backtrack at level 5
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20]


Before backtrack at level 4
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12]
 solution : [0, 1, 20]

After backtrack at level 4
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20]


Before backtrack at level 3
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19]
 solution : [0, 1, 20]

After backtrack at level 3
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20]


Before backtrack at level 2
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18]
 solution : [0, 1, 20]

After backtrack at level 2
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18, 22]
 solution : [0, 1, 20]


Before backtrack at level 1
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18, 22]
 solution : [0, 1, 20]

After backtrack at level 1
 pending : [21, 26, 3, 10, 14, 15, 17, 16, 11, 12, 19, 18, 22, 4]
 solution : [0, 1, 20]


====================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

====================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 18

[MIN NOTE]: maximum branch and bound depth: 9

[MIN NOTE]: number of definitions: 1

invariant [def_chosenAt] forall V,Q. chosenAt(Q,V) = (forall N. member(N,Q) -> vote(N,V)) # definition, qcost: 6

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 20, 22]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_1] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_20] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_22] forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)) # qcost: 4

[MIN NOTE]: number of total invariants: 5

[MIN NOTE]: total qCost: 24




[QRM NOTE]: Time elapsed since start: 2.682 seconds

[QRM NOTE]: Time elapsed since last: 0.187 seconds

[QRM NOTE]: Peak memory: 2447576 bytes


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy -s node=4,value=3 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=4,value=3]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 24

ivy_to_cpp target=qrm toy_consensus_epr.node_4_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_4_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_4_value_3.finite.cpp toy_consensus_epr.node_4_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_4_value_3.finite.o toy_consensus_epr.node_4_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.185 seconds

[QRM NOTE]: Time elapsed since last: 7.185 seconds

[QRM NOTE]: Peak memory: 1203587 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        295

[FW NOTE]: number of dfs representative states:     14

[FW NOTE]: number of dfs non-representative states: 281


====================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=4,value=3]

====================================================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node2,value2)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node1_node3,value2)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value2)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value2)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)']
representative states : 60855, 1174967, 9694647, 34436804023, 20101061406135, 20105356373431, 35511070135, 39806037431, 38731771319, 78114231, 623898039, 625995191, 10743223, 88599991


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000000000000
lex min decimal: 60855
states:
0000000000000000000000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000001000000000001000
lex min decimal: 1174967
states:
0000000000000000000001000000010
0000000000000000000000000010001
0000000000000000000100000000100
0000000000000000000000000100001
0000000000000001000000000001000
0000000000000000100000000001000
0000000000000000010000000001000
0000000000000000000000100000010
0000000000000000000010000000100
0000000000000000000000010000010
0000000000000000000000001000001
0000000000000000001000000000100




=== State Orbit 2 =====================
size : 18
repr state: 0000000000000001001000000001100
lex min decimal: 9694647
states:
0000000000000001001000000001100
0000000000000000010000000011001
0000000000000000000100100000110
0000000000000000001000001000101
0000000000000001000000001001001
0000000000000000010010000001100
0000000000000000000010000010101
0000000000000000000100000100101
0000000000000000000000010010011
0000000000000000100000100001010
0000000000000000000010010000110
0000000000000000000000100100011
0000000000000000000001001000011
0000000000000000100100000001100
0000000000000001000001000001010
0000000000000000100000000101001
0000000000000000010000010001010
0000000000000000001001000000110




=== State Orbit 3 =====================
size : 12
repr state: 1000000000000001001001000001110
lex min decimal: 34436804023
states:
0000001000000001000001001001011
0000000001000000001001001000111
0000000010000000010000010011011
0000000000100000000100100100111
0000000100000000100000100101011
0100000000000000100100100001110
0000100000000000100100000101101
0000000000010000000010010010111
0010000000000000010010010001110
0000010000000000010010000011101
0001000000000001001000001001101
1000000000000001001001000001110




=== State Orbit 4 =====================
size : 3
repr state: 1001001001000001001001001001111
lex min decimal: 20101061406135
states:
1001001001000001001001001001111
0100100100100000100100100101111
0010010010010000010010010011111




=== State Orbit 5 =====================
size : 3
repr state: 1001001001001001001001001001111
lex min decimal: 20105356373431
states:
0010010010010010010010010011111
1001001001001001001001001001111
0100100100100100100100100101111




=== State Orbit 6 =====================
size : 24
repr state: 1000000000000001001001000101111
lex min decimal: 35511070135
states:
0000001000000001000011001001111
0000000100000000101000100101111
0000000001000000101001001001111
0001000000000001001000101001111
0000000000010000100010010011111
0100000000000000100100101001111
0000100000000000100100010101111
0000000000100001000100100101111
0010000000000000010010011001111
0000001000000001000101001001111
0000000001000000011001001001111
0000100000000000100101000101111
1000000000000001001001000101111
0010000000000000010010010101111
1000000000000001001001000011111
0100000000000000100100100011111
0000000100000000100010100101111
0000010000000000010010100011111
0000000000100000010100100101111
0000000010000000010100010011111
0000010000000000010011000011111
0001000000000001001000011001111
0000000000010001000010010011111
0000000010000000011000010011111




=== State Orbit 7 =====================
size : 24
repr state: 1000000000001001001001000101111
lex min decimal: 39806037431
states:
0000001000001001000011001001111
1000000000001001001001000011111
0000100000000100100101000101111
0010000000000010010010010101111
0000100000000100100100010101111
0001000000001001001000101001111
0000000100000100101000100101111
0010000000000010010010011001111
0000000010000010011000010011111
0000001000001001000101001001111
0000000001001000011001001001111
0100000000000100100100101001111
0100000000000100100100100011111
0001000000001001001000011001111
0000000000100100010100100101111
0000000001001000101001001001111
0000000000010011000010010011111
0000000000010010100010010011111
0000010000000010010010100011111
1000000000001001001001000101111
0000010000000010010011000011111
0000000000100101000100100101111
0000000010000010010100010011111
0000000100000100100010100101111




=== State Orbit 8 =====================
size : 12
repr state: 1000000000001001001001000001110
lex min decimal: 38731771319
states:
0010000000000010010010010001110
0000000010000010010000010011011
0000000001001000001001001000111
0000000000010010000010010010111
0000010000000010010010000011101
0000001000001001000001001001011
0000000000100100000100100100111
1000000000001001001001000001110
0100000000000100100100100001110
0000000100000100100000100101011
0000100000000100100100000101101
0001000000001001001000001001101




=== State Orbit 9 =====================
size : 72
repr state: 0000000000000001001000100001110
lex min decimal: 78114231
states:
0000000000000001001000010001110
0000000000000000000101001000111
0000000000000000101000100001110
0000000000000000100000010011011
0000000000000000000101000100111
0000000000000000100001001001011
0000000000000000010010001001101
0000000000000000001000011000111
0000000000000001000000101001011
0000000000000001000010000011101
0000000000000000000010100010111
0000000000000001000011000001110
0000000000000001000010001001101
0000000000000000100000101001011
0000000000000000100010100001110
0000000000000001001000100001110
0000000000000000000010011000111
0000000000000000100010000101101
0000000000000000010010100001110
0000000000000000010010000101101
0000000000000000010000010101011
0000000000000000010001000011011
0000000000000000011000010001110
0000000000000000101001000001110
0000000000000000100010000011101
0000000000000000001000100100111
0000000000000000000011000010111
0000000000000001000001000011011
0000000000000001000000100101011
0000000000000001000100000101101
0000000000000000011001000001110
0000000000000000100100001001101
0000000000000000001001000100111
0000000000000000001000010010111
0000000000000000100001000101011
0000000000000001001000000101101
0000000000000000001001000010111
0000000000000000000100010100111
0000000000000001000000011001011
0000000000000000100100010001110
0000000000000000000011001000111
0000000000000000000100010010111
0000000000000000010100010001110
0000000000000001000001000101011
0000000000000000010000100011011
0000000000000000010011000001110
0000000000000000100000100011011
0000000000000000000010010100111
0000000000000000001000101000111
0000000000000000101000001001101
0000000000000000010100000011101
0000000000000000101000000101101
0000000000000000100101000001110
0000000000000001000100001001101
0000000000000001000010010001110
0000000000000000000100101000111
0000000000000000100010010001110
0000000000000000011000000011101
0000000000000001000100100001110
0000000000000000100100000011101
0000000000000001001000000011101
0000000000000001000101000001110
0000000000000000010100100001110
0000000000000000011000001001101
0000000000000000010000011001011
0000000000000000000100100010111
0000000000000000010001001001011
0000000000000000010000100101011
0000000000000001000000010011011
0000000000000000000010100100111
0000000000000000010100000101101
0000000000000000100000010101011




=== State Orbit 10 =====================
size : 18
repr state: 0000000000000001001000100101111
lex min decimal: 623898039
states:
0000000000000000101000101001111
0000000000000001000100101001111
0000000000000000011001000011111
0000000000000000100100010011111
0000000000000000010100100011111
0000000000000000100101001001111
0000000000000000011000011001111
0000000000000000010010100101111
0000000000000000010011001001111
0000000000000000010100010101111
0000000000000000101001000101111
0000000000000001000010011001111
0000000000000001000101000101111
0000000000000000100010010101111
0000000000000001001000100101111
0000000000000000100010100011111
0000000000000001001000010011111
0000000000000001000011000011111




=== State Orbit 11 =====================
size : 36
repr state: 0000000000000001001000100011111
lex min decimal: 625995191
states:
0000000000000001001000100011111
0000000000000000011000100101111
0000000000000001000011000101111
0000000000000001000100010101111
0000000000000001000010010101111
0000000000000000010010101001111
0000000000000000100100011001111
0000000000000001000010100101111
0000000000000000101001000011111
0000000000000001000100011001111
0000000000000000101000011001111
0000000000000001000100010011111
0000000000000000100011000101111
0000000000000000100011000011111
0000000000000000011000100011111
0000000000000000010101000011111
0000000000000000011000101001111
0000000000000001000101000011111
0000000000000000101000010011111
0000000000000000011001000101111
0000000000000000010011000101111
0000000000000000010100011001111
0000000000000000101000100011111
0000000000000001000010100011111
0000000000000001001000010101111
0000000000000000100010011001111
0000000000000000010100101001111
0000000000000000010101001001111
0000000000000000100101000011111
0000000000000001000010101001111
0000000000000000011000010101111
0000000000000001000100100011111
0000000000000000101000010101111
0000000000000000010101000101111
0000000000000000100010101001111
0000000000000000100011001001111




=== State Orbit 12 =====================
size : 36
repr state: 0000000000000001000100000001100
lex min decimal: 10743223
states:
0000000000000000100010000001100
0000000000000000000010100000110
0000000000000000010001000001010
0000000000000000100000001001001
0000000000000000000010000100101
0000000000000000000100000010101
0000000000000001000000000011001
0000000000000000000010001000101
0000000000000000000101000000110
0000000000000000010000100001010
0000000000000001000010000001100
0000000000000000010000001001001
0000000000000000100000010001010
0000000000000000000100010000110
0000000000000000001000000010101
0000000000000000100000000011001
0000000000000000001000000100101
0000000000000000000000011000011
0000000000000000100001000001010
0000000000000000000000100010011
0000000000000000000001000010011
0000000000000000011000000001100
0000000000000000101000000001100
0000000000000000010000000101001
0000000000000000000000101000011
0000000000000001000000000101001
0000000000000000000000010100011
0000000000000000010100000001100
0000000000000000001000100000110
0000000000000000000100001000101
0000000000000000000001000100011
0000000000000001000000010001010
0000000000000001000100000001100
0000000000000000001000010000110
0000000000000001000000100001010
0000000000000000000011000000110




=== State Orbit 13 =====================
size : 24
repr state: 0000000000000001000100010001110
lex min decimal: 88599991
states:
0000000000000000100011000001110
0000000000000000000010101000111
0000000000000000001000100010111
0000000000000000010101000001110
0000000000000000010000101001011
0000000000000000000011000100111
0000000000000000000100011000111
0000000000000001000010000101101
0000000000000000010001000101011
0000000000000000010100001001101
0000000000000001000000010101011
0000000000000001000000100011011
0000000000000000100000011001011
0000000000000000011000000101101
0000000000000001000010100001110
0000000000000000011000100001110
0000000000000000001000010100111
0000000000000001000100010001110
0000000000000000100001000011011
0000000000000000101000000011101
0000000000000000000101000010111
0000000000000000101000010001110
0000000000000001000100000011101
0000000000000000100010001001101



[QRM NOTE]: Time elapsed since start: 8.120 seconds

[QRM NOTE]: Time elapsed since last: 0.936 seconds

[QRM NOTE]: Peak memory: 1312153 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=4,value=3]

=========================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 9.188 seconds

[QRM NOTE]: Time elapsed since last: 1.068 seconds

[QRM NOTE]: Peak memory: 441162 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=3,value=4]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 24

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_4.finite.cpp toy_consensus_epr.node_3_value_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_4.finite.o toy_consensus_epr.node_3_value_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.353 seconds

[QRM NOTE]: Time elapsed since last: 7.353 seconds

[QRM NOTE]: Peak memory: 1202089 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        177

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 167


====================================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=3,value=4]

====================================================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node1,value3)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node0_node2,value3)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'chosenAt(quorum__node1_node2,value3)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'decided(value3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 268507051, 73284001707, 73300778923, 270606251, 287383467, 285284267, 75691, 1200043


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000000000000
lex min decimal: 427
states:
0000000000000000000000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000000100000000000100
lex min decimal: 5035
states:
0000000000000000010000000000100
0000000000000000100000000000100
0000000000000000000010000000010
0000000000000000000000000001001
0000000000000000000000010000010
0000000000000000000100000000100
0000000000000000000001000000010
0000000000000000000000100000010
0000000000000000000000001000001
0000000000000000001000000000100
0000000000000000000000000010001
0000000000000000000000000100001




=== State Orbit 2 =====================
size : 12
repr state: 1000000000000000100010000000110
lex min decimal: 268507051
states:
0000000001000000000001000100011
0000000000010000000000010001011
0000000010000000000010001000011
1000000000000000100010000000110
0000001000000000001000000010101
0000000100000000000100000001101
0000100000000000100000001000101
0000010000000000010000000100101
0010000000000000001000100000110
0001000000000000000100010000110
0100000000000000010001000000110
0000000000100000000000100010011




=== State Orbit 3 =====================
size : 4
repr state: 1000100010000000100010001000111
lex min decimal: 73284001707
states:
0001000100010000000100010001111
0010001000100000001000100010111
0100010001000000010001000100111
1000100010000000100010001000111




=== State Orbit 4 =====================
size : 4
repr state: 1000100010001000100010001000111
lex min decimal: 73300778923
states:
0100010001000100010001000100111
1000100010001000100010001000111
0001000100010001000100010001111
0010001000100010001000100010111




=== State Orbit 5 =====================
size : 36
repr state: 1000000000000000100010000100111
lex min decimal: 270606251
states:
1000000000000000100010000001111
0000000000100000010000100010111
0000001000000000001000010010111
0010000000000000001000101000111
0000010000000000010000010100111
0000001000000000001001000010111
0000000100000000000101000001111
0000000000010000001000010001111
1000000000000000100010000100111
0000000000100000000100100010111
0100000000000000010001001000111
1000000000000000100010000010111
0000000100000000000110000001111
0000000000010000100000010001111
0000000010000000000110001000111
0000000000100000100000100010111
0000000001000000100001000100111
0000010000000000010010000100111
0000000001000000000101000100111
0000000100000000000100100001111
0100000000000000010001000010111
0010000000000000001000100100111
0001000000000000000100010010111
0000100000000000100001001000111
0010000000000000001000100001111
0000000001000000001001000100111
0000000000010000010000010001111
0100000000000000010001000001111
0000100000000000100000011000111
0000100000000000100000101000111
0001000000000000000100010100111
0000000010000000001010001000111
0000001000000000001010000010111
0001000000000000000100011000111
0000000010000000010010001000111
0000010000000000010000100100111




=== State Orbit 6 =====================
size : 36
repr state: 1000000000001000100010000100111
lex min decimal: 287383467
states:
0100000000000100010001000010111
0010000000000010001000100100111
0000000010001000000110001000111
0000000100000001000100100001111
0000001000000010001010000010111
0000001000000010001001000010111
0100000000000100010001000001111
0000000000010001001000010001111
0000010000000100010010000100111
0010000000000010001000100001111
0100000000000100010001001000111
0001000000000001000100010010111
0001000000000001000100011000111
0000100000001000100001001000111
0000000000100010100000100010111
0001000000000001000100010100111
0000010000000100010000010100111
1000000000001000100010000100111
0000000100000001000101000001111
1000000000001000100010000001111
0000000010001000010010001000111
0000000000010001010000010001111
0010000000000010001000101000111
0000001000000010001000010010111
0000000000100010010000100010111
0000100000001000100000101000111
1000000000001000100010000010111
0000000000100010000100100010111
0000000001000100001001000100111
0000000000010001100000010001111
0000000001000100100001000100111
0000000001000100000101000100111
0000100000001000100000011000111
0000000100000001000110000001111
0000000010001000001010001000111
0000010000000100010000100100111




=== State Orbit 7 =====================
size : 12
repr state: 1000000000001000100010000000110
lex min decimal: 285284267
states:
0000000000100010000000100010011
0000000001000100000001000100011
0000000000010001000000010001011
0010000000000010001000100000110
0000010000000100010000000100101
0000001000000010001000000010101
1000000000001000100010000000110
0001000000000001000100010000110
0100000000000100010001000000110
0000100000001000100000001000101
0000000010001000000010001000011
0000000100000001000100000001101




=== State Orbit 8 =====================
size : 36
repr state: 0000000000000000100001000000110
lex min decimal: 75691
states:
0000000000000000000010000001011
0000000000000000100000010000110
0000000000000000010000010000110
0000000000000000001001000000110
0000000000000000000110000000110
0000000000000000000100000100101
0000000000000000001000000001101
0000000000000000000001001000011
0000000000000000100001000000110
0000000000000000010000000001101
0000000000000000000001000001011
0000000000000000000101000000110
0000000000000000000000101000011
0000000000000000000010000100011
0000000000000000000000011000011
0000000000000000000000100001011
0000000000000000100000000001101
0000000000000000000000100100011
0000000000000000100000100000110
0000000000000000000000010100011
0000000000000000001010000000110
0000000000000000000000010010011
0000000000000000000100100000110
0000000000000000100000000100101
0000000000000000000100000010101
0000000000000000001000010000110
0000000000000000010010000000110
0000000000000000000010000010011
0000000000000000000001000010011
0000000000000000000100001000101
0000000000000000100000000010101
0000000000000000001000000100101
0000000000000000010000000010101
0000000000000000010000100000110
0000000000000000001000001000101
0000000000000000010000001000101




=== State Orbit 9 =====================
size : 24
repr state: 0000000000000000100001000010111
lex min decimal: 1200043
states:
0000000000000000001001001000111
0000000000000000010000100001111
0000000000000000001000011000111
0000000000000000000100101000111
0000000000000000100001000001111
0000000000000000100001000010111
0000000000000000000110000100111
0000000000000000001001000001111
0000000000000000001010000100111
0000000000000000000101000010111
0000000000000000010000011000111
0000000000000000010000101000111
0000000000000000001000010100111
0000000000000000010010000001111
0000000000000000000100100100111
0000000000000000010000010010111
0000000000000000100000010100111
0000000000000000000101001000111
0000000000000000001010000001111
0000000000000000010010000010111
0000000000000000100000100100111
0000000000000000000110000010111
0000000000000000100000100001111
0000000000000000100000010010111



[QRM NOTE]: Time elapsed since start: 8.030 seconds

[QRM NOTE]: Time elapsed since last: 0.678 seconds

[QRM NOTE]: Peak memory: 1290516 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=3,value=4]

=========================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.781 seconds

[QRM NOTE]: Time elapsed since last: 0.751 seconds

[QRM NOTE]: Peak memory: 388740 bytes


*********************************************************************

	[IVY_CHECK]: Ivy Check for Reachability Invariant

*********************************************************************


=========================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy]

=========================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_20
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_22

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_20 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_22 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_20 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_22 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_20 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_22 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 30: assumption

OK
[IVY_CHECK RESULT]: PASS


*****************************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy

*****************************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 108.593 seconds

[QRM NOTE]: Time elapsed since last: 108.593 seconds

