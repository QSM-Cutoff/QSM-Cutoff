
******************************************************************

	[QRM]: ivybench/sym/ivy/lockserv_automaton.ivy

******************************************************************


****************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

****************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.ivy -s node=1 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==============================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

==============================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 1

[QRM NOTE]: Time elapsed since start: 0.057 seconds

[QRM NOTE]: Time elapsed since last: 0.057 seconds

[QRM NOTE]: Peak memory: 32056 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: lock(fml:n)

building bdd for action: unlock(fml:n)

building bdd for action: recv_lock(fml:sender)

building bdd for action: recv_grant(fml:n)

building bdd for action: recv_unlock(fml:sender)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 4


=================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton: node=1]

=================================================================================================

sort: node=['node0']
predicate: held()
predicate: unlock_msg('node',)
predicate: grant_msg('node',)
predicate: lock_msg('node',)
predicate: holds_lock('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'held()', 'holds_lock(node0)', 'lock_msg(node0)', 'unlock_msg(node0)']

000-0
010-1
011-0
110-0

[QRM NOTE]: Time elapsed since start: 0.121 seconds

[QRM NOTE]: Time elapsed since last: 0.064 seconds

[QRM NOTE]: Peak memory: 1099686 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.125 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 50762 bytes


=====================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

=====================================================================================================


================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 10---
0     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -01--
1     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : 1-1--
2     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 1---1
3     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : -0--1
4     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : --1-1
5     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 010-0
6     : ['held()', '~grant_msg(node0)', '~holds_lock(node0)', '~unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 7

[PRIME NOTE]: number of orbits before merging: 7

[PRIME NOTE]: number of primes: 7

[QRM NOTE]: Time elapsed since start: 0.135 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1118584 bytes


==========================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

==========================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6]
 solution : []

Essensial at level 0 : {0, 1, 2, 3, 4, 5, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]

[QRM NOTE]: Time elapsed since start: 0.136 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 71042 bytes


==============================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

==============================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 10---
0     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', '~held']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '1$held': [[]]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$grant_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0}

part_sig: ('node$0$grant_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', '~held']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'held': Const('held', BooleanSort())}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'held': []}

sign_func_name2count:  {'0$grant_msg': 1, '1$held': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '1$held': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | held


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -01--
1     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'holds_lock(node0)']

sign_func_name2args: {'1$held': [[]], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0}

part_sig: ('node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'holds_lock(node0)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'held': [], 'holds_lock': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'1$held': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~held', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. held | ~holds_lock(NODE0)


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : 1-1--
2     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'holds_lock(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'holds_lock(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'holds_lock': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0)


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 1---1
3     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'unlock_msg(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'unlock_msg(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE0)


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : -0--1
4     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'unlock_msg(node0)']

sign_func_name2args: {'1$held': [[]], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$unlock_msg$0$0}

part_sig: ('node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'unlock_msg(node0)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'held': [], 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'1$held': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~held', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. held | ~unlock_msg(NODE0)


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : --1-1
5     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'unlock_msg(node0)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'unlock_msg(node0)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0',)),), 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~unlock_msg(NODE0) | ~holds_lock(NODE0)


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 010-0
6     : ['held()', '~grant_msg(node0)', '~holds_lock(node0)', '~unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~grant_msg(node0)', 'held', '~holds_lock(node0)', '~unlock_msg(node0)']

sign_func_name2args: {'1$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$held': [[]], '1$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '1$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0]}

sig2const: {'node$1$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$1$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$1$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0}

part_sig: ('node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['~grant_msg(node0)', 'held', '~holds_lock(node0)', '~unlock_msg(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'held': [], 'holds_lock': (EnumeratedSort('node', ('node0',)),), 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'1$grant_msg': 1, '0$held': 1, '1$holds_lock': 1, '1$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0]}

	identical_single_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$held': [[]], '1$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '1$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~holds_lock(NODE0)', 'held', '~grant_msg(NODE0)', '~unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. holds_lock(NODE0) | ~held | grant_msg(NODE0) | unlock_msg(NODE0)


========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

========================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 10---
0     : ['grant_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | held
qcost : 3




=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -01--
1     : ['holds_lock(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. held | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : 1-1--
2     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 1---1
3     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : -0--1
4     : ['unlock_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. held | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : --1-1
5     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~unlock_msg(NODE0) | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 010-0
6     : ['held()', '~grant_msg(node0)', '~holds_lock(node0)', '~unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 4
quantified form : forall NODE0. holds_lock(NODE0) | ~held | grant_msg(NODE0) | unlock_msg(NODE0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.229 seconds

[QRM NOTE]: Time elapsed since last: 0.093 seconds

[QRM NOTE]: Peak memory: 1807564 bytes


=======================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

=======================================================================================


New level: 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]


Solution : [0, 1, 2, 3, 4, 5, 6] has cost 23.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6]


======================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

======================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 23

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 2, 3, 4, 5, 6]

[MIN NOTE]: solution length: 7

invariant [invar_0] forall NODE0. ~grant_msg(NODE0) | held # qcost: 3

invariant [invar_1] forall NODE0. held | ~holds_lock(NODE0) # qcost: 3

invariant [invar_2] forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0) # qcost: 3

invariant [invar_3] forall NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_4] forall NODE0. held | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_5] forall NODE0. ~unlock_msg(NODE0) | ~holds_lock(NODE0) # qcost: 3

invariant [invar_6] forall NODE0. holds_lock(NODE0) | ~held | grant_msg(NODE0) | unlock_msg(NODE0) # qcost: 5

[MIN NOTE]: number of total invariants: 7

[MIN NOTE]: total qCost: 23




[QRM NOTE]: Time elapsed since start: 0.298 seconds

[QRM NOTE]: Time elapsed since last: 0.069 seconds

[QRM NOTE]: Peak memory: 1797048 bytes


*******************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=1]

*******************************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.node_1.0.ivy -s node=2 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.node_1.0.ivy: node=2]

=======================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 9

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.067 seconds

[QRM NOTE]: Time elapsed since last: 0.067 seconds

[QRM NOTE]: Peak memory: 66441 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: lock(fml:n)

building bdd for action: unlock(fml:n)

building bdd for action: recv_lock(fml:sender)

building bdd for action: recv_grant(fml:n)

building bdd for action: recv_unlock(fml:sender)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 7


=================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton: node=2]

=================================================================================================

sort: node=['node0', 'node1']
predicate: grant_msg('node',)
predicate: held()
predicate: lock_msg('node',)
predicate: holds_lock('node',)
predicate: unlock_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'grant_msg(node1)', 'held()', 'holds_lock(node0)', 'holds_lock(node1)', 'lock_msg(node0)', 'lock_msg(node1)', 'unlock_msg(node0)', 'unlock_msg(node1)']

00000--00
00100--01
00100--10
00101--00
00110--00
01100--00
10100--00

[QRM NOTE]: Time elapsed since start: 0.269 seconds

[QRM NOTE]: Time elapsed since last: 0.202 seconds

[QRM NOTE]: Peak memory: 1150655 bytes


===================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lockserv_automaton.node_1.0.ivy: node=2]

===================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.308 seconds

[QRM NOTE]: Time elapsed since last: 0.040 seconds

[QRM NOTE]: Peak memory: 131659 bytes

next size: node=2


****************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

****************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.ivy -s node=2 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.023 seconds

[QRM NOTE]: Time elapsed since last: 0.023 seconds

[QRM NOTE]: Peak memory: 2226 bytes


=====================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

=====================================================================================================


================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : ---1----1
0     : ['holds_lock(node0)', 'unlock_msg(node1)']
1     : ----1--1-
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : 1-------1
2     : ['grant_msg(node0)', 'unlock_msg(node1)']
3     : -1-----1-
3     : ['grant_msg(node1)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : -1------1
4     : ['grant_msg(node1)', 'unlock_msg(node1)']
5     : 1------1-
5     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : --0-----1
6     : ['unlock_msg(node1)', '~held()']
7     : --0----1-
7     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
8 (*) : ----1---1
8     : ['holds_lock(node1)', 'unlock_msg(node1)']
9     : ---1---1-
9     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
10 (*) : -------11
10     : ['unlock_msg(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : 1--1-----
11     : ['grant_msg(node0)', 'holds_lock(node0)']
12     : -1--1----
12     : ['grant_msg(node1)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
13 (*) : 11-------
13     : ['grant_msg(node0)', 'grant_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
14 (*) : -1-1-----
14     : ['grant_msg(node1)', 'holds_lock(node0)']
15     : 1---1----
15     : ['grant_msg(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 2
num_suborbits: 1
16 (*) : -10------
16     : ['grant_msg(node1)', '~held()']
17     : 1-0------
17     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 2
num_suborbits: 1
18 (*) : --01-----
18     : ['holds_lock(node0)', '~held()']
19     : --0-1----
19     : ['holds_lock(node1)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 1
num_suborbits: 1
20 (*) : ---11----
20     : ['holds_lock(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 1
num_suborbits: 1
21 (*) : 00100--00
21     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 13

[PRIME NOTE]: number of orbits before merging: 13

[PRIME NOTE]: number of primes: 22

[QRM NOTE]: Time elapsed since start: 0.038 seconds

[QRM NOTE]: Time elapsed since last: 0.015 seconds

[QRM NOTE]: Peak memory: 1103555 bytes


==========================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

==========================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : []

Essensial at level 0 : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

[QRM NOTE]: Time elapsed since start: 0.040 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 55426 bytes


==============================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

==============================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : ---1----1
0     : ['holds_lock(node0)', 'unlock_msg(node1)']
1     : ----1--1-
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE1)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~unlock_msg(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : 1-------1
2     : ['grant_msg(node0)', 'unlock_msg(node1)']
3     : -1-----1-
3     : ['grant_msg(node1)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'unlock_msg(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~grant_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : -1------1
4     : ['grant_msg(node1)', 'unlock_msg(node1)']
5     : 1------1-
5     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', 'unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~unlock_msg(NODE0) | ~grant_msg(NODE0)


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : --0-----1
6     : ['unlock_msg(node1)', '~held()']
7     : --0----1-
7     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'unlock_msg(node1)']

sign_func_name2args: {'1$held': [[]], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0}

part_sig: ('node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'unlock_msg(node1)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'held': [], 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$held': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~unlock_msg(NODE0) | held


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
8 (*) : ----1---1
8     : ['holds_lock(node1)', 'unlock_msg(node1)']
9     : ---1---1-
9     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node1)', 'unlock_msg(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~unlock_msg(NODE0) | ~holds_lock(NODE0)


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
10 (*) : -------11
10     : ['unlock_msg(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['unlock_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$1]}

sig2const: {'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

part_sig: ('node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1',)


---------- SigGenerator ----------

terms:  ['unlock_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$unlock_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~unlock_msg(NODE0)


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : 1--1-----
11     : ['grant_msg(node0)', 'holds_lock(node0)']
12     : -1--1----
12     : ['grant_msg(node1)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'holds_lock(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'holds_lock(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0)


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
13 (*) : 11-------
13     : ['grant_msg(node0)', 'grant_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'grant_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$1]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

part_sig: ('node$0$grant_msg$0$0 | node$0$grant_msg$0$1',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'grant_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~grant_msg(NODE0)


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
14 (*) : -1-1-----
14     : ['grant_msg(node1)', 'holds_lock(node0)']
15     : 1---1----
15     : ['grant_msg(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'holds_lock(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', 'holds_lock(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$holds_lock': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE1)', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~holds_lock(NODE1) | ~grant_msg(NODE0) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 2
num_suborbits: 1
16 (*) : -10------
16     : ['grant_msg(node1)', '~held()']
17     : 1-0------
17     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', '~held']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$held': [[]]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0}

part_sig: ('node$0$grant_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', '~held']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'held': Const('held', BooleanSort())}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'held': []}

sign_func_name2count:  {'0$grant_msg': 1, '1$held': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$held': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | held


=== Prime Orbit 10 =====================
size : 2
num_suborbits: 1
18 (*) : --01-----
18     : ['holds_lock(node0)', '~held()']
19     : --0-1----
19     : ['holds_lock(node1)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'holds_lock(node0)']

sign_func_name2args: {'1$held': [[]], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0}

part_sig: ('node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'holds_lock(node0)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'held': [], 'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$held': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~holds_lock(NODE0) | held


=== Prime Orbit 11 =====================
size : 1
num_suborbits: 1
20 (*) : ---11----
20     : ['holds_lock(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'holds_lock(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$1]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

part_sig: ('node$0$holds_lock$0$0 | node$0$holds_lock$0$1',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'holds_lock(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$holds_lock': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~holds_lock(NODE0)


=== Prime Orbit 12 =====================
size : 1
num_suborbits: 1
21 (*) : 00100--00
21     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~grant_msg(node0)', '~grant_msg(node1)', 'held', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']

sign_func_name2args: {'1$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$held': [[]], '1$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1]}

sig2const: {'node$1$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1}

part_sig: ('node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1',)


---------- SigGenerator ----------

terms:  ['~grant_msg(node0)', '~grant_msg(node1)', 'held', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'held': [], 'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$grant_msg': 2, '0$held': 1, '1$holds_lock': 2, '1$unlock_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1}

	sort: node

	identical_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0, node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$held': [[]], '1$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~grant_msg(NODE0)', '~holds_lock(NODE0)', 'held', '~unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. grant_msg(NODE0) | holds_lock(NODE0) | ~held | unlock_msg(NODE0)


========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

========================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : ---1----1
0     : ['holds_lock(node0)', 'unlock_msg(node1)']
1     : ----1--1-
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~unlock_msg(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : 1-------1
2     : ['grant_msg(node0)', 'unlock_msg(node1)']
3     : -1-----1-
3     : ['grant_msg(node1)', 'unlock_msg(node0)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~grant_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : -1------1
4     : ['grant_msg(node1)', 'unlock_msg(node1)']
5     : 1------1-
5     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~unlock_msg(NODE0) | ~grant_msg(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : --0-----1
6     : ['unlock_msg(node1)', '~held()']
7     : --0----1-
7     : ['unlock_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~unlock_msg(NODE0) | held
qcost : 3




=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
8 (*) : ----1---1
8     : ['holds_lock(node1)', 'unlock_msg(node1)']
9     : ---1---1-
9     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~unlock_msg(NODE0) | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
10 (*) : -------11
10     : ['unlock_msg(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~unlock_msg(NODE0)
qcost : 2




=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : 1--1-----
11     : ['grant_msg(node0)', 'holds_lock(node0)']
12     : -1--1----
12     : ['grant_msg(node1)', 'holds_lock(node1)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
13 (*) : 11-------
13     : ['grant_msg(node0)', 'grant_msg(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~grant_msg(NODE0)
qcost : 2




=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
14 (*) : -1-1-----
14     : ['grant_msg(node1)', 'holds_lock(node0)']
15     : 1---1----
15     : ['grant_msg(node0)', 'holds_lock(node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~holds_lock(NODE1) | ~grant_msg(NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 9 =====================
size : 2
num_suborbits: 1
16 (*) : -10------
16     : ['grant_msg(node1)', '~held()']
17     : 1-0------
17     : ['grant_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | held
qcost : 3




=== Prime Orbit 10 =====================
size : 2
num_suborbits: 1
18 (*) : --01-----
18     : ['holds_lock(node0)', '~held()']
19     : --0-1----
19     : ['holds_lock(node1)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~holds_lock(NODE0) | held
qcost : 3




=== Prime Orbit 11 =====================
size : 1
num_suborbits: 1
20 (*) : ---11----
20     : ['holds_lock(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~holds_lock(NODE0)
qcost : 2




=== Prime Orbit 12 =====================
size : 1
num_suborbits: 1
21 (*) : 00100--00
21     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~unlock_msg(node0)', '~unlock_msg(node1)']
num_forall :   0
num_exists :   1
num_literals : 4
quantified form : exists NODE0. grant_msg(NODE0) | holds_lock(NODE0) | ~held | unlock_msg(NODE0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.164 seconds

[QRM NOTE]: Time elapsed since last: 0.124 seconds

[QRM NOTE]: Peak memory: 1817294 bytes


=======================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

=======================================================================================


New level: 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


Solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] has cost 44.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


======================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

======================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 44

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

[MIN NOTE]: solution length: 13

invariant [invar_0] forall NODE0,NODE1. ~unlock_msg(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_1] forall NODE0,NODE1. ~grant_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1 # qcost: 5

invariant [invar_2] forall NODE0. ~unlock_msg(NODE0) | ~grant_msg(NODE0) # qcost: 3

invariant [invar_3] forall NODE0. ~unlock_msg(NODE0) | held # qcost: 3

invariant [invar_4] forall NODE0. ~unlock_msg(NODE0) | ~holds_lock(NODE0) # qcost: 3

invariant [invar_5] exists NODE0. ~unlock_msg(NODE0) # qcost: 2

invariant [invar_6] forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0) # qcost: 3

invariant [invar_7] exists NODE0. ~grant_msg(NODE0) # qcost: 2

invariant [invar_8] forall NODE0,NODE1. ~holds_lock(NODE1) | ~grant_msg(NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_9] forall NODE0. ~grant_msg(NODE0) | held # qcost: 3

invariant [invar_10] forall NODE0. ~holds_lock(NODE0) | held # qcost: 3

invariant [invar_11] exists NODE0. ~holds_lock(NODE0) # qcost: 2

invariant [invar_12] exists NODE0. grant_msg(NODE0) | holds_lock(NODE0) | ~held | unlock_msg(NODE0) # qcost: 5

[MIN NOTE]: number of total invariants: 13

[MIN NOTE]: total qCost: 44




[QRM NOTE]: Time elapsed since start: 0.238 seconds

[QRM NOTE]: Time elapsed since last: 0.075 seconds

[QRM NOTE]: Peak memory: 1798887 bytes


*******************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=2]

*******************************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.node_2.0.ivy -s node=3 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.node_2.0.ivy: node=3]

=======================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 13

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 0.093 seconds

[QRM NOTE]: Time elapsed since last: 0.093 seconds

[QRM NOTE]: Peak memory: 119070 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: lock(fml:n)

building bdd for action: unlock(fml:n)

building bdd for action: recv_lock(fml:sender)

building bdd for action: recv_grant(fml:n)

building bdd for action: recv_unlock(fml:sender)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 10


=================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton: node=3]

=================================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: held()
predicate: lock_msg('node',)
predicate: holds_lock('node',)
predicate: grant_msg('node',)
predicate: unlock_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'grant_msg(node1)', 'grant_msg(node2)', 'held()', 'holds_lock(node0)', 'holds_lock(node1)', 'holds_lock(node2)', 'lock_msg(node0)', 'lock_msg(node1)', 'lock_msg(node2)', 'unlock_msg(node0)', 'unlock_msg(node1)', 'unlock_msg(node2)']

0000000---000
0001000---001
0001000---010
0001000---100
0001001---000
0001010---000
0001100---000
0011000---000
0101000---000
1001000---000

[QRM NOTE]: Time elapsed since start: 0.518 seconds

[QRM NOTE]: Time elapsed since last: 0.424 seconds

[QRM NOTE]: Peak memory: 1241570 bytes


===================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lockserv_automaton.node_2.0.ivy: node=3]

===================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.613 seconds

[QRM NOTE]: Time elapsed since last: 0.095 seconds

[QRM NOTE]: Peak memory: 260933 bytes

next size: node=3


****************************************************************************************

	[Synthesize Rmin]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

****************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.ivy -s node=3 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.022 seconds

[QRM NOTE]: Time elapsed since last: 0.022 seconds

[QRM NOTE]: Peak memory: 2932 bytes


=====================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

=====================================================================================================


================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

================================================================================================


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : ------1----1-
0     : ['holds_lock(node2)', 'unlock_msg(node1)']
1     : -----1------1
1     : ['holds_lock(node1)', 'unlock_msg(node2)']
2     : ------1---1--
2     : ['holds_lock(node2)', 'unlock_msg(node0)']
3     : ----1-------1
3     : ['holds_lock(node0)', 'unlock_msg(node2)']
4     : -----1----1--
4     : ['holds_lock(node1)', 'unlock_msg(node0)']
5     : ----1------1-
5     : ['holds_lock(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
6 (*) : -1----1------
6     : ['grant_msg(node1)', 'holds_lock(node2)']
7     : --1--1-------
7     : ['grant_msg(node2)', 'holds_lock(node1)']
8     : 1-----1------
8     : ['grant_msg(node0)', 'holds_lock(node2)']
9     : --1-1--------
9     : ['grant_msg(node2)', 'holds_lock(node0)']
10     : 1----1-------
10     : ['grant_msg(node0)', 'holds_lock(node1)']
11     : -1--1--------
11     : ['grant_msg(node1)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : --1---1------
12     : ['grant_msg(node2)', 'holds_lock(node2)']
13     : -1---1-------
13     : ['grant_msg(node1)', 'holds_lock(node1)']
14     : 1---1--------
14     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
15 (*) : ---0--1------
15     : ['holds_lock(node2)', '~held()']
16     : ---0-1-------
16     : ['holds_lock(node1)', '~held()']
17     : ---01--------
17     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
18 (*) : ----1-1------
18     : ['holds_lock(node0)', 'holds_lock(node2)']
19     : ----11-------
19     : ['holds_lock(node0)', 'holds_lock(node1)']
20     : -----11------
20     : ['holds_lock(node1)', 'holds_lock(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
21 (*) : -1---------1-
21     : ['grant_msg(node1)', 'unlock_msg(node1)']
22     : --1---------1
22     : ['grant_msg(node2)', 'unlock_msg(node2)']
23     : 1---------1--
23     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
24 (*) : 11-----------
24     : ['grant_msg(node0)', 'grant_msg(node1)']
25     : 1-1----------
25     : ['grant_msg(node0)', 'grant_msg(node2)']
26     : -11----------
26     : ['grant_msg(node1)', 'grant_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
27 (*) : 1----------1-
27     : ['grant_msg(node0)', 'unlock_msg(node1)']
28     : 1-----------1
28     : ['grant_msg(node0)', 'unlock_msg(node2)']
29     : -1--------1--
29     : ['grant_msg(node1)', 'unlock_msg(node0)']
30     : -1----------1
30     : ['grant_msg(node1)', 'unlock_msg(node2)']
31     : --1-------1--
31     : ['grant_msg(node2)', 'unlock_msg(node0)']
32     : --1--------1-
32     : ['grant_msg(node2)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
33 (*) : --10---------
33     : ['grant_msg(node2)', '~held()']
34     : -1-0---------
34     : ['grant_msg(node1)', '~held()']
35     : 1--0---------
35     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
36 (*) : ---0-------1-
36     : ['unlock_msg(node1)', '~held()']
37     : ---0--------1
37     : ['unlock_msg(node2)', '~held()']
38     : ---0------1--
38     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 3
num_suborbits: 1
39 (*) : -----1-----1-
39     : ['holds_lock(node1)', 'unlock_msg(node1)']
40     : ------1-----1
40     : ['holds_lock(node2)', 'unlock_msg(node2)']
41     : ----1-----1--
41     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
42 (*) : ----------11-
42     : ['unlock_msg(node0)', 'unlock_msg(node1)']
43     : ----------1-1
43     : ['unlock_msg(node0)', 'unlock_msg(node2)']
44     : -----------11
44     : ['unlock_msg(node1)', 'unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 1
num_suborbits: 1
45 (*) : 0001000---000
45     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 13

[PRIME NOTE]: number of orbits before merging: 13

[PRIME NOTE]: number of primes: 46

[QRM NOTE]: Time elapsed since start: 0.044 seconds

[QRM NOTE]: Time elapsed since last: 0.022 seconds

[QRM NOTE]: Peak memory: 1145383 bytes


==========================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

==========================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : []

Essensial at level 0 : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

[QRM NOTE]: Time elapsed since start: 0.047 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 97942 bytes


==============================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

==============================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : ------1----1-
0     : ['holds_lock(node2)', 'unlock_msg(node1)']
1     : -----1------1
1     : ['holds_lock(node1)', 'unlock_msg(node2)']
2     : ------1---1--
2     : ['holds_lock(node2)', 'unlock_msg(node0)']
3     : ----1-------1
3     : ['holds_lock(node0)', 'unlock_msg(node2)']
4     : -----1----1--
4     : ['holds_lock(node1)', 'unlock_msg(node0)']
5     : ----1------1-
5     : ['holds_lock(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node2)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node2)', 'unlock_msg(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE1)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~unlock_msg(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
6 (*) : -1----1------
6     : ['grant_msg(node1)', 'holds_lock(node2)']
7     : --1--1-------
7     : ['grant_msg(node2)', 'holds_lock(node1)']
8     : 1-----1------
8     : ['grant_msg(node0)', 'holds_lock(node2)']
9     : --1-1--------
9     : ['grant_msg(node2)', 'holds_lock(node0)']
10     : 1----1-------
10     : ['grant_msg(node0)', 'holds_lock(node1)']
11     : -1--1--------
11     : ['grant_msg(node1)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'holds_lock(node2)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$holds_lock': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$holds_lock$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', 'holds_lock(node2)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$holds_lock': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'holds_lock(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~grant_msg(NODE0) | ~holds_lock(NODE1) | NODE0 = NODE1


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : --1---1------
12     : ['grant_msg(node2)', 'holds_lock(node2)']
13     : -1---1-------
13     : ['grant_msg(node1)', 'holds_lock(node1)']
14     : 1---1--------
14     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node2)', 'holds_lock(node2)']

sign_func_name2args: {'0$grant_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$holds_lock': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$holds_lock$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node2)', 'holds_lock(node2)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0)


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
15 (*) : ---0--1------
15     : ['holds_lock(node2)', '~held()']
16     : ---0-1-------
16     : ['holds_lock(node1)', '~held()']
17     : ---01--------
17     : ['holds_lock(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'holds_lock(node2)']

sign_func_name2args: {'1$held': [[]], '0$holds_lock': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0}

part_sig: ('node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'holds_lock(node2)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'held': [], 'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$held': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~holds_lock(NODE0) | held


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
18 (*) : ----1-1------
18     : ['holds_lock(node0)', 'holds_lock(node2)']
19     : ----11-------
19     : ['holds_lock(node0)', 'holds_lock(node1)']
20     : -----11------
20     : ['holds_lock(node1)', 'holds_lock(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'holds_lock(node2)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$1]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$holds_lock$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

part_sig: ('node$0$holds_lock$0$0 | node$0$holds_lock$0$1',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'holds_lock(node2)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$holds_lock': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE1)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~holds_lock(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
21 (*) : -1---------1-
21     : ['grant_msg(node1)', 'unlock_msg(node1)']
22     : --1---------1
22     : ['grant_msg(node2)', 'unlock_msg(node2)']
23     : 1---------1--
23     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', 'unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE0)


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
24 (*) : 11-----------
24     : ['grant_msg(node0)', 'grant_msg(node1)']
25     : 1-1----------
25     : ['grant_msg(node0)', 'grant_msg(node2)']
26     : -11----------
26     : ['grant_msg(node1)', 'grant_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'grant_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$1]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

part_sig: ('node$0$grant_msg$0$0 | node$0$grant_msg$0$1',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'grant_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'grant_msg(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~grant_msg(NODE0) | ~grant_msg(NODE1) | NODE0 = NODE1


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
27 (*) : 1----------1-
27     : ['grant_msg(node0)', 'unlock_msg(node1)']
28     : 1-----------1
28     : ['grant_msg(node0)', 'unlock_msg(node2)']
29     : -1--------1--
29     : ['grant_msg(node1)', 'unlock_msg(node0)']
30     : -1----------1
30     : ['grant_msg(node1)', 'unlock_msg(node2)']
31     : --1-------1--
31     : ['grant_msg(node2)', 'unlock_msg(node0)']
32     : --1--------1-
32     : ['grant_msg(node2)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'unlock_msg(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~grant_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
33 (*) : --10---------
33     : ['grant_msg(node2)', '~held()']
34     : -1-0---------
34     : ['grant_msg(node1)', '~held()']
35     : 1--0---------
35     : ['grant_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node2)', '~held']

sign_func_name2args: {'0$grant_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$held': [[]]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0}

part_sig: ('node$0$grant_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node2)', '~held']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'held': Const('held', BooleanSort())}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'held': []}

sign_func_name2count:  {'0$grant_msg': 1, '1$held': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$held': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', '~held']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~grant_msg(NODE0) | held


=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
36 (*) : ---0-------1-
36     : ['unlock_msg(node1)', '~held()']
37     : ---0--------1
37     : ['unlock_msg(node2)', '~held()']
38     : ---0------1--
38     : ['unlock_msg(node0)', '~held()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~held', 'unlock_msg(node1)']

sign_func_name2args: {'1$held': [[]], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0}

part_sig: ('node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['~held', 'unlock_msg(node1)']

func_name2symbol:  {'held': Const('held', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'held': [], 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$held': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$held': [[]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~held', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. held | ~unlock_msg(NODE0)


=== Prime Orbit 10 =====================
size : 3
num_suborbits: 1
39 (*) : -----1-----1-
39     : ['holds_lock(node1)', 'unlock_msg(node1)']
40     : ------1-----1
40     : ['holds_lock(node2)', 'unlock_msg(node2)']
41     : ----1-----1--
41     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node1)', 'unlock_msg(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE0)


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
42 (*) : ----------11-
42     : ['unlock_msg(node0)', 'unlock_msg(node1)']
43     : ----------1-1
43     : ['unlock_msg(node0)', 'unlock_msg(node2)']
44     : -----------11
44     : ['unlock_msg(node1)', 'unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['unlock_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$1]}

sig2const: {'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

part_sig: ('node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1',)


---------- SigGenerator ----------

terms:  ['unlock_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$unlock_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE1)', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~unlock_msg(NODE1) | ~unlock_msg(NODE0) | NODE0 = NODE1


=== Prime Orbit 12 =====================
size : 1
num_suborbits: 1
45 (*) : 0001000---000
45     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', 'held', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']

sign_func_name2args: {'1$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$held': [[]], '1$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$grant_msg$0$2, node$1$holds_lock$0$2, node$1$unlock_msg$0$2]}

sig2const: {'node$1$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$grant_msg$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$holds_lock$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$unlock_msg$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1, node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1 | node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2}

part_sig: ('node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1 | node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2',)


---------- SigGenerator ----------

terms:  ['~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', 'held', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'held': Const('held', BooleanSort()), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'held': [], 'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$grant_msg': 3, '0$held': 1, '1$holds_lock': 3, '1$unlock_msg': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1, node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1 | node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2}

	sort: node

	identical_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1, node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0, node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1, node$1$grant_msg$0$2, node$1$holds_lock$0$2, node$1$unlock_msg$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$held': [[]], '1$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~holds_lock(NODE0)', 'held', '~unlock_msg(NODE0)', '~grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. holds_lock(NODE0) | ~held | unlock_msg(NODE0) | grant_msg(NODE0)


========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

========================================================================================================


=== Prime Orbit 0 =====================
size : 6
num_suborbits: 1
0 (*) : ------1----1-
0     : ['holds_lock(node2)', 'unlock_msg(node1)']
1     : -----1------1
1     : ['holds_lock(node1)', 'unlock_msg(node2)']
2     : ------1---1--
2     : ['holds_lock(node2)', 'unlock_msg(node0)']
3     : ----1-------1
3     : ['holds_lock(node0)', 'unlock_msg(node2)']
4     : -----1----1--
4     : ['holds_lock(node1)', 'unlock_msg(node0)']
5     : ----1------1-
5     : ['holds_lock(node0)', 'unlock_msg(node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~unlock_msg(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
6 (*) : -1----1------
6     : ['grant_msg(node1)', 'holds_lock(node2)']
7     : --1--1-------
7     : ['grant_msg(node2)', 'holds_lock(node1)']
8     : 1-----1------
8     : ['grant_msg(node0)', 'holds_lock(node2)']
9     : --1-1--------
9     : ['grant_msg(node2)', 'holds_lock(node0)']
10     : 1----1-------
10     : ['grant_msg(node0)', 'holds_lock(node1)']
11     : -1--1--------
11     : ['grant_msg(node1)', 'holds_lock(node0)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~grant_msg(NODE0) | ~holds_lock(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
12 (*) : --1---1------
12     : ['grant_msg(node2)', 'holds_lock(node2)']
13     : -1---1-------
13     : ['grant_msg(node1)', 'holds_lock(node1)']
14     : 1---1--------
14     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
15 (*) : ---0--1------
15     : ['holds_lock(node2)', '~held()']
16     : ---0-1-------
16     : ['holds_lock(node1)', '~held()']
17     : ---01--------
17     : ['holds_lock(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~holds_lock(NODE0) | held
qcost : 3




=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
18 (*) : ----1-1------
18     : ['holds_lock(node0)', 'holds_lock(node2)']
19     : ----11-------
19     : ['holds_lock(node0)', 'holds_lock(node1)']
20     : -----11------
20     : ['holds_lock(node1)', 'holds_lock(node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~holds_lock(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
21 (*) : -1---------1-
21     : ['grant_msg(node1)', 'unlock_msg(node1)']
22     : --1---------1
22     : ['grant_msg(node2)', 'unlock_msg(node2)']
23     : 1---------1--
23     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
24 (*) : 11-----------
24     : ['grant_msg(node0)', 'grant_msg(node1)']
25     : 1-1----------
25     : ['grant_msg(node0)', 'grant_msg(node2)']
26     : -11----------
26     : ['grant_msg(node1)', 'grant_msg(node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~grant_msg(NODE0) | ~grant_msg(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
27 (*) : 1----------1-
27     : ['grant_msg(node0)', 'unlock_msg(node1)']
28     : 1-----------1
28     : ['grant_msg(node0)', 'unlock_msg(node2)']
29     : -1--------1--
29     : ['grant_msg(node1)', 'unlock_msg(node0)']
30     : -1----------1
30     : ['grant_msg(node1)', 'unlock_msg(node2)']
31     : --1-------1--
31     : ['grant_msg(node2)', 'unlock_msg(node0)']
32     : --1--------1-
32     : ['grant_msg(node2)', 'unlock_msg(node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~grant_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
33 (*) : --10---------
33     : ['grant_msg(node2)', '~held()']
34     : -1-0---------
34     : ['grant_msg(node1)', '~held()']
35     : 1--0---------
35     : ['grant_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~grant_msg(NODE0) | held
qcost : 3




=== Prime Orbit 9 =====================
size : 3
num_suborbits: 1
36 (*) : ---0-------1-
36     : ['unlock_msg(node1)', '~held()']
37     : ---0--------1
37     : ['unlock_msg(node2)', '~held()']
38     : ---0------1--
38     : ['unlock_msg(node0)', '~held()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. held | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 10 =====================
size : 3
num_suborbits: 1
39 (*) : -----1-----1-
39     : ['holds_lock(node1)', 'unlock_msg(node1)']
40     : ------1-----1
40     : ['holds_lock(node2)', 'unlock_msg(node2)']
41     : ----1-----1--
41     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
42 (*) : ----------11-
42     : ['unlock_msg(node0)', 'unlock_msg(node1)']
43     : ----------1-1
43     : ['unlock_msg(node0)', 'unlock_msg(node2)']
44     : -----------11
44     : ['unlock_msg(node1)', 'unlock_msg(node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~unlock_msg(NODE1) | ~unlock_msg(NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 12 =====================
size : 1
num_suborbits: 1
45 (*) : 0001000---000
45     : ['held()', '~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']
num_forall :   0
num_exists :   1
num_literals : 4
quantified form : exists NODE0. holds_lock(NODE0) | ~held | unlock_msg(NODE0) | grant_msg(NODE0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.161 seconds

[QRM NOTE]: Time elapsed since last: 0.114 seconds

[QRM NOTE]: Peak memory: 1871271 bytes


=======================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

=======================================================================================


New level: 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


Solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] has cost 53.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


======================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

======================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 53

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

[MIN NOTE]: solution length: 13

invariant [invar_0] forall NODE0,NODE1. ~unlock_msg(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_1] forall NODE0,NODE1. ~grant_msg(NODE0) | ~holds_lock(NODE1) | NODE0 = NODE1 # qcost: 5

invariant [invar_2] forall NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE0) # qcost: 3

invariant [invar_3] forall NODE0. ~holds_lock(NODE0) | held # qcost: 3

invariant [invar_4] forall NODE0,NODE1. ~holds_lock(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_5] forall NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_6] forall NODE0,NODE1. ~grant_msg(NODE0) | ~grant_msg(NODE1) | NODE0 = NODE1 # qcost: 5

invariant [invar_7] forall NODE0,NODE1. ~grant_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1 # qcost: 5

invariant [invar_8] forall NODE0. ~grant_msg(NODE0) | held # qcost: 3

invariant [invar_9] forall NODE0. held | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_10] forall NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_11] forall NODE0,NODE1. ~unlock_msg(NODE1) | ~unlock_msg(NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_12] exists NODE0. holds_lock(NODE0) | ~held | unlock_msg(NODE0) | grant_msg(NODE0) # qcost: 5

[MIN NOTE]: number of total invariants: 13

[MIN NOTE]: total qCost: 53




[QRM NOTE]: Time elapsed since start: 0.240 seconds

[QRM NOTE]: Time elapsed since last: 0.079 seconds

[QRM NOTE]: Peak memory: 1845822 bytes


*******************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym/ivy/lockserv_automaton.ivy: node=3]

*******************************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy -s node=4 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym/ivy/lockserv_automaton.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=======================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: node=4]

=======================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 24

[QRM NOTE]: Time elapsed since start: 0.111 seconds

[QRM NOTE]: Time elapsed since last: 0.111 seconds

[QRM NOTE]: Peak memory: 190269 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: lock(fml:n)

building bdd for action: unlock(fml:n)

building bdd for action: recv_lock(fml:sender)

building bdd for action: recv_grant(fml:n)

building bdd for action: recv_unlock(fml:sender)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 13


=================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv_automaton: node=4]

=================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
predicate: held()
predicate: holds_lock('node',)
predicate: lock_msg('node',)
predicate: unlock_msg('node',)
predicate: grant_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'grant_msg(node1)', 'grant_msg(node2)', 'grant_msg(node3)', 'held()', 'holds_lock(node0)', 'holds_lock(node1)', 'holds_lock(node2)', 'holds_lock(node3)', 'lock_msg(node0)', 'lock_msg(node1)', 'lock_msg(node2)', 'lock_msg(node3)', 'unlock_msg(node0)', 'unlock_msg(node1)', 'unlock_msg(node2)', 'unlock_msg(node3)']

000000000----0000
000010000----0001
000010000----0010
000010000----0100
000010000----1000
000010001----0000
000010010----0000
000010100----0000
000011000----0000
000110000----0000
001010000----0000
010010000----0000
100010000----0000

[QRM NOTE]: Time elapsed since start: 0.834 seconds

[QRM NOTE]: Time elapsed since last: 0.722 seconds

[QRM NOTE]: Peak memory: 1345689 bytes


===================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: node=4]

===================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 1.032 seconds

[QRM NOTE]: Time elapsed since last: 0.198 seconds

[QRM NOTE]: Peak memory: 441122 bytes


*********************************************************************

	[IVY_CHECK]: Ivy Check for Reachability Invariant

*********************************************************************


===========================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy]

===========================================================================================

ivy_check complete=fo ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 96: invar_10
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 97: invar_11
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 98: invar_12

    The following action implementations are present:
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 27: implementation of lock
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 47: implementation of recv_grant
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 38: implementation of recv_lock
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 54: implementation of recv_unlock
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 31: implementation of unlock

    The following initializers are present:
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 18: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 96: invar_10 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 97: invar_11 ... PASS
        ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 98: invar_12 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:lock
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 96: invar_10 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 97: invar_11 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 98: invar_12 ... PASS
        (internal) ext:recv_grant
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 96: invar_10 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 97: invar_11 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 98: invar_12 ... PASS
        (internal) ext:recv_lock
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 96: invar_10 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 97: invar_11 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 98: invar_12 ... PASS
        (internal) ext:recv_unlock
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 96: invar_10 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 97: invar_11 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 98: invar_12 ... PASS
        (internal) ext:unlock
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 86: invar_0 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 87: invar_1 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 88: invar_2 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 89: invar_3 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 90: invar_4 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 91: invar_5 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 92: invar_6 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 93: invar_7 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 94: invar_8 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 95: invar_9 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 96: invar_10 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 97: invar_11 ... PASS
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 98: invar_12 ... PASS

    The following program assertions are treated as assumptions:
        in action unlock when called from the environment:
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 32: assumption
        in action recv_lock when called from the environment:
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 39: assumption
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 40: assumption
        in action recv_grant when called from the environment:
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 48: assumption
        in action recv_unlock when called from the environment:
            ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy: line 55: assumption

OK
[IVY_CHECK RESULT]: PASS


***************************************************************************

	[QRM]: ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy

***************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/lockserv_automaton.node_3.0.ivy']

[CUTOFF]: node=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 21.414 seconds

[QRM NOTE]: Time elapsed since last: 21.414 seconds

