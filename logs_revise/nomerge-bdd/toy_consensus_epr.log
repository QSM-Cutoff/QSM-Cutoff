
************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.ivy

************************************************************************


******************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

******************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=2,value=1 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

============================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.095 seconds

[QRM NOTE]: Time elapsed since last: 0.095 seconds

[QRM NOTE]: Peak memory: 28717 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 4


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

===============================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0']
sort: quorum=['quorum__node0_node1']
predicate: chosenAt('quorum', 'value')
predicate: decided('value',)
predicate: voted('node',)
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'voted(node0)', 'voted(node1)']

000000
000101
001010
1-1111

[QRM NOTE]: Time elapsed since start: 0.203 seconds

[QRM NOTE]: Time elapsed since last: 0.108 seconds

[QRM NOTE]: Peak memory: 1106961 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.208 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 56574 bytes


===================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

===================================================================================================================


==============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : 1-0---
0     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
1     : 1--0--
1     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : 1---0-
2     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
3     : 1----0
3     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : ---0-1
4     : ['voted(node1)', '~vote(node1,value0)']
5     : --0-1-
5     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : -1-0--
6     : ['decided(value0)', '~vote(node1,value0)']
7     : -10---
7     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
8 (*) : ---1-0
8     : ['vote(node1,value0)', '~voted(node1)']
9     : --1-0-
9     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
10 (*) : -1---0
10     : ['decided(value0)', '~voted(node1)']
11     : -1--0-
11     : ['decided(value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
12 (*) : 01----
12     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : 0--11-
13     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)']
14     : 0-1--1
14     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
15 (*) : 0---11
15     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
16 (*) : 0-11--
16     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 10

[PRIME NOTE]: number of primes: 17

[QRM NOTE]: Time elapsed since start: 0.225 seconds

[QRM NOTE]: Time elapsed since last: 0.017 seconds

[QRM NOTE]: Peak memory: 1137819 bytes


========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

========================================================================================================

definition primes: {0, 9}


New level: 0
 pending : [1, 2, 3, 4, 5, 6, 7, 8]
 solution : []


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8]
 solution : []

Essensial at level 0 : {2, 4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 16), (4, -1), (5, 16), (6, 64), (7, 0), (8, 0), (9, -1)]

Covered at level 0 : {8, 1, 7}

After reduction : 
 pending  : [3, 5, 6]
 solution : [2, 4]


Before reduction : 
 pending  : [3, 5, 6]
 solution : [2, 4]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 16), (4, -1), (5, 16), (6, 64), (7, 0), (8, 0), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 16), (6, 64), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 5, 6]
 solution : [2, 4]

[QRM NOTE]: Time elapsed since start: 0.232 seconds

[QRM NOTE]: Time elapsed since last: 0.007 seconds

[QRM NOTE]: Peak memory: 92026 bytes


============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : ---0-1
4     : ['voted(node1)', '~vote(node1,value0)']
5     : --0-1-
5     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node1,value0)', 'voted(node1)']

sign_func_name2args: {'1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$vote$1$0]}

sig2const: {'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0', 'value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~vote(node1,value0)', 'voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$vote': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0)


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
8 (*) : ---1-0
8     : ['vote(node1,value0)', '~voted(node1)']
9     : --1-0-
9     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', '~voted(node1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', '~voted(node1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0)


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : -1-0--
6     : ['decided(value0)', '~vote(node1,value0)']
7     : -10---
7     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

part_sig: ('node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0)


=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
10 (*) : -1---0
10     : ['decided(value0)', '~voted(node1)']
11     : -1--0-
11     : ['decided(value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

part_sig: ('node$1$voted$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. ~decided(VALUE0) | voted(NODE0)


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
12 (*) : 01----
12     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$chosenAt$1$0, value$0$decided$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$chosenAt$1$0}

part_sig: ('quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',))), 'decided': (EnumeratedSort('value', ('value0',)),)}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$chosenAt$1$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0]}

	identical_single_classes: {'quorum$1$chosenAt$0': quorum$1$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)


======================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

======================================================================================================================


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : ---0-1
4     : ['voted(node1)', '~vote(node1,value0)']
5     : --0-1-
5     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0)
qcost : 4




=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
8 (*) : ---1-0
8     : ['vote(node1,value0)', '~voted(node1)']
9     : --1-0-
9     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : -1-0--
6     : ['decided(value0)', '~vote(node1,value0)']
7     : -10---
7     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
10 (*) : -1---0
10     : ['decided(value0)', '~voted(node1)']
11     : -1--0-
11     : ['decided(value0)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. ~decided(VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
12 (*) : 01----
12     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 0.342 seconds

[QRM NOTE]: Time elapsed since last: 0.109 seconds

[QRM NOTE]: Peak memory: 1828925 bytes


=====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

=====================================================================================================


New level: 1
 pending : [3, 5, 6]
 solution : [2, 4]


Before reduction : 
 pending  : [3, 5, 6]
 solution : [2, 4]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 16), (6, 64), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 16), (6, 64), (7, -1), (8, -1), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 5, 6]
 solution : [2, 4]


Solution : [2, 4] has cost 8.


Decide in level 1 among pending : [3, 5, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 16), (6, 64), (7, -1), (8, -1), (9, -1)]

Decide 6 with phase True at level 1

After decision at level 1
 pending : [3, 5]
 solution : [2, 4, 6]


New level: 2
 pending : [3, 5]
 solution : [2, 4, 6]


Before reduction : 
 pending  : [3, 5]
 solution : [2, 4, 6]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 16), (6, 64), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : {3, 5}

After reduction : 
 pending  : []
 solution : [2, 4, 6]


Before reduction : 
 pending  : []
 solution : [2, 4, 6]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [2, 4, 6]


Solution : [2, 4, 6] has cost 12.


Before backtrack at level 2
 pending : []
 solution : [2, 4, 6]

After backtrack at level 2
 pending : [3, 5]
 solution : [2, 4, 6]


Invert decision for 6 at level 1


New level: 2
 pending : [3, 5]
 solution : [2, 4]


Before reduction : 
 pending  : [3, 5]
 solution : [2, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 16), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [3, 5]
 solution : [2, 4]


Solution : [2, 4] has cost 8.


Decide in level 2 among pending : [3, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 16), (6, -1), (7, -1), (8, -1), (9, -1)]

Decide 3 with phase True at level 2

After decision at level 2
 pending : [5]
 solution : [2, 4, 3]


New level: 3
 pending : [5]
 solution : [2, 4, 3]


Before reduction : 
 pending  : [5]
 solution : [2, 4, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 16), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : {5}

After reduction : 
 pending  : []
 solution : [2, 4, 3]


Before reduction : 
 pending  : []
 solution : [2, 4, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [2, 4, 3]


Solution : [2, 4, 3] has cost 12.


Before backtrack at level 3
 pending : []
 solution : [2, 4, 3]

After backtrack at level 3
 pending : [5]
 solution : [2, 4, 3]


Invert decision for 3 at level 2


New level: 3
 pending : [5]
 solution : [2, 4]


Before reduction : 
 pending  : [5]
 solution : [2, 4]

Essensial at level 3 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [2, 4, 5]


Before reduction : 
 pending  : []
 solution : [2, 4, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [2, 4, 5]


Solution : [2, 4, 5] has cost 12.


Before backtrack at level 3
 pending : []
 solution : [2, 4, 5]

After backtrack at level 3
 pending : [5]
 solution : [2, 4]


Before backtrack at level 2
 pending : [5]
 solution : [2, 4]

After backtrack at level 2
 pending : [5, 3]
 solution : [2, 4]


Before backtrack at level 1
 pending : [5, 3]
 solution : [2, 4]

After backtrack at level 1
 pending : [5, 3, 6]
 solution : [2, 4]


====================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

====================================================================================================================

[MIN NOTE]: number of minimal solution found: 3

[MIN NOTE]: upper bound: 12

[MIN NOTE]: maximum branch and bound depth: 3

[MIN NOTE]: number of definitions: 1

invariant [def_chosenAt] forall V,Q. chosenAt(Q,V) = (forall N. member(N,Q) -> vote(N,V)) # definition, qcost: 6

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [2, 4, 6]

[MIN NOTE]: solution length: 3

invariant [invar_2] forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_4] forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_6] forall VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) # qcost: 4

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 18




[MIN NOTE]: Solution 1 : [2, 4, 3]

[MIN NOTE]: solution length: 3

invariant [invar_2] forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_4] forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_3] forall VALUE0,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0) # qcost: 4

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 18




[MIN NOTE]: Solution 2 : [2, 4, 5]

[MIN NOTE]: solution length: 3

invariant [invar_2] forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_4] forall VALUE0,NODE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_5] forall VALUE0,NODE0. ~decided(VALUE0) | voted(NODE0) # qcost: 4

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 18




[QRM NOTE]: Time elapsed since start: 0.494 seconds

[QRM NOTE]: Time elapsed since last: 0.152 seconds

[QRM NOTE]: Peak memory: 1823662 bytes


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=3,value=1]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 0.035 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 50369 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 8


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: decided('value',)
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', 'decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)', 'voted(node0)', 'voted(node1)', 'voted(node2)']

0000000000
0000001001
0000010010
0000100100
001-011011
010-101101
100-110110
111-111111

[QRM NOTE]: Time elapsed since start: 0.481 seconds

[QRM NOTE]: Time elapsed since last: 0.445 seconds

[QRM NOTE]: Peak memory: 1183004 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=3,value=1]

=========================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.605 seconds

[QRM NOTE]: Time elapsed since last: 0.124 seconds

[QRM NOTE]: Peak memory: 178788 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy -s node=2,value=2 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=2,value=2]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 4

[QRM NOTE]: Time elapsed since start: 0.036 seconds

[QRM NOTE]: Time elapsed since last: 0.036 seconds

[QRM NOTE]: Peak memory: 51793 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 9


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=2]

===============================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1']
predicate: chosenAt('quorum', 'value')
predicate: decided('value',)
predicate: vote('node', 'value')
predicate: voted('node',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'voted(node0)', 'voted(node1)']

0000000000
0000000101
0000001001
0000010010
0000011011
0000100010
0000100111
010-010111
10-0101011

[QRM NOTE]: Time elapsed since start: 0.229 seconds

[QRM NOTE]: Time elapsed since last: 0.193 seconds

[QRM NOTE]: Peak memory: 1148540 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: node=2,value=2]

=========================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.305 seconds

[QRM NOTE]: Time elapsed since last: 0.076 seconds

[QRM NOTE]: Peak memory: 144888 bytes

next size: node=3,value=2


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy -s node=3,value=1 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: node=3,value=1]

=========================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.119 seconds

[QRM NOTE]: Time elapsed since last: 0.119 seconds

[QRM NOTE]: Peak memory: 70950 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy -s node=2,value=2 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: node=2,value=2]

=========================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.082 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 53624 bytes

next size: node=3,value=2


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=2,value=1]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy -s node=3,value=1 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: node=3,value=1]

=========================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.119 seconds

[QRM NOTE]: Time elapsed since last: 0.119 seconds

[QRM NOTE]: Peak memory: 71030 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy -s node=2,value=2 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: node=2,value=2]

=========================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.084 seconds

[QRM NOTE]: Time elapsed since last: 0.084 seconds

[QRM NOTE]: Peak memory: 54152 bytes

next size: node=3,value=2


******************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

******************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=3,value=2 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

============================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 0.075 seconds

[QRM NOTE]: Time elapsed since last: 0.075 seconds

[QRM NOTE]: Peak memory: 103334 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 27


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: decided('value',)
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)']

00000000000000000
00000000000001001
00000000000010001
00000000000100010
00000000000110011
00000000001000010
00000000001001011
00000000010000100
00000000010010101
00000000011000110
00000000100000100
00000000100001101
00000000100100110
0000010-000101011
0000010-100101111
000010-0001010011
000010-0011010111
0001000-010001101
0001000-011001111
001000-0100010101
001000-0100110111
0100000-010100110
0100000-010110111
0101010-010101111
100000-0101000110
100000-0101001111
101010-0101010111

[QRM NOTE]: Time elapsed since start: 0.735 seconds

[QRM NOTE]: Time elapsed since last: 0.660 seconds

[QRM NOTE]: Peak memory: 1270499 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.736 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 224381 bytes


===================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

===================================================================================================================


==============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 12
num_suborbits: 1
0 (*) : ----1-----------0
0     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node2)']
1     : -----1----------0
1     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node2)']
2     : ----1----------0-
2     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node1)']
3     : -----1---------0-
3     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node1)']
4     : --1-------------0
4     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node2)']
5     : ---1------------0
5     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node2)']
6     : --1-----------0--
6     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node0)']
7     : ---1----------0--
7     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node0)']
8     : 1--------------0-
8     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
9     : -1-------------0-
9     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node1)']
10     : 1-------------0--
10     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
11     : -1------------0--
11     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 1
18 (*) : --1-----0--------
18     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
19     : ---1-----0-------
19     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
20     : 1-------0--------
20     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
21     : -1-------0-------
21     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
22     : ----1-----0------
22     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
23     : -----1-----0-----
23     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
24     : 1---------0------
24     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
25     : -1---------0-----
25     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
26     : ----1-------0----
26     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
27     : -----1-------0---
27     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
28     : --1---------0----
28     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
29     : ---1---------0---
29     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
30 (*) : --1----1---------
30     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
31     : ---1--1----------
31     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
32     : 1------1---------
32     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
33     : -1----1----------
33     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
34     : ----1--1---------
34     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
35     : -----11----------
35     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
36 (*) : ------11---------
36     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
37 (*) : ---1----1--------
37     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
38     : --1------1-------
38     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
39     : -1------1--------
39     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
40     : 1--------1-------
40     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
41     : -----1----1------
41     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
42     : ----1------1-----
42     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
43     : -1--------1------
43     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
44     : 1----------1-----
44     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
45     : -----1------1----
45     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
46     : ----1--------1---
46     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
47     : ---1--------1----
47     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
48     : --1----------1---
48     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
49 (*) : --11-------------
49     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
50     : 11---------------
50     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
51     : ----11-----------
51     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
52 (*) : --------11-------
52     : ['vote(node0,value0)', 'vote(node0,value1)']
53     : ----------11-----
53     : ['vote(node1,value0)', 'vote(node1,value1)']
54     : ------------11---
54     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
55 (*) : ---11------------
55     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
56     : --1--1-----------
56     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
57     : -1--1------------
57     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
58     : 1----1-----------
58     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
59     : -11--------------
59     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
60     : 1--1-------------
60     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 12
num_suborbits: 1
61 (*) : --0-1---1--------
61     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
62     : ---0-1---1-------
62     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
63     : 0---1---1--------
63     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
64     : -0---1---1-------
64     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
65     : --1-0-----1------
65     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
66     : ---1-0-----1-----
66     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
67     : 0-1-------1------
67     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
68     : -0-1-------1-----
68     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
69     : 1---0-------1----
69     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
70     : -1---0-------1---
70     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
71     : 1-0---------1----
71     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
72     : -1-0---------1---
72     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
73 (*) : 1-0-1------------
73     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
74     : -1-0-1-----------
74     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
75     : 0-1-1------------
75     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
76     : -0-1-1-----------
76     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
77     : 1-1-0------------
77     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
78     : -1-1-0-----------
78     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
79 (*) : 0-------1-1------
79     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
80     : -0-------1-1-----
80     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
81     : --0-----1---1----
81     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
82     : ---0-----1---1---
82     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
83     : ----0-----1-1----
83     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
84     : -----0-----1-1---
84     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
85 (*) : ----0-1-0--------
85     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
86     : -----0-1-0-------
86     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
87     : --0---1---0------
87     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
88     : ---0---1---0-----
88     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
89     : 0-----1-----0----
89     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
90     : -0-----1-----0---
90     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
91 (*) : --------00----1--
91     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
92     : ----------00---1-
92     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
93     : ------------00--1
93     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
94 (*) : ----0-1--1-------
94     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
95     : -----0-11--------
95     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
96     : --0---1----1-----
96     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
97     : ---0---1--1------
97     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
98     : 0-----1------1---
98     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
99     : -0-----1----1----
99     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 12
num_suborbits: 1
100 (*) : ------1--1--0----
100     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
101     : -------11----0---
101     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
102     : ------1--10------
102     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
103     : -------11--0-----
103     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
104     : ------1----10----
104     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
105     : -------1--1--0---
105     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
106     : ------1-0--1-----
106     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
107     : -------1-01------
107     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
108     : ------1---0--1---
108     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
109     : -------1---01----
109     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
110     : ------1-0----1---
110     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
111     : -------1-0--1----
111     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
112 (*) : ------1-0---0----
112     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
113     : -------1-0---0---
113     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
114     : ------1-0-0------
114     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
115     : -------1-0-0-----
115     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
116     : ------1---0-0----
116     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
117     : -------1---0-0---
117     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
118 (*) : -------1--1-1----
118     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
119     : ------1----1-1---
119     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
120     : -------11---1----
120     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
121     : ------1--1---1---
121     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
122     : -------11-1------
122     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
123     : ------1--1-1-----
123     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
124 (*) : -------1--1-----0
124     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
125     : ------1----1----0
125     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
126     : -------1----1--0-
126     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
127     : ------1------1-0-
127     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
128     : -------11-------0
128     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
129     : ------1--1------0
129     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
130     : -------1----1-0--
130     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
131     : ------1------10--
131     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
132     : -------11------0-
132     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
133     : ------1--1-----0-
133     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
134     : -------1--1---0--
134     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
135     : ------1----1--0--
135     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
136 (*) : 0-----1---------0
136     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
137     : -0-----1--------0
137     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
138     : --0---1--------0-
138     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
139     : ---0---1-------0-
139     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
140     : ----0-1-------0--
140     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
141     : -----0-1------0--
141     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 12
num_suborbits: 1
142 (*) : ------1-0-------0
142     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
143     : -------1-0------0
143     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
144     : ------1-0------0-
144     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
145     : -------1-0-----0-
145     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
146     : ------1---0-----0
146     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
147     : -------1---0----0
147     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
148     : ------1---0---0--
148     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
149     : -------1---0--0--
149     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
150     : ------1-----0--0-
150     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
151     : -------1-----0-0-
151     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
152     : ------1-----0-0--
152     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
153     : -------1-----00--
153     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
154 (*) : ------1-------0-0
154     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
155     : -------1------0-0
155     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
156     : ------1-------00-
156     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
157     : -------1------00-
157     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
158     : ------1--------00
158     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
159     : -------1-------00
159     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 12
num_suborbits: 1
160 (*) : ---1-0----0----1-
160     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
161     : --1-0------0---1-
161     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
162     : -1---0------0---1
162     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
163     : 1---0--------0--1
163     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
164     : ---0-1--0-----1--
164     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
165     : --0-1----0----1--
165     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
166     : -1-0--------0---1
166     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
167     : 1-0----------0--1
167     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
168     : -0---1--0-----1--
168     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)']
169     : 0---1----0----1--
169     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)']
170     : -0-1------0----1-
170     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)']
171     : 0-1--------0---1-
171     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 12
num_suborbits: 1
172 (*) : 0-------1--0---1-
172     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)']
173     : -0-------10----1-
173     : ['vote(node0,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)']
174     : --0-----1----0--1
174     : ['vote(node0,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
175     : ---0-----1--0---1
175     : ['vote(node0,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
176     : 0--------01---1--
176     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)']
177     : -0------0--1--1--
177     : ['vote(node1,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)']
178     : ----0-----1--0--1
178     : ['vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
179     : -----0-----10---1
179     : ['vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
180     : --0------0--1-1--
180     : ['vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
181     : ---0----0----11--
181     : ['vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
182     : ----0------01--1-
182     : ['vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
183     : -----0----0--1-1-
183     : ['vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
184 (*) : 0-0---1-1--------
184     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
185     : -0-0---1-1-------
185     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
186     : 0---0-1---1------
186     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
187     : -0---0-1---1-----
187     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
188     : --0-0-1-----1----
188     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
189     : ---0-0-1-----1---
189     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 2
num_suborbits: 1
190 (*) : -0-0-0-1---------
190     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
191     : 0-0-0-1----------
191     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
192 (*) : -00--------11-1--
192     : ['vote(node1,value1)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
193     : 0--0------1--11--
193     : ['vote(node1,value0)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
194     : -0--0----1--1--1-
194     : ['vote(node0,value1)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)']
195     : 0----0--1----1-1-
195     : ['vote(node0,value0)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)']
196     : ---00----11-----1
196     : ['vote(node0,value1)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
197     : --0--0--1--1----1
197     : ['vote(node0,value0)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
198 (*) : ---0-0-1----0---1
198     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
199     : --0-0-1------0--1
199     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
200     : -0---0-1--0----1-
200     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
201     : 0---0-1----0---1-
201     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
202     : -0-0---10-----1--
202     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
203     : 0-0---1--0----1--
203     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
204 (*) : --0------0---01-1
204     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
205     : ---0----0---0-1-1
205     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)']
206     : 0--------0-0--11-
206     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
207     : -0------0-0---11-
207     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node1,value0)']
208     : ----0------0-0-11
208     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
209     : -----0----0-0--11
209     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
210 (*) : 0--00-----1---1-1
210     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
211     : -00--0-----1--1-1
211     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
212     : -00-0-------1-11-
212     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
213     : 0--0-0-------111-
213     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
214     : 0-0--0--1------11
214     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
215     : -0-00----1-----11
215     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 12
num_suborbits: 1
216 (*) : ---00---0-1---1-1
216     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
217     : --0--0---0-1--1-1
217     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
218     : -0--0---0---1-11-
218     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
219     : 0----0---0---111-
219     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
220     : --0--0--1-0----11
220     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
221     : ---00----1-0---11
221     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
222     : -00-------0-1-11-
222     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
223     : 0--0-------0-111-
223     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
224     : 0----0--1---0--11
224     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
225     : -0--0----1---0-11
225     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
226     : 0--0------1-0-1-1
226     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
227     : -00--------1-01-1
227     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
228 (*) : -0--0---0----0111
228     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node2,value1)']
229     : 0----0---0--0-111
229     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node2,value0)']
230     : ---00---0--0--111
230     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node1,value1)']
231     : --0--0---00---111
231     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node1,value0)']
232     : -00-------0--0111
232     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)', '~vote(node2,value1)']
233     : 0--0-------00-111
233     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
234 (*) : -00-0--------0111
234     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
235     : 0--0-0------0-111
235     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
236     : 0--00------0--111
236     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
237     : -00--0----0---111
237     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
238     : 0-0--0---0----111
238     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
239     : -0-00---0-----111
239     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 1
num_suborbits: 1
240 (*) : 000000--------111
240     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 34

[PRIME NOTE]: number of primes: 241

[QRM NOTE]: Time elapsed since start: 0.809 seconds

[QRM NOTE]: Time elapsed since last: 0.073 seconds

[QRM NOTE]: Peak memory: 1563691 bytes


========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

========================================================================================================

definition primes: {11, 9, 2, 10}


New level: 0
 pending : [0, 1, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {1, 13, 7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, 0), (1, -1), (2, -1), (3, 32768), (4, 16777216), (5, 0), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, 0), (23, 0), (24, 32768), (25, 4194304), (26, 0), (27, 32768), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 0 : {0, 32, 33, 5, 6, 8, 22, 23, 26, 28, 29, 30, 31}

After reduction : 
 pending  : [3, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [3, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7]

Essensial at level 0 : set()

Before removed
 coverage : [(0, 0), (1, -1), (2, -1), (3, 32768), (4, 16777216), (5, 0), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, 0), (23, 0), (24, 32768), (25, 4194304), (26, 0), (27, 32768), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, 16777216), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7]

[QRM NOTE]: Time elapsed since start: 0.873 seconds

[QRM NOTE]: Time elapsed since last: 0.065 seconds

[QRM NOTE]: Peak memory: 524443 bytes


============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', '~voted(node2)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', '~voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
91 (*) : --------00----1--
91     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
92     : ----------00---1-
92     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
93     : ------------00--1
93     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', '~vote(node0,value1)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$1]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', '~vote(node0,value1)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 2, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
52 (*) : --------11-------
52     : ['vote(node0,value0)', 'vote(node0,value1)']
53     : ----------11-----
53     : ['vote(node1,value0)', 'vote(node1,value1)']
54     : ------------11---
54     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', 'vote(node0,value1)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', 'vote(node0,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
30 (*) : --1----1---------
30     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
31     : ---1--1----------
31     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
32     : 1------1---------
32     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
33     : -1----1----------
33     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
34     : ----1--1---------
34     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
35     : -----11----------
35     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$chosenAt$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decided$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decided$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['chosenAt(QUORUM0,VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,VALUE1. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
36 (*) : ------11---------
36     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: exists VALUE0. ~decided(VALUE0)


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
85 (*) : ----0-1-0--------
85     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
86     : -----0-1-0-------
86     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
87     : --0---1---0------
87     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
88     : ---0---1---0-----
88     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
89     : 0-----1-----0----
89     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
90     : -0-----1-----0---
90     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node0,value0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node0,value0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', '~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM0,VALUE0. member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
94 (*) : ----0-1--1-------
94     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
95     : -----0-11--------
95     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
96     : --0---1----1-----
96     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
97     : ---0---1--1------
97     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
98     : 0-----1------1---
98     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
99     : -0-----1----1----
99     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', 'vote(node0,value1)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', 'vote(node0,value1)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', 'vote(NODE0,VALUE1)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM0,VALUE0,VALUE1. member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 15 =====================
size : 12
num_suborbits: 1
100 (*) : ------1--1--0----
100     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
101     : -------11----0---
101     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
102     : ------1--10------
102     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
103     : -------11--0-----
103     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
104     : ------1----10----
104     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
105     : -------1--1--0---
105     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
106     : ------1-0--1-----
106     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
107     : -------1-01------
107     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
108     : ------1---0--1---
108     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
109     : -------1---01----
109     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
110     : ------1-0----1---
110     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
111     : -------1-0--1----
111     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'vote(NODE0,VALUE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,NODE1. vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
112 (*) : ------1-0---0----
112     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
113     : -------1-0---0---
113     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
114     : ------1-0-0------
114     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
115     : -------1-0-0-----
115     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
116     : ------1---0-0----
116     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
117     : -------1---0-0---
117     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', '~vote(NODE0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
118 (*) : -------1--1-1----
118     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
119     : ------1----1-1---
119     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
120     : -------11---1----
120     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
121     : ------1--1---1---
121     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
122     : -------11-1------
122     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
123     : ------1--1-1-----
123     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', 'vote(NODE1,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ~vote(NODE1,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
124 (*) : -------1--1-----0
124     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
125     : ------1----1----0
125     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
126     : -------1----1--0-
126     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
127     : ------1------1-0-
127     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
128     : -------11-------0
128     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
129     : ------1--1------0
129     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
130     : -------1----1-0--
130     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
131     : ------1------10--
131     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
132     : -------11------0-
132     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
133     : ------1--1-----0-
133     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
134     : -------1--1---0--
134     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
135     : ------1----1--0--
135     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | voted(NODE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
136 (*) : 0-----1---------0
136     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
137     : -0-----1--------0
137     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
138     : --0---1--------0-
138     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
139     : ---0---1-------0-
139     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
140     : ----0-1-------0--
140     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
141     : -----0-1------0--
141     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)', '~voted(node2)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)', '~voted(node2)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM0,VALUE0. member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | voted(NODE0)


=== Prime Orbit 20 =====================
size : 12
num_suborbits: 1
142 (*) : ------1-0-------0
142     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
143     : -------1-0------0
143     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
144     : ------1-0------0-
144     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
145     : -------1-0-----0-
145     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
146     : ------1---0-----0
146     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
147     : -------1---0----0
147     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
148     : ------1---0---0--
148     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
149     : -------1---0--0--
149     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
150     : ------1-----0--0-
150     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
151     : -------1-----0-0-
151     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
152     : ------1-----0-0--
152     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
153     : -------1-----00--
153     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | voted(NODE1) | NODE0 = NODE1


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
154 (*) : ------1-------0-0
154     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
155     : -------1------0-0
155     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
156     : ------1-------00-
156     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
157     : -------1------00-
157     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
158     : ------1--------00
158     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
159     : -------1-------00
159     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
184 (*) : 0-0---1-1--------
184     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
185     : -0-0---1-1-------
185     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
186     : 0---0-1---1------
186     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
187     : -0---0-1---1-----
187     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
188     : --0-0-1-----1----
188     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
189     : ---0-0-1-----1---
189     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decided(value0)', 'vote(node0,value0)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0, value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decided(value0)', 'vote(node0,value0)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', 'vote(NODE0,VALUE0)', '~chosenAt(QUORUM1,VALUE0)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM0,QUORUM1,VALUE0. ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE0) | chosenAt(QUORUM1,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | QUORUM0 = QUORUM1


=== Prime Orbit 25 =====================
size : 2
num_suborbits: 1
190 (*) : -0-0-0-1---------
190     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
191     : 0-0-0-1----------
191     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
198 (*) : ---0-0-1----0---1
198     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
199     : --0-0-1------0--1
199     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
200     : -0---0-1--0----1-
200     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
201     : 0---0-1----0---1-
201     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
202     : -0-0---10-----1--
202     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
203     : 0-0---1--0----1--
203     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', '~vote(node2,value0)', 'voted(node2)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$voted$0$0, node$0$member$0$0, node$0$member$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', '~vote(node2,value0)', 'voted(node2)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '1$vote': 1, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, 'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', 'voted(NODE0)', '~vote(NODE0,VALUE1)', '~chosenAt(QUORUM1,VALUE0)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0,QUORUM1,VALUE1. ~member(NODE0,QUORUM0) | ~voted(NODE0) | vote(NODE0,VALUE1) | chosenAt(QUORUM1,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)


======================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

======================================================================================================================


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
91 (*) : --------00----1--
91     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
92     : ----------00---1-
92     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
93     : ------------00--1
93     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))
qcost : 4




=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
52 (*) : --------11-------
52     : ['vote(node0,value0)', 'vote(node0,value1)']
53     : ----------11-----
53     : ['vote(node1,value0)', 'vote(node1,value1)']
54     : ------------11---
54     : ['vote(node2,value0)', 'vote(node2,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3




=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
30 (*) : --1----1---------
30     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
31     : ---1--1----------
31     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
32     : 1------1---------
32     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
33     : -1----1----------
33     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
34     : ----1--1---------
34     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
35     : -----11----------
35     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall QUORUM0,VALUE0,VALUE1. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
36 (*) : ------11---------
36     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists VALUE0. ~decided(VALUE0)
qcost : 2




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
85 (*) : ----0-1-0--------
85     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
86     : -----0-1-0-------
86     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
87     : --0---1---0------
87     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
88     : ---0---1---0-----
88     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
89     : 0-----1-----0----
89     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
90     : -0-----1-----0---
90     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,QUORUM0,VALUE0. member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
94 (*) : ----0-1--1-------
94     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
95     : -----0-11--------
95     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
96     : --0---1----1-----
96     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
97     : ---0---1--1------
97     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
98     : 0-----1------1---
98     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
99     : -0-----1----1----
99     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,QUORUM0,VALUE0,VALUE1. member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 15 =====================
size : 12
num_suborbits: 1
100 (*) : ------1--1--0----
100     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
101     : -------11----0---
101     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
102     : ------1--10------
102     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
103     : -------11--0-----
103     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
104     : ------1----10----
104     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
105     : -------1--1--0---
105     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
106     : ------1-0--1-----
106     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
107     : -------1-01------
107     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
108     : ------1---0--1---
108     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
109     : -------1---01----
109     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
110     : ------1-0----1---
110     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
111     : -------1-0--1----
111     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,NODE1. vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
112 (*) : ------1-0---0----
112     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
113     : -------1-0---0---
113     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
114     : ------1-0-0------
114     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
115     : -------1-0-0-----
115     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
116     : ------1---0-0----
116     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
117     : -------1---0-0---
117     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | vote(NODE0,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
118 (*) : -------1--1-1----
118     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
119     : ------1----1-1---
119     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
120     : -------11---1----
120     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
121     : ------1--1---1---
121     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
122     : -------11-1------
122     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
123     : ------1--1-1-----
123     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ~vote(NODE1,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
124 (*) : -------1--1-----0
124     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
125     : ------1----1----0
125     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
126     : -------1----1--0-
126     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
127     : ------1------1-0-
127     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
128     : -------11-------0
128     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
129     : ------1--1------0
129     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
130     : -------1----1-0--
130     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
131     : ------1------10--
131     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
132     : -------11------0-
132     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
133     : ------1--1-----0-
133     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
134     : -------1--1---0--
134     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
135     : ------1----1--0--
135     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | voted(NODE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
136 (*) : 0-----1---------0
136     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
137     : -0-----1--------0
137     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
138     : --0---1--------0-
138     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
139     : ---0---1-------0-
139     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
140     : ----0-1-------0--
140     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
141     : -----0-1------0--
141     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,QUORUM0,VALUE0. member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | voted(NODE0)
qcost : 7




=== Prime Orbit 20 =====================
size : 12
num_suborbits: 1
142 (*) : ------1-0-------0
142     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
143     : -------1-0------0
143     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
144     : ------1-0------0-
144     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
145     : -------1-0-----0-
145     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
146     : ------1---0-----0
146     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
147     : -------1---0----0
147     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
148     : ------1---0---0--
148     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
149     : -------1---0--0--
149     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
150     : ------1-----0--0-
150     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
151     : -------1-----0-0-
151     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
152     : ------1-----0-0--
152     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
153     : -------1-----00--
153     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | voted(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
154 (*) : ------1-------0-0
154     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
155     : -------1------0-0
155     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
156     : ------1-------00-
156     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
157     : -------1------00-
157     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
158     : ------1--------00
158     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
159     : -------1-------00
159     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
184 (*) : 0-0---1-1--------
184     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
185     : -0-0---1-1-------
185     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
186     : 0---0-1---1------
186     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
187     : -0---0-1---1-----
187     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
188     : --0-0-1-----1----
188     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
189     : ---0-0-1-----1---
189     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall NODE0,QUORUM0,QUORUM1,VALUE0. ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE0) | chosenAt(QUORUM1,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 25 =====================
size : 2
num_suborbits: 1
190 (*) : -0-0-0-1---------
190     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
191     : 0-0-0-1----------
191     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
198 (*) : ---0-0-1----0---1
198     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
199     : --0-0-1------0--1
199     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
200     : -0---0-1--0----1-
200     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
201     : 0---0-1----0---1-
201     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
202     : -0-0---10-----1--
202     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
203     : 0-0---1--0----1--
203     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
num_forall :   5
num_exists :   0
num_literals : 9
quantified form : forall VALUE0,NODE0,QUORUM0,QUORUM1,VALUE1. ~member(NODE0,QUORUM0) | ~voted(NODE0) | vote(NODE0,VALUE1) | chosenAt(QUORUM1,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)
qcost : 14



[QRM NOTE]: Time elapsed since start: 1.025 seconds

[QRM NOTE]: Time elapsed since last: 0.151 seconds

[QRM NOTE]: Peak memory: 2305933 bytes


=====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

=====================================================================================================


New level: 1
 pending : [3, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [3, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, 16777216), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, 16777216), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7]


Solution : [1, 13, 7] has cost 11.


Decide in level 1 among pending : [3, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, 16777216), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 1

After decision at level 1
 pending : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7, 4]


New level: 2
 pending : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7, 4]


Before reduction : 
 pending  : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, 16777216), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1048576), (13, -1), (14, 262144), (15, 131072), (16, 524288), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, 2097152), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]
 solution : [1, 13, 7, 4]


Solution : [1, 13, 7, 4] has cost 13.


Decide in level 2 among pending : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1048576), (13, -1), (14, 262144), (15, 131072), (16, 524288), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, 2097152), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 2

After decision at level 2
 pending : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 25]


New level: 3
 pending : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 25]


Before reduction : 
 pending  : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1048576), (13, -1), (14, 262144), (15, 131072), (16, 524288), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, 2097152), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : {3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 13, 7, 4, 25]


Before reduction : 
 pending  : []
 solution : [1, 13, 7, 4, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 13, 7, 4, 25]


Solution : [1, 13, 7, 4, 25] has cost 17.


Before backtrack at level 3
 pending : []
 solution : [1, 13, 7, 4, 25]

After backtrack at level 3
 pending : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 25]


Invert decision for 25 at level 2


New level: 3
 pending : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4]


Before reduction : 
 pending  : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1048576), (13, -1), (14, 262144), (15, 131072), (16, 524288), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4]


Solution : [1, 13, 7, 4] has cost 13.


Decide in level 3 among pending : [3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1048576), (13, -1), (14, 262144), (15, 131072), (16, 524288), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 12 with phase True at level 3

After decision at level 3
 pending : [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 12]


New level: 4
 pending : [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 12]


Before reduction : 
 pending  : [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1048576), (13, -1), (14, 262144), (15, 131072), (16, 524288), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : {3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 13, 7, 4, 12]


Before reduction : 
 pending  : []
 solution : [1, 13, 7, 4, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 13, 7, 4, 12]


Solution : [1, 13, 7, 4, 12] has cost 20.


Before backtrack at level 4
 pending : []
 solution : [1, 13, 7, 4, 12]

After backtrack at level 4
 pending : [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 12]


Invert decision for 12 at level 3


New level: 4
 pending : [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4]


Before reduction : 
 pending  : [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 262144), (15, 131072), (16, 524288), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4]


Solution : [1, 13, 7, 4] has cost 13.


Decide in level 4 among pending : [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 262144), (15, 131072), (16, 524288), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 16 with phase True at level 4

After decision at level 4
 pending : [3, 14, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 16]


New level: 5
 pending : [3, 14, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 16]


Before reduction : 
 pending  : [3, 14, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 262144), (15, 131072), (16, 524288), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : {3, 14, 15, 17, 18, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 13, 7, 4, 16]


Before reduction : 
 pending  : []
 solution : [1, 13, 7, 4, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 13, 7, 4, 16]


Solution : [1, 13, 7, 4, 16] has cost 20.


Before backtrack at level 5
 pending : []
 solution : [1, 13, 7, 4, 16]

After backtrack at level 5
 pending : [3, 14, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 16]


Invert decision for 16 at level 4


New level: 5
 pending : [3, 14, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4]


Before reduction : 
 pending  : [3, 14, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 262144), (15, 131072), (16, -1), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 14, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4]


Solution : [1, 13, 7, 4] has cost 13.


Decide in level 5 among pending : [3, 14, 15, 17, 18, 19, 20, 21, 24, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 262144), (15, 131072), (16, -1), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 14 with phase True at level 5

After decision at level 5
 pending : [3, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 14]


New level: 6
 pending : [3, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 14]


Before reduction : 
 pending  : [3, 15, 17, 18, 19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 262144), (15, 131072), (16, -1), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, 0), (19, 8192), (20, 2048), (21, 2048), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {17, 18, 3, 15}

After reduction : 
 pending  : [19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 14]


Before reduction : 
 pending  : [19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, 0), (19, 8192), (20, 2048), (21, 2048), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8192), (20, 2048), (21, 2048), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 14]


Solution : [1, 13, 7, 4, 14] has cost 22.


Before backtrack at level 6
 pending : [19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 14]

After backtrack at level 6
 pending : [19, 20, 21, 24, 27, 3, 15, 17, 18]
 solution : [1, 13, 7, 4, 14]


Invert decision for 14 at level 5


New level: 6
 pending : [19, 20, 21, 24, 27, 3, 15, 17, 18]
 solution : [1, 13, 7, 4]


Before reduction : 
 pending  : [19, 20, 21, 24, 27, 3, 15, 17, 18]
 solution : [1, 13, 7, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8192), (20, 2048), (21, 2048), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 131072), (16, -1), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [19, 20, 21, 24, 27, 3, 15, 17, 18]
 solution : [1, 13, 7, 4]


Solution : [1, 13, 7, 4] has cost 13.


Decide in level 6 among pending : [19, 20, 21, 24, 27, 3, 15, 17, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 131072), (16, -1), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 15 with phase True at level 6

After decision at level 6
 pending : [19, 20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 15]


New level: 7
 pending : [19, 20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 15]


Before reduction : 
 pending  : [19, 20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 131072), (16, -1), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 8192), (20, 2048), (21, 2048), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : {17, 18, 3}

After reduction : 
 pending  : [19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 15]


Before reduction : 
 pending  : [19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 8192), (20, 2048), (21, 2048), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8192), (20, 2048), (21, 2048), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 15]


Solution : [1, 13, 7, 4, 15] has cost 22.


Before backtrack at level 7
 pending : [19, 20, 21, 24, 27]
 solution : [1, 13, 7, 4, 15]

After backtrack at level 7
 pending : [19, 20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 15]


Invert decision for 15 at level 6


New level: 7
 pending : [19, 20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4]


Before reduction : 
 pending  : [19, 20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8192), (20, 2048), (21, 2048), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4]


Solution : [1, 13, 7, 4] has cost 13.


Decide in level 7 among pending : [19, 20, 21, 24, 27, 3, 17, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 19 with phase True at level 7

After decision at level 7
 pending : [20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 19]


New level: 8
 pending : [20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 19]


Before reduction : 
 pending  : [20, 21, 24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 19]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 8192), (19, 65536), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8192), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {18, 20, 21}

After reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 4, 19]


Before reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 4, 19]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8192), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8192), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 4, 19]


Solution : [1, 13, 7, 4, 19] has cost 20.


Before backtrack at level 8
 pending : [24, 27, 3, 17]
 solution : [1, 13, 7, 4, 19]

After backtrack at level 8
 pending : [24, 27, 3, 17, 20, 21, 18]
 solution : [1, 13, 7, 4, 19]


Invert decision for 19 at level 7


New level: 8
 pending : [24, 27, 3, 17, 20, 21, 18]
 solution : [1, 13, 7, 4]


Before reduction : 
 pending  : [24, 27, 3, 17, 20, 21, 18]
 solution : [1, 13, 7, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8192), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 8192), (19, -1), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 20, 21, 18]
 solution : [1, 13, 7, 4]


Solution : [1, 13, 7, 4] has cost 13.


Decide in level 8 among pending : [24, 27, 3, 17, 20, 21, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 8192), (19, -1), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 8

After decision at level 8
 pending : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 4, 20]


New level: 9
 pending : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 4, 20]


Before reduction : 
 pending  : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 4, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 8192), (19, -1), (20, 32768), (21, 4096), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8192), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {18, 21}

After reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 4, 20]


Before reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 4, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8192), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8192), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 4, 20]


Solution : [1, 13, 7, 4, 20] has cost 20.


Before backtrack at level 9
 pending : [24, 27, 3, 17]
 solution : [1, 13, 7, 4, 20]

After backtrack at level 9
 pending : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 4, 20]


Invert decision for 20 at level 8


New level: 9
 pending : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 4]


Before reduction : 
 pending  : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 4]

Essensial at level 9 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8192), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 21]


Before reduction : 
 pending  : [24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 21]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 21]


Solution : [1, 13, 7, 4, 21] has cost 20.


Before backtrack at level 9
 pending : [24, 27, 3, 17, 18]
 solution : [1, 13, 7, 4, 21]

After backtrack at level 9
 pending : [24, 27, 3, 17, 18, 21]
 solution : [1, 13, 7, 4]


Before backtrack at level 8
 pending : [24, 27, 3, 17, 18, 21]
 solution : [1, 13, 7, 4]

After backtrack at level 8
 pending : [24, 27, 3, 17, 18, 21, 20]
 solution : [1, 13, 7, 4]


Before backtrack at level 7
 pending : [24, 27, 3, 17, 18, 21, 20]
 solution : [1, 13, 7, 4]

After backtrack at level 7
 pending : [24, 27, 3, 17, 18, 21, 20, 19]
 solution : [1, 13, 7, 4]


Before backtrack at level 6
 pending : [24, 27, 3, 17, 18, 21, 20, 19]
 solution : [1, 13, 7, 4]

After backtrack at level 6
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15]
 solution : [1, 13, 7, 4]


Before backtrack at level 5
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15]
 solution : [1, 13, 7, 4]

After backtrack at level 5
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7, 4]


Before backtrack at level 4
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7, 4]

After backtrack at level 4
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7, 4]


Before backtrack at level 3
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7, 4]

After backtrack at level 3
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7, 4]


Before backtrack at level 2
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7, 4]

After backtrack at level 2
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12, 25]
 solution : [1, 13, 7, 4]


Invert decision for 4 at level 1


New level: 2
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12, 25]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12, 25]
 solution : [1, 13, 7]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12, 25]
 solution : [1, 13, 7]


Solution : [1, 13, 7] has cost 11.


Decide in level 2 among pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 2

After decision at level 2
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7, 25]


New level: 3
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7, 25]


Before reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : {3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 13, 7, 25]


Before reduction : 
 pending  : []
 solution : [1, 13, 7, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 13, 7, 25]


Solution : [1, 13, 7, 25] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [1, 13, 7, 25]

After backtrack at level 3
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7, 25]


Invert decision for 25 at level 2


New level: 3
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7]


Solution : [1, 13, 7] has cost 11.


Decide in level 3 among pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 12 with phase True at level 3

After decision at level 3
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7, 12]


New level: 4
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7, 12]


Before reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 2097152), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : {3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 13, 7, 12]


Before reduction : 
 pending  : []
 solution : [1, 13, 7, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 13, 7, 12]


Solution : [1, 13, 7, 12] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [1, 13, 7, 12]

After backtrack at level 4
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7, 12]


Invert decision for 12 at level 3


New level: 4
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7]


Solution : [1, 13, 7] has cost 11.


Decide in level 4 among pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 16 with phase True at level 4

After decision at level 4
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7, 16]


New level: 5
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7, 16]


Before reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 524288), (15, 262144), (16, 1048576), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : {3, 14, 15, 17, 18, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 13, 7, 16]


Before reduction : 
 pending  : []
 solution : [1, 13, 7, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 13, 7, 16]


Solution : [1, 13, 7, 16] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [1, 13, 7, 16]

After backtrack at level 5
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7, 16]


Invert decision for 16 at level 4


New level: 5
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 524288), (15, 262144), (16, -1), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7]


Solution : [1, 13, 7] has cost 11.


Decide in level 5 among pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 524288), (15, 262144), (16, -1), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 14 with phase True at level 5

After decision at level 5
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15]
 solution : [1, 13, 7, 14]


New level: 6
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15]
 solution : [1, 13, 7, 14]


Before reduction : 
 pending  : [24, 27, 3, 17, 18, 21, 20, 19, 15]
 solution : [1, 13, 7, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 524288), (15, 262144), (16, -1), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, 0), (19, 16384), (20, 4096), (21, 4096), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {17, 18, 3, 15}

After reduction : 
 pending  : [24, 27, 21, 20, 19]
 solution : [1, 13, 7, 14]


Before reduction : 
 pending  : [24, 27, 21, 20, 19]
 solution : [1, 13, 7, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, -1), (17, 0), (18, 0), (19, 16384), (20, 4096), (21, 4096), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 16384), (20, 4096), (21, 4096), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [24, 27, 21, 20, 19]
 solution : [1, 13, 7, 14]


Solution : [1, 13, 7, 14] has cost 20.


Before backtrack at level 6
 pending : [24, 27, 21, 20, 19]
 solution : [1, 13, 7, 14]

After backtrack at level 6
 pending : [24, 27, 21, 20, 19, 3, 17, 18, 15]
 solution : [1, 13, 7, 14]


Invert decision for 14 at level 5


New level: 6
 pending : [24, 27, 21, 20, 19, 3, 17, 18, 15]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [24, 27, 21, 20, 19, 3, 17, 18, 15]
 solution : [1, 13, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 16384), (20, 4096), (21, 4096), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 262144), (16, -1), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [24, 27, 21, 20, 19, 3, 17, 18, 15]
 solution : [1, 13, 7]


Solution : [1, 13, 7] has cost 11.


Decide in level 6 among pending : [24, 27, 21, 20, 19, 3, 17, 18, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 262144), (16, -1), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 15 with phase True at level 6

After decision at level 6
 pending : [24, 27, 21, 20, 19, 3, 17, 18]
 solution : [1, 13, 7, 15]


New level: 7
 pending : [24, 27, 21, 20, 19, 3, 17, 18]
 solution : [1, 13, 7, 15]


Before reduction : 
 pending  : [24, 27, 21, 20, 19, 3, 17, 18]
 solution : [1, 13, 7, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 262144), (16, -1), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 16384), (20, 4096), (21, 4096), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : {17, 18, 3}

After reduction : 
 pending  : [24, 27, 21, 20, 19]
 solution : [1, 13, 7, 15]


Before reduction : 
 pending  : [24, 27, 21, 20, 19]
 solution : [1, 13, 7, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 16384), (20, 4096), (21, 4096), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 16384), (20, 4096), (21, 4096), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [24, 27, 21, 20, 19]
 solution : [1, 13, 7, 15]


Solution : [1, 13, 7, 15] has cost 20.


Before backtrack at level 7
 pending : [24, 27, 21, 20, 19]
 solution : [1, 13, 7, 15]

After backtrack at level 7
 pending : [24, 27, 21, 20, 19, 3, 17, 18]
 solution : [1, 13, 7, 15]


Invert decision for 15 at level 6


New level: 7
 pending : [24, 27, 21, 20, 19, 3, 17, 18]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [24, 27, 21, 20, 19, 3, 17, 18]
 solution : [1, 13, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 16384), (20, 4096), (21, 4096), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [24, 27, 21, 20, 19, 3, 17, 18]
 solution : [1, 13, 7]


Solution : [1, 13, 7] has cost 11.


Decide in level 7 among pending : [24, 27, 21, 20, 19, 3, 17, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 19 with phase True at level 7

After decision at level 7
 pending : [24, 27, 21, 20, 3, 17, 18]
 solution : [1, 13, 7, 19]


New level: 8
 pending : [24, 27, 21, 20, 3, 17, 18]
 solution : [1, 13, 7, 19]


Before reduction : 
 pending  : [24, 27, 21, 20, 3, 17, 18]
 solution : [1, 13, 7, 19]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 16384), (19, 131072), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {18, 20, 21}

After reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 19]


Before reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 19]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 19]


Solution : [1, 13, 7, 19] has cost 18.


Before backtrack at level 8
 pending : [24, 27, 3, 17]
 solution : [1, 13, 7, 19]

After backtrack at level 8
 pending : [24, 27, 3, 17, 21, 20, 18]
 solution : [1, 13, 7, 19]


Invert decision for 19 at level 7


New level: 8
 pending : [24, 27, 3, 17, 21, 20, 18]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [24, 27, 3, 17, 21, 20, 18]
 solution : [1, 13, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 16384), (19, -1), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 21, 20, 18]
 solution : [1, 13, 7]


Solution : [1, 13, 7] has cost 11.


Decide in level 8 among pending : [24, 27, 3, 17, 21, 20, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 16384), (19, -1), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 8

After decision at level 8
 pending : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 20]


New level: 9
 pending : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 20]


Before reduction : 
 pending  : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 16384), (19, -1), (20, 65536), (21, 8192), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {18, 21}

After reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 20]


Before reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 0), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 3, 17]
 solution : [1, 13, 7, 20]


Solution : [1, 13, 7, 20] has cost 18.


Before backtrack at level 9
 pending : [24, 27, 3, 17]
 solution : [1, 13, 7, 20]

After backtrack at level 9
 pending : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7, 20]


Invert decision for 20 at level 8


New level: 9
 pending : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7]


Before reduction : 
 pending  : [24, 27, 3, 17, 21, 18]
 solution : [1, 13, 7]

Essensial at level 9 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 18]
 solution : [1, 13, 7, 21]


Before reduction : 
 pending  : [24, 27, 3, 17, 18]
 solution : [1, 13, 7, 21]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 3, 17, 18]
 solution : [1, 13, 7, 21]


Solution : [1, 13, 7, 21] has cost 18.


Before backtrack at level 9
 pending : [24, 27, 3, 17, 18]
 solution : [1, 13, 7, 21]

After backtrack at level 9
 pending : [24, 27, 3, 17, 18, 21]
 solution : [1, 13, 7]


Before backtrack at level 8
 pending : [24, 27, 3, 17, 18, 21]
 solution : [1, 13, 7]

After backtrack at level 8
 pending : [24, 27, 3, 17, 18, 21, 20]
 solution : [1, 13, 7]


Before backtrack at level 7
 pending : [24, 27, 3, 17, 18, 21, 20]
 solution : [1, 13, 7]

After backtrack at level 7
 pending : [24, 27, 3, 17, 18, 21, 20, 19]
 solution : [1, 13, 7]


Before backtrack at level 6
 pending : [24, 27, 3, 17, 18, 21, 20, 19]
 solution : [1, 13, 7]

After backtrack at level 6
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15]
 solution : [1, 13, 7]


Before backtrack at level 5
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15]
 solution : [1, 13, 7]

After backtrack at level 5
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7]


Before backtrack at level 4
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14]
 solution : [1, 13, 7]

After backtrack at level 4
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7]


Before backtrack at level 3
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16]
 solution : [1, 13, 7]

After backtrack at level 3
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7]


Before backtrack at level 2
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12]
 solution : [1, 13, 7]

After backtrack at level 2
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12, 25]
 solution : [1, 13, 7]


Before backtrack at level 1
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12, 25]
 solution : [1, 13, 7]

After backtrack at level 1
 pending : [24, 27, 3, 17, 18, 21, 20, 19, 15, 14, 16, 12, 25, 4]
 solution : [1, 13, 7]


====================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

====================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 15

[MIN NOTE]: maximum branch and bound depth: 9

[MIN NOTE]: number of definitions: 1

invariant [def_chosenAt] forall V,Q. chosenAt(Q,V) = (forall N. member(N,Q) -> vote(N,V)) # definition, qcost: 6

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [1, 13, 7, 25]

[MIN NOTE]: solution length: 4

invariant [invar_1] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_13] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_7] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_25] forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)) # qcost: 4

[MIN NOTE]: number of total invariants: 5

[MIN NOTE]: total qCost: 21




[QRM NOTE]: Time elapsed since start: 1.173 seconds

[QRM NOTE]: Time elapsed since last: 0.148 seconds

[QRM NOTE]: Peak memory: 2273714 bytes


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=2]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy -s node=4,value=2 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=4,value=2]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 22

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 48

[QRM NOTE]: Time elapsed since start: 0.098 seconds

[QRM NOTE]: Time elapsed since last: 0.098 seconds

[QRM NOTE]: Peak memory: 164182 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 81


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=4,value=2]

===============================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
predicate: decided('value',)
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)']

0000000000000000000000
0000000000000000010001
0000000000000000100001
0000000000000001000010
0000000000000001010011
0000000000000001100011
0000000000000010000010
0000000000000010010011
0000000000000010100011
0000000000000100000100
0000000000000100010101
0000000000000100100101
0000000000000101000110
0000000000000101100111
0000000000000110000110
0000000000000110010111
0000000000000110100111
0000000000001000000100
0000000000001000010101
0000000000001000100101
0000000000001001000110
0000000000001001010111
0000000000001001100111
0000000000001010000110
0000000000001010010111
0000000000010000001000
0000000000010000011001
0000000000010000101001
0000000000010001001010
0000000000010001101011
0000000000010010001010
0000000000010010011011
0000000000010010101011
0000000000010100001100
0000000000010100101101
0000000000010110001110
0000000000010110101111
0000000000011000001100
0000000000011000011101
0000000000011000101101
0000000000011001001110
0000000000011001101111
0000000000011010001110
0000000000011010011111
0000000000100000001000
0000000000100000011001
0000000000100000101001
0000000000100001001010
0000000000100001011011
0000000000100001101011
0000000000100010001010
0000000000100010011011
0000000000100100001100
0000000000100100011101
0000000000100100101101
0000000000100101001110
0000000000100101101111
0000000000100110001110
0000000000100110011111
0000000000101000001100
0000000000101000011101
0000000000101001001110
0000000000101001011111
000000010-000101010111
000000010-100101011111
00000010-0001010100111
00000010-0011010101111
000001000-010001011011
000001000-011001011111
00001000-0100010101011
00001000-0100110101111
000100000-010100011101
000100000-010110011111
00100000-0101000101101
00100000-0101001101111
010000000-010101001110
010000000-010101101111
010101010-010101011111
10000000-0101010001110
10000000-0101010011111
10101010-0101010101111

[QRM NOTE]: Time elapsed since start: 1.585 seconds

[QRM NOTE]: Time elapsed since last: 1.487 seconds

[QRM NOTE]: Peak memory: 1446729 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=4,value=2]

=========================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 2.568 seconds

[QRM NOTE]: Time elapsed since last: 0.983 seconds

[QRM NOTE]: Peak memory: 1280691 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=3,value=3]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 0.141 seconds

[QRM NOTE]: Time elapsed since last: 0.141 seconds

[QRM NOTE]: Peak memory: 183071 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 64


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)']

000000000000000000000000
000000000000000000001001
000000000000000000010001
000000000000000000100001
000000000000000001000010
000000000000000001010011
000000000000000001100011
000000000000000010000010
000000000000000010001011
000000000000000010100011
000000000000000100000010
000000000000000100001011
000000000000000100010011
000000000000001000000100
000000000000001000010101
000000000000001000100101
000000000000001010000110
000000000000001010100111
000000000000001100000110
000000000000001100010111
000000000000010000000100
000000000000010000001101
000000000000010000100101
000000000000010001000110
000000000000010001100111
000000000000010100000110
000000000000010100001111
000000000000100000000100
000000000000100000001101
000000000000100000010101
000000000000100001000110
000000000000100001010111
000000000000100010000110
000000000000100010001111
00000000100-000001001011
00000000100-010001001111
00000000100-100001001111
0000000100-0000010010011
0000000100-0001010010111
0000000100-0100010010111
000000100-00000100100011
000000100-00001100100111
000000100-00010100100111
00000100000-001000001101
00000100000-001010001111
00000100000-001100001111
0000100000-0010000010101
0000100000-0010001010111
0000100000-0010100010111
000100000-00100000100101
000100000-00100001100111
000100000-00100010100111
00100000000-001001000110
00100000000-001001010111
00100000000-001001100111
00100100100-001001001111
0100000000-0010010000110
0100000000-0010010001111
0100000000-0010010100111
0100100100-0010010010111
100000000-00100100000110
100000000-00100100001111
100000000-00100100010111
100100100-00100100100111

[QRM NOTE]: Time elapsed since start: 1.376 seconds

[QRM NOTE]: Time elapsed since last: 1.236 seconds

[QRM NOTE]: Peak memory: 1416922 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: node=3,value=3]

=========================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 2.247 seconds

[QRM NOTE]: Time elapsed since last: 0.871 seconds

[QRM NOTE]: Peak memory: 1117939 bytes

next size: node=3,value=3


******************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

******************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=3,value=3 -f 1 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.022 seconds

[QRM NOTE]: Time elapsed since last: 0.022 seconds

[QRM NOTE]: Peak memory: 24860 bytes


===================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

===================================================================================================================


==============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : --1------------1--------
9     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
10     : -1-------------1--------
10     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
11     : --1-------------1-------
11     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
12     : 1---------------1-------
12     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
13     : -1---------------1------
13     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
14     : 1----------------1------
14     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
15     : -----1------------1-----
15     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
16     : ----1-------------1-----
16     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
17     : -----1-------------1----
17     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
18     : ---1---------------1----
18     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
19     : ----1---------------1---
19     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
20     : ---1----------------1---
20     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
21     : --1---------1-----------
21     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
22     : -1----------1-----------
22     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
23     : --1----------1----------
23     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
24     : 1------------1----------
24     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
25     : -1------------1---------
25     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
26     : 1-------------1---------
26     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
27     : --------1---------1-----
27     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
28     : -------1----------1-----
28     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
29     : --------1----------1----
29     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
30     : ------1------------1----
30     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
31     : -------1------------1---
31     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
32     : ------1-------------1---
32     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
33     : -----1------1-----------
33     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
34     : ----1-------1-----------
34     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
35     : -----1-------1----------
35     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
36     : ---1---------1----------
36     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
37     : ----1---------1---------
37     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
38     : ---1----------1---------
38     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
39     : --------1------1--------
39     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
40     : -------1-------1--------
40     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
41     : --------1-------1-------
41     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
42     : ------1---------1-------
42     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
43     : -------1---------1------
43     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
44     : ------1----------1------
44     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : --------------1------0--
45     : ['vote(node0,value2)', '~voted(node0)']
46     : -------------1-------0--
46     : ['vote(node0,value1)', '~voted(node0)']
47     : ------------1--------0--
47     : ['vote(node0,value0)', '~voted(node0)']
48     : -----------------1----0-
48     : ['vote(node1,value2)', '~voted(node1)']
49     : ----------------1-----0-
49     : ['vote(node1,value1)', '~voted(node1)']
50     : ---------------1------0-
50     : ['vote(node1,value0)', '~voted(node1)']
51     : --------------------1--0
51     : ['vote(node2,value2)', '~voted(node2)']
52     : -------------------1---0
52     : ['vote(node2,value1)', '~voted(node2)']
53     : ------------------1----0
53     : ['vote(node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : -------1---1------------
54     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
55     : --------1-1-------------
55     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
56     : ------1----1------------
56     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
57     : --------11--------------
57     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
58     : ------1---1-------------
58     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
59     : -------1-1--------------
59     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
60     : ----1------1------------
60     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
61     : -----1----1-------------
61     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
62     : ---1-------1------------
62     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
63     : -----1---1--------------
63     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
64     : ---1------1-------------
64     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
65     : ----1----1--------------
65     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
66     : -1---------1------------
66     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
67     : --1-------1-------------
67     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
68     : 1----------1------------
68     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
69     : --1------1--------------
69     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
70     : 1---------1-------------
70     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
71     : -1-------1--------------
71     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : -------1--------0-------
72     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
73     : --------1--------0------
73     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
74     : ------1--------0--------
74     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
75     : -------1-----------0----
75     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
76     : --------1-----------0---
76     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
77     : ------1-----------0-----
77     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
78     : ----1--------0----------
78     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
79     : -----1--------0---------
79     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
80     : ---1--------0-----------
80     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
81     : ----1--------------0----
81     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
82     : -----1--------------0---
82     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
83     : ---1--------------0-----
83     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
84     : -1-----------0----------
84     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
85     : --1-----------0---------
85     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
86     : 1-----------0-----------
86     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
87     : -1--------------0-------
87     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
88     : --1--------------0------
88     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
89     : 1--------------0--------
89     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
90 (*) : --1----1----------------
90     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
91     : -1------1---------------
91     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
92     : --1---1-----------------
92     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
93     : 1-------1---------------
93     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
94     : -1----1-----------------
94     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
95     : 1------1----------------
95     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
96     : -----1-1----------------
96     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
97     : ----1---1---------------
97     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
98     : -----11-----------------
98     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
99     : ---1----1---------------
99     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
100     : ----1-1-----------------
100     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
101     : ---1---1----------------
101     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
102     : --1-1-------------------
102     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
103     : -1---1------------------
103     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
104     : --11--------------------
104     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
105     : 1----1------------------
105     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
106     : -1-1--------------------
106     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
107     : 1---1-------------------
107     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
108 (*) : ----------11------------
108     : ['decided(value1)', 'decided(value2)']
109     : ---------1-1------------
109     : ['decided(value0)', 'decided(value2)']
110     : ---------11-------------
110     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 18
num_suborbits: 1
111 (*) : --1------------------0--
111     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node0)']
112     : -1-------------------0--
112     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node0)']
113     : 1--------------------0--
113     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
114     : -----1---------------0--
114     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node0)']
115     : ----1----------------0--
115     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node0)']
116     : ---1-----------------0--
116     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node0)']
117     : --1-------------------0-
117     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node1)']
118     : -1--------------------0-
118     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node1)']
119     : 1---------------------0-
119     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
120     : --------1-------------0-
120     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node1)']
121     : -------1--------------0-
121     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node1)']
122     : ------1---------------0-
122     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node1)']
123     : -----1-----------------0
123     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node2)']
124     : ----1------------------0
124     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node2)']
125     : ---1-------------------0
125     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node2)']
126     : --------1--------------0
126     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node2)']
127     : -------1---------------0
127     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node2)']
128     : ------1----------------0
128     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
129 (*) : -------11---------------
129     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
130     : ------1-1---------------
130     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
131     : ------11----------------
131     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
132     : ----11------------------
132     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
133     : ---1-1------------------
133     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
134     : ---11-------------------
134     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
135     : -11---------------------
135     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
136     : 1-1---------------------
136     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
137     : 11----------------------
137     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
138 (*) : -----1--0--------1------
138     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
139     : ----1--0--------1-------
139     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
140     : ---1--0--------1--------
140     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
141     : --1-----0-----------1---
141     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
142     : -1-----0-----------1----
142     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
143     : 1-----0-----------1-----
143     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
144     : -----0--1-----1---------
144     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
145     : ----0--1-----1----------
145     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
146     : ---0--1-----1-----------
146     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
147     : --1--0--------------1---
147     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
148     : -1--0--------------1----
148     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
149     : 1--0--------------1-----
149     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
150     : --0-----1-----1---------
150     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
151     : -0-----1-----1----------
151     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
152     : 0-----1-----1-----------
152     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
153     : --0--1-----------1------
153     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
154     : -0--1-----------1-------
154     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
155     : 0--1-----------1--------
155     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 9
num_suborbits: 1
156 (*) : --1--1--0---------------
156     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
157     : -1--1--0----------------
157     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
158     : 1--1--0-----------------
158     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
159     : --1--0--1---------------
159     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
160     : -1--0--1----------------
160     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
161     : 1--0--1-----------------
161     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
162     : --0--1--1---------------
162     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
163     : -0--1--1----------------
163     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
164     : 0--1--1-----------------
164     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
165 (*) : --0--------1-------1----
165     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
166     : -0--------1---------1---
166     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
167     : --0--------1------1-----
167     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
168     : 0--------1----------1---
168     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
169     : -0--------1-------1-----
169     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
170     : 0--------1---------1----
170     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
171     : -----0-----1----1-------
171     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
172     : ----0-----1------1------
172     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
173     : -----0-----1---1--------
173     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
174     : ---0-----1-------1------
174     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
175     : ----0-----1----1--------
175     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
176     : ---0-----1------1-------
176     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
177     : --------0--1-1----------
177     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
178     : -------0--1---1---------
178     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
179     : --------0--11-----------
179     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
180     : ------0--1----1---------
180     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
181     : -------0--1-1-----------
181     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
182     : ------0--1---1----------
182     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
183 (*) : ---------1--0------1----
183     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
184     : ---------1--0-------1---
184     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
185     : ----------1--0----1-----
185     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
186     : ----------1--0------1---
186     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
187     : -----------1--0---1-----
187     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
188     : -----------1--0----1----
188     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
189     : ---------1--0---1-------
189     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
190     : ---------1--0----1------
190     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
191     : ----------1--0-1--------
191     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
192     : ----------1--0---1------
192     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
193     : -----------1--01--------
193     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
194     : -----------1--0-1-------
194     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
195     : ---------1-----0---1----
195     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
196     : ---------1-----0----1---
196     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
197     : ----------1-----0-1-----
197     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
198     : ----------1-----0---1---
198     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
199     : -----------1-----01-----
199     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
200     : -----------1-----0-1----
200     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
201     : ---------1---1-0--------
201     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
202     : ---------1----10--------
202     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
203     : ----------1-1---0-------
203     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
204     : ----------1---1-0-------
204     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
205     : -----------11----0------
205     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
206     : -----------1-1---0------
206     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
207     : ---------1------1-0-----
207     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
208     : ---------1-------10-----
208     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
209     : ----------1----1---0----
209     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
210     : ----------1------1-0----
210     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
211     : -----------1---1----0---
211     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
212     : -----------1----1---0---
212     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
213     : ---------1---1----0-----
213     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
214     : ---------1----1---0-----
214     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
215     : ----------1-1------0----
215     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
216     : ----------1---1----0----
216     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
217     : -----------11-------0---
217     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
218     : -----------1-1------0---
218     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
219 (*) : ---------1----1----1----
219     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
220     : ---------1---1------1---
220     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
221     : ----------1---1---1-----
221     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
222     : ----------1-1-------1---
222     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
223     : -----------1-1----1-----
223     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
224     : -----------11------1----
224     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
225     : ---------1----1-1-------
225     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
226     : ---------1---1---1------
226     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
227     : ----------1---11--------
227     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
228     : ----------1-1----1------
228     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
229     : -----------1-1-1--------
229     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
230     : -----------11---1-------
230     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
231     : ---------1-------1-1----
231     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
232     : ---------1------1---1---
232     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
233     : ----------1------11-----
233     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
234     : ----------1----1----1---
234     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
235     : -----------1----1-1-----
235     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
236     : -----------1---1---1----
236     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
237 (*) : ---------1---------1--0-
237     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
238     : ---------1----------1-0-
238     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
239     : ----------1-------1---0-
239     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
240     : ----------1---------1-0-
240     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
241     : -----------1------1---0-
241     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
242     : -----------1-------1--0-
242     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
243     : ---------1------1------0
243     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
244     : ---------1-------1-----0
244     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
245     : ----------1----1-------0
245     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
246     : ----------1------1-----0
246     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
247     : -----------1---1-------0
247     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
248     : -----------1----1------0
248     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
249     : ---------1---------1-0--
249     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
250     : ---------1----------10--
250     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
251     : ----------1-------1--0--
251     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
252     : ----------1---------10--
252     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
253     : -----------1------1--0--
253     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
254     : -----------1-------1-0--
254     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
255     : ---------1---1---------0
255     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
256     : ---------1----1--------0
256     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
257     : ----------1-1----------0
257     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
258     : ----------1---1--------0
258     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
259     : -----------11----------0
259     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
260     : -----------1-1---------0
260     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
261     : ---------1------1----0--
261     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
262     : ---------1-------1---0--
262     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
263     : ----------1----1-----0--
263     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
264     : ----------1------1---0--
264     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
265     : -----------1---1-----0--
265     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
266     : -----------1----1----0--
266     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
267     : ---------1---1--------0-
267     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
268     : ---------1----1-------0-
268     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
269     : ----------1-1---------0-
269     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
270     : ----------1---1-------0-
270     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
271     : -----------11---------0-
271     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
272     : -----------1-1--------0-
272     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
273 (*) : ----0--------1-----1----
273     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
274     : -----0--------1-----1---
274     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
275     : ---0--------1-----1-----
275     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
276     : -0-----------1--1-------
276     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
277     : --0-----------1--1------
277     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
278     : 0-----------1--1--------
278     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
279     : -------0--------1--1----
279     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
280     : --------0--------1--1---
280     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
281     : ------0--------1--1-----
281     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 1
282 (*) : ---------1---1-----1----
282     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
283     : ---------1----1-----1---
283     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
284     : ----------1-1-----1-----
284     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
285     : ----------1---1-----1---
285     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
286     : -----------11-----1-----
286     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
287     : -----------1-1-----1----
287     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
288     : ---------1---1--1-------
288     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
289     : ---------1----1--1------
289     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
290     : ----------1-1--1--------
290     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
291     : ----------1---1--1------
291     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
292     : -----------11--1--------
292     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
293     : -----------1-1--1-------
293     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
294     : ---------1------1--1----
294     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
295     : ---------1-------1--1---
295     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
296     : ----------1----1--1-----
296     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
297     : ----------1------1--1---
297     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
298     : -----------1---1--1-----
298     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
299     : -----------1----1--1----
299     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
300 (*) : ----------1-----0----0--
300     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
301     : -----------1-----0---0--
301     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
302     : ---------1-----0-----0--
302     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
303     : ----------1--------0-0--
303     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
304     : -----------1--------00--
304     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
305     : ---------1--------0--0--
305     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
306     : ----------1--0--------0-
306     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
307     : -----------1--0-------0-
307     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
308     : ---------1--0---------0-
308     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
309     : ----------1--------0--0-
309     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
310     : -----------1--------0-0-
310     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
311     : ---------1--------0---0-
311     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
312     : ----------1--0---------0
312     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
313     : -----------1--0--------0
313     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
314     : ---------1--0----------0
314     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
315     : ----------1-----0------0
315     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
316     : -----------1-----0-----0
316     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
317     : ---------1-----0-------0
317     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
318 (*) : -------0--1----------0--
318     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
319     : --------0--1---------0--
319     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
320     : ------0--1-----------0--
320     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
321     : ----0-----1-----------0-
321     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
322     : -----0-----1----------0-
322     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
323     : ---0-----1------------0-
323     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
324     : -0--------1------------0
324     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
325     : --0--------1-----------0
325     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
326     : 0--------1-------------0
326     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
327 (*) : ----------1----------0-0
327     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
328     : -----------1---------0-0
328     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
329     : ---------1-----------0-0
329     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
330     : ----------1----------00-
330     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
331     : -----------1---------00-
331     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
332     : ---------1-----------00-
332     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
333     : ----------1-----------00
333     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
334     : -----------1----------00
334     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
335     : ---------1------------00
335     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 9
num_suborbits: 1
336 (*) : --------0--1--0---------
336     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
337     : -------0--1--0----------
337     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
338     : ------0--1--0-----------
338     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
339     : -----0-----1-----0------
339     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
340     : ----0-----1-----0-------
340     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
341     : ---0-----1-----0--------
341     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
342     : --0--------1--------0---
342     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
343     : -0--------1--------0----
343     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
344     : 0--------1--------0-----
344     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
345 (*) : -----------1--0--0------
345     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
346     : ----------1--0--0-------
346     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
347     : ---------1--0--0--------
347     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
348     : -----------1--0-----0---
348     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
349     : ----------1--0-----0----
349     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
350     : ---------1--0-----0-----
350     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
351     : -----------1-----0--0---
351     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
352     : ----------1-----0--0----
352     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
353     : ---------1-----0--0-----
353     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
354 (*) : --0--0--0--1------------
354     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
355     : -0--0--0--1-------------
355     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : 0--0--0--1--------------
356     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 9
num_suborbits: 1
357 (*) : --0-----0--1-----1------
357     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : -0-----0--1-----1-------
358     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : 0-----0--1-----1--------
359     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : -----0--0--1--------1---
360     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
361     : ----0--0--1--------1----
361     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : ---0--0--1--------1-----
362     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : --0--0-----1--1---------
363     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
364     : -0--0-----1--1----------
364     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 3
num_suborbits: 1
366 (*) : ------------000------1--
366     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
367     : ---------------000----1-
367     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : ------------------000--1
368     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 1
369 (*) : 0------------001-----1--
369     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
370     : -0----------0-0-1----1--
370     : ['vote(node1,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
371     : --0---------00---1---1--
371     : ['vote(node1,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
372     : ---0---------00---1--1--
372     : ['vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
373     : ----0-------0-0----1-1--
373     : ['vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
374     : -----0------00------11--
374     : ['vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
375     : 0-----------1---00----1-
375     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
376     : -0-----------1-0-0----1-
376     : ['vote(node0,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
377     : --0-----------100-----1-
377     : ['vote(node0,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
378     : ------0---------001---1-
378     : ['vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
379     : -------0-------0-0-1--1-
379     : ['vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
380     : --------0------00---1-1-
380     : ['vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
381     : ---0--------1------00--1
381     : ['vote(node0,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
382     : ----0--------1----0-0--1
382     : ['vote(node0,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
383     : -----0--------1---00---1
383     : ['vote(node0,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
384     : ------0--------1---00--1
384     : ['vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
385     : -------0--------1-0-0--1
385     : ['vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
386     : --------0--------100---1
386     : ['vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 18
num_suborbits: 1
387 (*) : 1--0---------------00--1
387     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
388     : -1--0-------------0-0--1
388     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
389     : --1--0------------00---1
389     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
390     : 0--1------------00----1-
390     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
391     : -0--1----------0-0----1-
391     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
392     : --0--1---------00-----1-
392     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
393     : 1-----0------------00--1
393     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
394     : -1-----0----------0-0--1
394     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
395     : --1-----0---------00---1
395     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
396     : 0-----1------00------1--
396     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
397     : -0-----1----0-0------1--
397     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
398     : --0-----1---00-------1--
398     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
399     : ---1--0---------00----1-
399     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
400     : ----1--0-------0-0----1-
400     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
401     : -----1--0------00-----1-
401     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
402     : ---0--1------00------1--
402     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
403     : ----0--1----0-0------1--
403     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
404     : -----0--1---00-------1--
404     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 18
num_suborbits: 1
405 (*) : ---0----0---1----1-0---1
405     : ['vote(node0,value0)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value1)']
406     : ---0---0----1---1---0--1
406     : ['vote(node0,value0)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value2)']
407     : ----0---0----1---10----1
407     : ['vote(node0,value1)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)']
408     : ----0-0------1-1----0--1
408     : ['vote(node0,value1)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value2)']
409     : -----0-0------1-1-0----1
409     : ['vote(node0,value2)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
410     : -----00-------11---0---1
410     : ['vote(node0,value2)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
411     : 0-------0---1---0---1-1-
411     : ['vote(node0,value0)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)']
412     : 0------0----1----0-1--1-
412     : ['vote(node0,value0)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)']
413     : -0------0----1-0----1-1-
413     : ['vote(node0,value1)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)']
414     : -0----0------1---01---1-
414     : ['vote(node0,value1)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)']
415     : --0----0------10---1--1-
415     : ['vote(node0,value2)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
416     : --0---0-------1-0-1---1-
416     : ['vote(node0,value2)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
417     : 0----0-------0-1----11--
417     : ['vote(node1,value0)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)']
418     : 0---0---------01---1-1--
418     : ['vote(node1,value0)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)']
419     : -0---0------0---1---11--
419     : ['vote(node1,value1)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)']
420     : -0-0----------0-1-1--1--
420     : ['vote(node1,value1)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)']
421     : --0-0-------0----1-1-1--
421     : ['vote(node1,value2)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
422     : --00---------0---11--1--
422     : ['vote(node1,value2)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 9
num_suborbits: 1
423 (*) : 0-----0--1------00----1-
423     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
424     : -0-----0--1----0-0----1-
424     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
425     : --0-----0--1---00-----1-
425     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
426     : ---0--0--1---------00--1
426     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
427     : ----0--0--1-------0-0--1
427     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
428     : -----0--0--1------00---1
428     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
429     : 0--0-----1---00------1--
429     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0-0------1--
430     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----100-------1--
431     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 9
num_suborbits: 1
432 (*) : ---0---------00----001-1
432     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
433     : ----0-------0-0---0-01-1
433     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
434     : -----0------00----00-1-1
434     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
435     : 0------------00-00---11-
435     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
436     : -0----------0-00-0---11-
436     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
437     : --0---------00-00----11-
437     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
438     : ------0---------00-00-11
438     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
439     : -------0-------0-00-0-11
439     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
440     : --------0------00-00--11
440     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 36
num_suborbits: 1
441 (*) : ----0-0-----0-01----01-1
441     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
442     : -----00-----00-1---0-1-1
442     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
443     : ---0---0-----00-1---01-1
443     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
444     : -----0-0----00--1-0--1-1
444     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
445     : ---0----0----00--1-0-1-1
445     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
446     : ----0---0---0-0--10--1-1
446     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
447     : -0----0-----0-0--01--11-
447     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
448     : --0---0-----00--0-1--11-
448     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
449     : 0------0-----00--0-1-11-
449     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
450     : --0----0----00-0---1-11-
450     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
451     : 0-------0----00-0---111-
451     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
452     : -0------0---0-00----111-
452     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
453     : ---0---0----1--0-0--0-11
453     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
454     : ---0----0---1--00--0--11
454     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
455     : ----0-0------1--00--0-11
455     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
456     : ----0---0----1-00-0---11
456     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
457     : -----00-------1-00-0--11
457     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
458     : -----0-0------10-00---11
458     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
459     : -0-0----------00-01--11-
459     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
460     : --00---------0-00-1--11-
460     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
461     : 0---0---------0-00-1-11-
461     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
462     : --0-0-------0--00--1-11-
462     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
463     : 0----0-------0--00--111-
463     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
464     : -0---0------0--0-0--111-
464     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
465     : 0------0----1----00-0-11
465     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
466     : 0-------0---1---0-00--11
466     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
467     : -0----0------1---0-00-11
467     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
468     : -0------0----1-0--00--11
468     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
469     : --0---0-------1-0--00-11
469     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
470     : --0----0------10--0-0-11
470     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
471     : 0---0---------01--0-01-1
471     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
472     : 0----0-------0-1--00-1-1
472     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
473     : -0-0----------0-1--001-1
473     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
474     : -0---0------0---1-00-1-1
474     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
475     : --00---------0---1-001-1
475     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
476     : --0-0-------0----10-01-1
476     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
477 (*) : 0---0-0-------01----01-1
477     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
478     : 0----00------0-1---0-1-1
478     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
479     : -0-0---0------0-1---01-1
479     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
480     : -0---0-0----0---1-0--1-1
480     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)']
481     : --00----0----0---1-0-1-1
481     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node2,value1)']
482     : --0-0---0---0----10--1-1
482     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)']
483     : -0-0--0-------0--01--11-
483     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
484     : --00--0------0--0-1--11-
484     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
485     : 0---0--0------0--0-1-11-
485     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
486     : --0-0--0----0--0---1-11-
486     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)']
487     : 0----0--0----0--0---111-
487     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)']
488     : -0---0--0---0--0----111-
488     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)']
489     : 0--0---0----1----0--0-11
489     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
490     : 0--0----0---1---0--0--11
490     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
491     : -0--0-0------1---0--0-11
491     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
492     : -0--0---0----1-0--0---11
492     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
493     : --0--00-------1-0--0--11
493     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
494     : --0--0-0------10--0---11
494     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 18
num_suborbits: 1
495 (*) : 0--0---0-----00--0--0111
495     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
496     : 0--0----0----00-0--0-111
496     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
497     : -0--0-0-----0-0--0--0111
497     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
498     : -0--0---0---0-00--0--111
498     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
499     : --0--00-----00--0--0-111
499     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
500     : --0--0-0----00-0--0--111
500     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
501     : 0---0-0-------0-00--0111
501     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
502     : 0----00------0--00-0-111
502     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
503     : -0-0---0------00-0--0111
503     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
504     : -0---0-0----0--0-00--111
504     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
505     : --00----0----0-00--0-111
505     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
506     : --0-0---0---0--00-0--111
506     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
507     : -0-0--0-------0--0-00111
507     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
508     : --00--0------0--0--00111
508     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
509     : 0---0--0------0--00-0111
509     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
510     : --0-0--0----0--0--0-0111
510     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
511     : 0----0--0----0--0-00-111
511     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
512     : -0---0--0---0--0--00-111
512     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 18
num_suborbits: 1
513 (*) : -0-0----------00-0-00111
513     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
514     : --00---------0-00--00111
514     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
515     : 0---0---------0-000-0111
515     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
516     : --0-0-------0--00-0-0111
516     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
517     : 0----0-------0--0000-111
517     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
518     : -0---0------0--0-000-111
518     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
519     : -0----0-----0-0--0-00111
519     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
520     : --0---0-----00--0--00111
520     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
521     : 0------0-----00--00-0111
521     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
522     : --0----0----00-0--0-0111
522     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
523     : 0-------0----00-0-00-111
523     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
524     : -0------0---0-00--00-111
524     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
525     : ----0-0-----0-0-00--0111
525     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
526     : -----00-----00--00-0-111
526     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
527     : ---0---0-----000-0--0111
527     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
528     : -----0-0----00-0-00--111
528     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
529     : ---0----0----0000--0-111
529     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
530     : ----0---0---0-000-0--111
530     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 34 =====================
size : 3
num_suborbits: 1
531 (*) : -00-00-00---0--0--0--111
531     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
532     : 0-00-00-0----0--0--0-111
532     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
533     : 00-00-00------0--0--0111
533     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 35

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 0.239 seconds

[QRM NOTE]: Time elapsed since last: 0.217 seconds

[QRM NOTE]: Peak memory: 1728330 bytes


========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

========================================================================================================

definition primes: {9, 10, 4, 15}


New level: 0
 pending : [0, 1, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
 solution : []

Essensial at level 0 : {0, 24, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 131072), (4, -1), (5, 0), (6, 2147483648), (7, 0), (8, 0), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, 0), (26, 0), (27, 0), (28, 524288), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0)]

Covered at level 0 : {32, 1, 33, 34, 5, 7, 8, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : [3, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [3, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 131072), (4, -1), (5, 0), (6, 2147483648), (7, 0), (8, 0), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, 0), (26, 0), (27, 0), (28, 524288), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, 2147483648), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2]

[QRM NOTE]: Time elapsed since start: 0.335 seconds

[QRM NOTE]: Time elapsed since last: 0.096 seconds

[QRM NOTE]: Peak memory: 666508 bytes


============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', 'vote(node1,value1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', 'vote(node1,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 24 =====================
size : 3
num_suborbits: 1
366 (*) : ------------000------1--
366     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
367     : ---------------000----1-
367     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : ------------------000--1
368     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$1$vote$0$2, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$2]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2', 'value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 3, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : --------------1------0--
45     : ['vote(node0,value2)', '~voted(node0)']
46     : -------------1-------0--
46     : ['vote(node0,value1)', '~voted(node0)']
47     : ------------1--------0--
47     : ['vote(node0,value0)', '~voted(node0)']
48     : -----------------1----0-
48     : ['vote(node1,value2)', '~voted(node1)']
49     : ----------------1-----0-
49     : ['vote(node1,value1)', '~voted(node1)']
50     : ---------------1------0-
50     : ['vote(node1,value0)', '~voted(node1)']
51     : --------------------1--0
51     : ['vote(node2,value2)', '~voted(node2)']
52     : -------------------1---0
52     : ['vote(node2,value1)', '~voted(node2)']
53     : ------------------1----0
53     : ['vote(node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value2)', '~voted(node0)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node0,value2)', '~voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : -------1---1------------
54     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
55     : --------1-1-------------
55     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
56     : ------1----1------------
56     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
57     : --------11--------------
57     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
58     : ------1---1-------------
58     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
59     : -------1-1--------------
59     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
60     : ----1------1------------
60     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
61     : -----1----1-------------
61     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
62     : ---1-------1------------
62     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
63     : -----1---1--------------
63     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
64     : ---1------1-------------
64     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
65     : ----1----1--------------
65     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
66     : -1---------1------------
66     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
67     : --1-------1-------------
67     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
68     : 1----------1------------
68     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
69     : --1------1--------------
69     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
70     : 1---------1-------------
70     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
71     : -1-------1--------------
71     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,QUORUM0. ~decided(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
108 (*) : ----------11------------
108     : ['decided(value1)', 'decided(value2)']
109     : ---------1-1------------
109     : ['decided(value0)', 'decided(value2)']
110     : ---------11-------------
110     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'decided(value2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value1)', 'decided(value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
165 (*) : --0--------1-------1----
165     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
166     : -0--------1---------1---
166     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
167     : --0--------1------1-----
167     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
168     : 0--------1----------1---
168     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
169     : -0--------1-------1-----
169     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
170     : 0--------1---------1----
170     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
171     : -----0-----1----1-------
171     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
172     : ----0-----1------1------
172     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
173     : -----0-----1---1--------
173     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
174     : ---0-----1-------1------
174     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
175     : ----0-----1----1--------
175     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
176     : ---0-----1------1-------
176     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
177     : --------0--1-1----------
177     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
178     : -------0--1---1---------
178     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
179     : --------0--11-----------
179     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
180     : ------0--1----1---------
180     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
181     : -------0--1-1-----------
181     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
182     : ------0--1---1----------
182     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', 'decided(value2)', 'vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', 'decided(value2)', 'vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)', 'vote(NODE0,VALUE1)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,QUORUM0,NODE0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | VALUE0 = VALUE1


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
183 (*) : ---------1--0------1----
183     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
184     : ---------1--0-------1---
184     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
185     : ----------1--0----1-----
185     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
186     : ----------1--0------1---
186     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
187     : -----------1--0---1-----
187     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
188     : -----------1--0----1----
188     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
189     : ---------1--0---1-------
189     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
190     : ---------1--0----1------
190     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
191     : ----------1--0-1--------
191     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
192     : ----------1--0---1------
192     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
193     : -----------1--01--------
193     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
194     : -----------1--0-1-------
194     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
195     : ---------1-----0---1----
195     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
196     : ---------1-----0----1---
196     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
197     : ----------1-----0-1-----
197     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
198     : ----------1-----0---1---
198     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
199     : -----------1-----01-----
199     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
200     : -----------1-----0-1----
200     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
201     : ---------1---1-0--------
201     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
202     : ---------1----10--------
202     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
203     : ----------1-1---0-------
203     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
204     : ----------1---1-0-------
204     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
205     : -----------11----0------
205     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
206     : -----------1-1---0------
206     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
207     : ---------1------1-0-----
207     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
208     : ---------1-------10-----
208     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
209     : ----------1----1---0----
209     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
210     : ----------1------1-0----
210     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
211     : -----------1---1----0---
211     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
212     : -----------1----1---0---
212     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
213     : ---------1---1----0-----
213     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
214     : ---------1----1---0-----
214     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
215     : ----------1-1------0----
215     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
216     : ----------1---1----0----
216     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
217     : -----------11-------0---
217     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
218     : -----------1-1------0---
218     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE1,NODE0,VALUE0. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
219 (*) : ---------1----1----1----
219     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
220     : ---------1---1------1---
220     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
221     : ----------1---1---1-----
221     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
222     : ----------1-1-------1---
222     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
223     : -----------1-1----1-----
223     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
224     : -----------11------1----
224     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
225     : ---------1----1-1-------
225     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
226     : ---------1---1---1------
226     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
227     : ----------1---11--------
227     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
228     : ----------1-1----1------
228     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
229     : -----------1-1-1--------
229     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
230     : -----------11---1-------
230     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
231     : ---------1-------1-1----
231     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
232     : ---------1------1---1---
232     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
233     : ----------1------11-----
233     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
234     : ----------1----1----1---
234     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
235     : -----------1----1-1-----
235     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
236     : -----------1---1---1----
236     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE2)', 'decided(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE2,NODE0,VALUE0,VALUE1. ~vote(NODE1,VALUE2) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1 | VALUE0 = VALUE2 | VALUE1 = VALUE2)


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
237 (*) : ---------1---------1--0-
237     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
238     : ---------1----------1-0-
238     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
239     : ----------1-------1---0-
239     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
240     : ----------1---------1-0-
240     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
241     : -----------1------1---0-
241     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
242     : -----------1-------1--0-
242     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
243     : ---------1------1------0
243     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
244     : ---------1-------1-----0
244     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
245     : ----------1----1-------0
245     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
246     : ----------1------1-----0
246     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
247     : -----------1---1-------0
247     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
248     : -----------1----1------0
248     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
249     : ---------1---------1-0--
249     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
250     : ---------1----------10--
250     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
251     : ----------1-------1--0--
251     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
252     : ----------1---------10--
252     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
253     : -----------1------1--0--
253     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
254     : -----------1-------1-0--
254     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
255     : ---------1---1---------0
255     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
256     : ---------1----1--------0
256     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
257     : ----------1-1----------0
257     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
258     : ----------1---1--------0
258     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
259     : -----------11----------0
259     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
260     : -----------1-1---------0
260     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
261     : ---------1------1----0--
261     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
262     : ---------1-------1---0--
262     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
263     : ----------1----1-----0--
263     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
264     : ----------1------1---0--
264     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
265     : -----------1---1-----0--
265     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
266     : -----------1----1----0--
266     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
267     : ---------1---1--------0-
267     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
268     : ---------1----1-------0-
268     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
269     : ----------1-1---------0-
269     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
270     : ----------1---1-------0-
270     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
271     : -----------11---------0-
271     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
272     : -----------1-1--------0-
272     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE1,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE1) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 1
282 (*) : ---------1---1-----1----
282     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
283     : ---------1----1-----1---
283     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
284     : ----------1-1-----1-----
284     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
285     : ----------1---1-----1---
285     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
286     : -----------11-----1-----
286     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
287     : -----------1-1-----1----
287     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
288     : ---------1---1--1-------
288     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
289     : ---------1----1--1------
289     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
290     : ----------1-1--1--------
290     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
291     : ----------1---1--1------
291     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
292     : -----------11--1--------
292     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
293     : -----------1-1--1-------
293     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
294     : ---------1------1--1----
294     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
295     : ---------1-------1--1---
295     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
296     : ----------1----1--1-----
296     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
297     : ----------1------1--1---
297     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
298     : -----------1---1--1-----
298     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
299     : -----------1----1--1----
299     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE1)', 'decided(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE1,NODE0,VALUE0. ~vote(NODE1,VALUE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
300 (*) : ----------1-----0----0--
300     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
301     : -----------1-----0---0--
301     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
302     : ---------1-----0-----0--
302     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
303     : ----------1--------0-0--
303     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
304     : -----------1--------00--
304     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
305     : ---------1--------0--0--
305     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
306     : ----------1--0--------0-
306     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
307     : -----------1--0-------0-
307     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
308     : ---------1--0---------0-
308     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
309     : ----------1--------0--0-
309     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
310     : -----------1--------0-0-
310     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
311     : ---------1--------0---0-
311     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
312     : ----------1--0---------0
312     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
313     : -----------1--0--------0
313     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
314     : ---------1--0----------0
314     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
315     : ----------1-----0------0
315     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
316     : -----------1-----0-----0
316     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
317     : ---------1-----0-------0
317     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | voted(NODE1) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
318 (*) : -------0--1----------0--
318     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
319     : --------0--1---------0--
319     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
320     : ------0--1-----------0--
320     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
321     : ----0-----1-----------0-
321     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
322     : -----0-----1----------0-
322     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
323     : ---0-----1------------0-
323     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
324     : -0--------1------------0
324     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
325     : --0--------1-----------0
325     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
326     : 0--------1-------------0
326     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', '~voted(node0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', '~voted(node0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)', '~voted(NODE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) | voted(NODE0) | member(NODE0,QUORUM0)


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
327 (*) : ----------1----------0-0
327     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
328     : -----------1---------0-0
328     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
329     : ---------1-----------0-0
329     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
330     : ----------1----------00-
330     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
331     : -----------1---------00-
331     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
332     : ---------1-----------00-
332     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
333     : ----------1-----------00
333     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
334     : -----------1----------00
334     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
335     : ---------1------------00
335     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1


=== Prime Orbit 20 =====================
size : 9
num_suborbits: 1
336 (*) : --------0--1--0---------
336     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
337     : -------0--1--0----------
337     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
338     : ------0--1--0-----------
338     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
339     : -----0-----1-----0------
339     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
340     : ----0-----1-----0-------
340     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
341     : ---0-----1-----0--------
341     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
342     : --0--------1--------0---
342     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
343     : -0--------1--------0----
343     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
344     : 0--------1--------0-----
344     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', '~vote(node0,value2)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', '~vote(node0,value2)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)', '~vote(NODE0,VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) | vote(NODE0,VALUE0) | member(NODE0,QUORUM0)


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
345 (*) : -----------1--0--0------
345     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
346     : ----------1--0--0-------
346     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
347     : ---------1--0--0--------
347     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
348     : -----------1--0-----0---
348     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
349     : ----------1--0-----0----
349     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
350     : ---------1--0-----0-----
350     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
351     : -----------1-----0--0---
351     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
352     : ----------1-----0--0----
352     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
353     : ---------1-----0--0-----
353     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
354 (*) : --0--0--0--1------------
354     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
355     : -0--0--0--1-------------
355     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : 0--0--0--1--------------
356     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))


=== Prime Orbit 23 =====================
size : 9
num_suborbits: 1
357 (*) : --0-----0--1-----1------
357     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : -0-----0--1-----1-------
358     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : 0-----0--1-----1--------
359     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : -----0--0--1--------1---
360     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
361     : ----0--0--1--------1----
361     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : ---0--0--1--------1-----
362     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : --0--0-----1--1---------
363     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
364     : -0--0-----1--1----------
364     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', 'vote(node1,value2)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', 'vote(node1,value2)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM1)', 'member(NODE0,QUORUM0)', 'vote(NODE0,VALUE0)', 'decided(VALUE0)', '~chosenAt(QUORUM1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0,QUORUM1. chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM1,VALUE0) | QUORUM0 = QUORUM1


=== Prime Orbit 28 =====================
size : 9
num_suborbits: 1
423 (*) : 0-----0--1------00----1-
423     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
424     : -0-----0--1----0-0----1-
424     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
425     : --0-----0--1---00-----1-
425     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
426     : ---0--0--1---------00--1
426     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
427     : ----0--0--1-------0-0--1
427     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
428     : -----0--0--1------00---1
428     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
429     : 0--0-----1---00------1--
429     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0-0------1--
430     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----100-------1--
431     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node1,value1)', '~vote(node1,value2)', 'voted(node1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node1,value1)', '~vote(node1,value2)', 'voted(node1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '1$vote': 2, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE1)', '~vote(NODE0,VALUE0)', 'member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE1)', 'voted(NODE0)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM1,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,QUORUM0,QUORUM1,NODE0. ~decided(VALUE1) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE1) | ~voted(NODE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


======================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

======================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 24 =====================
size : 3
num_suborbits: 1
366 (*) : ------------000------1--
366     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
367     : ---------------000----1-
367     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : ------------------000--1
368     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))
qcost : 4




=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : --------------1------0--
45     : ['vote(node0,value2)', '~voted(node0)']
46     : -------------1-------0--
46     : ['vote(node0,value1)', '~voted(node0)']
47     : ------------1--------0--
47     : ['vote(node0,value0)', '~voted(node0)']
48     : -----------------1----0-
48     : ['vote(node1,value2)', '~voted(node1)']
49     : ----------------1-----0-
49     : ['vote(node1,value1)', '~voted(node1)']
50     : ---------------1------0-
50     : ['vote(node1,value0)', '~voted(node1)']
51     : --------------------1--0
51     : ['vote(node2,value2)', '~voted(node2)']
52     : -------------------1---0
52     : ['vote(node2,value1)', '~voted(node2)']
53     : ------------------1----0
53     : ['vote(node2,value0)', '~voted(node2)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : -------1---1------------
54     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
55     : --------1-1-------------
55     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
56     : ------1----1------------
56     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
57     : --------11--------------
57     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
58     : ------1---1-------------
58     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
59     : -------1-1--------------
59     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
60     : ----1------1------------
60     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
61     : -----1----1-------------
61     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
62     : ---1-------1------------
62     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
63     : -----1---1--------------
63     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
64     : ---1------1-------------
64     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
65     : ----1----1--------------
65     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
66     : -1---------1------------
66     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
67     : --1-------1-------------
67     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
68     : 1----------1------------
68     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
69     : --1------1--------------
69     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
70     : 1---------1-------------
70     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
71     : -1-------1--------------
71     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0,QUORUM0. ~decided(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
108 (*) : ----------11------------
108     : ['decided(value1)', 'decided(value2)']
109     : ---------1-1------------
109     : ['decided(value0)', 'decided(value2)']
110     : ---------11-------------
110     : ['decided(value0)', 'decided(value1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
165 (*) : --0--------1-------1----
165     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
166     : -0--------1---------1---
166     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
167     : --0--------1------1-----
167     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
168     : 0--------1----------1---
168     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
169     : -0--------1-------1-----
169     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
170     : 0--------1---------1----
170     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
171     : -----0-----1----1-------
171     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
172     : ----0-----1------1------
172     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
173     : -----0-----1---1--------
173     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
174     : ---0-----1-------1------
174     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
175     : ----0-----1----1--------
175     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
176     : ---0-----1------1-------
176     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
177     : --------0--1-1----------
177     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
178     : -------0--1---1---------
178     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
179     : --------0--11-----------
179     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
180     : ------0--1----1---------
180     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
181     : -------0--1-1-----------
181     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
182     : ------0--1---1----------
182     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,VALUE0,QUORUM0,NODE0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 12 =====================
size : 36
num_suborbits: 1
183 (*) : ---------1--0------1----
183     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
184     : ---------1--0-------1---
184     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
185     : ----------1--0----1-----
185     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
186     : ----------1--0------1---
186     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
187     : -----------1--0---1-----
187     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
188     : -----------1--0----1----
188     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
189     : ---------1--0---1-------
189     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
190     : ---------1--0----1------
190     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
191     : ----------1--0-1--------
191     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
192     : ----------1--0---1------
192     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
193     : -----------1--01--------
193     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
194     : -----------1--0-1-------
194     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
195     : ---------1-----0---1----
195     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
196     : ---------1-----0----1---
196     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
197     : ----------1-----0-1-----
197     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
198     : ----------1-----0---1---
198     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
199     : -----------1-----01-----
199     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
200     : -----------1-----0-1----
200     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
201     : ---------1---1-0--------
201     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
202     : ---------1----10--------
202     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
203     : ----------1-1---0-------
203     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
204     : ----------1---1-0-------
204     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
205     : -----------11----0------
205     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
206     : -----------1-1---0------
206     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
207     : ---------1------1-0-----
207     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
208     : ---------1-------10-----
208     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
209     : ----------1----1---0----
209     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
210     : ----------1------1-0----
210     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
211     : -----------1---1----0---
211     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
212     : -----------1----1---0---
212     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
213     : ---------1---1----0-----
213     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
214     : ---------1----1---0-----
214     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
215     : ----------1-1------0----
215     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
216     : ----------1---1----0----
216     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
217     : -----------11-------0---
217     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
218     : -----------1-1------0---
218     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,NODE1,NODE0,VALUE0. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
219 (*) : ---------1----1----1----
219     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
220     : ---------1---1------1---
220     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
221     : ----------1---1---1-----
221     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
222     : ----------1-1-------1---
222     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
223     : -----------1-1----1-----
223     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
224     : -----------11------1----
224     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
225     : ---------1----1-1-------
225     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
226     : ---------1---1---1------
226     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
227     : ----------1---11--------
227     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
228     : ----------1-1----1------
228     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
229     : -----------1-1-1--------
229     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
230     : -----------11---1-------
230     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
231     : ---------1-------1-1----
231     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
232     : ---------1------1---1---
232     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
233     : ----------1------11-----
233     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
234     : ----------1----1----1---
234     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
235     : -----------1----1-1-----
235     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
236     : -----------1---1---1----
236     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
num_forall :   5
num_exists :   0
num_literals : 7
quantified form : forall NODE1,VALUE2,NODE0,VALUE0,VALUE1. ~vote(NODE1,VALUE2) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1 | VALUE0 = VALUE2 | VALUE1 = VALUE2)
qcost : 12




=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
237 (*) : ---------1---------1--0-
237     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
238     : ---------1----------1-0-
238     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
239     : ----------1-------1---0-
239     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
240     : ----------1---------1-0-
240     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
241     : -----------1------1---0-
241     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
242     : -----------1-------1--0-
242     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
243     : ---------1------1------0
243     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
244     : ---------1-------1-----0
244     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
245     : ----------1----1-------0
245     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
246     : ----------1------1-----0
246     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
247     : -----------1---1-------0
247     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
248     : -----------1----1------0
248     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
249     : ---------1---------1-0--
249     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
250     : ---------1----------10--
250     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
251     : ----------1-------1--0--
251     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
252     : ----------1---------10--
252     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
253     : -----------1------1--0--
253     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
254     : -----------1-------1-0--
254     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
255     : ---------1---1---------0
255     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
256     : ---------1----1--------0
256     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
257     : ----------1-1----------0
257     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
258     : ----------1---1--------0
258     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
259     : -----------11----------0
259     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
260     : -----------1-1---------0
260     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
261     : ---------1------1----0--
261     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
262     : ---------1-------1---0--
262     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
263     : ----------1----1-----0--
263     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
264     : ----------1------1---0--
264     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
265     : -----------1---1-----0--
265     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
266     : -----------1----1----0--
266     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
267     : ---------1---1--------0-
267     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
268     : ---------1----1-------0-
268     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
269     : ----------1-1---------0-
269     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
270     : ----------1---1-------0-
270     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
271     : -----------11---------0-
271     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
272     : -----------1-1--------0-
272     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,NODE1,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE1) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 16 =====================
size : 18
num_suborbits: 1
282 (*) : ---------1---1-----1----
282     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
283     : ---------1----1-----1---
283     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
284     : ----------1-1-----1-----
284     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
285     : ----------1---1-----1---
285     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
286     : -----------11-----1-----
286     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
287     : -----------1-1-----1----
287     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
288     : ---------1---1--1-------
288     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
289     : ---------1----1--1------
289     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
290     : ----------1-1--1--------
290     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
291     : ----------1---1--1------
291     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
292     : -----------11--1--------
292     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
293     : -----------1-1--1-------
293     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
294     : ---------1------1--1----
294     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
295     : ---------1-------1--1---
295     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
296     : ----------1----1--1-----
296     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
297     : ----------1------1--1---
297     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
298     : -----------1---1--1-----
298     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
299     : -----------1----1--1----
299     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,NODE1,NODE0,VALUE0. ~vote(NODE1,VALUE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
300 (*) : ----------1-----0----0--
300     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
301     : -----------1-----0---0--
301     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
302     : ---------1-----0-----0--
302     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
303     : ----------1--------0-0--
303     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
304     : -----------1--------00--
304     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
305     : ---------1--------0--0--
305     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
306     : ----------1--0--------0-
306     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
307     : -----------1--0-------0-
307     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
308     : ---------1--0---------0-
308     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
309     : ----------1--------0--0-
309     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
310     : -----------1--------0-0-
310     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
311     : ---------1--------0---0-
311     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
312     : ----------1--0---------0
312     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
313     : -----------1--0--------0
313     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
314     : ---------1--0----------0
314     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
315     : ----------1-----0------0
315     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
316     : -----------1-----0-----0
316     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
317     : ---------1-----0-------0
317     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | voted(NODE1) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
318 (*) : -------0--1----------0--
318     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
319     : --------0--1---------0--
319     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
320     : ------0--1-----------0--
320     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
321     : ----0-----1-----------0-
321     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
322     : -----0-----1----------0-
322     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
323     : ---0-----1------------0-
323     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
324     : -0--------1------------0
324     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
325     : --0--------1-----------0
325     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
326     : 0--------1-------------0
326     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) | voted(NODE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
327 (*) : ----------1----------0-0
327     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
328     : -----------1---------0-0
328     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
329     : ---------1-----------0-0
329     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
330     : ----------1----------00-
330     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
331     : -----------1---------00-
331     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
332     : ---------1-----------00-
332     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
333     : ----------1-----------00
333     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
334     : -----------1----------00
334     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
335     : ---------1------------00
335     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | voted(NODE0) | voted(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 20 =====================
size : 9
num_suborbits: 1
336 (*) : --------0--1--0---------
336     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
337     : -------0--1--0----------
337     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
338     : ------0--1--0-----------
338     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
339     : -----0-----1-----0------
339     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
340     : ----0-----1-----0-------
340     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
341     : ---0-----1-----0--------
341     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
342     : --0--------1--------0---
342     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
343     : -0--------1--------0----
343     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
344     : 0--------1--------0-----
344     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) | vote(NODE0,VALUE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
345 (*) : -----------1--0--0------
345     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
346     : ----------1--0--0-------
346     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
347     : ---------1--0--0--------
347     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
348     : -----------1--0-----0---
348     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
349     : ----------1--0-----0----
349     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
350     : ---------1--0-----0-----
350     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
351     : -----------1-----0--0---
351     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
352     : ----------1-----0--0----
352     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
353     : ---------1-----0--0-----
353     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
354 (*) : --0--0--0--1------------
354     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
355     : -0--0--0--1-------------
355     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : 0--0--0--1--------------
356     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))
qcost : 4




=== Prime Orbit 23 =====================
size : 9
num_suborbits: 1
357 (*) : --0-----0--1-----1------
357     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : -0-----0--1-----1-------
358     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : 0-----0--1-----1--------
359     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : -----0--0--1--------1---
360     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
361     : ----0--0--1--------1----
361     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : ---0--0--1--------1-----
362     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : --0--0-----1--1---------
363     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
364     : -0--0-----1--1----------
364     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall NODE0,VALUE0,QUORUM0,QUORUM1. chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM1,VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 28 =====================
size : 9
num_suborbits: 1
423 (*) : 0-----0--1------00----1-
423     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
424     : -0-----0--1----0-0----1-
424     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
425     : --0-----0--1---00-----1-
425     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
426     : ---0--0--1---------00--1
426     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
427     : ----0--0--1-------0-0--1
427     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
428     : -----0--0--1------00---1
428     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
429     : 0--0-----1---00------1--
429     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0-0------1--
430     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----100-------1--
431     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall VALUE1,QUORUM0,QUORUM1,NODE0. ~decided(VALUE1) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE1) | ~voted(NODE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 0.487 seconds

[QRM NOTE]: Time elapsed since last: 0.152 seconds

[QRM NOTE]: Peak memory: 2476016 bytes


=====================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

=====================================================================================================


New level: 1
 pending : [3, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [3, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, 2147483648), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, 2147483648), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2]


Solution : [0, 24, 2] has cost 14.


Decide in level 1 among pending : [3, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, 2147483648), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 6 with phase True at level 1

After decision at level 1
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2, 6]


New level: 2
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2, 6]


Before reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2, 6]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, 2147483648), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, 67108864), (21, 33554432), (22, 134217728), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]
 solution : [0, 24, 2, 6]


Solution : [0, 24, 2, 6] has cost 19.


Decide in level 2 among pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, 67108864), (21, 33554432), (22, 134217728), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28]
 solution : [0, 24, 2, 6, 22]


New level: 3
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28]
 solution : [0, 24, 2, 6, 22]


Before reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28]
 solution : [0, 24, 2, 6, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, 67108864), (21, 33554432), (22, 134217728), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : {3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 24, 2, 6, 22]


Before reduction : 
 pending  : []
 solution : [0, 24, 2, 6, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 24, 2, 6, 22]


Solution : [0, 24, 2, 6, 22] has cost 23.


Before backtrack at level 3
 pending : []
 solution : [0, 24, 2, 6, 22]

After backtrack at level 3
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28]
 solution : [0, 24, 2, 6, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28]
 solution : [0, 24, 2, 6]


Before reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28]
 solution : [0, 24, 2, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, 67108864), (21, 33554432), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28]
 solution : [0, 24, 2, 6]


Solution : [0, 24, 2, 6] has cost 19.


Decide in level 3 among pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, 67108864), (21, 33554432), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 20 with phase True at level 3

After decision at level 3
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28]
 solution : [0, 24, 2, 6, 20]


New level: 4
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28]
 solution : [0, 24, 2, 6, 20]


Before reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28]
 solution : [0, 24, 2, 6, 20]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, 67108864), (21, 33554432), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : {3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 24, 2, 6, 20]


Before reduction : 
 pending  : []
 solution : [0, 24, 2, 6, 20]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 24, 2, 6, 20]


Solution : [0, 24, 2, 6, 20] has cost 26.


Before backtrack at level 4
 pending : []
 solution : [0, 24, 2, 6, 20]

After backtrack at level 4
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28]
 solution : [0, 24, 2, 6, 20]


Invert decision for 20 at level 3


New level: 4
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28]
 solution : [0, 24, 2, 6]


Before reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28]
 solution : [0, 24, 2, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, 33554432), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28]
 solution : [0, 24, 2, 6]


Solution : [0, 24, 2, 6] has cost 19.


Decide in level 4 among pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, 33554432), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 21 with phase True at level 4

After decision at level 4
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 21]


New level: 5
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 21]


Before reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 21]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, 33554432), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : {3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 24, 2, 6, 21]


Before reduction : 
 pending  : []
 solution : [0, 24, 2, 6, 21]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 24, 2, 6, 21]


Solution : [0, 24, 2, 6, 21] has cost 26.


Before backtrack at level 5
 pending : []
 solution : [0, 24, 2, 6, 21]

After backtrack at level 5
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 21]


Invert decision for 21 at level 4


New level: 5
 pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6]


Before reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6]


Solution : [0, 24, 2, 6] has cost 19.


Decide in level 5 among pending : [3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [3, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 11]


New level: 6
 pending : [3, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 11]


Before reduction : 
 pending  : [3, 12, 13, 14, 16, 17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2097152), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : {3, 12, 13, 14, 16}

After reduction : 
 pending  : [17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 11]


Before reduction : 
 pending  : [17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 11]


Solution : [0, 24, 2, 6, 11] has cost 28.


Before backtrack at level 6
 pending : [17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 11]

After backtrack at level 6
 pending : [17, 18, 19, 23, 28, 3, 12, 13, 14, 16]
 solution : [0, 24, 2, 6, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [17, 18, 19, 23, 28, 3, 12, 13, 14, 16]
 solution : [0, 24, 2, 6]


Before reduction : 
 pending  : [17, 18, 19, 23, 28, 3, 12, 13, 14, 16]
 solution : [0, 24, 2, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 23, 28, 3, 12, 13, 14, 16]
 solution : [0, 24, 2, 6]


Solution : [0, 24, 2, 6] has cost 19.


Decide in level 6 among pending : [17, 18, 19, 23, 28, 3, 12, 13, 14, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 12 with phase True at level 6

After decision at level 6
 pending : [17, 18, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6, 12]


New level: 7
 pending : [17, 18, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6, 12]


Before reduction : 
 pending  : [17, 18, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1048576), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : {16, 3, 13, 14}

After reduction : 
 pending  : [17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 12]


Before reduction : 
 pending  : [17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 12]


Solution : [0, 24, 2, 6, 12] has cost 28.


Before backtrack at level 7
 pending : [17, 18, 19, 23, 28]
 solution : [0, 24, 2, 6, 12]

After backtrack at level 7
 pending : [17, 18, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6, 12]


Invert decision for 12 at level 6


New level: 7
 pending : [17, 18, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6]


Before reduction : 
 pending  : [17, 18, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6]


Solution : [0, 24, 2, 6] has cost 19.


Decide in level 7 among pending : [17, 18, 19, 23, 28, 3, 13, 14, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 18 with phase True at level 7

After decision at level 7
 pending : [17, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6, 18]


New level: 8
 pending : [17, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6, 18]


Before reduction : 
 pending  : [17, 19, 23, 28, 3, 13, 14, 16]
 solution : [0, 24, 2, 6, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, 0), (15, -1), (16, 16384), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, -1), (28, 32768), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : {17, 19, 14}

After reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 6, 18]


Before reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 6, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, 0), (15, -1), (16, 16384), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, -1), (28, 32768), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 16384), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, -1), (28, 32768), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 6, 18]


Solution : [0, 24, 2, 6, 18] has cost 26.


Before backtrack at level 8
 pending : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 6, 18]

After backtrack at level 8
 pending : [23, 28, 3, 13, 16, 17, 19, 14]
 solution : [0, 24, 2, 6, 18]


Invert decision for 18 at level 7


New level: 8
 pending : [23, 28, 3, 13, 16, 17, 19, 14]
 solution : [0, 24, 2, 6]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 17, 19, 14]
 solution : [0, 24, 2, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 16384), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, -1), (28, 32768), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, -1), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 17, 19, 14]
 solution : [0, 24, 2, 6]


Solution : [0, 24, 2, 6] has cost 19.


Decide in level 8 among pending : [23, 28, 3, 13, 16, 17, 19, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, -1), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 6, 17]


New level: 9
 pending : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 6, 17]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 6, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 16384), (15, -1), (16, 32768), (17, 262144), (18, -1), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, 0), (15, -1), (16, 16384), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, -1), (28, 32768), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : {19, 14}

After reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 6, 17]


Before reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 6, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, 0), (15, -1), (16, 16384), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, -1), (28, 32768), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 16384), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, -1), (28, 32768), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 6, 17]


Solution : [0, 24, 2, 6, 17] has cost 26.


Before backtrack at level 9
 pending : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 6, 17]

After backtrack at level 9
 pending : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 6, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 6]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 6]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 16384), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, -1), (28, 32768), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 8192), (15, -1), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 14]
 solution : [0, 24, 2, 6, 19]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14]
 solution : [0, 24, 2, 6, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 8192), (15, -1), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 8192), (15, -1), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 14]
 solution : [0, 24, 2, 6, 19]


Solution : [0, 24, 2, 6, 19] has cost 26.


Before backtrack at level 9
 pending : [23, 28, 3, 13, 16, 14]
 solution : [0, 24, 2, 6, 19]

After backtrack at level 9
 pending : [23, 28, 3, 13, 16, 14, 19]
 solution : [0, 24, 2, 6]


Before backtrack at level 8
 pending : [23, 28, 3, 13, 16, 14, 19]
 solution : [0, 24, 2, 6]

After backtrack at level 8
 pending : [23, 28, 3, 13, 16, 14, 19, 17]
 solution : [0, 24, 2, 6]


Before backtrack at level 7
 pending : [23, 28, 3, 13, 16, 14, 19, 17]
 solution : [0, 24, 2, 6]

After backtrack at level 7
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18]
 solution : [0, 24, 2, 6]


Before backtrack at level 6
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18]
 solution : [0, 24, 2, 6]

After backtrack at level 6
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12]
 solution : [0, 24, 2, 6]


Before backtrack at level 5
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12]
 solution : [0, 24, 2, 6]

After backtrack at level 5
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2, 6]


Before backtrack at level 4
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2, 6]

After backtrack at level 4
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2, 6]


Before backtrack at level 3
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2, 6]

After backtrack at level 3
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2, 6]


Before backtrack at level 2
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2, 6]

After backtrack at level 2
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20, 22]
 solution : [0, 24, 2, 6]


Invert decision for 6 at level 1


New level: 2
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20, 22]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20, 22]
 solution : [0, 24, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 32768), (14, 8192), (15, -1), (16, 32768), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20, 22]
 solution : [0, 24, 2]


Solution : [0, 24, 2] has cost 14.


Decide in level 2 among pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2, 22]


New level: 3
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2, 22]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, 536870912), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : {3, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 24, 2, 22]


Before reduction : 
 pending  : []
 solution : [0, 24, 2, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 24, 2, 22]


Solution : [0, 24, 2, 22] has cost 18.


Before backtrack at level 3
 pending : []
 solution : [0, 24, 2, 22]

After backtrack at level 3
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2]


Solution : [0, 24, 2] has cost 14.


Decide in level 3 among pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 20 with phase True at level 3

After decision at level 3
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2, 20]


New level: 4
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2, 20]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2, 20]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, 268435456), (21, 134217728), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : {3, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 24, 2, 20]


Before reduction : 
 pending  : []
 solution : [0, 24, 2, 20]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 24, 2, 20]


Solution : [0, 24, 2, 20] has cost 21.


Before backtrack at level 4
 pending : []
 solution : [0, 24, 2, 20]

After backtrack at level 4
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2, 20]


Invert decision for 20 at level 3


New level: 4
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 134217728), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2]


Solution : [0, 24, 2] has cost 14.


Decide in level 4 among pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 134217728), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 21 with phase True at level 4

After decision at level 4
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2, 21]


New level: 5
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2, 21]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2, 21]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 134217728), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : {3, 11, 12, 13, 14, 16, 17, 18, 19, 23, 28}

After reduction : 
 pending  : []
 solution : [0, 24, 2, 21]


Before reduction : 
 pending  : []
 solution : [0, 24, 2, 21]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 24, 2, 21]


Solution : [0, 24, 2, 21] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [0, 24, 2, 21]

After backtrack at level 5
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2, 21]


Invert decision for 21 at level 4


New level: 5
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2]


Solution : [0, 24, 2] has cost 14.


Decide in level 5 among pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12]
 solution : [0, 24, 2, 11]


New level: 6
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12]
 solution : [0, 24, 2, 11]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12]
 solution : [0, 24, 2, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8388608), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : {3, 12, 13, 14, 16}

After reduction : 
 pending  : [23, 28, 19, 17, 18]
 solution : [0, 24, 2, 11]


Before reduction : 
 pending  : [23, 28, 19, 17, 18]
 solution : [0, 24, 2, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 28, 19, 17, 18]
 solution : [0, 24, 2, 11]


Solution : [0, 24, 2, 11] has cost 23.


Before backtrack at level 6
 pending : [23, 28, 19, 17, 18]
 solution : [0, 24, 2, 11]

After backtrack at level 6
 pending : [23, 28, 19, 17, 18, 3, 13, 16, 14, 12]
 solution : [0, 24, 2, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [23, 28, 19, 17, 18, 3, 13, 16, 14, 12]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [23, 28, 19, 17, 18, 3, 13, 16, 14, 12]
 solution : [0, 24, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 28, 19, 17, 18, 3, 13, 16, 14, 12]
 solution : [0, 24, 2]


Solution : [0, 24, 2] has cost 14.


Decide in level 6 among pending : [23, 28, 19, 17, 18, 3, 13, 16, 14, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 12 with phase True at level 6

After decision at level 6
 pending : [23, 28, 19, 17, 18, 3, 13, 16, 14]
 solution : [0, 24, 2, 12]


New level: 7
 pending : [23, 28, 19, 17, 18, 3, 13, 16, 14]
 solution : [0, 24, 2, 12]


Before reduction : 
 pending  : [23, 28, 19, 17, 18, 3, 13, 16, 14]
 solution : [0, 24, 2, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 4194304), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : {16, 3, 13, 14}

After reduction : 
 pending  : [23, 28, 19, 17, 18]
 solution : [0, 24, 2, 12]


Before reduction : 
 pending  : [23, 28, 19, 17, 18]
 solution : [0, 24, 2, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 28, 19, 17, 18]
 solution : [0, 24, 2, 12]


Solution : [0, 24, 2, 12] has cost 23.


Before backtrack at level 7
 pending : [23, 28, 19, 17, 18]
 solution : [0, 24, 2, 12]

After backtrack at level 7
 pending : [23, 28, 19, 17, 18, 3, 13, 16, 14]
 solution : [0, 24, 2, 12]


Invert decision for 12 at level 6


New level: 7
 pending : [23, 28, 19, 17, 18, 3, 13, 16, 14]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [23, 28, 19, 17, 18, 3, 13, 16, 14]
 solution : [0, 24, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, -1), (28, 512), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 28, 19, 17, 18, 3, 13, 16, 14]
 solution : [0, 24, 2]


Solution : [0, 24, 2] has cost 14.


Decide in level 7 among pending : [23, 28, 19, 17, 18, 3, 13, 16, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 18 with phase True at level 7

After decision at level 7
 pending : [23, 28, 19, 17, 3, 13, 16, 14]
 solution : [0, 24, 2, 18]


New level: 8
 pending : [23, 28, 19, 17, 3, 13, 16, 14]
 solution : [0, 24, 2, 18]


Before reduction : 
 pending  : [23, 28, 19, 17, 3, 13, 16, 14]
 solution : [0, 24, 2, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, 0), (15, -1), (16, 65536), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : {17, 19, 14}

After reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 18]


Before reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, 0), (15, -1), (16, 65536), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 65536), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 18]


Solution : [0, 24, 2, 18] has cost 21.


Before backtrack at level 8
 pending : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 18]

After backtrack at level 8
 pending : [23, 28, 3, 13, 16, 19, 17, 14]
 solution : [0, 24, 2, 18]


Invert decision for 18 at level 7


New level: 8
 pending : [23, 28, 3, 13, 16, 19, 17, 14]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 19, 17, 14]
 solution : [0, 24, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 65536), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, -1), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 19, 17, 14]
 solution : [0, 24, 2]


Solution : [0, 24, 2] has cost 14.


Decide in level 8 among pending : [23, 28, 3, 13, 16, 19, 17, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, -1), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 17]


New level: 9
 pending : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 17]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 65536), (15, -1), (16, 131072), (17, 1048576), (18, -1), (19, 32768), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, 0), (15, -1), (16, 65536), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : {19, 14}

After reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 17]


Before reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, 0), (15, -1), (16, 65536), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 65536), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 17]


Solution : [0, 24, 2, 17] has cost 21.


Before backtrack at level 9
 pending : [23, 28, 3, 13, 16]
 solution : [0, 24, 2, 17]

After backtrack at level 9
 pending : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 19, 14]
 solution : [0, 24, 2]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 65536), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, -1), (28, 131072), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 32768), (15, -1), (16, 131072), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 14]
 solution : [0, 24, 2, 19]


Before reduction : 
 pending  : [23, 28, 3, 13, 16, 14]
 solution : [0, 24, 2, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 32768), (15, -1), (16, 131072), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 32768), (15, -1), (16, 131072), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, -1), (28, 524288), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 28, 3, 13, 16, 14]
 solution : [0, 24, 2, 19]


Solution : [0, 24, 2, 19] has cost 21.


Before backtrack at level 9
 pending : [23, 28, 3, 13, 16, 14]
 solution : [0, 24, 2, 19]

After backtrack at level 9
 pending : [23, 28, 3, 13, 16, 14, 19]
 solution : [0, 24, 2]


Before backtrack at level 8
 pending : [23, 28, 3, 13, 16, 14, 19]
 solution : [0, 24, 2]

After backtrack at level 8
 pending : [23, 28, 3, 13, 16, 14, 19, 17]
 solution : [0, 24, 2]


Before backtrack at level 7
 pending : [23, 28, 3, 13, 16, 14, 19, 17]
 solution : [0, 24, 2]

After backtrack at level 7
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18]
 solution : [0, 24, 2]


Before backtrack at level 6
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18]
 solution : [0, 24, 2]

After backtrack at level 6
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12]
 solution : [0, 24, 2]


Before backtrack at level 5
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12]
 solution : [0, 24, 2]

After backtrack at level 5
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2]


Before backtrack at level 4
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11]
 solution : [0, 24, 2]

After backtrack at level 4
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2]


Before backtrack at level 3
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21]
 solution : [0, 24, 2]

After backtrack at level 3
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2]


Before backtrack at level 2
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20]
 solution : [0, 24, 2]

After backtrack at level 2
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20, 22]
 solution : [0, 24, 2]


Before backtrack at level 1
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20, 22]
 solution : [0, 24, 2]

After backtrack at level 1
 pending : [23, 28, 3, 13, 16, 14, 19, 17, 18, 12, 11, 21, 20, 22, 6]
 solution : [0, 24, 2]


====================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

====================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 18

[MIN NOTE]: maximum branch and bound depth: 9

[MIN NOTE]: number of definitions: 1

invariant [def_chosenAt] forall V,Q. chosenAt(Q,V) = (forall N. member(N,Q) -> vote(N,V)) # definition, qcost: 6

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 24, 2, 22]

[MIN NOTE]: solution length: 4

invariant [invar_0] forall VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_24] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_2] forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_22] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)) # qcost: 4

[MIN NOTE]: number of total invariants: 5

[MIN NOTE]: total qCost: 24




[QRM NOTE]: Time elapsed since start: 0.642 seconds

[QRM NOTE]: Time elapsed since last: 0.155 seconds

[QRM NOTE]: Peak memory: 2439851 bytes


*********************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus_epr.ivy: node=3,value=3]

*********************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy -s node=4,value=3 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=4,value=3]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 0.162 seconds

[QRM NOTE]: Time elapsed since last: 0.162 seconds

[QRM NOTE]: Peak memory: 293871 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 256


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=4,value=3]

===============================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: member('node', 'quorum')
predicate: decided('value',)
predicate: vote('node', 'value')
predicate: voted('node',)
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node2,value2)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node1_node3,value2)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value2)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value2)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)']

0000000000000000000000000000000
0000000000000000000000000010001
0000000000000000000000000100001
0000000000000000000000001000001
0000000000000000000000010000010
0000000000000000000000010010011
0000000000000000000000010100011
0000000000000000000000011000011
0000000000000000000000100000010
0000000000000000000000100010011
0000000000000000000000100100011
0000000000000000000000101000011
0000000000000000000001000000010
0000000000000000000001000010011
0000000000000000000001000100011
0000000000000000000001001000011
0000000000000000000010000000100
0000000000000000000010000010101
0000000000000000000010000100101
0000000000000000000010001000101
0000000000000000000010010000110
0000000000000000000010010100111
0000000000000000000010011000111
0000000000000000000010100000110
0000000000000000000010100010111
0000000000000000000010100100111
0000000000000000000010101000111
0000000000000000000011000000110
0000000000000000000011000010111
0000000000000000000011000100111
0000000000000000000011001000111
0000000000000000000100000000100
0000000000000000000100000010101
0000000000000000000100000100101
0000000000000000000100001000101
0000000000000000000100010000110
0000000000000000000100010010111
0000000000000000000100010100111
0000000000000000000100011000111
0000000000000000000100100000110
0000000000000000000100100010111
0000000000000000000100101000111
0000000000000000000101000000110
0000000000000000000101000010111
0000000000000000000101000100111
0000000000000000000101001000111
0000000000000000001000000000100
0000000000000000001000000010101
0000000000000000001000000100101
0000000000000000001000001000101
0000000000000000001000010000110
0000000000000000001000010010111
0000000000000000001000010100111
0000000000000000001000011000111
0000000000000000001000100000110
0000000000000000001000100010111
0000000000000000001000100100111
0000000000000000001000101000111
0000000000000000001001000000110
0000000000000000001001000010111
0000000000000000001001000100111
0000000000000000010000000001000
0000000000000000010000000011001
0000000000000000010000000101001
0000000000000000010000001001001
0000000000000000010000010001010
0000000000000000010000010101011
0000000000000000010000011001011
0000000000000000010000100001010
0000000000000000010000100011011
0000000000000000010000100101011
0000000000000000010000101001011
0000000000000000010001000001010
0000000000000000010001000011011
0000000000000000010001000101011
0000000000000000010001001001011
0000000000000000010010000001100
0000000000000000010010000101101
0000000000000000010010001001101
0000000000000000010010100001110
0000000000000000010010100101111
0000000000000000010010101001111
0000000000000000010011000001110
0000000000000000010011000101111
0000000000000000010011001001111
0000000000000000010100000001100
0000000000000000010100000011101
0000000000000000010100000101101
0000000000000000010100001001101
0000000000000000010100010001110
0000000000000000010100010101111
0000000000000000010100011001111
0000000000000000010100100001110
0000000000000000010100100011111
0000000000000000010100101001111
0000000000000000010101000001110
0000000000000000010101000011111
0000000000000000010101000101111
0000000000000000010101001001111
0000000000000000011000000001100
0000000000000000011000000011101
0000000000000000011000000101101
0000000000000000011000001001101
0000000000000000011000010001110
0000000000000000011000010101111
0000000000000000011000011001111
0000000000000000011000100001110
0000000000000000011000100011111
0000000000000000011000100101111
0000000000000000011000101001111
0000000000000000011001000001110
0000000000000000011001000011111
0000000000000000011001000101111
0000000000000000100000000001000
0000000000000000100000000011001
0000000000000000100000000101001
0000000000000000100000001001001
0000000000000000100000010001010
0000000000000000100000010011011
0000000000000000100000010101011
0000000000000000100000011001011
0000000000000000100000100001010
0000000000000000100000100011011
0000000000000000100000101001011
0000000000000000100001000001010
0000000000000000100001000011011
0000000000000000100001000101011
0000000000000000100001001001011
0000000000000000100010000001100
0000000000000000100010000011101
0000000000000000100010000101101
0000000000000000100010001001101
0000000000000000100010010001110
0000000000000000100010010101111
0000000000000000100010011001111
0000000000000000100010100001110
0000000000000000100010100011111
0000000000000000100010101001111
0000000000000000100011000001110
0000000000000000100011000011111
0000000000000000100011000101111
0000000000000000100011001001111
0000000000000000100100000001100
0000000000000000100100000011101
0000000000000000100100001001101
0000000000000000100100010001110
0000000000000000100100010011111
0000000000000000100100011001111
0000000000000000100101000001110
0000000000000000100101000011111
0000000000000000100101001001111
0000000000000000101000000001100
0000000000000000101000000011101
0000000000000000101000000101101
0000000000000000101000001001101
0000000000000000101000010001110
0000000000000000101000010011111
0000000000000000101000010101111
0000000000000000101000011001111
0000000000000000101000100001110
0000000000000000101000100011111
0000000000000000101000101001111
0000000000000000101001000001110
0000000000000000101001000011111
0000000000000000101001000101111
0000000000000001000000000001000
0000000000000001000000000011001
0000000000000001000000000101001
0000000000000001000000001001001
0000000000000001000000010001010
0000000000000001000000010011011
0000000000000001000000010101011
0000000000000001000000011001011
0000000000000001000000100001010
0000000000000001000000100011011
0000000000000001000000100101011
0000000000000001000000101001011
0000000000000001000001000001010
0000000000000001000001000011011
0000000000000001000001000101011
0000000000000001000010000001100
0000000000000001000010000011101
0000000000000001000010000101101
0000000000000001000010001001101
0000000000000001000010010001110
0000000000000001000010010101111
0000000000000001000010011001111
0000000000000001000010100001110
0000000000000001000010100011111
0000000000000001000010100101111
0000000000000001000010101001111
0000000000000001000011000001110
0000000000000001000011000011111
0000000000000001000011000101111
0000000000000001000100000001100
0000000000000001000100000011101
0000000000000001000100000101101
0000000000000001000100001001101
0000000000000001000100010001110
0000000000000001000100010011111
0000000000000001000100010101111
0000000000000001000100011001111
0000000000000001000100100001110
0000000000000001000100100011111
0000000000000001000100101001111
0000000000000001000101000001110
0000000000000001000101000011111
0000000000000001000101000101111
0000000000000001001000000001100
0000000000000001001000000011101
0000000000000001001000000101101
0000000000000001001000010001110
0000000000000001001000010011111
0000000000000001001000010101111
0000000000000001001000100001110
0000000000000001001000100011111
0000000000000001001000100101111
00000000000100-0000010010010111
00000000000100-0100010010011111
00000000000100-1000010010011111
0000000000100-00000100100100111
0000000000100-00010100100101111
0000000000100-01000100100101111
000000000100-000001001001000111
000000000100-000011001001001111
000000000100-000101001001001111
00000000100000-0010000010011011
00000000100000-0010100010011111
00000000100000-0011000010011111
0000000100000-00100000100101011
0000000100000-00100010100101111
0000000100000-00101000100101111
000000100000-001000001001001011
000000100000-001000011001001111
000000100000-001000101001001111
00000100000000-0010010000011101
00000100000000-0010010100011111
00000100000000-0010011000011111
0000100000000-00100100000101101
0000100000000-00100100010101111
0000100000000-00100101000101111
000100000000-001001000001001101
000100000000-001001000011001111
000100000000-001001000101001111
00100000000000-0010010010001110
00100000000000-0010010010101111
00100000000000-0010010011001111
00100100100100-0010010010011111
0100000000000-00100100100001110
0100000000000-00100100100011111
0100000000000-00100100101001111
0100100100100-00100100100101111
100000000000-001001001000001110
100000000000-001001001000011111
100000000000-001001001000101111
100100100100-001001001001001111

[QRM NOTE]: Time elapsed since start: 7.315 seconds

[QRM NOTE]: Time elapsed since last: 7.152 seconds

[QRM NOTE]: Peak memory: 1679449 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=4,value=3]

=========================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 11.070 seconds

[QRM NOTE]: Time elapsed since last: 3.755 seconds

[QRM NOTE]: Peak memory: 4469638 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -b -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=3,value=4]

=============================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 0.173 seconds

[QRM NOTE]: Time elapsed since last: 0.173 seconds

[QRM NOTE]: Peak memory: 292250 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 125


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=4]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: voted('node',)
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node1,value3)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node0_node2,value3)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'chosenAt(quorum__node1_node2,value3)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'decided(value3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)', 'voted(node0)', 'voted(node1)', 'voted(node2)']

0000000000000000000000000000000
0000000000000000000000000001001
0000000000000000000000000010001
0000000000000000000000000100001
0000000000000000000000001000001
0000000000000000000000010000010
0000000000000000000000010010011
0000000000000000000000010100011
0000000000000000000000011000011
0000000000000000000000100000010
0000000000000000000000100001011
0000000000000000000000100100011
0000000000000000000000101000011
0000000000000000000001000000010
0000000000000000000001000001011
0000000000000000000001000010011
0000000000000000000001001000011
0000000000000000000010000000010
0000000000000000000010000001011
0000000000000000000010000010011
0000000000000000000010000100011
0000000000000000000100000000100
0000000000000000000100000010101
0000000000000000000100000100101
0000000000000000000100001000101
0000000000000000000100100000110
0000000000000000000100100100111
0000000000000000000100101000111
0000000000000000000101000000110
0000000000000000000101000010111
0000000000000000000101001000111
0000000000000000000110000000110
0000000000000000000110000010111
0000000000000000000110000100111
0000000000000000001000000000100
0000000000000000001000000001101
0000000000000000001000000100101
0000000000000000001000001000101
0000000000000000001000010000110
0000000000000000001000010100111
0000000000000000001000011000111
0000000000000000001001000000110
0000000000000000001001000001111
0000000000000000001001001000111
0000000000000000001010000000110
0000000000000000001010000001111
0000000000000000001010000100111
0000000000000000010000000000100
0000000000000000010000000001101
0000000000000000010000000010101
0000000000000000010000001000101
0000000000000000010000010000110
0000000000000000010000010010111
0000000000000000010000011000111
0000000000000000010000100000110
0000000000000000010000100001111
0000000000000000010000101000111
0000000000000000010010000000110
0000000000000000010010000001111
0000000000000000010010000010111
0000000000000000100000000000100
0000000000000000100000000001101
0000000000000000100000000010101
0000000000000000100000000100101
0000000000000000100000010000110
0000000000000000100000010010111
0000000000000000100000010100111
0000000000000000100000100000110
0000000000000000100000100001111
0000000000000000100000100100111
0000000000000000100001000000110
0000000000000000100001000001111
0000000000000000100001000010111
000000000001000-000000010001011
000000000001000-001000010001111
000000000001000-010000010001111
000000000001000-100000010001111
00000000001000-0000000100010011
00000000001000-0000100100010111
00000000001000-0010000100010111
00000000001000-0100000100010111
0000000001000-00000001000100011
0000000001000-00000101000100111
0000000001000-00001001000100111
0000000001000-00100001000100111
000000001000-000000010001000011
000000001000-000000110001000111
000000001000-000001010001000111
000000001000-000010010001000111
000000010000000-000100000001101
000000010000000-000100100001111
000000010000000-000101000001111
000000010000000-000110000001111
00000010000000-0001000000010101
00000010000000-0001000010010111
00000010000000-0001001000010111
00000010000000-0001010000010111
0000010000000-00010000000100101
0000010000000-00010000010100111
0000010000000-00010000100100111
0000010000000-00010010000100111
000010000000-000100000001000101
000010000000-000100000011000111
000010000000-000100000101000111
000010000000-000100001001000111
000100000000000-000100010000110
000100000000000-000100010010111
000100000000000-000100010100111
000100000000000-000100011000111
000100010001000-000100010001111
00100000000000-0001000100000110
00100000000000-0001000100001111
00100000000000-0001000100100111
00100000000000-0001000101000111
00100010001000-0001000100010111
0100000000000-00010001000000110
0100000000000-00010001000001111
0100000000000-00010001000010111
0100000000000-00010001001000111
0100010001000-00010001000100111
100000000000-000100010000000110
100000000000-000100010000001111
100000000000-000100010000010111
100000000000-000100010000100111
100010001000-000100010001000111

[QRM NOTE]: Time elapsed since start: 2.081 seconds

[QRM NOTE]: Time elapsed since last: 1.907 seconds

[QRM NOTE]: Peak memory: 1593411 bytes


=========================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: node=3,value=4]

=========================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 4.099 seconds

[QRM NOTE]: Time elapsed since last: 2.019 seconds

[QRM NOTE]: Peak memory: 2422303 bytes


*********************************************************************

	[IVY_CHECK]: Ivy Check for Reachability Invariant

*********************************************************************


=========================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy]

=========================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_24
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_2
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_22

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_24 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_2 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_22 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_24 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_22 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_24 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_22 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 30: assumption

OK
[IVY_CHECK RESULT]: PASS


*****************************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy

*****************************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 66.664 seconds

[QRM NOTE]: Time elapsed since last: 66.664 seconds

