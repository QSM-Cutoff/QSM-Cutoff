
***********************************************************

	[QRM]: ivybench/sym/ivy/lock_server.ivy

***********************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


==================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lock_server.ivy: server=1,client=3]

==================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 4

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm lock_server.server_1_client_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lock_server.server_1_client_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lock_server.server_1_client_3.finite.cpp lock_server.server_1_client_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lock_server.server_1_client_3.finite.o lock_server.server_1_client_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.934 seconds

[QRM NOTE]: Time elapsed since last: 6.934 seconds

[QRM NOTE]: Peak memory: 1174416 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 1

[FW NOTE]: number of total reachable states:        4

[FW NOTE]: number of dfs representative states:     2

[FW NOTE]: number of dfs non-representative states: 2


=========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lock_server.ivy: server=1,client=3]

=========================================================================================================

sort: client=['client0', 'client1', 'client2']
sort: server=['server0']
predicate: semaphore('server',)
predicate: link('client', 'server')
interpreted atoms: {}
state atoms: ['link(client0,server0)', 'link(client1,server0)', 'link(client2,server0)', 'semaphore(server0)']
representative states : 1, 2


=== State Orbit 0 =====================
size : 1
repr state: 0001
lex min decimal: 1
states:
0001




=== State Orbit 1 =====================
size : 3
repr state: 1000
lex min decimal: 2
states:
0100
0010
1000



[QRM NOTE]: Time elapsed since start: 7.015 seconds

[QRM NOTE]: Time elapsed since last: 0.081 seconds

[QRM NOTE]: Peak memory: 1199500 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.015 seconds

[QRM NOTE]: Time elapsed since last: 0.000 seconds

[QRM NOTE]: Peak memory: 149590 bytes


=========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lock_server.ivy: server=1,client=3]

=========================================================================================================


====================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lock_server.ivy: server=1,client=3]

====================================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --11
0     : ['link(client2,server0)', 'semaphore(server0)']
1     : -1-1
1     : ['link(client1,server0)', 'semaphore(server0)']
2     : 1--1
2     : ['link(client0,server0)', 'semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1-1-
3     : ['link(client0,server0)', 'link(client2,server0)']
4     : 11--
4     : ['link(client0,server0)', 'link(client1,server0)']
5     : -11-
5     : ['link(client1,server0)', 'link(client2,server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
6 (*) : 0000
6     : ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 3

[PRIME NOTE]: number of orbits before merging: 3

[PRIME NOTE]: number of primes: 7

[QRM NOTE]: Time elapsed since start: 7.025 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1211479 bytes


==============================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lock_server.ivy: server=1,client=3]

==============================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2]
 solution : []


Before reduction : 
 pending  : [0, 1, 2]
 solution : []

Essensial at level 0 : {0, 1, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2]


Before reduction : 
 pending  : []
 solution : [0, 1, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2]

[QRM NOTE]: Time elapsed since start: 7.027 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 163760 bytes


==================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lock_server.ivy: server=1,client=3]

==================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --11
0     : ['link(client2,server0)', 'semaphore(server0)']
1     : -1-1
1     : ['link(client1,server0)', 'semaphore(server0)']
2     : 1--1
2     : ['link(client0,server0)', 'semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['link(client2,server0)', 'semaphore(server0)']

sign_func_name2args: {'0$link': [(Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',))))], '0$semaphore': [(Const('server0', EnumeratedSort('server', ('server0',))),)]}

const2sigs: {Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$0$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$0$link$1$0, server$0$semaphore$0$0]}

sig2const: {'client$0$link$0$0': Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$0$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'server$0$semaphore$0$0': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$0$link$0$0], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$0$link$0$0, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$semaphore$0$0}

part_sig: ('client$0$link$0$0', 'server$0$link$1$0; server$0$semaphore$0$0')


---------- SigGenerator ----------

terms:  ['link(client2,server0)', 'semaphore(server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',)), BooleanSort())), 'semaphore': Const('semaphore', FunctionSort(EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',))), 'semaphore': (EnumeratedSort('server', ('server0',)),)}

sign_func_name2count:  {'0$link': 1, '0$semaphore': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$0$link$0$0], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$0$link$0$0, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$semaphore$0$0}

	sort: client

	identical_classes: {'client$0$link$0': [client$0$link$0$0]}

	identical_single_classes: {'client$0$link$0': client$0$link$0$0}

	identical_multi_classes: {}

	sort: server

	identical_classes: {'server$0$link$1; server$0$semaphore$0': [server$0$link$1$0; server$0$semaphore$0$0]}

	identical_single_classes: {'server$0$link$1; server$0$semaphore$0': server$0$link$1$0; server$0$semaphore$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.forall

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('SERVER0', EnumeratedSort('server', ('server0',))), Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]], '0$semaphore': [[Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['semaphore(SERVER0)', 'link(CLIENT0,SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0)


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1-1-
3     : ['link(client0,server0)', 'link(client2,server0)']
4     : 11--
4     : ['link(client0,server0)', 'link(client1,server0)']
5     : -11-
5     : ['link(client1,server0)', 'link(client2,server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['link(client0,server0)', 'link(client2,server0)']

sign_func_name2args: {'0$link': [(Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',)))), (Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',))))]}

const2sigs: {Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$0$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$0$link$1$0, server$0$link$1$1], Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$0$link$0$1]}

sig2const: {'client$0$link$0$0': Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$0$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'client$0$link$0$1': Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$0$link$1$1': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$0$link$0$0, client$0$link$0$1], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$link$1$1]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$0$link$0$0 | client$0$link$0$1, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$link$1$1}

part_sig: ('client$0$link$0$0 | client$0$link$0$1', 'server$0$link$1$0; server$0$link$1$1')


---------- SigGenerator ----------

terms:  ['link(client0,server0)', 'link(client2,server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',)))}

sign_func_name2count:  {'0$link': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$0$link$0$0, client$0$link$0$1], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$link$1$1]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$0$link$0$0 | client$0$link$0$1, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$link$1$1}

	sort: client

	identical_classes: {'client$0$link$0': [client$0$link$0$0, client$0$link$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'client$0$link$0': [client$0$link$0$0, client$0$link$0$1]}

	sort: server

	identical_classes: {'server$0$link$1; server$0$link$1': [server$0$link$1$0; server$0$link$1$1]}

	identical_single_classes: {'server$0$link$1; server$0$link$1': server$0$link$1$0; server$0$link$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.forall

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('CLIENT1', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',))), Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))], [Var('CLIENT1', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['link(CLIENT0,SERVER0)', 'link(CLIENT1,SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall CLIENT1,SERVER0,CLIENT0. ~link(CLIENT0,SERVER0) | ~link(CLIENT1,SERVER0) | CLIENT0 = CLIENT1


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
6 (*) : 0000
6     : ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']

sign_func_name2args: {'1$link': [(Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',)))), (Const('client1', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',)))), (Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',))))], '1$semaphore': [(Const('server0', EnumeratedSort('server', ('server0',))),)]}

const2sigs: {Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$1$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$1$link$1$0, server$1$link$1$1, server$1$link$1$2, server$1$semaphore$0$0], Const('client1', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$1$link$0$1], Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$1$link$0$2]}

sig2const: {'client$1$link$0$0': Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$1$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'client$1$link$0$1': Const('client1', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$1$link$1$1': Const('server0', EnumeratedSort('server', ('server0',))), 'client$1$link$0$2': Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$1$link$1$2': Const('server0', EnumeratedSort('server', ('server0',))), 'server$1$semaphore$0$0': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$1$link$0$0, client$1$link$0$1, client$1$link$0$2], EnumeratedSort('server', ('server0',)): [server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$1$link$0$0 | client$1$link$0$1 | client$1$link$0$2, EnumeratedSort('server', ('server0',)): server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0}

part_sig: ('client$1$link$0$0 | client$1$link$0$1 | client$1$link$0$2', 'server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0')


---------- SigGenerator ----------

terms:  ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',)), BooleanSort())), 'semaphore': Const('semaphore', FunctionSort(EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',))), 'semaphore': (EnumeratedSort('server', ('server0',)),)}

sign_func_name2count:  {'1$link': 3, '1$semaphore': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$1$link$0$0, client$1$link$0$1, client$1$link$0$2], EnumeratedSort('server', ('server0',)): [server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$1$link$0$0 | client$1$link$0$1 | client$1$link$0$2, EnumeratedSort('server', ('server0',)): server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0}

	sort: client

	identical_classes: {'client$1$link$0': [client$1$link$0$0, client$1$link$0$1, client$1$link$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'client$1$link$0': [client$1$link$0$0, client$1$link$0$1, client$1$link$0$2]}

	sort: server

	identical_classes: {'server$1$link$1; server$1$link$1; server$1$link$1; server$1$semaphore$0': [server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0]}

	identical_single_classes: {'server$1$link$1; server$1$link$1; server$1$link$1; server$1$semaphore$0': server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.exists

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('SERVER0', EnumeratedSort('server', ('server0',)))}

exists_qvars: {Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))], [Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))], [Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]], '1$semaphore': [[Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~semaphore(SERVER0)', '~link(CLIENT0,SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall SERVER0. (exists CLIENT0. semaphore(SERVER0) | link(CLIENT0,SERVER0))


============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lock_server.ivy: server=1,client=3]

============================================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --11
0     : ['link(client2,server0)', 'semaphore(server0)']
1     : -1-1
1     : ['link(client1,server0)', 'semaphore(server0)']
2     : 1--1
2     : ['link(client0,server0)', 'semaphore(server0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0)
qcost : 4




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1-1-
3     : ['link(client0,server0)', 'link(client2,server0)']
4     : 11--
4     : ['link(client0,server0)', 'link(client1,server0)']
5     : -11-
5     : ['link(client1,server0)', 'link(client2,server0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall CLIENT1,SERVER0,CLIENT0. ~link(CLIENT0,SERVER0) | ~link(CLIENT1,SERVER0) | CLIENT0 = CLIENT1
qcost : 6




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
6 (*) : 0000
6     : ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall SERVER0. (exists CLIENT0. semaphore(SERVER0) | link(CLIENT0,SERVER0))
qcost : 4



[QRM NOTE]: Time elapsed since start: 7.318 seconds

[QRM NOTE]: Time elapsed since last: 0.291 seconds

[QRM NOTE]: Peak memory: 1898713 bytes


===========================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lock_server.ivy: server=1,client=3]

===========================================================================================


New level: 1
 pending : []
 solution : [0, 1, 2]


Before reduction : 
 pending  : []
 solution : [0, 1, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2]


Solution : [0, 1, 2] has cost 14.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2]


==========================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lock_server.ivy: server=1,client=3]

==========================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 14

[MIN NOTE]: maximum branch and bound depth: 1

[MIN NOTE]: number of definitions: 0

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 1, 2]

[MIN NOTE]: solution length: 3

invariant [invar_0] forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0) # qcost: 4

invariant [invar_1] forall CLIENT1,SERVER0,CLIENT0. ~link(CLIENT0,SERVER0) | ~link(CLIENT1,SERVER0) | CLIENT0 = CLIENT1 # qcost: 6

invariant [invar_2] forall SERVER0. (exists CLIENT0. semaphore(SERVER0) | link(CLIENT0,SERVER0)) # qcost: 4

[MIN NOTE]: number of total invariants: 3

[MIN NOTE]: total qCost: 14




[QRM NOTE]: Time elapsed since start: 7.358 seconds

[QRM NOTE]: Time elapsed since last: 0.040 seconds

[QRM NOTE]: Peak memory: 1882822 bytes


=============================================

	[IVY_CHECK] Ivy Check for Rmin

=============================================


===============================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy]

===============================================================================================

ivy_check complete=fo ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2

    The following action implementations are present:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 18: implementation of connect
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 24: implementation of disconnect

    The following initializers are present:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 5: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0 ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:connect
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2 ... PASS
        (internal) ext:disconnect
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2 ... PASS

    The following program assertions are treated as assumptions:
        in action connect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 19: assumption
        in action disconnect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 25: assumption

OK
[IVY_CHECK RESULT]: PASS


================================================================================================================

	[MUS]: Extract strengthening assertion for [ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy]

================================================================================================================

[MUS NOTE]: number of strengthening assertions: 1

[MUS NOTE]: min mus: {0}

invariant [invar_0] forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0) # qcost: 4


======================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy]

======================================================================================================

ivy_check complete=fo ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 35: unique
        ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 39: invar_0

    The following action implementations are present:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 18: implementation of connect
        ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 24: implementation of disconnect

    The following initializers are present:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 5: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 35: unique ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 39: invar_0 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:connect
            ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 35: unique ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 39: invar_0 ... PASS
        (internal) ext:disconnect
            ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 35: unique ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 39: invar_0 ... PASS

    The following program assertions are treated as assumptions:
        in action connect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 19: assumption
        in action disconnect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_3.0.assert.ivy: line 25: assumption

OK
[IVY_CHECK RESULT]: PASS

[ASSERT_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 11.068 seconds

[QRM NOTE]: Time elapsed since last: 3.710 seconds

[QRM NOTE]: Peak memory: 1930875 bytes


***********************************************************

	[QRM]: ivybench/sym/ivy/lock_server.ivy

***********************************************************

[QRM RESULT]: PASS

