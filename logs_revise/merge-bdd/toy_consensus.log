
********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************


**************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

**************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.ivy -s node=2,value=1 -f 1 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 0.025 seconds

[QRM NOTE]: Time elapsed since last: 0.025 seconds

[QRM NOTE]: Peak memory: 21585 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 4


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=1]

===========================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0']
sort: quorum=['quorum__node0_node1']
predicate: vote('node', 'value')
predicate: decision('value',)
predicate: didNotVote('node',)
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)', 'vote(node0,value0)', 'vote(node1,value0)']

000110
001001
001100
1-0011

[QRM NOTE]: Time elapsed since start: 0.107 seconds

[QRM NOTE]: Time elapsed since last: 0.083 seconds

[QRM NOTE]: Peak memory: 1098600 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.111 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 48193 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : --1-1-
0     : ['didNotVote(node0)', 'vote(node0,value0)']
1     : ---1-1
1     : ['didNotVote(node1)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : 1-1---
2     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
3     : 1--1--
3     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : -11---
4     : ['decision(value0)', 'didNotVote(node0)']
5     : -1-1--
5     : ['decision(value0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : --0-0-
6     : ['~didNotVote(node0)', '~vote(node0,value0)']
7     : ---0-0
7     : ['~didNotVote(node1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
8 (*) : 1---0-
8     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
9     : 1----0
9     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
10 (*) : 01----
10     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : -1--0-
11     : ['decision(value0)', '~vote(node0,value0)']
12     : -1---0
12     : ['decision(value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : 0-0--1
13     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)']
14     : 0--01-
14     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
15 (*) : 0---11
15     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
16 (*) : 0-00--
16     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 10

[PRIME NOTE]: number of primes: 17

[QRM NOTE]: Time elapsed since start: 0.124 seconds

[QRM NOTE]: Time elapsed since last: 0.013 seconds

[QRM NOTE]: Peak memory: 1129714 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

====================================================================================================

definition primes: {0, 1, 3, 4, 7, 8, 9}


New level: 0
 pending : [2, 5, 6]
 solution : []


Before reduction : 
 pending  : [2, 5, 6]
 solution : []

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16), (3, -1), (4, -1), (5, 64), (6, 16), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 5, 6]
 solution : []

[QRM NOTE]: Time elapsed since start: 0.133 seconds

[QRM NOTE]: Time elapsed since last: 0.009 seconds

[QRM NOTE]: Peak memory: 84618 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : -11---
4     : ['decision(value0)', 'didNotVote(node0)']
5     : -1-1--
5     : ['decision(value0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'didNotVote(node0)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$didNotVote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$0$didNotVote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1')): node$0$didNotVote$0$0}

part_sig: ('node$0$didNotVote$0$0', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', 'didNotVote(node0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0',)),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$0$didNotVote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1')): node$0$didNotVote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~didNotVote(NODE0) | ~decision(VALUE0)


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
10 (*) : 01----
10     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decision(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$chosenAt$1$0, value$0$decision$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$chosenAt$1$0}

part_sig: ('quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decision(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',))), 'decision': (EnumeratedSort('value', ('value0',)),)}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$chosenAt$1$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0]}

	identical_single_classes: {'quorum$1$chosenAt$0': quorum$1$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : -1--0-
11     : ['decision(value0)', '~vote(node0,value0)']
12     : -1---0
12     : ['decision(value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', '~vote(node0,value0)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

part_sig: ('node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', '~vote(node0,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0',)),), 'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~decision(VALUE0) | vote(NODE0,VALUE0)


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

==================================================================================================================


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : -11---
4     : ['decision(value0)', 'didNotVote(node0)']
5     : -1-1--
5     : ['decision(value0)', 'didNotVote(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~didNotVote(NODE0) | ~decision(VALUE0)
qcost : 4




=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
10 (*) : 01----
10     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall QUORUM0,VALUE0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)
qcost : 4




=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : -1--0-
11     : ['decision(value0)', '~vote(node0,value0)']
12     : -1---0
12     : ['decision(value0)', '~vote(node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~decision(VALUE0) | vote(NODE0,VALUE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 0.234 seconds

[QRM NOTE]: Time elapsed since last: 0.100 seconds

[QRM NOTE]: Peak memory: 1822003 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

=================================================================================================


New level: 1
 pending : [2, 5, 6]
 solution : []


Before reduction : 
 pending  : [2, 5, 6]
 solution : []

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16), (3, -1), (4, -1), (5, 64), (6, 16), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16), (3, -1), (4, -1), (5, 64), (6, 16), (7, -1), (8, -1), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 5, 6]
 solution : []


Solution : [] has cost 0.


Decide in level 1 among pending : [2, 5, 6]

Coverage : [(0, -1), (1, -1), (2, 16), (3, -1), (4, -1), (5, 64), (6, 16), (7, -1), (8, -1), (9, -1)]

Decide 5 with phase True at level 1

After decision at level 1
 pending : [2, 6]
 solution : [5]


New level: 2
 pending : [2, 6]
 solution : [5]


Before reduction : 
 pending  : [2, 6]
 solution : [5]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16), (3, -1), (4, -1), (5, 64), (6, 16), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : {2, 6}

After reduction : 
 pending  : []
 solution : [5]


Before reduction : 
 pending  : []
 solution : [5]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [5]


Solution : [5] has cost 4.


Before backtrack at level 2
 pending : []
 solution : [5]

After backtrack at level 2
 pending : [2, 6]
 solution : [5]


Invert decision for 5 at level 1


New level: 2
 pending : [2, 6]
 solution : []


Before reduction : 
 pending  : [2, 6]
 solution : []

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 6]
 solution : []


Solution : [] has cost 0.


Decide in level 2 among pending : [2, 6]

Coverage : [(0, -1), (1, -1), (2, 16), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, -1)]

Decide 2 with phase True at level 2

After decision at level 2
 pending : [6]
 solution : [2]


New level: 3
 pending : [6]
 solution : [2]


Before reduction : 
 pending  : [6]
 solution : [2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : {6}

After reduction : 
 pending  : []
 solution : [2]


Before reduction : 
 pending  : []
 solution : [2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [2]


Solution : [2] has cost 4.


Before backtrack at level 3
 pending : []
 solution : [2]

After backtrack at level 3
 pending : [6]
 solution : [2]


Invert decision for 2 at level 2


New level: 3
 pending : [6]
 solution : []


Before reduction : 
 pending  : [6]
 solution : []

Essensial at level 3 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [6]


Before reduction : 
 pending  : []
 solution : [6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [6]


Solution : [6] has cost 4.


Before backtrack at level 3
 pending : []
 solution : [6]

After backtrack at level 3
 pending : [6]
 solution : []


Before backtrack at level 2
 pending : [6]
 solution : []

After backtrack at level 2
 pending : [6, 2]
 solution : []


Before backtrack at level 1
 pending : [6, 2]
 solution : []

After backtrack at level 1
 pending : [6, 2, 5]
 solution : []


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 3

[MIN NOTE]: upper bound: 4

[MIN NOTE]: maximum branch and bound depth: 3

[MIN NOTE]: number of definitions: 2

invariant [def_didNotVote] forall N. didNotVote(N) = (forall V. ~vote(N,V)) # definition, qcost: 4

invariant [def_chosenAt] forall V,Q. chosenAt(Q,V) = (forall N. member(N,Q) -> vote(N,V)) # definition, qcost: 6

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [5]

[MIN NOTE]: solution length: 1

invariant [invar_5] forall QUORUM0,VALUE0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) # qcost: 4

[MIN NOTE]: number of total invariants: 3

[MIN NOTE]: total qCost: 14




[MIN NOTE]: Solution 1 : [2]

[MIN NOTE]: solution length: 1

invariant [invar_2] forall NODE0,VALUE0. ~didNotVote(NODE0) | ~decision(VALUE0) # qcost: 4

[MIN NOTE]: number of total invariants: 3

[MIN NOTE]: total qCost: 14




[MIN NOTE]: Solution 2 : [6]

[MIN NOTE]: solution length: 1

invariant [invar_6] forall NODE0,VALUE0. ~decision(VALUE0) | vote(NODE0,VALUE0) # qcost: 4

[MIN NOTE]: number of total invariants: 3

[MIN NOTE]: total qCost: 14




[QRM NOTE]: Time elapsed since start: 0.360 seconds

[QRM NOTE]: Time elapsed since last: 0.127 seconds

[QRM NOTE]: Peak memory: 1819961 bytes


*****************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

*****************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: node=3,value=1]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 0.048 seconds

[QRM NOTE]: Time elapsed since last: 0.048 seconds

[QRM NOTE]: Peak memory: 38887 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 8


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decision('value',)
predicate: didNotVote('node',)
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)']

0000011100
0000101010
0000110001
0000111000
001-100011
010-010101
100-001110
111-000111

[QRM NOTE]: Time elapsed since start: 0.383 seconds

[QRM NOTE]: Time elapsed since last: 0.335 seconds

[QRM NOTE]: Peak memory: 1171374 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: node=3,value=1]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.511 seconds

[QRM NOTE]: Time elapsed since last: 0.128 seconds

[QRM NOTE]: Peak memory: 179669 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy -s node=2,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: node=2,value=2]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 4

[QRM NOTE]: Time elapsed since start: 0.032 seconds

[QRM NOTE]: Time elapsed since last: 0.032 seconds

[QRM NOTE]: Peak memory: 42423 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 9


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=2,value=2]

===========================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1']
predicate: didNotVote('node',)
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'decision(value0)', 'decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)']

0000000110
0000001001
0000010100
0000011000
0000100001
0000100010
0000110000
010-000101
10-0001010

[QRM NOTE]: Time elapsed since start: 0.195 seconds

[QRM NOTE]: Time elapsed since last: 0.164 seconds

[QRM NOTE]: Peak memory: 1138384 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.0.ivy: node=2,value=2]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.264 seconds

[QRM NOTE]: Time elapsed since last: 0.068 seconds

[QRM NOTE]: Peak memory: 135676 bytes

next size: node=3,value=2


*****************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

*****************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy -s node=3,value=1 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: node=3,value=1]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.131 seconds

[QRM NOTE]: Time elapsed since last: 0.131 seconds

[QRM NOTE]: Peak memory: 71166 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy -s node=2,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.1.ivy: node=2,value=2]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.085 seconds

[QRM NOTE]: Time elapsed since last: 0.085 seconds

[QRM NOTE]: Peak memory: 53976 bytes

next size: node=3,value=2


*****************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=2,value=1]

*****************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy -s node=3,value=1 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: node=3,value=1]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.128 seconds

[QRM NOTE]: Time elapsed since last: 0.128 seconds

[QRM NOTE]: Peak memory: 71222 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy -s node=2,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_2_value_1.2.ivy: node=2,value=2]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.083 seconds

[QRM NOTE]: Time elapsed since last: 0.083 seconds

[QRM NOTE]: Peak memory: 53400 bytes

next size: node=3,value=2


**************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

**************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.ivy -s node=3,value=2 -f 1 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 0.059 seconds

[QRM NOTE]: Time elapsed since last: 0.059 seconds

[QRM NOTE]: Peak memory: 83180 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 27


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: didNotVote('node',)
predicate: decision('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'decision(value0)', 'decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)']

00000000001011000
00000000001100100
00000000010010010
00000000010100001
00000000011010000
00000000011100000
00000000100000110
00000000100001001
00000000101000100
00000000101001000
00000000110000001
00000000110000010
00000000111000000
0000010-000100101
0000010-100000101
000010-0000011010
000010-0100001010
0001000-000011001
0001000-010010001
001000-0000100110
001000-0010100010
0100000-000010110
0100000-001010100
0101010-000010101
100000-0000101001
100000-0001101000
101010-0000101010

[QRM NOTE]: Time elapsed since start: 0.712 seconds

[QRM NOTE]: Time elapsed since last: 0.652 seconds

[QRM NOTE]: Peak memory: 1253904 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.713 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 207816 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 12
num_suborbits: 1
0 (*) : --1-------1------
0     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node2)']
1     : ---1------1------
1     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node2)']
2     : 1--------1-------
2     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
3     : -1-------1-------
3     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node1)']
4     : ----1-----1------
4     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node2)']
5     : -----1----1------
5     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node2)']
6     : 1-------1--------
6     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
7     : -1------1--------
7     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node0)']
8     : ----1----1-------
8     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node1)']
9     : -----1---1-------
9     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node1)']
10     : --1-----1--------
10     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node0)']
11     : ---1----1--------
11     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ----------1----1-
12     : ['didNotVote(node2)', 'vote(node2,value0)']
13     : ----------1-----1
13     : ['didNotVote(node2)', 'vote(node2,value1)']
14     : ---------1---1---
14     : ['didNotVote(node1)', 'vote(node1,value0)']
15     : ---------1----1--
15     : ['didNotVote(node1)', 'vote(node1,value1)']
16     : --------1--1-----
16     : ['didNotVote(node0)', 'vote(node0,value0)']
17     : --------1---1----
17     : ['didNotVote(node0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : 1------1---------
18     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
19     : -1----1----------
19     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
22     : ----1--1---------
22     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
23     : -----11----------
23     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 12
num_suborbits: 1
24 (*) : 1------------0---
24     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
25     : -1------------0--
25     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
26     : --1------------0-
26     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
27     : ---1------------0
27     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
28     : 1----------0-----
28     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
29     : -1----------0----
29     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
30     : ----1----------0-
30     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
31     : -----1----------0
31     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
32     : --1--------0-----
32     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
33     : ---1--------0----
33     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
34     : ----1--------0---
34     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
35     : -----1--------0--
35     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
36 (*) : 1-----------1----
36     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
37     : -1---------1-----
37     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
38     : --1---------1----
38     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
39     : ---1-------1-----
39     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
40     : 1-------------1--
40     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
41     : -1-----------1---
41     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
42     : ----1---------1--
42     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
43     : -----1-------1---
43     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
44     : --1-------------1
44     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
45     : ---1-----------1-
45     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
46     : ----1-----------1
46     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
47     : -----1---------1-
47     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 2
48 (*) : 1--1-------------
48     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
49     : -11--------------
49     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
50     : 1----1-----------
50     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
51     : -1--1------------
51     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
52     : --1--1-----------
52     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
53     : ---11------------
53     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
54 (*) : 11---------------
54     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
55     : --11-------------
55     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
56     : ----11-----------
56     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
57 (*) : ---------------11
57     : ['vote(node2,value0)', 'vote(node2,value1)']
58     : -------------11--
58     : ['vote(node1,value0)', 'vote(node1,value1)']
59     : -----------11----
59     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
60 (*) : ------11---------
60     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
61 (*) : ----------0----00
61     : ['~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
62     : ---------0---00--
62     : ['~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
63     : --------0--00----
63     : ['~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
64 (*) : -----0--------1-1
64     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
65     : ----0--------1-1-
65     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
66     : ---0--------1---1
66     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
67     : --0--------1---1-
67     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
68     : -0----------1-1--
68     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
69     : 0----------1-1---
69     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
70 (*) : -1---0----------1
70     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
71     : 1---0----------1-
71     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
72     : ---1-0--------1--
72     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
73     : --1-0--------1---
73     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
74     : -1-0------------1
74     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
75     : 1-0------------1-
75     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
76     : ---0-1------1----
76     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
77     : --0-1------1-----
77     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
78     : -0-1----------1--
78     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
79     : 0-1----------1---
79     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
80     : -0---1------1----
80     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
81     : 0---1------1-----
81     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
82 (*) : -----0-1---1-----
82     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
83     : ----0-1-----1----
83     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
84     : ---0---1-----1---
84     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
85     : --0---1-------1--
85     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
86     : -0-----1-------1-
86     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
87     : 0-----1---------1
87     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
88 (*) : -1-0-1-----------
88     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
89     : 1-0-1------------
89     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
90     : -0-1-1-----------
90     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
91     : 0-1-1------------
91     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
92     : -1-1-0-----------
92     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
93     : 1-1-0------------
93     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
94 (*) : -----0-11--------
94     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
95     : ----0-1-1--------
95     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
96     : ---0---1-1-------
96     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
97     : --0---1--1-------
97     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
98     : -0-----1--1------
98     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
99     : 0-----1---1------
99     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
100 (*) : ---0---1------0--
100     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
101     : --0---1------0---
101     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
102     : -0-----1--------0
102     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
103     : 0-----1--------0-
103     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
104     : -----0-1----0----
104     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
105     : ----0-1----0-----
105     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
106 (*) : -------1----0-0--
106     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
107     : ------1----0-0---
107     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
108     : -------1----0---0
108     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
109     : ------1----0---0-
109     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
110     : -------1------0-0
110     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
111     : ------1------0-0-
111     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 12
num_suborbits: 1
112 (*) : -------1-1--0----
112     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
113     : ------1--1-0-----
113     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
114     : -------1--1-0----
114     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
115     : ------1---10-----
115     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
116     : -------11-----0--
116     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
117     : ------1-1----0---
117     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
118     : -------1--1---0--
118     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
119     : ------1---1--0---
119     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
120     : -------11-------0
120     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
121     : ------1-1------0-
121     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
122     : -------1-1------0
122     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
123     : ------1--1-----0-
123     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
124 (*) : -------111-------
124     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
125     : ------1-11-------
125     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
126     : -------11-1------
126     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
127     : ------1-1-1------
127     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
128     : -------1-11------
128     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
129     : ------1--11------
129     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
130 (*) : -------1---1--0--
130     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
131     : ------1-----10---
131     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
132     : -------1---1----0
132     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
133     : ------1-----1--0-
133     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
134     : -------1----01---
134     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
135     : ------1----0--1--
135     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
136     : -------1-----1--0
136     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
137     : ------1-------10-
137     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
138     : -------1----0--1-
138     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
139     : ------1----0----1
139     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
140     : -------1------01-
140     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
141     : ------1------0--1
141     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 12
num_suborbits: 1
142 (*) : -------1-1-1-----
142     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
143     : ------1--1--1----
143     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
144     : -------1--11-----
144     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
145     : ------1---1-1----
145     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
146     : -------11----1---
146     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
147     : ------1-1-----1--
147     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
148     : -------1--1--1---
148     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
149     : ------1---1---1--
149     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
150     : -------11------1-
150     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
151     : ------1-1-------1
151     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
152     : -------1-1-----1-
152     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
153     : ------1--1------1
153     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
154 (*) : -------1---1---1-
154     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
155     : ------1-----1---1
155     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
156     : -------1---1-1---
156     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
157     : ------1-----1-1--
157     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
158     : -------1-----1-1-
158     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
159     : ------1-------1-1
159     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 12
num_suborbits: 1
160 (*) : -0-------0--10---
160     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
161     : 0--------0-1--0--
161     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
162     : ---0------0-1--0-
162     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
163     : --0-------01----0
163     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
164     : -0------0--0--1--
164     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
165     : 0-------0---01---
165     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
166     : -----0----0---10-
166     : ['vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
167     : ----0-----0--1--0
167     : ['vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
168     : ---0----0--0----1
168     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
169     : --0-----0---0--1-
169     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
170     : -----0---0---0--1
170     : ['vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
171     : ----0----0----01-
171     : ['vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
172 (*) : -0-0---1----1----
172     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
173     : 0-0---1----1-----
173     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
174     : -0---0-1------1--
174     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
175     : 0---0-1------1---
175     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
176     : ---0-0-1--------1
176     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
177     : --0-0-1--------1-
177     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 2
num_suborbits: 1
178 (*) : -0-0-0-1---------
178     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
179     : 0-0-0-1----------
179     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 12
num_suborbits: 1
180 (*) : -0-1-----0---0---
180     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
181     : 0-1------0----0--
181     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
182     : -1-0------0----0-
182     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
183     : 1-0-------0-----0
183     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
184     : -0---1--0--0-----
184     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
185     : 0---1---0---0----
185     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
186     : -1---0----0----0-
186     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
187     : 1---0-----0-----0
187     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
188     : ---0-1--0--0-----
188     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
189     : --0-1---0---0----
189     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
190     : ---1-0---0---0---
190     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
191     : --1-0----0----0--
191     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
192 (*) : ---00-----0-11---
192     : ['vote(node0,value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)']
193     : --0--0----01--1--
193     : ['vote(node0,value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)']
194     : -0--0----0--1--1-
194     : ['vote(node0,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)']
195     : 0----0---0-1----1
195     : ['vote(node0,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)']
196     : -00-----0-----11-
196     : ['vote(node1,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)']
197     : 0--0----0----1--1
197     : ['vote(node1,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
198 (*) : -----0---00--0-0-
198     : ['~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
199     : ----0----00---0-0
199     : ['~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
200     : ---0----0-00---0-
200     : ['~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
201     : --0-----0-0-0---0
201     : ['~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
202     : -0------00-0-0---
202     : ['~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
203     : 0-------00--0-0--
203     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
204 (*) : -0---0-1-0---0---
204     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
205     : 0---0-1--0----0--
205     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
206     : ---0-0-1--0----0-
206     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
207     : --0-0-1---0-----0
207     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
208     : -0-0---10--0-----
208     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
209     : 0-0---1-0---0----
209     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 12
num_suborbits: 1
210 (*) : --0--0--0-0-0-1--
210     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)']
211     : ---00---0-00-1---
211     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)']
212     : 0----0--00--0---1
212     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)']
213     : -0--0---00-0---1-
213     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)']
214     : ---00----00-1-0--
214     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)']
215     : --0--0---001-0---
215     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)']
216     : 0--0----00----0-1
216     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node1,value1)']
217     : -00-----00---0-1-
217     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node1,value0)']
218     : -0--0----00-1---0
218     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value1)']
219     : 0----0---001---0-
219     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value0)']
220     : -00-----0-0---1-0
220     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node2,value1)']
221     : 0--0----0-0--1-0-
221     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
222 (*) : -00--0--0-0---1--
222     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)']
223     : 0--00---0-0--1---
223     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)']
224     : 0--0-0--00------1
224     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)']
225     : -00-0---00-----1-
225     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)']
226     : -0-00----00-1----
226     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)']
227     : 0-0--0---001-----
227     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
228 (*) : 0-0--0--000-0----
228     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)']
229     : -0-00---0000-----
229     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)']
230     : 0--00---000---0--
230     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)']
231     : -00--0--000--0---
231     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)']
232     : -00-0---000-----0
232     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value1)']
233     : 0--0-0--000----0-
233     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
234 (*) : ---00---0000--0--
234     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value1)']
235     : --0--0--000-00---
235     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)']
236     : -0--0---0000----0
236     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value1)']
237     : 0----0--000-0--0-
237     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value0)']
238     : -00-----000--0--0
238     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value1)']
239     : 0--0----000---00-
239     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 1
num_suborbits: 1
240 (*) : 000000--000------
240     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 34

[PRIME NOTE]: number of primes: 241

[QRM NOTE]: Time elapsed since start: 0.791 seconds

[QRM NOTE]: Time elapsed since last: 0.078 seconds

[QRM NOTE]: Peak memory: 1550169 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

====================================================================================================

definition primes: {0, 1, 32, 3, 8, 9, 10, 12, 21, 24, 25, 26, 28, 29, 30, 31}


New level: 0
 pending : [2, 4, 5, 6, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : []


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : []

Essensial at level 0 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, 0), (5, 0), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : {4, 5}

After reduction : 
 pending  : [2, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6]


Before reduction : 
 pending  : [2, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, 0), (5, 0), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6]

[QRM NOTE]: Time elapsed since start: 0.863 seconds

[QRM NOTE]: Time elapsed since last: 0.072 seconds

[QRM NOTE]: Peak memory: 509531 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
57 (*) : ---------------11
57     : ['vote(node2,value0)', 'vote(node2,value1)']
58     : -------------11--
58     : ['vote(node1,value0)', 'vote(node1,value1)']
59     : -----------11----
59     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', 'vote(node2,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : 1------1---------
18     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
19     : -1----1----------
19     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
22     : ----1--1---------
22     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
23     : -----11----------
23     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$chosenAt$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decision$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decision$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,VALUE1. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
60 (*) : ------11---------
60     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'decision(value1)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$1]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$decision$0$1}

part_sig: ('value$0$decision$0$0 | value$0$decision$0$1',)


---------- SigGenerator ----------

terms:  ['decision(value0)', 'decision(value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$decision': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$decision$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: exists VALUE0. ~decision(VALUE0)


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
82 (*) : -----0-1---1-----
82     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
83     : ----0-1-----1----
83     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
84     : ---0---1-----1---
84     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
85     : --0---1-------1--
85     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
86     : -0-----1-------1-
86     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
87     : 0-----1---------1
87     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'vote(node0,value0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'vote(node0,value0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0,VALUE1. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | VALUE0 = VALUE1


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
94 (*) : -----0-11--------
94     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
95     : ----0-1-1--------
95     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
96     : ---0---1-1-------
96     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
97     : --0---1--1-------
97     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
98     : -0-----1--1------
98     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
99     : 0-----1---1------
99     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'didNotVote(node0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

part_sig: ('node$0$didNotVote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'didNotVote(node0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$didNotVote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0; node$1$member$0': [node$0$didNotVote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$didNotVote$0; node$1$member$0': node$0$didNotVote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'didNotVote(NODE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM0,VALUE0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~didNotVote(NODE0) | member(NODE0,QUORUM0)


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
100 (*) : ---0---1------0--
100     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
101     : --0---1------0---
101     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
102     : -0-----1--------0
102     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
103     : 0-----1--------0-
103     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
104     : -----0-1----0----
104     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
105     : ----0-1----0-----
105     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', '~vote(node1,value1)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', '~vote(node1,value1)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', '~vote(NODE0,VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM0,VALUE0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE0) | member(NODE0,QUORUM0)


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
106 (*) : -------1----0-0--
106     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
107     : ------1----0-0---
107     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
108     : -------1----0---0
108     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
109     : ------1----0---0-
109     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
110     : -------1------0-0
110     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
111     : ------1------0-0-
111     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decision(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 16 =====================
size : 12
num_suborbits: 1
112 (*) : -------1-1--0----
112     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
113     : ------1--1-0-----
113     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
114     : -------1--1-0----
114     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
115     : ------1---10-----
115     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
116     : -------11-----0--
116     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
117     : ------1-1----0---
117     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
118     : -------1--1---0--
118     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
119     : ------1---1--0---
119     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
120     : -------11-------0
120     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
121     : ------1-1------0-
121     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
122     : -------1-1------0
122     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
123     : ------1--1-----0-
123     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decision(VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
124 (*) : -------111-------
124     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
125     : ------1-11-------
125     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
126     : -------11-1------
126     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
127     : ------1-1-1------
127     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
128     : -------1-11------
128     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
129     : ------1--11------
129     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$didNotVote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

part_sig: ('node$0$didNotVote$0$0 | node$0$didNotVote$0$1', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE1)', 'decision(VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. ~didNotVote(NODE1) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
130 (*) : -------1---1--0--
130     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
131     : ------1-----10---
131     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
132     : -------1---1----0
132     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
133     : ------1-----1--0-
133     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
134     : -------1----01---
134     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
135     : ------1----0--1--
135     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
136     : -------1-----1--0
136     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
137     : ------1-------10-
137     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
138     : -------1----0--1-
138     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
139     : ------1----0----1
139     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
140     : -------1------01-
140     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
141     : ------1------0--1
141     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'vote(NODE0,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1,NODE1. vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 19 =====================
size : 12
num_suborbits: 1
142 (*) : -------1-1-1-----
142     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
143     : ------1--1--1----
143     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
144     : -------1--11-----
144     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
145     : ------1---1-1----
145     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
146     : -------11----1---
146     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
147     : ------1-1-----1--
147     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
148     : -------1--1--1---
148     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
149     : ------1---1---1--
149     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
150     : -------11------1-
150     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
151     : ------1-1-------1
151     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
152     : -------1-1-----1-
152     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
153     : ------1--1------1
153     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$0$vote$0$0', 'value$0$decision$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$0$vote$0': [node$0$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$0$vote$0': node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'didNotVote(NODE0)', 'vote(NODE1,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1,NODE1. ~decision(VALUE0) | ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
154 (*) : -------1---1---1-
154     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
155     : ------1-----1---1
155     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
156     : -------1---1-1---
156     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
157     : ------1-----1-1--
157     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
158     : -------1-----1-1-
158     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
159     : ------1-------1-1
159     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decision(VALUE0)', 'vote(NODE1,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | ~vote(NODE1,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
172 (*) : -0-0---1----1----
172     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
173     : 0-0---1----1-----
173     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
174     : -0---0-1------1--
174     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
175     : 0---0-1------1---
175     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
176     : ---0-0-1--------1
176     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
177     : --0-0-1--------1-
177     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'vote(node0,value1)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0, value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'vote(node0,value1)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~chosenAt(QUORUM1,VALUE0)', 'decision(VALUE0)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM1,QUORUM0,VALUE0. ~vote(NODE0,VALUE0) | chosenAt(QUORUM1,VALUE0) | ~decision(VALUE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | QUORUM0 = QUORUM1


=== Prime Orbit 23 =====================
size : 2
num_suborbits: 1
178 (*) : -0-0-0-1---------
178     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
179     : 0-0-0-1----------
179     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
204 (*) : -0---0-1-0---0---
204     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
205     : 0---0-1--0----0--
205     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
206     : ---0-0-1--0----0-
206     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
207     : --0-0-1---0-----0
207     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
208     : -0-0---10--0-----
208     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
209     : 0-0---1-0---0----
209     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', '~didNotVote(node1)', '~vote(node1,value0)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$didNotVote$0$0, node$1$vote$0$0, node$0$member$0$0, node$0$member$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', '~didNotVote(node1)', '~vote(node1,value0)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '1$didNotVote': 1, '1$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, 'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM1,VALUE0)', 'decision(VALUE0)', '~didNotVote(NODE0)', '~vote(NODE0,VALUE1)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE0,NODE0,QUORUM1,VALUE1. chosenAt(QUORUM1,VALUE0) | ~decision(VALUE0) | didNotVote(NODE0) | vote(NODE0,VALUE1) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

==================================================================================================================


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
57 (*) : ---------------11
57     : ['vote(node2,value0)', 'vote(node2,value1)']
58     : -------------11--
58     : ['vote(node1,value0)', 'vote(node1,value1)']
59     : -----------11----
59     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : 1------1---------
18     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
19     : -1----1----------
19     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
22     : ----1--1---------
22     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
23     : -----11----------
23     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,QUORUM0,VALUE1. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
60 (*) : ------11---------
60     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists VALUE0. ~decision(VALUE0)
qcost : 2




=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
82 (*) : -----0-1---1-----
82     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
83     : ----0-1-----1----
83     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
84     : ---0---1-----1---
84     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
85     : --0---1-------1--
85     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
86     : -0-----1-------1-
86     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
87     : 0-----1---------1
87     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,QUORUM0,VALUE1. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
94 (*) : -----0-11--------
94     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
95     : ----0-1-1--------
95     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
96     : ---0---1-1-------
96     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
97     : --0---1--1-------
97     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
98     : -0-----1--1------
98     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
99     : 0-----1---1------
99     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,QUORUM0,VALUE0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | ~didNotVote(NODE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
100 (*) : ---0---1------0--
100     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
101     : --0---1------0---
101     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
102     : -0-----1--------0
102     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
103     : 0-----1--------0-
103     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
104     : -----0-1----0----
104     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
105     : ----0-1----0-----
105     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,QUORUM0,VALUE0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
106 (*) : -------1----0-0--
106     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
107     : ------1----0-0---
107     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
108     : -------1----0---0
108     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
109     : ------1----0---0-
109     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
110     : -------1------0-0
110     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
111     : ------1------0-0-
111     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 16 =====================
size : 12
num_suborbits: 1
112 (*) : -------1-1--0----
112     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
113     : ------1--1-0-----
113     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
114     : -------1--1-0----
114     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
115     : ------1---10-----
115     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
116     : -------11-----0--
116     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
117     : ------1-1----0---
117     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
118     : -------1--1---0--
118     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
119     : ------1---1--0---
119     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
120     : -------11-------0
120     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
121     : ------1-1------0-
121     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
122     : -------1-1------0
122     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
123     : ------1--1-----0-
123     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
124 (*) : -------111-------
124     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
125     : ------1-11-------
125     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
126     : -------11-1------
126     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
127     : ------1-1-1------
127     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
128     : -------1-11------
128     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
129     : ------1--11------
129     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. ~didNotVote(NODE1) | ~decision(VALUE0) | ~didNotVote(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
130 (*) : -------1---1--0--
130     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
131     : ------1-----10---
131     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
132     : -------1---1----0
132     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
133     : ------1-----1--0-
133     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
134     : -------1----01---
134     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
135     : ------1----0--1--
135     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
136     : -------1-----1--0
136     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
137     : ------1-------10-
137     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
138     : -------1----0--1-
138     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
139     : ------1----0----1
139     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
140     : -------1------01-
140     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
141     : ------1------0--1
141     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,VALUE1,NODE1. vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 19 =====================
size : 12
num_suborbits: 1
142 (*) : -------1-1-1-----
142     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
143     : ------1--1--1----
143     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
144     : -------1--11-----
144     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
145     : ------1---1-1----
145     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
146     : -------11----1---
146     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
147     : ------1-1-----1--
147     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
148     : -------1--1--1---
148     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
149     : ------1---1---1--
149     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
150     : -------11------1-
150     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
151     : ------1-1-------1
151     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
152     : -------1-1-----1-
152     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
153     : ------1--1------1
153     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,VALUE1,NODE1. ~decision(VALUE0) | ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
154 (*) : -------1---1---1-
154     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
155     : ------1-----1---1
155     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
156     : -------1---1-1---
156     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
157     : ------1-----1-1--
157     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
158     : -------1-----1-1-
158     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
159     : ------1-------1-1
159     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decision(VALUE0) | ~vote(NODE1,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
172 (*) : -0-0---1----1----
172     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
173     : 0-0---1----1-----
173     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
174     : -0---0-1------1--
174     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
175     : 0---0-1------1---
175     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
176     : ---0-0-1--------1
176     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
177     : --0-0-1--------1-
177     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall NODE0,QUORUM1,QUORUM0,VALUE0. ~vote(NODE0,VALUE0) | chosenAt(QUORUM1,VALUE0) | ~decision(VALUE0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 23 =====================
size : 2
num_suborbits: 1
178 (*) : -0-0-0-1---------
178     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
179     : 0-0-0-1----------
179     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
204 (*) : -0---0-1-0---0---
204     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
205     : 0---0-1--0----0--
205     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
206     : ---0-0-1--0----0-
206     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
207     : --0-0-1---0-----0
207     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
208     : -0-0---10--0-----
208     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
209     : 0-0---1-0---0----
209     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
num_forall :   5
num_exists :   0
num_literals : 9
quantified form : forall QUORUM0,VALUE0,NODE0,QUORUM1,VALUE1. chosenAt(QUORUM1,VALUE0) | ~decision(VALUE0) | didNotVote(NODE0) | vote(NODE0,VALUE1) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)
qcost : 14



[QRM NOTE]: Time elapsed since start: 1.011 seconds

[QRM NOTE]: Time elapsed since last: 0.148 seconds

[QRM NOTE]: Peak memory: 2289511 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

=================================================================================================


New level: 1
 pending : [2, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6]


Before reduction : 
 pending  : [2, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 1 among pending : [2, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 7 with phase True at level 1

After decision at level 1
 pending : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6, 7]


New level: 2
 pending : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6, 7]


Before reduction : 
 pending  : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6, 7]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, 16777216), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, 1048576), (15, 524288), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, 2097152), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 2 among pending : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, 1048576), (15, 524288), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, 2097152), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 23 with phase True at level 2

After decision at level 2
 pending : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 23]


New level: 3
 pending : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 23]


Before reduction : 
 pending  : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 23]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, 1048576), (15, 524288), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, 2097152), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 7, 23]


Before reduction : 
 pending  : []
 solution : [6, 7, 23]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [6, 7, 23]


Solution : [6, 7, 23] has cost 9.


Before backtrack at level 3
 pending : []
 solution : [6, 7, 23]

After backtrack at level 3
 pending : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 23]


Invert decision for 23 at level 2


New level: 3
 pending : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7]


Before reduction : 
 pending  : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, 1048576), (15, 524288), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 3 among pending : [2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, 1048576), (15, 524288), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 14 with phase True at level 3

After decision at level 3
 pending : [2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 14]


New level: 4
 pending : [2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 14]


Before reduction : 
 pending  : [2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, 1048576), (15, 524288), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 7, 14]


Before reduction : 
 pending  : []
 solution : [6, 7, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [6, 7, 14]


Solution : [6, 7, 14] has cost 12.


Before backtrack at level 4
 pending : []
 solution : [6, 7, 14]

After backtrack at level 4
 pending : [2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 14]


Invert decision for 14 at level 3


New level: 4
 pending : [2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7]


Before reduction : 
 pending  : [2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, -1), (15, 524288), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 4 among pending : [2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, -1), (15, 524288), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [2, 11, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 15]


New level: 5
 pending : [2, 11, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 15]


Before reduction : 
 pending  : [2, 11, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, -1), (15, 524288), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {2, 11, 13, 16, 17, 18, 19, 20, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 7, 15]


Before reduction : 
 pending  : []
 solution : [6, 7, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [6, 7, 15]


Solution : [6, 7, 15] has cost 12.


Before backtrack at level 5
 pending : []
 solution : [6, 7, 15]

After backtrack at level 5
 pending : [2, 11, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [2, 11, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7]


Before reduction : 
 pending  : [2, 11, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 11, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 5 among pending : [2, 11, 13, 16, 17, 18, 19, 20, 22, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [2, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 11]


New level: 6
 pending : [2, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 11]


Before reduction : 
 pending  : [2, 13, 16, 17, 18, 19, 20, 22, 27]
 solution : [6, 7, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 262144), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, 2048), (18, 0), (19, 0), (20, 0), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {19, 2, 18, 20}

After reduction : 
 pending  : [13, 16, 17, 22, 27]
 solution : [6, 7, 11]


Before reduction : 
 pending  : [13, 16, 17, 22, 27]
 solution : [6, 7, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, 2048), (18, 0), (19, 0), (20, 0), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 16, 17, 22, 27]
 solution : [6, 7, 11]


Solution : [6, 7, 11] has cost 14.


Before backtrack at level 6
 pending : [13, 16, 17, 22, 27]
 solution : [6, 7, 11]

After backtrack at level 6
 pending : [13, 16, 17, 22, 27, 2, 18, 19, 20]
 solution : [6, 7, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [13, 16, 17, 22, 27, 2, 18, 19, 20]
 solution : [6, 7]


Before reduction : 
 pending  : [13, 16, 17, 22, 27, 2, 18, 19, 20]
 solution : [6, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [13, 16, 17, 22, 27, 2, 18, 19, 20]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 6 among pending : [13, 16, 17, 22, 27, 2, 18, 19, 20]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 6

After decision at level 6
 pending : [13, 16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7, 18]


New level: 7
 pending : [13, 16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7, 18]


Before reduction : 
 pending  : [13, 16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, 131072), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, 2048), (18, -1), (19, 0), (20, 0), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {2, 19, 20}

After reduction : 
 pending  : [13, 16, 17, 22, 27]
 solution : [6, 7, 18]


Before reduction : 
 pending  : [13, 16, 17, 22, 27]
 solution : [6, 7, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, 2048), (18, -1), (19, 0), (20, 0), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [13, 16, 17, 22, 27]
 solution : [6, 7, 18]


Solution : [6, 7, 18] has cost 14.


Before backtrack at level 7
 pending : [13, 16, 17, 22, 27]
 solution : [6, 7, 18]

After backtrack at level 7
 pending : [13, 16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7, 18]


Invert decision for 18 at level 6


New level: 7
 pending : [13, 16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7]


Before reduction : 
 pending  : [13, 16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, -1), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [13, 16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 7 among pending : [13, 16, 17, 22, 27, 2, 19, 20]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, -1), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 7

After decision at level 7
 pending : [16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7, 13]


New level: 8
 pending : [16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7, 13]


Before reduction : 
 pending  : [16, 17, 22, 27, 2, 19, 20]
 solution : [6, 7, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 65536), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, -1), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 8192), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {16, 17, 19}

After reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 7, 13]


Before reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 7, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 8192), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8192), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 7, 13]


Solution : [6, 7, 13] has cost 12.


Before backtrack at level 8
 pending : [22, 27, 2, 20]
 solution : [6, 7, 13]

After backtrack at level 8
 pending : [22, 27, 2, 20, 16, 17, 19]
 solution : [6, 7, 13]


Invert decision for 13 at level 7


New level: 8
 pending : [22, 27, 2, 20, 16, 17, 19]
 solution : [6, 7]


Before reduction : 
 pending  : [22, 27, 2, 20, 16, 17, 19]
 solution : [6, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8192), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, -1), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 16, 17, 19]
 solution : [6, 7]


Solution : [6, 7] has cost 5.


Decide in level 8 among pending : [22, 27, 2, 20, 16, 17, 19]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, -1), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 8

After decision at level 8
 pending : [22, 27, 2, 20, 17, 19]
 solution : [6, 7, 16]


New level: 9
 pending : [22, 27, 2, 20, 17, 19]
 solution : [6, 7, 16]


Before reduction : 
 pending  : [22, 27, 2, 20, 17, 19]
 solution : [6, 7, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 32768), (17, 4096), (18, -1), (19, 8192), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 8192), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {17, 19}

After reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 7, 16]


Before reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 7, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 8192), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8192), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 7, 16]


Solution : [6, 7, 16] has cost 12.


Before backtrack at level 9
 pending : [22, 27, 2, 20]
 solution : [6, 7, 16]

After backtrack at level 9
 pending : [22, 27, 2, 20, 17, 19]
 solution : [6, 7, 16]


Invert decision for 16 at level 8


New level: 9
 pending : [22, 27, 2, 20, 17, 19]
 solution : [6, 7]


Before reduction : 
 pending  : [22, 27, 2, 20, 17, 19]
 solution : [6, 7]

Essensial at level 9 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8192), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4096), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 19]
 solution : [6, 7, 17]


Before reduction : 
 pending  : [22, 27, 2, 20, 19]
 solution : [6, 7, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4096), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4096), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 19]
 solution : [6, 7, 17]


Solution : [6, 7, 17] has cost 12.


Before backtrack at level 9
 pending : [22, 27, 2, 20, 19]
 solution : [6, 7, 17]

After backtrack at level 9
 pending : [22, 27, 2, 20, 19, 17]
 solution : [6, 7]


Before backtrack at level 8
 pending : [22, 27, 2, 20, 19, 17]
 solution : [6, 7]

After backtrack at level 8
 pending : [22, 27, 2, 20, 19, 17, 16]
 solution : [6, 7]


Before backtrack at level 7
 pending : [22, 27, 2, 20, 19, 17, 16]
 solution : [6, 7]

After backtrack at level 7
 pending : [22, 27, 2, 20, 19, 17, 16, 13]
 solution : [6, 7]


Before backtrack at level 6
 pending : [22, 27, 2, 20, 19, 17, 16, 13]
 solution : [6, 7]

After backtrack at level 6
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18]
 solution : [6, 7]


Before backtrack at level 5
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18]
 solution : [6, 7]

After backtrack at level 5
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6, 7]


Before backtrack at level 4
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6, 7]

After backtrack at level 4
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6, 7]


Before backtrack at level 3
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6, 7]

After backtrack at level 3
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6, 7]


Before backtrack at level 2
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6, 7]

After backtrack at level 2
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14, 23]
 solution : [6, 7]


Invert decision for 7 at level 1


New level: 2
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14, 23]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14, 23]
 solution : [6]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4096), (20, 16384), (21, -1), (22, 16384), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14, 23]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 2 among pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14, 23]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 23 with phase True at level 2

After decision at level 2
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6, 23]


New level: 3
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6, 23]


Before reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6, 23]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, 4194304), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {2, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 23]


Before reduction : 
 pending  : []
 solution : [6, 23]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [6, 23]


Solution : [6, 23] has cost 7.


Before backtrack at level 3
 pending : []
 solution : [6, 23]

After backtrack at level 3
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6, 23]


Invert decision for 23 at level 2


New level: 3
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 3 among pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 14 with phase True at level 3

After decision at level 3
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6, 14]


New level: 4
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6, 14]


Before reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, 2097152), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {2, 11, 13, 15, 16, 17, 18, 19, 20, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 14]


Before reduction : 
 pending  : []
 solution : [6, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [6, 14]


Solution : [6, 14] has cost 10.


Before backtrack at level 4
 pending : []
 solution : [6, 14]

After backtrack at level 4
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6, 14]


Invert decision for 14 at level 3


New level: 4
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, -1), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 4 among pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, -1), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6, 15]


New level: 5
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6, 15]


Before reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, -1), (15, 1048576), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {2, 11, 13, 16, 17, 18, 19, 20, 22, 27}

After reduction : 
 pending  : []
 solution : [6, 15]


Before reduction : 
 pending  : []
 solution : [6, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [6, 15]


Solution : [6, 15] has cost 10.


Before backtrack at level 5
 pending : []
 solution : [6, 15]

After backtrack at level 5
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 5 among pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18]
 solution : [6, 11]


New level: 6
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18]
 solution : [6, 11]


Before reduction : 
 pending  : [22, 27, 2, 20, 19, 17, 16, 13, 18]
 solution : [6, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 524288), (12, -1), (13, 131072), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, 4096), (18, 0), (19, 0), (20, 0), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {18, 2, 19, 20}

After reduction : 
 pending  : [22, 27, 17, 16, 13]
 solution : [6, 11]


Before reduction : 
 pending  : [22, 27, 17, 16, 13]
 solution : [6, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, 4096), (18, 0), (19, 0), (20, 0), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 27, 17, 16, 13]
 solution : [6, 11]


Solution : [6, 11] has cost 12.


Before backtrack at level 6
 pending : [22, 27, 17, 16, 13]
 solution : [6, 11]

After backtrack at level 6
 pending : [22, 27, 17, 16, 13, 2, 20, 19, 18]
 solution : [6, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [22, 27, 17, 16, 13, 2, 20, 19, 18]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 17, 16, 13, 2, 20, 19, 18]
 solution : [6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 27, 17, 16, 13, 2, 20, 19, 18]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 6 among pending : [22, 27, 17, 16, 13, 2, 20, 19, 18]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 6

After decision at level 6
 pending : [22, 27, 17, 16, 13, 2, 20, 19]
 solution : [6, 18]


New level: 7
 pending : [22, 27, 17, 16, 13, 2, 20, 19]
 solution : [6, 18]


Before reduction : 
 pending  : [22, 27, 17, 16, 13, 2, 20, 19]
 solution : [6, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, 262144), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, 4096), (18, -1), (19, 0), (20, 0), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {2, 19, 20}

After reduction : 
 pending  : [22, 27, 17, 16, 13]
 solution : [6, 18]


Before reduction : 
 pending  : [22, 27, 17, 16, 13]
 solution : [6, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, 4096), (18, -1), (19, 0), (20, 0), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 27, 17, 16, 13]
 solution : [6, 18]


Solution : [6, 18] has cost 12.


Before backtrack at level 7
 pending : [22, 27, 17, 16, 13]
 solution : [6, 18]

After backtrack at level 7
 pending : [22, 27, 17, 16, 13, 2, 20, 19]
 solution : [6, 18]


Invert decision for 18 at level 6


New level: 7
 pending : [22, 27, 17, 16, 13, 2, 20, 19]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 17, 16, 13, 2, 20, 19]
 solution : [6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, -1), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 27, 17, 16, 13, 2, 20, 19]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 7 among pending : [22, 27, 17, 16, 13, 2, 20, 19]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, -1), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 7

After decision at level 7
 pending : [22, 27, 17, 16, 2, 20, 19]
 solution : [6, 13]


New level: 8
 pending : [22, 27, 17, 16, 2, 20, 19]
 solution : [6, 13]


Before reduction : 
 pending  : [22, 27, 17, 16, 2, 20, 19]
 solution : [6, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 131072), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, -1), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 16384), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {16, 17, 19}

After reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 13]


Before reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 16384), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16384), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 13]


Solution : [6, 13] has cost 10.


Before backtrack at level 8
 pending : [22, 27, 2, 20]
 solution : [6, 13]

After backtrack at level 8
 pending : [22, 27, 2, 20, 17, 16, 19]
 solution : [6, 13]


Invert decision for 13 at level 7


New level: 8
 pending : [22, 27, 2, 20, 17, 16, 19]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 20, 17, 16, 19]
 solution : [6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16384), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, -1), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 17, 16, 19]
 solution : [6]


Solution : [6] has cost 3.


Decide in level 8 among pending : [22, 27, 2, 20, 17, 16, 19]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, -1), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 8

After decision at level 8
 pending : [22, 27, 2, 20, 17, 19]
 solution : [6, 16]


New level: 9
 pending : [22, 27, 2, 20, 17, 19]
 solution : [6, 16]


Before reduction : 
 pending  : [22, 27, 2, 20, 17, 19]
 solution : [6, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 65536), (17, 8192), (18, -1), (19, 16384), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 16384), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {17, 19}

After reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 16]


Before reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 16384), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16384), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 20]
 solution : [6, 16]


Solution : [6, 16] has cost 10.


Before backtrack at level 9
 pending : [22, 27, 2, 20]
 solution : [6, 16]

After backtrack at level 9
 pending : [22, 27, 2, 20, 17, 19]
 solution : [6, 16]


Invert decision for 16 at level 8


New level: 9
 pending : [22, 27, 2, 20, 17, 19]
 solution : [6]


Before reduction : 
 pending  : [22, 27, 2, 20, 17, 19]
 solution : [6]

Essensial at level 9 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16384), (21, -1), (22, 1024), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8192), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 19]
 solution : [6, 17]


Before reduction : 
 pending  : [22, 27, 2, 20, 19]
 solution : [6, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8192), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8192), (20, 32768), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 27, 2, 20, 19]
 solution : [6, 17]


Solution : [6, 17] has cost 10.


Before backtrack at level 9
 pending : [22, 27, 2, 20, 19]
 solution : [6, 17]

After backtrack at level 9
 pending : [22, 27, 2, 20, 19, 17]
 solution : [6]


Before backtrack at level 8
 pending : [22, 27, 2, 20, 19, 17]
 solution : [6]

After backtrack at level 8
 pending : [22, 27, 2, 20, 19, 17, 16]
 solution : [6]


Before backtrack at level 7
 pending : [22, 27, 2, 20, 19, 17, 16]
 solution : [6]

After backtrack at level 7
 pending : [22, 27, 2, 20, 19, 17, 16, 13]
 solution : [6]


Before backtrack at level 6
 pending : [22, 27, 2, 20, 19, 17, 16, 13]
 solution : [6]

After backtrack at level 6
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18]
 solution : [6]


Before backtrack at level 5
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18]
 solution : [6]

After backtrack at level 5
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6]


Before backtrack at level 4
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11]
 solution : [6]

After backtrack at level 4
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6]


Before backtrack at level 3
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15]
 solution : [6]

After backtrack at level 3
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6]


Before backtrack at level 2
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14]
 solution : [6]

After backtrack at level 2
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14, 23]
 solution : [6]


Before backtrack at level 1
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14, 23]
 solution : [6]

After backtrack at level 1
 pending : [22, 27, 2, 20, 19, 17, 16, 13, 18, 11, 15, 14, 23, 7]
 solution : [6]


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 7

[MIN NOTE]: maximum branch and bound depth: 9

[MIN NOTE]: number of definitions: 2

invariant [def_didNotVote] forall N. didNotVote(N) = (forall V. ~vote(N,V)) # definition, qcost: 4

invariant [def_chosenAt] forall Q,V. chosenAt(Q,V) = (forall N. member(N,Q) -> vote(N,V)) # definition, qcost: 6

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [6, 23]

[MIN NOTE]: solution length: 2

invariant [invar_6] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_23] forall VALUE0. (exists QUORUM0. ~decision(VALUE0) | chosenAt(QUORUM0,VALUE0)) # qcost: 4

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 17




[QRM NOTE]: Time elapsed since start: 1.153 seconds

[QRM NOTE]: Time elapsed since last: 0.142 seconds

[QRM NOTE]: Peak memory: 2259716 bytes


*****************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=2]

*****************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy -s node=4,value=2 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: node=4,value=2]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 22

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 48

[QRM NOTE]: Time elapsed since start: 0.084 seconds

[QRM NOTE]: Time elapsed since last: 0.084 seconds

[QRM NOTE]: Peak memory: 121936 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 81


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=4,value=2]

===========================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
predicate: decision('value',)
predicate: member('node', 'quorum')
predicate: didNotVote('node',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'decision(value0)', 'decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'didNotVote(node3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)']

0000000000000001011010
0000000000000001100110
0000000000000001101001
0000000000000010010110
0000000000000010011001
0000000000000010100101
0000000000000101011000
0000000000000101100100
0000000000000101101000
0000000000000110010100
0000000000000110011000
0000000000000110100100
0000000000001001010010
0000000000001001100001
0000000000001001100010
0000000000001010010001
0000000000001010010010
0000000000001010100001
0000000000001101010000
0000000000001101100000
0000000000001110010000
0000000000001110100000
0000000000010001000110
0000000000010001001001
0000000000010001001010
0000000000010010000101
0000000000010010000110
0000000000010010001001
0000000000010101000100
0000000000010101001000
0000000000010110000100
0000000000010110001000
0000000000011001000001
0000000000011001000010
0000000000011010000001
0000000000011010000010
0000000000011101000000
0000000000011110000000
0000000000100000010110
0000000000100000011001
0000000000100000011010
0000000000100000100101
0000000000100000100110
0000000000100000101001
0000000000100100010100
0000000000100100011000
0000000000100100100100
0000000000100100101000
0000000000101000010001
0000000000101000010010
0000000000101000100001
0000000000101000100010
0000000000101100010000
0000000000101100100000
0000000000110000000101
0000000000110000000110
0000000000110000001001
0000000000110000001010
0000000000110100000100
0000000000110100001000
0000000000111000000001
0000000000111000000010
0000000000111100000000
000000010-000010010101
000000010-100000010101
00000010-0000001101010
00000010-0100000101010
000001000-000001100101
000001000-010001000101
00001000-0000010011010
00001000-0010010001010
000100000-000001011001
000100000-001001010001
00100000-0000010100110
00100000-0001010100010
010000000-000001010110
010000000-000101010100
010101010-000001010101
10000000-0000010101001
10000000-0000110101000
10101010-0000010101010

[QRM NOTE]: Time elapsed since start: 1.461 seconds

[QRM NOTE]: Time elapsed since last: 1.377 seconds

[QRM NOTE]: Peak memory: 1407211 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: node=4,value=2]

=====================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 2.468 seconds

[QRM NOTE]: Time elapsed since last: 1.007 seconds

[QRM NOTE]: Peak memory: 1265337 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: node=3,value=3]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 0.136 seconds

[QRM NOTE]: Time elapsed since last: 0.136 seconds

[QRM NOTE]: Peak memory: 143313 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 64


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: didNotVote('node',)
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)']

000000000000000001010100
000000000000000001100010
000000000000000010001100
000000000000000010100001
000000000000000100001010
000000000000000100010001
000000000000001001010000
000000000000001001100000
000000000000001010001000
000000000000001010100000
000000000000001100001000
000000000000001100010000
000000000000010001000010
000000000000010001000100
000000000000010010000001
000000000000010010000100
000000000000010100000001
000000000000010100000010
000000000000011001000000
000000000000011010000000
000000000000011100000000
000000000000100000001010
000000000000100000001100
000000000000100000010001
000000000000100000010100
000000000000100000100001
000000000000100000100010
000000000000101000001000
000000000000101000010000
000000000000101000100000
000000000000110000000001
000000000000110000000010
000000000000110000000100
000000000000111000000000
00000000100-000010001001
00000000100-000100001001
00000000100-100000001001
0000000100-0000001010010
0000000100-0000100010010
0000000100-0100000010010
000000100-00000001100100
000000100-00000010100100
000000100-00100000100100
00000100000-000001010001
00000100000-000001100001
00000100000-010001000001
0000100000-0000010001010
0000100000-0000010100010
0000100000-0010010000010
000100000-00000100001100
000100000-00000100010100
000100000-00010100000100
00100000000-000001001010
00100000000-000001001100
00100000000-001001001000
00100100100-000001001001
0100000000-0000010010001
0100000000-0000010010100
0100000000-0001010010000
0100100100-0000010010010
100000000-00000100100001
100000000-00000100100010
100000000-00001100100000
100100100-00000100100100

[QRM NOTE]: Time elapsed since start: 1.208 seconds

[QRM NOTE]: Time elapsed since last: 1.072 seconds

[QRM NOTE]: Peak memory: 1377142 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: node=3,value=3]

=====================================================================================================================================================

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 2.037 seconds

[QRM NOTE]: Time elapsed since last: 0.829 seconds

[QRM NOTE]: Peak memory: 1093927 bytes

next size: node=3,value=3


**************************************************************************************************

	[Synthesize Rmin]: [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=3]

**************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.ivy -s node=3,value=3 -f 1 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.024 seconds

[QRM NOTE]: Time elapsed since last: 0.024 seconds

[QRM NOTE]: Peak memory: 24860 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=3]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=3]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : -----1---------1--------
9     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
10     : ----1----------1--------
10     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
11     : -----1----------1-------
11     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
12     : ---1------------1-------
12     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
13     : ----1------------1------
13     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
14     : ---1-------------1------
14     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
15     : --1------------1--------
15     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
16     : -1-------------1--------
16     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
17     : --1-------------1-------
17     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
18     : 1---------------1-------
18     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
19     : -1---------------1------
19     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
20     : 1----------------1------
20     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
21     : --------1---------1-----
21     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
22     : -------1----------1-----
22     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
23     : --------1----------1----
23     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
24     : ------1------------1----
24     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
25     : -------1------------1---
25     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
26     : ------1-------------1---
26     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
27     : --1---------------1-----
27     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
28     : -1----------------1-----
28     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
29     : --1----------------1----
29     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
30     : 1------------------1----
30     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
31     : -1------------------1---
31     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
32     : 1-------------------1---
32     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
33     : --------1------------1--
33     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
34     : -------1-------------1--
34     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
35     : --------1-------------1-
35     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
36     : ------1---------------1-
36     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
37     : -------1---------------1
37     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
38     : ------1----------------1
38     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
39     : -----1---------------1--
39     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
40     : ----1----------------1--
40     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
41     : -----1----------------1-
41     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
42     : ---1------------------1-
42     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
43     : ----1------------------1
43     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
44     : ---1-------------------1
44     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : ------------1--1--------
45     : ['didNotVote(node0)', 'vote(node0,value0)']
46     : ------------1---1-------
46     : ['didNotVote(node0)', 'vote(node0,value1)']
47     : ------------1----1------
47     : ['didNotVote(node0)', 'vote(node0,value2)']
48     : -------------1----1-----
48     : ['didNotVote(node1)', 'vote(node1,value0)']
49     : -------------1-----1----
49     : ['didNotVote(node1)', 'vote(node1,value1)']
50     : -------------1------1---
50     : ['didNotVote(node1)', 'vote(node1,value2)']
51     : --------------1------1--
51     : ['didNotVote(node2)', 'vote(node2,value0)']
52     : --------------1-------1-
52     : ['didNotVote(node2)', 'vote(node2,value1)']
53     : --------------1--------1
53     : ['didNotVote(node2)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : --1----------1----------
54     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node1)']
55     : -1-----------1----------
55     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node1)']
56     : 1------------1----------
56     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
57     : -----1--------1---------
57     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node2)']
58     : ----1---------1---------
58     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node2)']
59     : ---1----------1---------
59     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node2)']
60     : --1---------1-----------
60     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node0)']
61     : -1----------1-----------
61     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node0)']
62     : 1-----------1-----------
62     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
63     : --------1-----1---------
63     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node2)']
64     : -------1------1---------
64     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node2)']
65     : ------1-------1---------
65     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node2)']
66     : -----1------1-----------
66     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node0)']
67     : ----1-------1-----------
67     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node0)']
68     : ---1--------1-----------
68     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node0)']
69     : --------1----1----------
69     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node1)']
70     : -------1-----1----------
70     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node1)']
71     : ------1------1----------
71     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ----------11------------
72     : ['decision(value1)', 'decision(value2)']
73     : ---------1-1------------
73     : ['decision(value0)', 'decision(value2)']
74     : ---------11-------------
74     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : ------1----1------------
75     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
76     : ------1---1-------------
76     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
77     : -------1---1------------
77     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
78     : -------1-1--------------
78     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
79     : --------1-1-------------
79     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
80     : --------11--------------
80     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
81     : ---1-------1------------
81     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
82     : ---1------1-------------
82     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
83     : ----1------1------------
83     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
84     : ----1----1--------------
84     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
85     : -----1----1-------------
85     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
86     : -----1---1--------------
86     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
87     : 1----------1------------
87     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
88     : 1---------1-------------
88     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
89     : -1---------1------------
89     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
90     : -1-------1--------------
90     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
91     : --1-------1-------------
91     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
92     : --1------1--------------
92     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
93 (*) : --------1--------------0
93     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
94     : -------1--------------0-
94     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
95     : ------1--------------0--
95     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
96     : --------1-----------0---
96     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
97     : -------1-----------0----
97     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
98     : ------1-----------0-----
98     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
99     : -----1-----------------0
99     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
100     : ----1-----------------0-
100     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
101     : ---1-----------------0--
101     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
102     : -----1-----------0------
102     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
103     : ----1-----------0-------
103     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
104     : ---1-----------0--------
104     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
105     : --1-----------------0---
105     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
106     : -1-----------------0----
106     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
107     : 1-----------------0-----
107     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
108     : --1--------------0------
108     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
109     : -1--------------0-------
109     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
110     : 1--------------0--------
110     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 27
num_suborbits: 2
111 (*) : ---1----1---------------
111     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
112     : ---1---1----------------
112     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
113     : ----1---1---------------
113     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
114     : ----1-1-----------------
114     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
115     : -----1-1----------------
115     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
116     : -----11-----------------
116     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
117     : 1-------1---------------
117     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
118     : 1------1----------------
118     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
119     : -1------1---------------
119     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
120     : -1----1-----------------
120     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
121     : --1----1----------------
121     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
122     : --1---1-----------------
122     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
123     : 1----1------------------
123     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
124     : 1---1-------------------
124     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
125     : -1---1------------------
125     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
126     : -1-1--------------------
126     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
127     : --1-1-------------------
127     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
128     : --11--------------------
128     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
129 (*) : ------1-1---------------
129     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
130     : ------11----------------
130     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
131     : -------11---------------
131     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
132     : ---1-1------------------
132     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
133     : ---11-------------------
133     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
134     : ----11------------------
134     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
135     : 1-1---------------------
135     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
136     : 11----------------------
136     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
137     : -11---------------------
137     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
138 (*) : -0--1--1----------------
138     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
139     : --0--1--1---------------
139     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
140     : 0--1--1-----------------
140     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
141     : -1--0--1----------------
141     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
142     : --1--0--1---------------
142     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
143     : 1--0--1-----------------
143     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
144     : -1--1--0----------------
144     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
145     : --1--1--0---------------
145     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
146     : 1--1--0-----------------
146     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
147 (*) : -0--1--------------1----
147     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
148     : --0--1--------------1---
148     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
149     : 0--1--------------1-----
149     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
150     : -1--0-----------------1-
150     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
151     : --1--0-----------------1
151     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
152     : 1--0-----------------1--
152     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
153     : -0-----1--------1-------
153     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
154     : --0-----1--------1------
154     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
155     : 0-----1--------1--------
155     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
156     : -1-----0--------------1-
156     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
157     : --1-----0--------------1
157     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
158     : 1-----0--------------1--
158     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
159     : ----0--1--------1-------
159     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
160     : -----0--1--------1------
160     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
161     : ---0--1--------1--------
161     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
162     : ----1--0-----------1----
162     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
163     : -----1--0-----------1---
163     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
164     : ---1--0-----------1-----
164     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
165 (*) : ----------1--------0-1--
165     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
166     : -----------1--------01--
166     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
167     : ---------1--------0---1-
167     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
168     : -----------1--------0-1-
168     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
169     : ---------1--------0----1
169     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
170     : ----------1--------0---1
170     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
171     : ----------1-------1---0-
171     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
172     : -----------1------1----0
172     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
173     : ---------1---------1-0--
173     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
174     : -----------1-------1---0
174     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
175     : ---------1----------10--
175     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
176     : ----------1---------1-0-
176     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
177     : ----------1-----0----1--
177     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
178     : -----------1-----0---1--
178     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
179     : ---------1-----0------1-
179     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
180     : -----------1-----0----1-
180     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
181     : ---------1-----0-------1
181     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
182     : ----------1-----0------1
182     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
183     : ----------1----1------0-
183     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
184     : -----------1---1-------0
184     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
185     : ---------1------1----0--
185     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
186     : -----------1----1------0
186     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
187     : ---------1-------1---0--
187     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
188     : ----------1------1----0-
188     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
189     : ----------1-----0-1-----
189     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
190     : -----------1-----01-----
190     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
191     : ---------1-----0---1----
191     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
192     : -----------1-----0-1----
192     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
193     : ---------1-----0----1---
193     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
194     : ----------1-----0---1---
194     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
195     : ----------1----1---0----
195     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
196     : -----------1---1----0---
196     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
197     : ---------1------1-0-----
197     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
198     : -----------1----1---0---
198     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
199     : ---------1-------10-----
199     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
200     : ----------1------1-0----
200     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
201 (*) : -0--------1----------1--
201     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
202     : --0--------1---------1--
202     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
203     : 0--------1------------1-
203     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
204     : --0--------1----------1-
204     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
205     : 0--------1-------------1
205     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
206     : -0--------1------------1
206     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
207     : ----0-----1-------1-----
207     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
208     : -----0-----1------1-----
208     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
209     : ---0-----1---------1----
209     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
210     : -----0-----1-------1----
210     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
211     : ---0-----1----------1---
211     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
212     : ----0-----1---------1---
212     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
213     : -------0--1----1--------
213     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
214     : --------0--1---1--------
214     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
215     : ------0--1------1-------
215     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
216     : --------0--1----1-------
216     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
217     : ------0--1-------1------
217     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
218     : -------0--1------1------
218     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 2
219 (*) : ----------1---------11--
219     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
220     : -----------1-------1-1--
220     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
221     : ---------1----------1-1-
221     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
222     : -----------1------1---1-
222     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
223     : ---------1---------1---1
223     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
224     : ----------1-------1----1
224     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
225     : ----------1------1---1--
225     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
226     : -----------1----1----1--
226     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
227     : ---------1-------1----1-
227     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
228     : -----------1---1------1-
228     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
229     : ---------1------1------1
229     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
230     : ----------1----1-------1
230     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
231     : ----------1------11-----
231     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
232     : -----------1----1-1-----
232     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
233     : ---------1-------1-1----
233     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
234     : -----------1---1---1----
234     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
235     : ---------1------1---1---
235     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
236     : ----------1----1----1---
236     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
282 (*) : ----------1-------1--1--
282     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
283     : -----------1------1--1--
283     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
284     : ---------1---------1--1-
284     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
285     : -----------1-------1--1-
285     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
286     : ---------1----------1--1
286     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
287     : ----------1---------1--1
287     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
288     : ----------1----1-----1--
288     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
289     : -----------1---1-----1--
289     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
290     : ---------1------1-----1-
290     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
291     : -----------1----1-----1-
291     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
292     : ---------1-------1-----1
292     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
293     : ----------1------1-----1
293     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
294     : ----------1----1--1-----
294     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
295     : -----------1---1--1-----
295     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
296     : ---------1------1--1----
296     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
297     : -----------1----1--1----
297     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
298     : ---------1-------1--1---
298     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
299     : ----------1------1--1---
299     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
237 (*) : ----------1--1-------1--
237     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
238     : -----------1-1-------1--
238     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
239     : ---------1---1--------1-
239     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
240     : -----------1-1--------1-
240     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
241     : ---------1---1---------1
241     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
242     : ----------1--1---------1
242     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
243     : ----------1---1---1-----
243     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
244     : -----------1--1---1-----
244     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
245     : ---------1----1----1----
245     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
246     : -----------1--1----1----
246     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
247     : ---------1----1-----1---
247     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
248     : ----------1---1-----1---
248     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
249     : ----------1-1--------1--
249     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
250     : -----------11--------1--
250     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
251     : ---------1--1---------1-
251     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
252     : -----------11---------1-
252     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
253     : ---------1--1----------1
253     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
254     : ----------1-1----------1
254     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
255     : ----------1---11--------
255     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
256     : -----------1--11--------
256     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
257     : ---------1----1-1-------
257     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
258     : -----------1--1-1-------
258     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
259     : ---------1----1--1------
259     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
260     : ----------1---1--1------
260     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
261     : ----------1-1-----1-----
261     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
262     : -----------11-----1-----
262     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
263     : ---------1--1------1----
263     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
264     : -----------11------1----
264     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
265     : ---------1--1-------1---
265     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
266     : ----------1-1-------1---
266     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
267     : ----------1--1-1--------
267     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
268     : -----------1-1-1--------
268     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
269     : ---------1---1--1-------
269     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
270     : -----------1-1--1-------
270     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
271     : ---------1---1---1------
271     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
272     : ----------1--1---1------
272     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
273 (*) : ------0-----------1--1--
273     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
274     : -------0-----------1--1-
274     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
275     : --------0-----------1--1
275     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
276     : ---0-----------1-----1--
276     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
277     : ----0-----------1-----1-
277     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
278     : -----0-----------1-----1
278     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
279     : 0--------------1--1-----
279     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
280     : -0--------------1--1----
280     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
281     : --0--------------1--1---
281     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : ----------1-----0--0----
300     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
301     : -----------1-----0--0---
301     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
302     : ---------1-----0--0-----
302     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
303     : ----------1-----0-----0-
303     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
304     : -----------1-----0-----0
304     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
305     : ---------1-----0-----0--
305     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
306     : ----------1--------0--0-
306     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
307     : -----------1--------0--0
307     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
308     : ---------1--------0--0--
308     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----0-----1--------0----
309     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
310     : -----0-----1--------0---
310     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
311     : ---0-----1--------0-----
311     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
312     : -0--------1-----------0-
312     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
313     : --0--------1-----------0
313     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
314     : 0--------1-----------0--
314     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
315     : -------0--1-----0-------
315     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
316     : --------0--1-----0------
316     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
317     : ------0--1-----0--------
317     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
318 (*) : ----0-----1--1----------
318     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
319     : -----0-----1-1----------
319     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
320     : ---0-----1---1----------
320     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
321     : -0--------1---1---------
321     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
322     : --0--------1--1---------
322     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
323     : 0--------1----1---------
323     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
324     : -------0--1-1-----------
324     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
325     : --------0--11-----------
325     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
326     : ------0--1--1-----------
326     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
327 (*) : ----------1--1--------0-
327     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
328     : -----------1-1---------0
328     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
329     : ---------1---1-------0--
329     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
330     : ----------1---1----0----
330     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
331     : -----------1--1-----0---
331     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
332     : ---------1----1---0-----
332     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
333     : ----------1-1---------0-
333     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
334     : -----------11----------0
334     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
335     : ---------1--1--------0--
335     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
336     : ----------1---1-0-------
336     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
337     : -----------1--1--0------
337     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
338     : ---------1----10--------
338     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
339     : ----------1-1------0----
339     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
340     : -----------11-------0---
340     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
341     : ---------1--1-----0-----
341     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
342     : ----------1--1--0-------
342     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
343     : -----------1-1---0------
343     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
344     : ---------1---1-0--------
344     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ---------1---11---------
345     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
346     : ----------1--11---------
346     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
347     : -----------1-11---------
347     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
348     : ---------1--1-1---------
348     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
349     : ----------1-1-1---------
349     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
350     : -----------11-1---------
350     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
351     : ---------1--11----------
351     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
352     : ----------1-11----------
352     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
353     : -----------111----------
353     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 9
num_suborbits: 1
354 (*) : ---0--0--1-----------1--
354     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
355     : ----0--0--1-----------1-
355     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : -----0--0--1-----------1
356     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
357     : 0-----0--1--------1-----
357     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : -0-----0--1--------1----
358     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : --0-----0--1--------1---
359     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
360     : 0--0-----1-----1--------
360     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
361     : -0--0-----1-----1-------
361     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
362     : --0--0-----1-----1------
362     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
363 (*) : -0--0--0--1-------------
363     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
364     : --0--0--0--1------------
364     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
365     : 0--0--0--1--------------
365     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : ------------0--000------
366     : ['~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
367     : -------------0----000---
367     : ['~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : --------------0------000
368     : ['~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 1
369 (*) : 0-----------0---001-----
369     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
370     : -0----------0--0-0-1----
370     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
371     : --0---------0--00---1---
371     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
372     : ---0--------0---00---1--
372     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
373     : ----0-------0--0-0----1-
373     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
374     : -----0------0--00------1
374     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
375     : 0------------0-1---00---
375     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
376     : -0-----------0--1-0-0---
376     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
377     : --0----------0---100----
377     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
378     : ------0------0-----001--
378     : ['vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
379     : -------0-----0----0-0-1-
379     : ['vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
380     : --------0----0----00---1
380     : ['vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
381     : ---0----------01------00
381     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
382     : ----0---------0-1----0-0
382     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
383     : -----0--------0--1---00-
383     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
384     : ------0-------0---1---00
384     : ['vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
385     : -------0------0----1-0-0
385     : ['vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
386     : --------0-----0-----100-
386     : ['vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 1
387 (*) : 1--0----------0-------00
387     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
388     : -1--0---------0------0-0
388     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
389     : --1--0--------0------00-
389     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
390     : 0--1---------0-----00---
390     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
391     : -0--1--------0----0-0---
391     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
392     : --0--1-------0----00----
392     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
393     : 1-----0-------0-------00
393     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
394     : -1-----0------0------0-0
394     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
395     : --1-----0-----0------00-
395     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
396     : 0-----1-----0---00------
396     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
397     : -0-----1----0--0-0------
397     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
398     : --0-----1---0--00-------
398     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
399     : ---1--0------0-----00---
399     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
400     : ----1--0-----0----0-0---
400     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
401     : -----1--0----0----00----
401     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
402     : ---0--1-----0---00------
402     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
403     : ----0--1----0--0-0------
403     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
404     : -----0--1---0--00-------
404     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 1
405 (*) : 0------0-----0-1----0-1-
405     : ['vote(node0,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value2)']
406     : 0-------0----0-1---0---1
406     : ['vote(node0,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value1)']
407     : -0----0------0--1---01--
407     : ['vote(node0,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value2)']
408     : -0------0----0--1-0----1
408     : ['vote(node0,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)']
409     : --0---0------0---1-0-1--
409     : ['vote(node0,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
410     : --0----0-----0---10---1-
410     : ['vote(node0,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
411     : ---0---0------01---1---0
411     : ['vote(node0,value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value2)']
412     : ---0----0-----01----1-0-
412     : ['vote(node0,value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value1)']
413     : ----0-0-------0-1-1----0
413     : ['vote(node0,value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value2)']
414     : ----0---0-----0-1---10--
414     : ['vote(node0,value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)']
415     : -----00-------0--11---0-
415     : ['vote(node0,value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
416     : -----0-0------0--1-1-0--
416     : ['vote(node0,value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
417     : 0---0-------0----01---1-
417     : ['vote(node1,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value2)']
418     : 0----0------0---0-1----1
418     : ['vote(node1,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value1)']
419     : -0-0--------0----0-1-1--
419     : ['vote(node1,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value2)']
420     : -0---0------0--0---1---1
420     : ['vote(node1,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)']
421     : --00--------0---0---11--
421     : ['vote(node1,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
422     : --0-0-------0--0----1-1-
422     : ['vote(node1,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : --0--0-----10--00-------
423     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
424     : -0--0-----1-0--0-0------
424     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
425     : 0--0-----1--0---00------
425     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
426     : --0-----0--1-0----00----
426     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
427     : -0-----0--1--0----0-0---
427     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : 0-----0--1---0-----00---
428     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
429     : -----0--0--1--0------00-
429     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
430     : ----0--0--1---0------0-0
430     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
431     : ---0--0--1----0-------00
431     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
432 (*) : -----0------0-000----00-
432     : ['~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
433     : ----0-------0-00-0---0-0
433     : ['~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
434     : ---0--------0-0-00----00
434     : ['~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
435     : --0---------00-00-00----
435     : ['~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
436     : -0----------00-0-00-0---
436     : ['~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
437     : 0-----------00--00-00---
437     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
438     : --------0----00---00-00-
438     : ['~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
439     : -------0-----00---0-00-0
439     : ['~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
440     : ------0------00----00-00
440     : ['~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 18
num_suborbits: 1
441 (*) : --0-0--0----00-0--0---1-
441     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
442     : -0---0--0---00-0--0----1
442     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
443     : --00--0-----00--0--0-1--
443     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
444     : 0----0--0---00--0--0---1
444     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
445     : -0-0--0-----00---0--01--
445     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
446     : 0---0--0----00---0--0-1-
446     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
447     : -0---0-0----0-00---1-0--
447     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
448     : --0-0---0---0-00----10--
448     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
449     : 0----00-----0-0-0-1---0-
449     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
450     : --00----0---0-0-0---1-0-
450     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
451     : 0---0-0-----0-0--01----0
451     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
452     : -0-0---0----0-0--0-1---0
452     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
453     : -0--0---0----00-1-0--0--
453     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
454     : --0--0-0-----00--10--0--
454     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
455     : 0--0----0----001---0--0-
455     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
456     : --0--00------00--1-0--0-
456     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
457     : 0--0---0-----001----0--0
457     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
458     : -0--0-0------00-1---0--0
458     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 36
num_suborbits: 1
459 (*) : 0---0-------00---0-00-1-
459     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
460     : 0----0------00--0--00--1
460     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
461     : -0-0--------00---00-01--
461     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
462     : -0---0------00-0--0-0--1
462     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
463     : --00--------00--0-00-1--
463     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
464     : --0-0-------00-0--00--1-
464     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
465     : -0-0--------0-0--0-1--00
465     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
466     : --00--------0-0-0---1-00
466     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
467     : 0---0-------0-0--01--0-0
467     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
468     : --0-0-------0-00----10-0
468     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
469     : 0----0------0-0-0-1--00-
469     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
470     : -0---0------0-00---1-00-
470     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
471     : 0------0----00--00--0-1-
471     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
472     : 0-------0---00--00-0---1
472     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
473     : -0----0-----00-0-0--01--
473     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
474     : -0------0---00-0-00----1
474     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
475     : --0---0-----00-00--0-1--
475     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
476     : --0----0----00-00-0---1-
476     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
477     : -0----0------00-1---0-00
477     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
478     : --0---0------00--1-0--00
478     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
479     : 0------0-----001----00-0
479     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
480     : --0----0-----00--10--0-0
480     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
481     : 0-------0----001---0-00-
481     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
482     : -0------0----00-1-0--00-
482     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
483     : ---0---0----0-0-00-1---0
483     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
484     : ---0----0---0-0-00--1-0-
484     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
485     : ----0-0-----0-00-01----0
485     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
486     : ----0---0---0-00-0--10--
486     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
487     : -----00-----0-000-1---0-
487     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
488     : -----0-0----0-000--1-0--
488     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
489     : ----0-0------00-1--00--0
489     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
490     : -----00------00--1-00-0-
490     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
491     : ---0---0-----001--0-0--0
491     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
492     : -----0-0-----00--10-00--
492     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
493     : ---0----0----001--00--0-
493     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
494     : ----0---0----00-1-00-0--
494     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
495 (*) : -0---0--0---0000--0--00-
495     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
496     : --0-0--0----0000--0--0-0
496     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
497     : 0----0--0---000-0--0-00-
497     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
498     : --00--0-----000-0--0--00
498     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
499     : 0---0--0----000--0--00-0
499     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
500     : -0-0--0-----000--0--0-00
500     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
501     : --0-0---0---0000--00-0--
501     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
502     : -0---0-0----0000--0-00--
502     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
503     : --00----0---000-0-00--0-
503     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
504     : 0----00-----000-0--00-0-
504     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
505     : -0-0---0----000--00-0--0
505     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
506     : 0---0-0-----000--0-00--0
506     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
507     : --0--0-0----00000-0--0--
507     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
508     : -0--0---0---0000-00--0--
508     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
509     : --0--00-----00000--0--0-
509     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
510     : 0--0----0---000-00-0--0-
510     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
511     : -0--0-0-----0000-0--0--0
511     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
512     : 0--0---0----000-00--0--0
512     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
513 (*) : -0---0------0000--0-000-
513     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
514     : --0-0-------0000--00-0-0
514     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
515     : 0----0------000-0--0000-
515     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
516     : --00--------000-0-00--00
516     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
517     : 0---0-------000--0-000-0
517     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
518     : -0-0--------000--00-0-00
518     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
519     : -0------0---0000-00--00-
519     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
520     : --0----0----00000-0--0-0
520     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
521     : 0-------0---000-00-0-00-
521     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
522     : --0---0-----00000--0--00
522     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
523     : 0------0----000-00--00-0
523     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
524     : -0----0-----0000-0--0-00
524     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
525     : ----0---0---0000-000-0--
525     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
526     : -----0-0----00000-0-00--
526     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
527     : ---0----0---000-0000--0-
527     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
528     : -----00-----00000--00-0-
528     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
529     : ---0---0----000-000-0--0
529     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
530     : ----0-0-----0000-0-00--0
530     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
531 (*) : -00-00-00---0000--0--0--
531     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
532     : 0-00-00-0---000-0--0--0-
532     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
533     : 00-00-00----000--0--0--0
533     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 0.311 seconds

[QRM NOTE]: Time elapsed since last: 0.287 seconds

[QRM NOTE]: Peak memory: 1736144 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=3]

====================================================================================================

definition primes: {32, 2, 3, 6, 8, 9, 14, 22, 23, 24, 25, 27, 28, 29, 30, 31}


New level: 0
 pending : [0, 1, 4, 5, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : []


Before reduction : 
 pending  : [0, 1, 4, 5, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, 0), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : {1, 7}

After reduction : 
 pending  : [4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, 0), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 0.427 seconds

[QRM NOTE]: Time elapsed since last: 0.116 seconds

[QRM NOTE]: Peak memory: 666086 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=3]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', 'vote(node0,value1)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', 'vote(node0,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ----------11------------
72     : ['decision(value1)', 'decision(value2)']
73     : ---------1-1------------
73     : ['decision(value0)', 'decision(value2)']
74     : ---------11-------------
74     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'decision(value2)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

part_sig: ('value$0$decision$0$0 | value$0$decision$0$1',)


---------- SigGenerator ----------

terms:  ['decision(value1)', 'decision(value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decision': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'decision(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : ------1----1------------
75     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
76     : ------1---1-------------
76     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
77     : -------1---1------------
77     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
78     : -------1-1--------------
78     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
79     : --------1-1-------------
79     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
80     : --------11--------------
80     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
81     : ---1-------1------------
81     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
82     : ---1------1-------------
82     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
83     : ----1------1------------
83     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
84     : ----1----1--------------
84     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
85     : -----1----1-------------
85     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
86     : -----1---1--------------
86     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
87     : 1----------1------------
87     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
88     : 1---------1-------------
88     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
89     : -1---------1------------
89     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
90     : -1-------1--------------
90     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
91     : --1-------1-------------
91     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
92     : --1------1--------------
92     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['chosenAt(QUORUM0,VALUE0)', 'decision(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,QUORUM0. ~chosenAt(QUORUM0,VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
165 (*) : ----------1--------0-1--
165     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
166     : -----------1--------01--
166     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
167     : ---------1--------0---1-
167     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
168     : -----------1--------0-1-
168     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
169     : ---------1--------0----1
169     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
170     : ----------1--------0---1
170     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
171     : ----------1-------1---0-
171     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
172     : -----------1------1----0
172     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
173     : ---------1---------1-0--
173     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
174     : -----------1-------1---0
174     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
175     : ---------1----------10--
175     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
176     : ----------1---------1-0-
176     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
177     : ----------1-----0----1--
177     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
178     : -----------1-----0---1--
178     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
179     : ---------1-----0------1-
179     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
180     : -----------1-----0----1-
180     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
181     : ---------1-----0-------1
181     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
182     : ----------1-----0------1
182     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
183     : ----------1----1------0-
183     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
184     : -----------1---1-------0
184     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
185     : ---------1------1----0--
185     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
186     : -----------1----1------0
186     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
187     : ---------1-------1---0--
187     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
188     : ----------1------1----0-
188     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
189     : ----------1-----0-1-----
189     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
190     : -----------1-----01-----
190     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
191     : ---------1-----0---1----
191     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
192     : -----------1-----0-1----
192     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
193     : ---------1-----0----1---
193     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
194     : ----------1-----0---1---
194     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
195     : ----------1----1---0----
195     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
196     : -----------1---1----0---
196     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
197     : ---------1------1-0-----
197     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
198     : -----------1----1---0---
198     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
199     : ---------1-------10-----
199     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
200     : ----------1------1-0----
200     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node1,value1)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node1,value1)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | ~decision(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
201 (*) : -0--------1----------1--
201     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
202     : --0--------1---------1--
202     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
203     : 0--------1------------1-
203     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
204     : --0--------1----------1-
204     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
205     : 0--------1-------------1
205     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
206     : -0--------1------------1
206     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
207     : ----0-----1-------1-----
207     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
208     : -----0-----1------1-----
208     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
209     : ---0-----1---------1----
209     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
210     : -----0-----1-------1----
210     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
211     : ---0-----1----------1---
211     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
212     : ----0-----1---------1---
212     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
213     : -------0--1----1--------
213     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
214     : --------0--1---1--------
214     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
215     : ------0--1------1-------
215     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
216     : --------0--1----1-------
216     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
217     : ------0--1-------1------
217     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
218     : -------0--1------1------
218     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'vote(node2,value0)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'vote(node2,value0)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,QUORUM0. member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 2
219 (*) : ----------1---------11--
219     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
220     : -----------1-------1-1--
220     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
221     : ---------1----------1-1-
221     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
222     : -----------1------1---1-
222     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
223     : ---------1---------1---1
223     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
224     : ----------1-------1----1
224     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
225     : ----------1------1---1--
225     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
226     : -----------1----1----1--
226     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
227     : ---------1-------1----1-
227     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
228     : -----------1---1------1-
228     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
229     : ---------1------1------1
229     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
230     : ----------1----1-------1
230     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
231     : ----------1------11-----
231     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
232     : -----------1----1-1-----
232     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
233     : ---------1-------1-1----
233     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
234     : -----------1---1---1----
234     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
235     : ---------1------1---1---
235     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
236     : ----------1----1----1---
236     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
282 (*) : ----------1-------1--1--
282     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
283     : -----------1------1--1--
283     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
284     : ---------1---------1--1-
284     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
285     : -----------1-------1--1-
285     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
286     : ---------1----------1--1
286     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
287     : ----------1---------1--1
287     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
288     : ----------1----1-----1--
288     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
289     : -----------1---1-----1--
289     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
290     : ---------1------1-----1-
290     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
291     : -----------1----1-----1-
291     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
292     : ---------1-------1-----1
292     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
293     : ----------1------1-----1
293     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
294     : ----------1----1--1-----
294     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
295     : -----------1---1--1-----
295     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
296     : ---------1------1--1----
296     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
297     : -----------1----1--1----
297     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
298     : ---------1-------1--1---
298     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
299     : ----------1------1--1---
299     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE1,VALUE2)', 'vote(NODE0,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE2,NODE0,VALUE0,NODE1. ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | (VALUE0 = VALUE1 | VALUE0 = VALUE2 | NODE0 = NODE1)


=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
237 (*) : ----------1--1-------1--
237     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
238     : -----------1-1-------1--
238     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
239     : ---------1---1--------1-
239     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
240     : -----------1-1--------1-
240     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
241     : ---------1---1---------1
241     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
242     : ----------1--1---------1
242     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
243     : ----------1---1---1-----
243     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
244     : -----------1--1---1-----
244     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
245     : ---------1----1----1----
245     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
246     : -----------1--1----1----
246     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
247     : ---------1----1-----1---
247     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
248     : ----------1---1-----1---
248     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
249     : ----------1-1--------1--
249     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
250     : -----------11--------1--
250     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
251     : ---------1--1---------1-
251     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
252     : -----------11---------1-
252     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
253     : ---------1--1----------1
253     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
254     : ----------1-1----------1
254     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
255     : ----------1---11--------
255     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
256     : -----------1--11--------
256     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
257     : ---------1----1-1-------
257     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
258     : -----------1--1-1-------
258     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
259     : ---------1----1--1------
259     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
260     : ----------1---1--1------
260     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
261     : ----------1-1-----1-----
261     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
262     : -----------11-----1-----
262     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
263     : ---------1--1------1----
263     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
264     : -----------11------1----
264     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
265     : ---------1--1-------1---
265     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
266     : ----------1-1-------1---
266     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
267     : ----------1--1-1--------
267     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
268     : -----------1-1-1--------
268     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
269     : ---------1---1--1-------
269     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
270     : -----------1-1--1-------
270     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
271     : ---------1---1---1------
271     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
272     : ----------1--1---1------
272     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$0$vote$0$0', 'value$0$decision$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$0$vote$0': [node$0$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$0$vote$0': node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'decision(VALUE0)', 'vote(NODE1,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,NODE1. ~didNotVote(NODE0) | ~decision(VALUE0) | ~vote(NODE1,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : ----------1-----0--0----
300     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
301     : -----------1-----0--0---
301     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
302     : ---------1-----0--0-----
302     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
303     : ----------1-----0-----0-
303     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
304     : -----------1-----0-----0
304     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
305     : ---------1-----0-----0--
305     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
306     : ----------1--------0--0-
306     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
307     : -----------1--------0--0
307     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
308     : ---------1--------0--0--
308     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decision(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----0-----1--------0----
309     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
310     : -----0-----1--------0---
310     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
311     : ---0-----1--------0-----
311     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
312     : -0--------1-----------0-
312     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
313     : --0--------1-----------0
313     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
314     : 0--------1-----------0--
314     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
315     : -------0--1-----0-------
315     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
316     : --------0--1-----0------
316     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
317     : ------0--1-----0--------
317     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', '~vote(node1,value1)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', '~vote(node1,value1)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0)


=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
318 (*) : ----0-----1--1----------
318     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
319     : -----0-----1-1----------
319     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
320     : ---0-----1---1----------
320     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
321     : -0--------1---1---------
321     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
322     : --0--------1--1---------
322     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
323     : 0--------1----1---------
323     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
324     : -------0--1-1-----------
324     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
325     : --------0--11-----------
325     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
326     : ------0--1--1-----------
326     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'didNotVote(node1)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

part_sig: ('node$0$didNotVote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decision(value1)', 'didNotVote(node1)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$didNotVote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0; node$1$member$0': [node$0$didNotVote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$didNotVote$0; node$1$member$0': node$0$didNotVote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. ~didNotVote(NODE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0)


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
327 (*) : ----------1--1--------0-
327     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
328     : -----------1-1---------0
328     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
329     : ---------1---1-------0--
329     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
330     : ----------1---1----0----
330     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
331     : -----------1--1-----0---
331     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
332     : ---------1----1---0-----
332     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
333     : ----------1-1---------0-
333     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
334     : -----------11----------0
334     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
335     : ---------1--1--------0--
335     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
336     : ----------1---1-0-------
336     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
337     : -----------1--1--0------
337     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
338     : ---------1----10--------
338     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
339     : ----------1-1------0----
339     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
340     : -----------11-------0---
340     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
341     : ---------1--1-----0-----
341     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
342     : ----------1--1--0-------
342     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
343     : -----------1-1---0------
343     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
344     : ---------1---1-0--------
344     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', '~vote(NODE1,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. ~didNotVote(NODE0) | vote(NODE1,VALUE0) | ~decision(VALUE0) | NODE0 = NODE1


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ---------1---11---------
345     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
346     : ----------1--11---------
346     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
347     : -----------1-11---------
347     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
348     : ---------1--1-1---------
348     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
349     : ----------1-1-1---------
349     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
350     : -----------11-1---------
350     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
351     : ---------1--11----------
351     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
352     : ----------1-11----------
352     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
353     : -----------111----------
353     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$didNotVote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

part_sig: ('node$0$didNotVote$0$0 | node$0$didNotVote$0$1', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'didNotVote(NODE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. ~didNotVote(NODE0) | ~didNotVote(NODE1) | ~decision(VALUE0) | NODE0 = NODE1


=== Prime Orbit 20 =====================
size : 9
num_suborbits: 1
354 (*) : ---0--0--1-----------1--
354     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
355     : ----0--0--1-----------1-
355     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : -----0--0--1-----------1
356     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
357     : 0-----0--1--------1-----
357     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : -0-----0--1--------1----
358     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : --0-----0--1--------1---
359     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
360     : 0--0-----1-----1--------
360     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
361     : -0--0-----1-----1-------
361     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
362     : --0--0-----1-----1------
362     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node2,value0)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node2,value0)', 'member(node2,quorum__node0_node2)', 'member(node2,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM0)', 'vote(NODE0,VALUE0)', 'member(NODE0,QUORUM1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM1,QUORUM0,VALUE0. chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM1) | ~decision(VALUE0) | QUORUM0 = QUORUM1


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
363 (*) : -0--0--0--1-------------
363     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
364     : --0--0--0--1------------
364     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
365     : 0--0--0--1--------------
365     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : --0--0-----10--00-------
423     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
424     : -0--0-----1-0--0-0------
424     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
425     : 0--0-----1--0---00------
425     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
426     : --0-----0--1-0----00----
426     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
427     : -0-----0--1--0----0-0---
427     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : 0-----0--1---0-----00---
428     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
429     : -----0--0--1--0------00-
429     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
430     : ----0--0--1---0------0-0
430     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
431     : ---0--0--1----0-------00
431     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', 'decision(value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$didNotVote$0$0, node$1$vote$0$0, node$1$vote$0$1, node$0$member$0$0, node$0$member$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', 'decision(value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '1$didNotVote': 1, '1$vote': 2, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~didNotVote(NODE0)', '~chosenAt(QUORUM0,VALUE1)', 'member(NODE0,QUORUM0)', 'decision(VALUE1)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM1,VALUE1)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM1,VALUE1,QUORUM0. didNotVote(NODE0) | chosenAt(QUORUM0,VALUE1) | ~member(NODE0,QUORUM0) | ~decision(VALUE1) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=3]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ----------11------------
72     : ['decision(value1)', 'decision(value2)']
73     : ---------1-1------------
73     : ['decision(value0)', 'decision(value2)']
74     : ---------11-------------
74     : ['decision(value0)', 'decision(value1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : ------1----1------------
75     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
76     : ------1---1-------------
76     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
77     : -------1---1------------
77     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
78     : -------1-1--------------
78     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
79     : --------1-1-------------
79     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
80     : --------11--------------
80     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
81     : ---1-------1------------
81     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
82     : ---1------1-------------
82     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
83     : ----1------1------------
83     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
84     : ----1----1--------------
84     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
85     : -----1----1-------------
85     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
86     : -----1---1--------------
86     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
87     : 1----------1------------
87     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
88     : 1---------1-------------
88     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
89     : -1---------1------------
89     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
90     : -1-------1--------------
90     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
91     : --1-------1-------------
91     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
92     : --1------1--------------
92     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0,QUORUM0. ~chosenAt(QUORUM0,VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
165 (*) : ----------1--------0-1--
165     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
166     : -----------1--------01--
166     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
167     : ---------1--------0---1-
167     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
168     : -----------1--------0-1-
168     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
169     : ---------1--------0----1
169     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
170     : ----------1--------0---1
170     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
171     : ----------1-------1---0-
171     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
172     : -----------1------1----0
172     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
173     : ---------1---------1-0--
173     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
174     : -----------1-------1---0
174     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
175     : ---------1----------10--
175     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
176     : ----------1---------1-0-
176     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
177     : ----------1-----0----1--
177     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
178     : -----------1-----0---1--
178     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
179     : ---------1-----0------1-
179     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
180     : -----------1-----0----1-
180     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
181     : ---------1-----0-------1
181     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
182     : ----------1-----0------1
182     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
183     : ----------1----1------0-
183     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
184     : -----------1---1-------0
184     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
185     : ---------1------1----0--
185     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
186     : -----------1----1------0
186     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
187     : ---------1-------1---0--
187     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
188     : ----------1------1----0-
188     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
189     : ----------1-----0-1-----
189     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
190     : -----------1-----01-----
190     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
191     : ---------1-----0---1----
191     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
192     : -----------1-----0-1----
192     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
193     : ---------1-----0----1---
193     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
194     : ----------1-----0---1---
194     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
195     : ----------1----1---0----
195     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
196     : -----------1---1----0---
196     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
197     : ---------1------1-0-----
197     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
198     : -----------1----1---0---
198     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
199     : ---------1-------10-----
199     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
200     : ----------1------1-0----
200     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | ~decision(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 11 =====================
size : 18
num_suborbits: 1
201 (*) : -0--------1----------1--
201     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
202     : --0--------1---------1--
202     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
203     : 0--------1------------1-
203     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
204     : --0--------1----------1-
204     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
205     : 0--------1-------------1
205     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
206     : -0--------1------------1
206     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
207     : ----0-----1-------1-----
207     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
208     : -----0-----1------1-----
208     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
209     : ---0-----1---------1----
209     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
210     : -----0-----1-------1----
210     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
211     : ---0-----1----------1---
211     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
212     : ----0-----1---------1---
212     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
213     : -------0--1----1--------
213     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
214     : --------0--1---1--------
214     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
215     : ------0--1------1-------
215     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
216     : --------0--1----1-------
216     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
217     : ------0--1-------1------
217     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
218     : -------0--1------1------
218     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,QUORUM0. member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 12 =====================
size : 36
num_suborbits: 2
219 (*) : ----------1---------11--
219     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
220     : -----------1-------1-1--
220     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
221     : ---------1----------1-1-
221     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
222     : -----------1------1---1-
222     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
223     : ---------1---------1---1
223     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
224     : ----------1-------1----1
224     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
225     : ----------1------1---1--
225     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
226     : -----------1----1----1--
226     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
227     : ---------1-------1----1-
227     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
228     : -----------1---1------1-
228     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
229     : ---------1------1------1
229     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
230     : ----------1----1-------1
230     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
231     : ----------1------11-----
231     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
232     : -----------1----1-1-----
232     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
233     : ---------1-------1-1----
233     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
234     : -----------1---1---1----
234     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
235     : ---------1------1---1---
235     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
236     : ----------1----1----1---
236     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
282 (*) : ----------1-------1--1--
282     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
283     : -----------1------1--1--
283     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
284     : ---------1---------1--1-
284     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
285     : -----------1-------1--1-
285     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
286     : ---------1----------1--1
286     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
287     : ----------1---------1--1
287     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
288     : ----------1----1-----1--
288     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
289     : -----------1---1-----1--
289     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
290     : ---------1------1-----1-
290     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
291     : -----------1----1-----1-
291     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
292     : ---------1-------1-----1
292     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
293     : ----------1------1-----1
293     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
294     : ----------1----1--1-----
294     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
295     : -----------1---1--1-----
295     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
296     : ---------1------1--1----
296     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
297     : -----------1----1--1----
297     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
298     : ---------1-------1--1---
298     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
299     : ----------1------1--1---
299     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
num_forall :   5
num_exists :   0
num_literals : 6
quantified form : forall VALUE1,VALUE2,NODE0,VALUE0,NODE1. ~vote(NODE1,VALUE2) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | (VALUE0 = VALUE1 | VALUE0 = VALUE2 | NODE0 = NODE1)
qcost : 11




=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
237 (*) : ----------1--1-------1--
237     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
238     : -----------1-1-------1--
238     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
239     : ---------1---1--------1-
239     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
240     : -----------1-1--------1-
240     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
241     : ---------1---1---------1
241     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
242     : ----------1--1---------1
242     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
243     : ----------1---1---1-----
243     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
244     : -----------1--1---1-----
244     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
245     : ---------1----1----1----
245     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
246     : -----------1--1----1----
246     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
247     : ---------1----1-----1---
247     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
248     : ----------1---1-----1---
248     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
249     : ----------1-1--------1--
249     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
250     : -----------11--------1--
250     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
251     : ---------1--1---------1-
251     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
252     : -----------11---------1-
252     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
253     : ---------1--1----------1
253     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
254     : ----------1-1----------1
254     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
255     : ----------1---11--------
255     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
256     : -----------1--11--------
256     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
257     : ---------1----1-1-------
257     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
258     : -----------1--1-1-------
258     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
259     : ---------1----1--1------
259     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
260     : ----------1---1--1------
260     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
261     : ----------1-1-----1-----
261     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
262     : -----------11-----1-----
262     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
263     : ---------1--1------1----
263     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
264     : -----------11------1----
264     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
265     : ---------1--1-------1---
265     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
266     : ----------1-1-------1---
266     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
267     : ----------1--1-1--------
267     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
268     : -----------1-1-1--------
268     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
269     : ---------1---1--1-------
269     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
270     : -----------1-1--1-------
270     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
271     : ---------1---1---1------
271     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
272     : ----------1--1---1------
272     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,NODE1. ~didNotVote(NODE0) | ~decision(VALUE0) | ~vote(NODE1,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : ----------1-----0--0----
300     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
301     : -----------1-----0--0---
301     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
302     : ---------1-----0--0-----
302     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
303     : ----------1-----0-----0-
303     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
304     : -----------1-----0-----0
304     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
305     : ---------1-----0-----0--
305     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
306     : ----------1--------0--0-
306     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
307     : -----------1--------0--0
307     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
308     : ---------1--------0--0--
308     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----0-----1--------0----
309     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
310     : -----0-----1--------0---
310     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
311     : ---0-----1--------0-----
311     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
312     : -0--------1-----------0-
312     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
313     : --0--------1-----------0
313     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
314     : 0--------1-----------0--
314     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
315     : -------0--1-----0-------
315     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
316     : --------0--1-----0------
316     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
317     : ------0--1-----0--------
317     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0)
qcost : 7




=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
318 (*) : ----0-----1--1----------
318     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
319     : -----0-----1-1----------
319     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
320     : ---0-----1---1----------
320     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
321     : -0--------1---1---------
321     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
322     : --0--------1--1---------
322     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
323     : 0--------1----1---------
323     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
324     : -------0--1-1-----------
324     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
325     : --------0--11-----------
325     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
326     : ------0--1--1-----------
326     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. ~didNotVote(NODE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decision(VALUE0)
qcost : 7




=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
327 (*) : ----------1--1--------0-
327     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
328     : -----------1-1---------0
328     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
329     : ---------1---1-------0--
329     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
330     : ----------1---1----0----
330     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
331     : -----------1--1-----0---
331     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
332     : ---------1----1---0-----
332     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
333     : ----------1-1---------0-
333     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
334     : -----------11----------0
334     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
335     : ---------1--1--------0--
335     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
336     : ----------1---1-0-------
336     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
337     : -----------1--1--0------
337     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
338     : ---------1----10--------
338     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
339     : ----------1-1------0----
339     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
340     : -----------11-------0---
340     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
341     : ---------1--1-----0-----
341     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
342     : ----------1--1--0-------
342     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
343     : -----------1-1---0------
343     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
344     : ---------1---1-0--------
344     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. ~didNotVote(NODE0) | vote(NODE1,VALUE0) | ~decision(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ---------1---11---------
345     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
346     : ----------1--11---------
346     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
347     : -----------1-11---------
347     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
348     : ---------1--1-1---------
348     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
349     : ----------1-1-1---------
349     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
350     : -----------11-1---------
350     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
351     : ---------1--11----------
351     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
352     : ----------1-11----------
352     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
353     : -----------111----------
353     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. ~didNotVote(NODE0) | ~didNotVote(NODE1) | ~decision(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 20 =====================
size : 9
num_suborbits: 1
354 (*) : ---0--0--1-----------1--
354     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
355     : ----0--0--1-----------1-
355     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : -----0--0--1-----------1
356     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
357     : 0-----0--1--------1-----
357     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : -0-----0--1--------1----
358     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : --0-----0--1--------1---
359     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
360     : 0--0-----1-----1--------
360     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
361     : -0--0-----1-----1-------
361     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
362     : --0--0-----1-----1------
362     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall NODE0,QUORUM1,QUORUM0,VALUE0. chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM1) | ~decision(VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
363 (*) : -0--0--0--1-------------
363     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
364     : --0--0--0--1------------
364     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
365     : 0--0--0--1--------------
365     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))
qcost : 4




=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : --0--0-----10--00-------
423     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
424     : -0--0-----1-0--0-0------
424     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
425     : 0--0-----1--0---00------
425     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
426     : --0-----0--1-0----00----
426     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
427     : -0-----0--1--0----0-0---
427     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : 0-----0--1---0-----00---
428     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
429     : -----0--0--1--0------00-
429     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
430     : ----0--0--1---0------0-0
430     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
431     : ---0--0--1----0-------00
431     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall NODE0,QUORUM1,VALUE1,QUORUM0. didNotVote(NODE0) | chosenAt(QUORUM0,VALUE1) | ~member(NODE0,QUORUM0) | ~decision(VALUE1) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 2.905 seconds

[QRM NOTE]: Time elapsed since last: 2.478 seconds

[QRM NOTE]: Peak memory: 2542481 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=3]

=================================================================================================


New level: 1
 pending : [4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 1 among pending : [4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 4 with phase True at level 1

After decision at level 1
 pending : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0, 4]


New level: 2
 pending : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 2147483648), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, 33554432), (16, 67108864), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, 134217728), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 2 among pending : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, 33554432), (16, 67108864), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, 134217728), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 21 with phase True at level 2

After decision at level 2
 pending : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26]
 solution : [0, 4, 21]


New level: 3
 pending : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26]
 solution : [0, 4, 21]


Before reduction : 
 pending  : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26]
 solution : [0, 4, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, 33554432), (16, 67108864), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, 134217728), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26}

After reduction : 
 pending  : []
 solution : [0, 4, 21]


Before reduction : 
 pending  : []
 solution : [0, 4, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 21]


Solution : [0, 4, 21] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [0, 4, 21]

After backtrack at level 3
 pending : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26]
 solution : [0, 4, 21]


Invert decision for 21 at level 2


New level: 3
 pending : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26]
 solution : [0, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, 33554432), (16, 67108864), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 3 among pending : [5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, 33554432), (16, 67108864), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 3

After decision at level 3
 pending : [5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26]
 solution : [0, 4, 16]


New level: 4
 pending : [5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26]
 solution : [0, 4, 16]


Before reduction : 
 pending  : [5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26]
 solution : [0, 4, 16]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, 33554432), (16, 67108864), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26}

After reduction : 
 pending  : []
 solution : [0, 4, 16]


Before reduction : 
 pending  : []
 solution : [0, 4, 16]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 16]


Solution : [0, 4, 16] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [0, 4, 16]

After backtrack at level 4
 pending : [5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26]
 solution : [0, 4, 16]


Invert decision for 16 at level 3


New level: 4
 pending : [5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26]
 solution : [0, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, 33554432), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 4 among pending : [5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, 33554432), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [5, 10, 11, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4, 15]


New level: 5
 pending : [5, 10, 11, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4, 15]


Before reduction : 
 pending  : [5, 10, 11, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, 33554432), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {5, 10, 11, 12, 13, 17, 18, 19, 20, 26}

After reduction : 
 pending  : []
 solution : [0, 4, 15]


Before reduction : 
 pending  : []
 solution : [0, 4, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 15]


Solution : [0, 4, 15] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [0, 4, 15]

After backtrack at level 5
 pending : [5, 10, 11, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [5, 10, 11, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4]


Before reduction : 
 pending  : [5, 10, 11, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [5, 10, 11, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 5 among pending : [5, 10, 11, 12, 13, 17, 18, 19, 20, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [5, 10, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4, 11]


New level: 6
 pending : [5, 10, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4, 11]


Before reduction : 
 pending  : [5, 10, 12, 13, 17, 18, 19, 20, 26]
 solution : [0, 4, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 2097152), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {10, 13, 12, 5}

After reduction : 
 pending  : [17, 18, 19, 20, 26]
 solution : [0, 4, 11]


Before reduction : 
 pending  : [17, 18, 19, 20, 26]
 solution : [0, 4, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 26]
 solution : [0, 4, 11]


Solution : [0, 4, 11] has cost 20.


Before backtrack at level 6
 pending : [17, 18, 19, 20, 26]
 solution : [0, 4, 11]

After backtrack at level 6
 pending : [17, 18, 19, 20, 26, 5, 10, 12, 13]
 solution : [0, 4, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [17, 18, 19, 20, 26, 5, 10, 12, 13]
 solution : [0, 4]


Before reduction : 
 pending  : [17, 18, 19, 20, 26, 5, 10, 12, 13]
 solution : [0, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, -1), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 26, 5, 10, 12, 13]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 6 among pending : [17, 18, 19, 20, 26, 5, 10, 12, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, -1), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 6

After decision at level 6
 pending : [17, 18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4, 10]


New level: 7
 pending : [17, 18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4, 10]


Before reduction : 
 pending  : [17, 18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, -1), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {13, 12, 5}

After reduction : 
 pending  : [17, 18, 19, 20, 26]
 solution : [0, 4, 10]


Before reduction : 
 pending  : [17, 18, 19, 20, 26]
 solution : [0, 4, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 26]
 solution : [0, 4, 10]


Solution : [0, 4, 10] has cost 20.


Before backtrack at level 7
 pending : [17, 18, 19, 20, 26]
 solution : [0, 4, 10]

After backtrack at level 7
 pending : [17, 18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4, 10]


Invert decision for 10 at level 6


New level: 7
 pending : [17, 18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4]


Before reduction : 
 pending  : [17, 18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 7 among pending : [17, 18, 19, 20, 26, 5, 12, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 7

After decision at level 7
 pending : [18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4, 17]


New level: 8
 pending : [18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4, 17]


Before reduction : 
 pending  : [18, 19, 20, 26, 5, 12, 13]
 solution : [0, 4, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, 524288), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 24576), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {18, 19, 13}

After reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 4, 17]


Before reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 4, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 24576), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 24576), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 4, 17]


Solution : [0, 4, 17] has cost 18.


Before backtrack at level 8
 pending : [20, 26, 5, 12]
 solution : [0, 4, 17]

After backtrack at level 8
 pending : [20, 26, 5, 12, 18, 19, 13]
 solution : [0, 4, 17]


Invert decision for 17 at level 7


New level: 8
 pending : [20, 26, 5, 12, 18, 19, 13]
 solution : [0, 4]


Before reduction : 
 pending  : [20, 26, 5, 12, 18, 19, 13]
 solution : [0, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 24576), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, -1), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 18, 19, 13]
 solution : [0, 4]


Solution : [0, 4] has cost 11.


Decide in level 8 among pending : [20, 26, 5, 12, 18, 19, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, -1), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [20, 26, 5, 12, 19, 13]
 solution : [0, 4, 18]


New level: 9
 pending : [20, 26, 5, 12, 19, 13]
 solution : [0, 4, 18]


Before reduction : 
 pending  : [20, 26, 5, 12, 19, 13]
 solution : [0, 4, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 16384), (14, -1), (15, -1), (16, -1), (17, -1), (18, 262144), (19, 8192), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 24576), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {19, 13}

After reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 4, 18]


Before reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 4, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 24576), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 24576), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 4, 18]


Solution : [0, 4, 18] has cost 18.


Before backtrack at level 9
 pending : [20, 26, 5, 12]
 solution : [0, 4, 18]

After backtrack at level 9
 pending : [20, 26, 5, 12, 19, 13]
 solution : [0, 4, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [20, 26, 5, 12, 19, 13]
 solution : [0, 4]


Before reduction : 
 pending  : [20, 26, 5, 12, 19, 13]
 solution : [0, 4]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 16384), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 24576), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 13]
 solution : [0, 4, 19]


Before reduction : 
 pending  : [20, 26, 5, 12, 13]
 solution : [0, 4, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 13]
 solution : [0, 4, 19]


Solution : [0, 4, 19] has cost 18.


Before backtrack at level 9
 pending : [20, 26, 5, 12, 13]
 solution : [0, 4, 19]

After backtrack at level 9
 pending : [20, 26, 5, 12, 13, 19]
 solution : [0, 4]


Before backtrack at level 8
 pending : [20, 26, 5, 12, 13, 19]
 solution : [0, 4]

After backtrack at level 8
 pending : [20, 26, 5, 12, 13, 19, 18]
 solution : [0, 4]


Before backtrack at level 7
 pending : [20, 26, 5, 12, 13, 19, 18]
 solution : [0, 4]

After backtrack at level 7
 pending : [20, 26, 5, 12, 13, 19, 18, 17]
 solution : [0, 4]


Before backtrack at level 6
 pending : [20, 26, 5, 12, 13, 19, 18, 17]
 solution : [0, 4]

After backtrack at level 6
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10]
 solution : [0, 4]


Before backtrack at level 5
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10]
 solution : [0, 4]

After backtrack at level 5
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0, 4]


Before backtrack at level 4
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0, 4]

After backtrack at level 4
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0, 4]


Before backtrack at level 3
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0, 4]

After backtrack at level 3
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0, 4]


Before backtrack at level 2
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0, 4]

After backtrack at level 2
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16, 21]
 solution : [0, 4]


Invert decision for 4 at level 1


New level: 2
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16, 21]
 solution : [0]


Before reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16, 21]
 solution : [0]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32768), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 49152), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16, 21]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 2 among pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 21 with phase True at level 2

After decision at level 2
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0, 21]


New level: 3
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0, 21]


Before reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26}

After reduction : 
 pending  : []
 solution : [0, 21]


Before reduction : 
 pending  : []
 solution : [0, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 21]


Solution : [0, 21] has cost 10.


Before backtrack at level 3
 pending : []
 solution : [0, 21]

After backtrack at level 3
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0, 21]


Invert decision for 21 at level 2


New level: 3
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0]


Before reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 3 among pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 3

After decision at level 3
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0, 16]


New level: 4
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0, 16]


Before reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0, 16]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, 268435456), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26}

After reduction : 
 pending  : []
 solution : [0, 16]


Before reduction : 
 pending  : []
 solution : [0, 16]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 16]


Solution : [0, 16] has cost 13.


Before backtrack at level 4
 pending : []
 solution : [0, 16]

After backtrack at level 4
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0, 16]


Invert decision for 16 at level 3


New level: 4
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0]


Before reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 4 among pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0, 15]


New level: 5
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0, 15]


Before reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, 134217728), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {5, 10, 11, 12, 13, 17, 18, 19, 20, 26}

After reduction : 
 pending  : []
 solution : [0, 15]


Before reduction : 
 pending  : []
 solution : [0, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 15]


Solution : [0, 15] has cost 13.


Before backtrack at level 5
 pending : []
 solution : [0, 15]

After backtrack at level 5
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0]


Before reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 5 among pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10]
 solution : [0, 11]


New level: 6
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10]
 solution : [0, 11]


Before reduction : 
 pending  : [20, 26, 5, 12, 13, 19, 18, 17, 10]
 solution : [0, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 8388608), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, 8192), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {13, 10, 12, 5}

After reduction : 
 pending  : [20, 26, 19, 18, 17]
 solution : [0, 11]


Before reduction : 
 pending  : [20, 26, 19, 18, 17]
 solution : [0, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, 8192), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, 8192), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [20, 26, 19, 18, 17]
 solution : [0, 11]


Solution : [0, 11] has cost 15.


Before backtrack at level 6
 pending : [20, 26, 19, 18, 17]
 solution : [0, 11]

After backtrack at level 6
 pending : [20, 26, 19, 18, 17, 5, 12, 13, 10]
 solution : [0, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [20, 26, 19, 18, 17, 5, 12, 13, 10]
 solution : [0]


Before reduction : 
 pending  : [20, 26, 19, 18, 17, 5, 12, 13, 10]
 solution : [0]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, 8192), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, -1), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [20, 26, 19, 18, 17, 5, 12, 13, 10]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 6 among pending : [20, 26, 19, 18, 17, 5, 12, 13, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, -1), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 6

After decision at level 6
 pending : [20, 26, 19, 18, 17, 5, 12, 13]
 solution : [0, 10]


New level: 7
 pending : [20, 26, 19, 18, 17, 5, 12, 13]
 solution : [0, 10]


Before reduction : 
 pending  : [20, 26, 19, 18, 17, 5, 12, 13]
 solution : [0, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, -1), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, 8192), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {13, 12, 5}

After reduction : 
 pending  : [20, 26, 19, 18, 17]
 solution : [0, 10]


Before reduction : 
 pending  : [20, 26, 19, 18, 17]
 solution : [0, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, 8192), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, 8192), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [20, 26, 19, 18, 17]
 solution : [0, 10]


Solution : [0, 10] has cost 15.


Before backtrack at level 7
 pending : [20, 26, 19, 18, 17]
 solution : [0, 10]

After backtrack at level 7
 pending : [20, 26, 19, 18, 17, 5, 12, 13]
 solution : [0, 10]


Invert decision for 10 at level 6


New level: 7
 pending : [20, 26, 19, 18, 17, 5, 12, 13]
 solution : [0]


Before reduction : 
 pending  : [20, 26, 19, 18, 17, 5, 12, 13]
 solution : [0]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 8192), (19, 8192), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [20, 26, 19, 18, 17, 5, 12, 13]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 7 among pending : [20, 26, 19, 18, 17, 5, 12, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 7

After decision at level 7
 pending : [20, 26, 19, 18, 5, 12, 13]
 solution : [0, 17]


New level: 8
 pending : [20, 26, 19, 18, 5, 12, 13]
 solution : [0, 17]


Before reduction : 
 pending  : [20, 26, 19, 18, 5, 12, 13]
 solution : [0, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, 2097152), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 98304), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {18, 19, 13}

After reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 17]


Before reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 98304), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 98304), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 17]


Solution : [0, 17] has cost 13.


Before backtrack at level 8
 pending : [20, 26, 5, 12]
 solution : [0, 17]

After backtrack at level 8
 pending : [20, 26, 5, 12, 19, 18, 13]
 solution : [0, 17]


Invert decision for 17 at level 7


New level: 8
 pending : [20, 26, 5, 12, 19, 18, 13]
 solution : [0]


Before reduction : 
 pending  : [20, 26, 5, 12, 19, 18, 13]
 solution : [0]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 98304), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, -1), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 19, 18, 13]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 8 among pending : [20, 26, 5, 12, 19, 18, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, -1), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [20, 26, 5, 12, 19, 13]
 solution : [0, 18]


New level: 9
 pending : [20, 26, 5, 12, 19, 13]
 solution : [0, 18]


Before reduction : 
 pending  : [20, 26, 5, 12, 19, 13]
 solution : [0, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 196608), (13, 65536), (14, -1), (15, -1), (16, -1), (17, -1), (18, 1048576), (19, 32768), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 98304), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {19, 13}

After reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 18]


Before reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 98304), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 98304), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 26, 5, 12]
 solution : [0, 18]


Solution : [0, 18] has cost 13.


Before backtrack at level 9
 pending : [20, 26, 5, 12]
 solution : [0, 18]

After backtrack at level 9
 pending : [20, 26, 5, 12, 19, 13]
 solution : [0, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [20, 26, 5, 12, 19, 13]
 solution : [0]


Before reduction : 
 pending  : [20, 26, 5, 12, 19, 13]
 solution : [0]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 65536), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 98304), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 196608), (13, 32768), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 13]
 solution : [0, 19]


Before reduction : 
 pending  : [20, 26, 5, 12, 13]
 solution : [0, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 196608), (13, 32768), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 131072), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 196608), (13, 32768), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 26, 5, 12, 13]
 solution : [0, 19]


Solution : [0, 19] has cost 13.


Before backtrack at level 9
 pending : [20, 26, 5, 12, 13]
 solution : [0, 19]

After backtrack at level 9
 pending : [20, 26, 5, 12, 13, 19]
 solution : [0]


Before backtrack at level 8
 pending : [20, 26, 5, 12, 13, 19]
 solution : [0]

After backtrack at level 8
 pending : [20, 26, 5, 12, 13, 19, 18]
 solution : [0]


Before backtrack at level 7
 pending : [20, 26, 5, 12, 13, 19, 18]
 solution : [0]

After backtrack at level 7
 pending : [20, 26, 5, 12, 13, 19, 18, 17]
 solution : [0]


Before backtrack at level 6
 pending : [20, 26, 5, 12, 13, 19, 18, 17]
 solution : [0]

After backtrack at level 6
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10]
 solution : [0]


Before backtrack at level 5
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10]
 solution : [0]

After backtrack at level 5
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0]


Before backtrack at level 4
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11]
 solution : [0]

After backtrack at level 4
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0]


Before backtrack at level 3
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15]
 solution : [0]

After backtrack at level 3
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0]


Before backtrack at level 2
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16]
 solution : [0]

After backtrack at level 2
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16, 21]
 solution : [0]


Before backtrack at level 1
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16, 21]
 solution : [0]

After backtrack at level 1
 pending : [20, 26, 5, 12, 13, 19, 18, 17, 10, 11, 15, 16, 21, 4]
 solution : [0]


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=3]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: upper bound: 10

[MIN NOTE]: maximum branch and bound depth: 9

[MIN NOTE]: number of definitions: 2

invariant [def_didNotVote] forall N. didNotVote(N) = (forall V. ~vote(N,V)) # definition, qcost: 4

invariant [def_chosenAt] forall V,Q. chosenAt(Q,V) = (forall N. member(N,Q) -> vote(N,V)) # definition, qcost: 6

[MIN NOTE]: number of equality relations: 0

[MIN NOTE]: Solution 0 : [0, 21]

[MIN NOTE]: solution length: 2

invariant [invar_0] forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_21] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)) # qcost: 4

[MIN NOTE]: number of total invariants: 4

[MIN NOTE]: total qCost: 20




[QRM NOTE]: Time elapsed since start: 3.061 seconds

[QRM NOTE]: Time elapsed since last: 0.156 seconds

[QRM NOTE]: Peak memory: 2452081 bytes


*****************************************************************************************************************

	[Reachability Convergence Check]: [ivybench/sym_quorum/ivy/toy_consensus.ivy: node=3,value=3]

*****************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy -s node=4,value=3 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: node=4,value=3]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 0.143 seconds

[QRM NOTE]: Time elapsed since last: 0.143 seconds

[QRM NOTE]: Peak memory: 242851 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 256


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=4,value=3]

===========================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: didNotVote('node',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: decision('value',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node2,value2)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node1_node3,value2)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value2)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'didNotVote(node3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)']

0000000000000000000001001010010
0000000000000000000001001010100
0000000000000000000001001100010
0000000000000000000001001100100
0000000000000000000001010001010
0000000000000000000001010001100
0000000000000000000001010010001
0000000000000000000001010010100
0000000000000000000001010100001
0000000000000000000001010100010
0000000000000000000001010100100
0000000000000000000001100001010
0000000000000000000001100001100
0000000000000000000001100010001
0000000000000000000001100010010
0000000000000000000001100010100
0000000000000000000001100100001
0000000000000000000001100100010
0000000000000000000010001001010
0000000000000000000010001001100
0000000000000000000010001010001
0000000000000000000010001010100
0000000000000000000010001100001
0000000000000000000010001100010
0000000000000000000010001100100
0000000000000000000010010001001
0000000000000000000010010001100
0000000000000000000010010100001
0000000000000000000010010100100
0000000000000000000010100001001
0000000000000000000010100001010
0000000000000000000010100001100
0000000000000000000010100010001
0000000000000000000010100010100
0000000000000000000010100100001
0000000000000000000010100100010
0000000000000000000100001001010
0000000000000000000100001001100
0000000000000000000100001010001
0000000000000000000100001010010
0000000000000000000100001010100
0000000000000000000100001100001
0000000000000000000100001100010
0000000000000000000100010001001
0000000000000000000100010001010
0000000000000000000100010001100
0000000000000000000100010010001
0000000000000000000100010010100
0000000000000000000100010100001
0000000000000000000100010100010
0000000000000000000100100001001
0000000000000000000100100001010
0000000000000000000100100010001
0000000000000000000100100010010
0000000000000000001001001010000
0000000000000000001001001100000
0000000000000000001001010001000
0000000000000000001001010010000
0000000000000000001001010100000
0000000000000000001001100001000
0000000000000000001001100010000
0000000000000000001001100100000
0000000000000000001010001001000
0000000000000000001010001010000
0000000000000000001010001100000
0000000000000000001010010001000
0000000000000000001010010100000
0000000000000000001010100001000
0000000000000000001010100010000
0000000000000000001010100100000
0000000000000000001100001001000
0000000000000000001100001010000
0000000000000000001100001100000
0000000000000000001100010001000
0000000000000000001100010010000
0000000000000000001100010100000
0000000000000000001100100001000
0000000000000000001100100010000
0000000000000000010001001000010
0000000000000000010001001000100
0000000000000000010001010000001
0000000000000000010001010000010
0000000000000000010001010000100
0000000000000000010001100000001
0000000000000000010001100000010
0000000000000000010001100000100
0000000000000000010010001000001
0000000000000000010010001000010
0000000000000000010010001000100
0000000000000000010010010000001
0000000000000000010010010000100
0000000000000000010010100000001
0000000000000000010010100000010
0000000000000000010010100000100
0000000000000000010100001000001
0000000000000000010100001000010
0000000000000000010100001000100
0000000000000000010100010000001
0000000000000000010100010000010
0000000000000000010100010000100
0000000000000000010100100000001
0000000000000000010100100000010
0000000000000000011001001000000
0000000000000000011001010000000
0000000000000000011001100000000
0000000000000000011010001000000
0000000000000000011010010000000
0000000000000000011010100000000
0000000000000000011100001000000
0000000000000000011100010000000
0000000000000000011100100000000
0000000000000000100001000001010
0000000000000000100001000001100
0000000000000000100001000010001
0000000000000000100001000010010
0000000000000000100001000010100
0000000000000000100001000100001
0000000000000000100001000100010
0000000000000000100001000100100
0000000000000000100010000001001
0000000000000000100010000001010
0000000000000000100010000001100
0000000000000000100010000010001
0000000000000000100010000010100
0000000000000000100010000100001
0000000000000000100010000100010
0000000000000000100010000100100
0000000000000000100100000001001
0000000000000000100100000001010
0000000000000000100100000001100
0000000000000000100100000010001
0000000000000000100100000010010
0000000000000000100100000010100
0000000000000000100100000100001
0000000000000000100100000100010
0000000000000000101001000001000
0000000000000000101001000010000
0000000000000000101001000100000
0000000000000000101010000001000
0000000000000000101010000010000
0000000000000000101010000100000
0000000000000000101100000001000
0000000000000000101100000010000
0000000000000000101100000100000
0000000000000000110001000000001
0000000000000000110001000000010
0000000000000000110001000000100
0000000000000000110010000000001
0000000000000000110010000000010
0000000000000000110010000000100
0000000000000000110100000000001
0000000000000000110100000000010
0000000000000000110100000000100
0000000000000000111001000000000
0000000000000000111010000000000
0000000000000000111100000000000
0000000000000001000000001001010
0000000000000001000000001001100
0000000000000001000000001010001
0000000000000001000000001010010
0000000000000001000000001010100
0000000000000001000000001100001
0000000000000001000000001100010
0000000000000001000000001100100
0000000000000001000000010001001
0000000000000001000000010001010
0000000000000001000000010001100
0000000000000001000000010010001
0000000000000001000000010010100
0000000000000001000000010100001
0000000000000001000000010100010
0000000000000001000000010100100
0000000000000001000000100001001
0000000000000001000000100001010
0000000000000001000000100001100
0000000000000001000000100010001
0000000000000001000000100010010
0000000000000001000000100010100
0000000000000001000000100100001
0000000000000001000000100100010
0000000000000001001000001001000
0000000000000001001000001010000
0000000000000001001000001100000
0000000000000001001000010001000
0000000000000001001000010010000
0000000000000001001000010100000
0000000000000001001000100001000
0000000000000001001000100010000
0000000000000001001000100100000
0000000000000001010000001000001
0000000000000001010000001000010
0000000000000001010000001000100
0000000000000001010000010000001
0000000000000001010000010000010
0000000000000001010000010000100
0000000000000001010000100000001
0000000000000001010000100000010
0000000000000001010000100000100
0000000000000001011000001000000
0000000000000001011000010000000
0000000000000001011000100000000
0000000000000001100000000001001
0000000000000001100000000001010
0000000000000001100000000001100
0000000000000001100000000010001
0000000000000001100000000010010
0000000000000001100000000010100
0000000000000001100000000100001
0000000000000001100000000100010
0000000000000001100000000100100
0000000000000001101000000001000
0000000000000001101000000010000
0000000000000001101000000100000
0000000000000001110000000000001
0000000000000001110000000000010
0000000000000001110000000000100
0000000000000001111000000000000
00000000000100-0000010001001001
00000000000100-0000100001001001
00000000000100-1000000001001001
0000000000100-00000001010010010
0000000000100-00000100010010010
0000000000100-01000000010010010
000000000100-000000001100100100
000000000100-000000010100100100
000000000100-001000000100100100
00000000100000-0000001010001001
00000000100000-0000001100001001
00000000100000-0100001000001001
0000000100000-00000010001010010
0000000100000-00000010100010010
0000000100000-00100010000010010
000000100000-000000100001100100
000000100000-000000100010100100
000000100000-000100100000100100
00000100000000-0000001001010001
00000100000000-0000001001100001
00000100000000-0010001001000001
0000100000000-00000010010001010
0000100000000-00000010010100010
0000100000000-00010010010000010
000100000000-000000100100001100
000100000000-000000100100010100
000100000000-000010100100000100
00100000000000-0000001001001010
00100000000000-0000001001001100
00100000000000-0001001001001000
00100100100100-0000001001001001
0100000000000-00000010010010001
0100000000000-00000010010010100
0100000000000-00001010010010000
0100100100100-00000010010010010
100000000000-000000100100100001
100000000000-000000100100100010
100000000000-000001100100100000
100100100100-000000100100100100

[QRM NOTE]: Time elapsed since start: 8.414 seconds

[QRM NOTE]: Time elapsed since last: 8.271 seconds

[QRM NOTE]: Peak memory: 1625923 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: node=4,value=3]

=====================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 12.170 seconds

[QRM NOTE]: Time elapsed since last: 3.756 seconds

[QRM NOTE]: Peak memory: 4529709 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -b -e -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=========================================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: node=3,value=4]

=========================================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 0.150 seconds

[QRM NOTE]: Time elapsed since last: 0.150 seconds

[QRM NOTE]: Peak memory: 248622 bytes


===================================

	Forward reachability

===================================

building bdd for atoms

building bdd for initial action

building bdd for axioms

building bdd for actions

building bdd for action: cast_vote(fml:n,fml:v)

building bdd for action: decide(fml:v,fml:q)

building bdd for abstractions

start symbolic image computation

start extracting cubes

[FW NOTE]: number of reachable cubes: 125


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=4]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: member('node', 'quorum')
predicate: didNotVote('node',)
predicate: vote('node', 'value')
predicate: decision('value',)
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node1,value3)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node0_node2,value3)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'chosenAt(quorum__node1_node2,value3)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'decision(value3)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)']

0000000000000000000000100100100
0000000000000000000000100101000
0000000000000000000000101000010
0000000000000000000000101001000
0000000000000000000000110000010
0000000000000000000000110000100
0000000000000000000001000010100
0000000000000000000001000011000
0000000000000000000001001000001
0000000000000000000001001001000
0000000000000000000001010000001
0000000000000000000001010000100
0000000000000000000010000010010
0000000000000000000010000011000
0000000000000000000010000100001
0000000000000000000010000101000
0000000000000000000010010000001
0000000000000000000010010000010
0000000000000000000100000010010
0000000000000000000100000010100
0000000000000000000100000100001
0000000000000000000100000100100
0000000000000000000100001000001
0000000000000000000100001000010
0000000000000000001000100100000
0000000000000000001000101000000
0000000000000000001000110000000
0000000000000000001001000010000
0000000000000000001001001000000
0000000000000000001001010000000
0000000000000000001010000010000
0000000000000000001010000100000
0000000000000000001010010000000
0000000000000000001100000010000
0000000000000000001100000100000
0000000000000000001100001000000
0000000000000000010000100000010
0000000000000000010000100000100
0000000000000000010000100001000
0000000000000000010001000000001
0000000000000000010001000000100
0000000000000000010001000001000
0000000000000000010010000000001
0000000000000000010010000000010
0000000000000000010010000001000
0000000000000000010100000000001
0000000000000000010100000000010
0000000000000000010100000000100
0000000000000000011000100000000
0000000000000000011001000000000
0000000000000000011010000000000
0000000000000000011100000000000
0000000000000000100000000010010
0000000000000000100000000010100
0000000000000000100000000011000
0000000000000000100000000100001
0000000000000000100000000100100
0000000000000000100000000101000
0000000000000000100000001000001
0000000000000000100000001000010
0000000000000000100000001001000
0000000000000000100000010000001
0000000000000000100000010000010
0000000000000000100000010000100
0000000000000000101000000010000
0000000000000000101000000100000
0000000000000000101000001000000
0000000000000000101000010000000
0000000000000000110000000000001
0000000000000000110000000000010
0000000000000000110000000000100
0000000000000000110000000001000
0000000000000000111000000000000
000000000001000-000001000010001
000000000001000-000010000010001
000000000001000-000100000010001
000000000001000-100000000010001
00000000001000-0000000100100010
00000000001000-0000010000100010
00000000001000-0000100000100010
00000000001000-0100000000100010
0000000001000-00000000101000100
0000000001000-00000001001000100
0000000001000-00000100001000100
0000000001000-00100000001000100
000000001000-000000000110001000
000000001000-000000001010001000
000000001000-000000010010001000
000000001000-000100000010001000
000000010000000-000000100100001
000000010000000-000000101000001
000000010000000-000000110000001
000000010000000-010000100000001
00000010000000-0000001000010010
00000010000000-0000001001000010
00000010000000-0000001010000010
00000010000000-0010001000000010
0000010000000-00000010000010100
0000010000000-00000010000100100
0000010000000-00000010010000100
0000010000000-00010010000000100
000010000000-000000100000011000
000010000000-000000100000101000
000010000000-000000100001001000
000010000000-000010100000001000
000100000000000-000000100010010
000100000000000-000000100010100
000100000000000-000000100011000
000100000000000-001000100010000
000100010001000-000000100010001
00100000000000-0000001000100001
00100000000000-0000001000100100
00100000000000-0000001000101000
00100000000000-0001001000100000
00100010001000-0000001000100010
0100000000000-00000010001000001
0100000000000-00000010001000010
0100000000000-00000010001001000
0100000000000-00001010001000000
0100010001000-00000010001000100
100000000000-000000100010000001
100000000000-000000100010000010
100000000000-000000100010000100
100000000000-000001100010000000
100010001000-000000100010001000

[QRM NOTE]: Time elapsed since start: 1.990 seconds

[QRM NOTE]: Time elapsed since last: 1.840 seconds

[QRM NOTE]: Peak memory: 1547598 bytes


=====================================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: node=3,value=4]

=====================================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 3.888 seconds

[QRM NOTE]: Time elapsed since last: 1.898 seconds

[QRM NOTE]: Peak memory: 2417380 bytes


*********************************************************************

	[IVY_CHECK]: Ivy Check for Reachability Invariant

*********************************************************************


=====================================================================================================

	[IVY_CHECK]: Ivy check on [ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy]

=====================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS


*************************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy

*************************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 69.648 seconds

[QRM NOTE]: Time elapsed since last: 69.648 seconds

