#lang ivy1.7

type node

relation internal(N:node)

relation sent(N0:node, N1:node)
relation allowed_in(N:node)

after init  {
	sent(S,D) := false;
	allowed_in(N) := false;
}

action send_from_internal(src: node, dst: node) = {
  require internal(src);
  require ~internal(dst);
  
  sent(src,dst) := true;
  allowed_in(dst) := true;
}

action send_to_internal(src: node, dst: node) = {
  require ~internal(src);
  require internal(dst);
  require allowed_in(src);
  
  sent(src,dst) := true;
}

export send_from_internal
export send_to_internal

#invariant [safety] sent(S,D) & internal(D) -> exists I. internal(I) & sent(I,S)

##invariant [manual_1] allowed_in(D) -> exists I. internal(I) & sent(I,D)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2
invariant [invar_8] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 5
invariant [invar_1] forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0) # qcost: 3
invariant [invar_11] forall NODE0,NODE1. internal(NODE1) | internal(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1 # qcost: 6
invariant [invar_14] forall NODE0,NODE1. allowed_in(NODE1) | allowed_in(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1 # qcost: 6
