
************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.ivy

************************************************************************


************************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1

************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=2,value=1 -f 1 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 2

[FW NOTE]: number of branching actions: 3

ivy_to_cpp target=qrm toy_consensus_epr.node_2_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_2_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_2_value_1.finite.cpp toy_consensus_epr.node_2_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_2_value_1.finite.o toy_consensus_epr.node_2_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.253 seconds

[QRM NOTE]: Time elapsed since last: 7.253 seconds

[QRM NOTE]: Peak memory: 1179826 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        5

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 1


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

===============================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0']
sort: quorum=['quorum__node0_node1']
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: voted('node',)
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'voted(node0)', 'voted(node1)']
representative states : 3, 23, 191, 255


=== State Orbit 0 =====================
size : 1
repr state: 000000
lex min decimal: 3
states:
000000




=== State Orbit 1 =====================
size : 2
repr state: 001010
lex min decimal: 23
states:
000101
001010




=== State Orbit 2 =====================
size : 1
repr state: 101111
lex min decimal: 191
states:
101111




=== State Orbit 3 =====================
size : 1
repr state: 111111
lex min decimal: 255
states:
111111



[QRM NOTE]: Time elapsed since start: 7.336 seconds

[QRM NOTE]: Time elapsed since last: 0.083 seconds

[QRM NOTE]: Peak memory: 1207314 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.339 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 156959 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : --1-0-
0     : ['vote(node0,value0)', '~voted(node0)']
1     : ---1-0
1     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-0--
2     : ['decided(value0)', '~vote(node1,value0)']
3     : -10---
3     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01----
4     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : -1--0-
5     : ['decided(value0)', '~voted(node0)']
6     : -1---0
6     : ['decided(value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 2
num_suborbits: 1
7 (*) : 1-0---
7     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
8     : 1--0--
8     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 2
num_suborbits: 1
9 (*) : 1---0-
9     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
10     : 1----0
10     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --0-1-
11     : ['voted(node0)', '~vote(node0,value0)']
12     : ---0-1
12     : ['voted(node1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : 0--11-
13     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)']
14     : 0-1--1
14     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
15 (*) : 0-11--
15     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
16 (*) : 0---11
16     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 10

[PRIME NOTE]: number of primes: 17

[QRM NOTE]: Time elapsed since start: 7.352 seconds

[QRM NOTE]: Time elapsed since last: 0.012 seconds

[QRM NOTE]: Peak memory: 1237946 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

====================================================================================================

definition primes: {8, 4}


New level: 0
 pending : [0, 1, 2, 3, 5, 6, 7, 9]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 5, 6, 7, 9]
 solution : []

Essensial at level 0 : {0, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0)]

Covered at level 0 : {9, 5, 7}

After reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]


Before reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0)]

After removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]

[QRM NOTE]: Time elapsed since start: 7.359 seconds

[QRM NOTE]: Time elapsed since last: 0.008 seconds

[QRM NOTE]: Peak memory: 192137 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : --1-0-
0     : ['vote(node0,value0)', '~voted(node0)']
1     : ---1-0
1     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', '~voted(node0)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', '~voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --0-1-
11     : ['voted(node0)', '~vote(node0,value0)']
12     : ---0-1
12     : ['voted(node1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$vote$1$0]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0', 'value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$vote': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0)


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-0--
2     : ['decided(value0)', '~vote(node1,value0)']
3     : -10---
3     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

part_sig: ('node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'vote': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1')): node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~decided(VALUE0)


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01----
4     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$chosenAt$1$0, value$0$decided$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1',))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$chosenAt$1$0}

part_sig: ('quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1',)), EnumeratedSort('value', ('value0',))), 'decided': (EnumeratedSort('value', ('value0',)),)}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$chosenAt$1$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0]}

	identical_single_classes: {'quorum$1$chosenAt$0': quorum$1$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : -1--0-
5     : ['decided(value0)', '~voted(node0)']
6     : -1---0
6     : ['decided(value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

part_sig: ('node$1$voted$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'voted': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1')): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1')): node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. voted(NODE0) | ~decided(VALUE0)


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : --1-0-
0     : ['vote(node0,value0)', '~voted(node0)']
1     : ---1-0
1     : ['vote(node1,value0)', '~voted(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : --0-1-
11     : ['voted(node0)', '~vote(node0,value0)']
12     : ---0-1
12     : ['voted(node1)', '~vote(node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0)
qcost : 4




=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-0--
2     : ['decided(value0)', '~vote(node1,value0)']
3     : -10---
3     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~decided(VALUE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
4 (*) : 01----
4     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
5 (*) : -1--0-
5     : ['decided(value0)', '~voted(node0)']
6     : -1---0
6     : ['decided(value0)', '~voted(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. voted(NODE0) | ~decided(VALUE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 7.434 seconds

[QRM NOTE]: Time elapsed since last: 0.075 seconds

[QRM NOTE]: Peak memory: 1857337 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

=================================================================================================


New level: 1
 pending : [1, 2, 3]
 solution : [0, 6]


Before reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3]
 solution : [0, 6]


Solution : [0, 6] has cost 8.


Decide in level 1 among pending : [1, 2, 3]

Coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [1, 3]
 solution : [0, 6, 2]


New level: 2
 pending : [1, 3]
 solution : [0, 6, 2]


Before reduction : 
 pending  : [1, 3]
 solution : [0, 6, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, 64), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : {1, 3}

After reduction : 
 pending  : []
 solution : [0, 6, 2]


Before reduction : 
 pending  : []
 solution : [0, 6, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 2]


Solution : [0, 6, 2] has cost 12.


Before backtrack at level 2
 pending : []
 solution : [0, 6, 2]

After backtrack at level 2
 pending : [1, 3]
 solution : [0, 6, 2]


Invert decision for 2 at level 1


New level: 2
 pending : [1, 3]
 solution : [0, 6]


Before reduction : 
 pending  : [1, 3]
 solution : [0, 6]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, 16), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [1, 3]
 solution : [0, 6]


Solution : [0, 6] has cost 8.


Decide in level 2 among pending : [1, 3]

Coverage : [(0, -1), (1, 16), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Decide 1 with phase True at level 2

After decision at level 2
 pending : [3]
 solution : [0, 6, 1]


New level: 3
 pending : [3]
 solution : [0, 6, 1]


Before reduction : 
 pending  : [3]
 solution : [0, 6, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 16), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : {3}

After reduction : 
 pending  : []
 solution : [0, 6, 1]


Before reduction : 
 pending  : []
 solution : [0, 6, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 1]


Solution : [0, 6, 1] has cost 12.


Before backtrack at level 3
 pending : []
 solution : [0, 6, 1]

After backtrack at level 3
 pending : [3]
 solution : [0, 6, 1]


Invert decision for 1 at level 2


New level: 3
 pending : [3]
 solution : [0, 6]


Before reduction : 
 pending  : [3]
 solution : [0, 6]

Essensial at level 3 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 6, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 3]


Solution : [0, 6, 3] has cost 12.


Before backtrack at level 3
 pending : []
 solution : [0, 6, 3]

After backtrack at level 3
 pending : [3]
 solution : [0, 6]


Before backtrack at level 2
 pending : [3]
 solution : [0, 6]

After backtrack at level 2
 pending : [3, 1]
 solution : [0, 6]


Before backtrack at level 1
 pending : [3, 1]
 solution : [0, 6]

After backtrack at level 1
 pending : [3, 1, 2]
 solution : [0, 6]


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 3

[MIN NOTE]: total qcost: 12

[MIN NOTE]: maximum branch and bound depth: 3

Definitions (length=1)

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 6, 2] (length = 3)

invariant [invar_0] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_6] forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_2] forall VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0) # qcost: 4




Solution 1 : [0, 6, 1] (length = 3)

invariant [invar_0] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_6] forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_1] forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~decided(VALUE0) # qcost: 4




Solution 2 : [0, 6, 3] (length = 3)

invariant [invar_0] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_6] forall VALUE0,NODE0. vote(NODE0,VALUE0) | ~voted(NODE0) # qcost: 4

invariant [invar_3] forall VALUE0,NODE0. voted(NODE0) | ~decided(VALUE0) # qcost: 4




[QRM NOTE]: Time elapsed since start: 7.528 seconds

[QRM NOTE]: Time elapsed since last: 0.094 seconds

[QRM NOTE]: Peak memory: 1848129 bytes


====================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1]

====================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 46: invar_6
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 47: invar_2

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 46: invar_6 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 47: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 46: invar_6 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 47: invar_2 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 46: invar_6 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 47: invar_2 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy: line 30: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 46: invar_6
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 47: invar_1

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 46: invar_6 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 47: invar_1 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 46: invar_6 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 47: invar_1 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 46: invar_6 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 47: invar_1 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy: line 30: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 46: invar_6
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 47: invar_3

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 46: invar_6 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 47: invar_3 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 46: invar_6 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 47: invar_3 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 46: invar_6 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 47: invar_3 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy: line 30: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 12.938 seconds

[QRM NOTE]: Time elapsed since last: 5.410 seconds

[QRM NOTE]: Peak memory: 850335 bytes


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_1.finite.cpp toy_consensus_epr.node_3_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_1.finite.o toy_consensus_epr.node_3_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.856 seconds

[QRM NOTE]: Time elapsed since last: 6.856 seconds

[QRM NOTE]: Peak memory: 1185054 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        12

[FW NOTE]: number of dfs representative states:     6

[FW NOTE]: number of dfs non-representative states: 6


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decided('value',)
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', 'decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 79787, 491435, 524203, 112555


=== State Orbit 0 =====================
size : 1
repr state: 0000000000
lex min decimal: 427
states:
0000000000




=== State Orbit 1 =====================
size : 3
repr state: 0000100100
lex min decimal: 5035
states:
0000010010
0000001001
0000100100




=== State Orbit 2 =====================
size : 3
repr state: 1000110110
lex min decimal: 79787
states:
0100101101
1000110110
0010011011




=== State Orbit 3 =====================
size : 1
repr state: 1110111111
lex min decimal: 491435
states:
1110111111




=== State Orbit 4 =====================
size : 1
repr state: 1111111111
lex min decimal: 524203
states:
1111111111




=== State Orbit 5 =====================
size : 3
repr state: 1001110110
lex min decimal: 112555
states:
1001110110
0011011011
0101101101



[QRM NOTE]: Time elapsed since start: 6.943 seconds

[QRM NOTE]: Time elapsed since last: 0.087 seconds

[QRM NOTE]: Peak memory: 1217138 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

====================================================================================================================================

Representatitive states in reachability not in Rmin

{112555}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 7.023 seconds

[QRM NOTE]: Time elapsed since last: 0.080 seconds

[QRM NOTE]: Peak memory: 209249 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.0.ivy -s node=2,value=2 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=2]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 2

[FW NOTE]: symmetric group order: 4

[FW NOTE]: number of branching actions: 6

ivy_to_cpp target=qrm toy_consensus_epr.node_2_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_2_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_2_value_2.finite.cpp toy_consensus_epr.node_2_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_2_value_2.finite.o toy_consensus_epr.node_2_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.869 seconds

[QRM NOTE]: Time elapsed since last: 6.869 seconds

[QRM NOTE]: Peak memory: 1181667 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        11

[FW NOTE]: number of dfs representative states:     5

[FW NOTE]: number of dfs non-representative states: 6


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=2]

===============================================================================================================

sort: node=['node0', 'node1']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1']
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node1)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'voted(node0)', 'voted(node1)']
representative states : 3, 23, 1119, 1375, 111


=== State Orbit 0 =====================
size : 1
repr state: 0000000000
lex min decimal: 3
states:
0000000000




=== State Orbit 1 =====================
size : 4
repr state: 0000100010
lex min decimal: 23
states:
0000000101
0000001001
0000010010
0000100010




=== State Orbit 2 =====================
size : 2
repr state: 1000101011
lex min decimal: 1119
states:
1000101011
0100010111




=== State Orbit 3 =====================
size : 2
repr state: 1010101011
lex min decimal: 1375
states:
0101010111
1010101011




=== State Orbit 4 =====================
size : 2
repr state: 0000100111
lex min decimal: 111
states:
0000100111
0000011011



[QRM NOTE]: Time elapsed since start: 6.944 seconds

[QRM NOTE]: Time elapsed since last: 0.075 seconds

[QRM NOTE]: Peak memory: 1211636 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=2]

====================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 4095, binary: 1111111111

Found a representative state in Rmin not in reachability: decimal: 3583, binary: 1101111111

Found a representative state in Rmin not in reachability: decimal: 3327, binary: 1100111111

Found a representative state in Rmin not in reachability: decimal: 55, binary: 0000001101

Representatitive states in reachability not in Rmin

{1375, 23, 1119, 111}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.976 seconds

[QRM NOTE]: Time elapsed since last: 0.031 seconds

[QRM NOTE]: Peak memory: 177847 bytes

next size: node=3,value=2


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy -s node=3,value=1 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

====================================================================================================================================

Representatitive states in reachability not in Rmin

{112555}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.099 seconds

[QRM NOTE]: Time elapsed since last: 0.099 seconds

[QRM NOTE]: Peak memory: 46719 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.1.ivy -s node=2,value=2 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=2]

====================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 4095, binary: 1111111111

Found a representative state in Rmin not in reachability: decimal: 3583, binary: 1101111111

Found a representative state in Rmin not in reachability: decimal: 3327, binary: 1100111111

Found a representative state in Rmin not in reachability: decimal: 55, binary: 0000001101

Representatitive states in reachability not in Rmin

{1375, 23, 1119, 111}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.059 seconds

[QRM NOTE]: Time elapsed since last: 0.059 seconds

[QRM NOTE]: Peak memory: 22093 bytes

next size: node=3,value=2


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=1

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy -s node=3,value=1 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

====================================================================================================================================

Representatitive states in reachability not in Rmin

{112555}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.099 seconds

[QRM NOTE]: Time elapsed since last: 0.099 seconds

[QRM NOTE]: Peak memory: 46655 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_2_value_1.2.ivy -s node=2,value=2 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=2,value=2]

====================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 4095, binary: 1111111111

Found a representative state in Rmin not in reachability: decimal: 3583, binary: 1101111111

Found a representative state in Rmin not in reachability: decimal: 3327, binary: 1100111111

Found a representative state in Rmin not in reachability: decimal: 55, binary: 0000001101

Representatitive states in reachability not in Rmin

{1375, 23, 1119, 111}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.060 seconds

[QRM NOTE]: Time elapsed since last: 0.060 seconds

[QRM NOTE]: Peak memory: 21997 bytes

next size: node=3,value=2


************************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2

************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=3,value=2 -f 1 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 12

[FW NOTE]: number of branching actions: 12

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_2.finite.cpp toy_consensus_epr.node_3_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_2.finite.o toy_consensus_epr.node_3_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.949 seconds

[QRM NOTE]: Time elapsed since last: 6.949 seconds

[QRM NOTE]: Peak memory: 1186340 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        41

[FW NOTE]: number of dfs representative states:     9

[FW NOTE]: number of dfs non-representative states: 32


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: member('node', 'quorum')
predicate: voted('node',)
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 1071019, 22110123, 22372267, 1204139, 1466283, 1333163, 26539


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000000
lex min decimal: 427
states:
00000000000000000




=== State Orbit 1 =====================
size : 6
repr state: 00000000100000100
lex min decimal: 5035
states:
00000000100000100
00000000010000100
00000000000100010
00000000000010001
00000000001000010
00000000000001001




=== State Orbit 2 =====================
size : 6
repr state: 10000000101000110
lex min decimal: 1071019
states:
00010000010001101
00000100000101011
10000000101000110
00001000001010011
00100000100010101
01000000010100110




=== State Orbit 3 =====================
size : 2
repr state: 10101000101010111
lex min decimal: 22110123
states:
01010100010101111
10101000101010111




=== State Orbit 4 =====================
size : 2
repr state: 10101010101010111
lex min decimal: 22372267
states:
10101010101010111
01010101010101111




=== State Orbit 5 =====================
size : 6
repr state: 10000000101001111
lex min decimal: 1204139
states:
01000000010110111
00000100100101111
00001000011010111
00100000100110111
00010000011001111
10000000101001111




=== State Orbit 6 =====================
size : 6
repr state: 10000010101001111
lex min decimal: 1466283
states:
00100010100110111
10000010101001111
00001010011010111
01000001010110111
00000101100101111
00010001011001111




=== State Orbit 7 =====================
size : 6
repr state: 10000010101000110
lex min decimal: 1333163
states:
00010001010001101
00100010100010101
01000001010100110
10000010101000110
00000101000101011
00001010001010011




=== State Orbit 8 =====================
size : 6
repr state: 00000000100100110
lex min decimal: 26539
states:
00000000010010101
00000000100001101
00000000011000110
00000000000110011
00000000001001011
00000000100100110



[QRM NOTE]: Time elapsed since start: 7.061 seconds

[QRM NOTE]: Time elapsed since last: 0.112 seconds

[QRM NOTE]: Peak memory: 1230558 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.062 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 187407 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 12
num_suborbits: 1
0 (*) : ----1-----------0
0     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node2)']
1     : -----1----------0
1     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node2)']
2     : ----1----------0-
2     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node1)']
3     : -----1---------0-
3     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node1)']
4     : --1-------------0
4     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node2)']
5     : ---1------------0
5     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node2)']
6     : --1-----------0--
6     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node0)']
7     : ---1----------0--
7     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node0)']
8     : 1--------------0-
8     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
9     : -1-------------0-
9     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node1)']
10     : 1-------------0--
10     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
11     : -1------------0--
11     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : ----1--1---------
18     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
19     : -----11----------
19     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
22     : 1------1---------
22     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
23     : -1----1----------
23     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
24 (*) : ------11---------
24     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
25 (*) : -----1-----0-----
25     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
26     : ----1-----0------
26     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
27     : -----1-------0---
27     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
28     : ----1-------0----
28     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
29     : ---1-----0-------
29     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
30     : --1-----0--------
30     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
31     : ---1---------0---
31     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
32     : --1---------0----
32     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
33     : -1-------0-------
33     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
34     : 1-------0--------
34     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
35     : -1---------0-----
35     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
36     : 1---------0------
36     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
37 (*) : ---1----1--------
37     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
38     : --1------1-------
38     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
39     : -1------1--------
39     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
40     : 1--------1-------
40     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
41     : -----1----1------
41     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
42     : ----1------1-----
42     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
43     : -1--------1------
43     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
44     : 1----------1-----
44     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
45     : -----1------1----
45     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
46     : ----1--------1---
46     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
47     : ---1--------1----
47     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
48     : --1----------1---
48     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
49 (*) : ------------11---
49     : ['vote(node2,value0)', 'vote(node2,value1)']
50     : ----------11-----
50     : ['vote(node1,value0)', 'vote(node1,value1)']
51     : --------11-------
51     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
52 (*) : -1--1------------
52     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
53     : 1----1-----------
53     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
54     : ---11------------
54     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
55     : --1--1-----------
55     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
56     : -11--------------
56     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
57     : 1--1-------------
57     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
58 (*) : ----11-----------
58     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
59     : --11-------------
59     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
60     : 11---------------
60     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
61 (*) : 0-----1------1---
61     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
62     : -0-----1----1----
62     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
63     : --0---1----1-----
63     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
64     : ---0---1--1------
64     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
65     : ----0-1--1-------
65     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
66     : -----0-11--------
66     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
67 (*) : ------1------10--
67     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
68     : -------1----1-0--
68     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
69     : ------1----1--0--
69     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
70     : -------1--1---0--
70     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
71     : ------1------1-0-
71     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
72     : -------1----1--0-
72     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
73     : ------1--1-----0-
73     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
74     : -------11------0-
74     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
75     : ------1----1----0
75     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
76     : -------1--1-----0
76     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
77     : ------1--1------0
77     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
78     : -------11-------0
78     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 12
num_suborbits: 1
79 (*) : ------1---0--1---
79     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
80     : -------1---01----
80     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
81     : ------1----10----
81     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
82     : -------1--1--0---
82     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
83     : ------1-0----1---
83     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
84     : -------1-0--1----
84     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
85     : ------1--1--0----
85     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
86     : -------11----0---
86     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
87     : ------1-0--1-----
87     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
88     : -------1-01------
88     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
89     : ------1--10------
89     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
90     : -------11--0-----
90     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
91 (*) : ------1----1-1---
91     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
92     : -------1--1-1----
92     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
93     : ------1--1---1---
93     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
94     : -------11---1----
94     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
95     : ------1--1-1-----
95     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
96     : -------11-1------
96     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 12
num_suborbits: 1
97 (*) : -1-0---------1---
97     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
98     : 1-0---------1----
98     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
99     : -0-1-------1-----
99     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
100     : 0-1-------1------
100     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
101     : -1---0-------1---
101     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
102     : 1---0-------1----
102     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
103     : -0---1---1-------
103     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
104     : 0---1---1--------
104     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
105     : ---1-0-----1-----
105     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
106     : --1-0-----1------
106     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
107     : ---0-1---1-------
107     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
108     : --0-1---1--------
108     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
109 (*) : -----0-----1-1---
109     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
110     : ----0-----1-1----
110     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
111     : ---0-----1---1---
111     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
112     : --0-----1---1----
112     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
113     : -0-------1-1-----
113     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
114     : 0-------1-1------
114     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
115 (*) : -0-----1--------0
115     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
116     : 0-----1---------0
116     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
117     : ---0---1-------0-
117     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
118     : --0---1--------0-
118     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
119     : -----0-1------0--
119     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
120     : ----0-1-------0--
120     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
121 (*) : -------1------0-0
121     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
122     : ------1-------0-0
122     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
123     : -------1------00-
123     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
124     : ------1-------00-
124     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
125     : -------1-------00
125     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
126     : ------1--------00
126     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
127 (*) : -------1-0------0
127     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
128     : ------1-0-------0
128     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
129     : -------1-0-----0-
129     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
130     : ------1-0------0-
130     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
131     : -------1---0----0
131     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
132     : ------1---0-----0
132     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
133     : -------1---0--0--
133     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
134     : ------1---0---0--
134     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
135     : -------1-----0-0-
135     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
136     : ------1-----0--0-
136     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
137     : -------1-----00--
137     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
138     : ------1-----0-0--
138     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
139 (*) : -0-----1-----0---
139     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
140     : 0-----1-----0----
140     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
141     : ---0---1---0-----
141     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
142     : --0---1---0------
142     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
143     : -----0-1-0-------
143     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
144     : ----0-1-0--------
144     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
145 (*) : -------1---0-0---
145     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
146     : ------1---0-0----
146     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
147     : -------1-0---0---
147     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
148     : ------1-0---0----
148     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
149     : -------1-0-0-----
149     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
150     : ------1-0-0------
150     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
151 (*) : 0-1-1------------
151     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
152     : -0-1-1-----------
152     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
153     : 1-0-1------------
153     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
154     : -1-0-1-----------
154     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
155     : 1-1-0------------
155     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
156     : -1-1-0-----------
156     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
157 (*) : --------00----1--
157     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
158     : ----------00---1-
158     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
159     : ------------00--1
159     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 12
num_suborbits: 1
160 (*) : ---0-1--0-----1--
160     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
161     : --0-1----0----1--
161     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
162     : -0---1--0-----1--
162     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)']
163     : 0---1----0----1--
163     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)']
164     : ---1-0----0----1-
164     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
165     : --1-0------0---1-
165     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
166     : -0-1------0----1-
166     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)']
167     : 0-1--------0---1-
167     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)']
168     : -1---0------0---1
168     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
169     : 1---0--------0--1
169     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
170     : -1-0--------0---1
170     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
171     : 1-0----------0--1
171     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 12
num_suborbits: 1
172 (*) : --0-----1----0--1
172     : ['vote(node0,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
173     : ---0-----1--0---1
173     : ['vote(node0,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
174     : 0-------1--0---1-
174     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)']
175     : -0-------10----1-
175     : ['vote(node0,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)']
176     : ----0-----1--0--1
176     : ['vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
177     : -----0-----10---1
177     : ['vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
178     : 0--------01---1--
178     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)']
179     : -0------0--1--1--
179     : ['vote(node1,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)']
180     : ----0------01--1-
180     : ['vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
181     : -----0----0--1-1-
181     : ['vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
182     : --0------0--1-1--
182     : ['vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
183     : ---0----0----11--
183     : ['vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
184 (*) : 0-0---1-1--------
184     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
185     : -0-0---1-1-------
185     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
186     : 0---0-1---1------
186     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
187     : -0---0-1---1-----
187     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
188     : --0-0-1-----1----
188     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
189     : ---0-0-1-----1---
189     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 2
num_suborbits: 1
190 (*) : 0-0-0-1----------
190     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
191     : -0-0-0-1---------
191     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
192 (*) : --0------0---01-1
192     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
193     : ---0----0---0-1-1
193     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)']
194     : 0--------0-0--11-
194     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
195     : -0------0-0---11-
195     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node1,value0)']
196     : ----0------0-0-11
196     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
197     : -----0----0-0--11
197     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
198 (*) : ---0-0-1----0---1
198     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
199     : --0-0-1------0--1
199     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
200     : -0---0-1--0----1-
200     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
201     : 0---0-1----0---1-
201     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
202     : -0-0---10-----1--
202     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
203     : 0-0---1--0----1--
203     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
204 (*) : 0----0--1----1-1-
204     : ['vote(node0,value0)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)']
205     : -0--0----1--1--1-
205     : ['vote(node0,value1)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)']
206     : --0--0--1--1----1
206     : ['vote(node0,value0)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
207     : ---00----11-----1
207     : ['vote(node0,value1)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
208     : 0--0------1--11--
208     : ['vote(node1,value0)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
209     : -00--------11-1--
209     : ['vote(node1,value1)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
210 (*) : 0--00-----1---1-1
210     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
211     : -00--0-----1--1-1
211     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
212     : -00-0-------1-11-
212     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
213     : 0--0-0-------111-
213     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
214     : 0-0--0--1------11
214     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
215     : -0-00----1-----11
215     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 12
num_suborbits: 1
216 (*) : 0--0------1-0-1-1
216     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
217     : -00--------1-01-1
217     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
218     : -00-------0-1-11-
218     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
219     : 0--0-------0-111-
219     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
220     : 0----0--1---0--11
220     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
221     : -0--0----1---0-11
221     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
222     : -0--0---0---1-11-
222     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
223     : 0----0---0---111-
223     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
224     : --0--0--1-0----11
224     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
225     : ---00----1-0---11
225     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
226     : ---00---0-1---1-1
226     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
227     : --0--0---0-1--1-1
227     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
228 (*) : 0--00------0--111
228     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
229     : -00--0----0---111
229     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
230     : -00-0--------0111
230     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
231     : 0--0-0------0-111
231     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
232     : 0-0--0---0----111
232     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
233     : -0-00---0-----111
233     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
234 (*) : 0--0-------00-111
234     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)', '~vote(node2,value0)']
235     : -00-------0--0111
235     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)', '~vote(node2,value1)']
236     : 0----0---0--0-111
236     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node2,value0)']
237     : -0--0---0----0111
237     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node2,value1)']
238     : --0--0---00---111
238     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node1,value0)']
239     : ---00---0--0--111
239     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 1
num_suborbits: 1
240 (*) : 000000--------111
240     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 34

[PRIME NOTE]: number of primes: 241

[QRM NOTE]: Time elapsed since start: 7.141 seconds

[QRM NOTE]: Time elapsed since last: 0.078 seconds

[QRM NOTE]: Peak memory: 1520539 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

====================================================================================================

definition primes: {20, 4, 13, 14}


New level: 0
 pending : [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {1, 21, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, 0), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, 0), (23, 0), (24, 32768), (25, 4194304), (26, 0), (27, 32768), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 0 : {0, 32, 33, 5, 7, 8, 22, 23, 26, 28, 29, 30, 31}

After reduction : 
 pending  : [2, 3, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [2, 3, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, 0), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, 0), (23, 0), (24, 32768), (25, 4194304), (26, 0), (27, 32768), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 3, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6]

[QRM NOTE]: Time elapsed since start: 7.232 seconds

[QRM NOTE]: Time elapsed since last: 0.091 seconds

[QRM NOTE]: Peak memory: 476467 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', '~voted(node2)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', '~voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
157 (*) : --------00----1--
157     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
158     : ----------00---1-
158     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
159     : ------------00--1
159     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', '~vote(node0,value1)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$1]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', '~vote(node0,value1)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 2, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))


=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
49 (*) : ------------11---
49     : ['vote(node2,value0)', 'vote(node2,value1)']
50     : ----------11-----
50     : ['vote(node1,value0)', 'vote(node1,value1)']
51     : --------11-------
51     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', 'vote(node2,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : ----1--1---------
18     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
19     : -----11----------
19     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
22     : 1------1---------
22     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
23     : -1----1----------
23     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$chosenAt$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decided$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decided$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['chosenAt(QUORUM0,VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE1,VALUE0. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
24 (*) : ------11---------
24     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: exists VALUE0. ~decided(VALUE0)


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
61 (*) : 0-----1------1---
61     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
62     : -0-----1----1----
62     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
63     : --0---1----1-----
63     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
64     : ---0---1--1------
64     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
65     : ----0-1--1-------
65     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
66     : -----0-11--------
66     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)', 'vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)', 'vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE1,VALUE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | VALUE0 = VALUE1


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
67 (*) : ------1------10--
67     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
68     : -------1----1-0--
68     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
69     : ------1----1--0--
69     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
70     : -------1--1---0--
70     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
71     : ------1------1-0-
71     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
72     : -------1----1--0-
72     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
73     : ------1--1-----0-
73     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
74     : -------11------0-
74     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
75     : ------1----1----0
75     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
76     : -------1--1-----0
76     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
77     : ------1--1------0
77     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
78     : -------11-------0
78     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | voted(NODE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 11 =====================
size : 12
num_suborbits: 1
79 (*) : ------1---0--1---
79     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
80     : -------1---01----
80     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
81     : ------1----10----
81     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
82     : -------1--1--0---
82     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
83     : ------1-0----1---
83     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
84     : -------1-0--1----
84     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
85     : ------1--1--0----
85     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
86     : -------11----0---
86     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
87     : ------1-0--1-----
87     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
88     : -------1-01------
88     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
89     : ------1--10------
89     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
90     : -------11--0-----
90     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node1,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node1,value0)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | ~decided(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
91 (*) : ------1----1-1---
91     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
92     : -------1--1-1----
92     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
93     : ------1--1---1---
93     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
94     : -------11---1----
94     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
95     : ------1--1-1-----
95     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
96     : -------11-1------
96     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', 'vote(NODE1,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ~vote(NODE1,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
115 (*) : -0-----1--------0
115     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
116     : 0-----1---------0
116     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
117     : ---0---1-------0-
117     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
118     : --0---1--------0-
118     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
119     : -----0-1------0--
119     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
120     : ----0-1-------0--
120     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~voted(node2)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~voted(node2)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE0)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0)


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
121 (*) : -------1------0-0
121     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
122     : ------1-------0-0
122     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
123     : -------1------00-
123     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
124     : ------1-------00-
124     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
125     : -------1-------00
125     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
126     : ------1--------00
126     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0. ~decided(VALUE0) | voted(NODE1) | voted(NODE0) | NODE0 = NODE1


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
127 (*) : -------1-0------0
127     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
128     : ------1-0-------0
128     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
129     : -------1-0-----0-
129     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
130     : ------1-0------0-
130     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
131     : -------1---0----0
131     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
132     : ------1---0-----0
132     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
133     : -------1---0--0--
133     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
134     : ------1---0---0--
134     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
135     : -------1-----0-0-
135     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
136     : ------1-----0--0-
136     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
137     : -------1-----00--
137     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
138     : ------1-----0-0--
138     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0. vote(NODE0,VALUE0) | ~decided(VALUE0) | voted(NODE1) | NODE0 = NODE1


=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
139 (*) : -0-----1-----0---
139     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
140     : 0-----1-----0----
140     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
141     : ---0---1---0-----
141     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
142     : --0---1---0------
142     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
143     : -----0-1-0-------
143     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
144     : ----0-1-0--------
144     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0)


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
145 (*) : -------1---0-0---
145     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
146     : ------1---0-0----
146     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
147     : -------1-0---0---
147     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
148     : ------1-0---0----
148     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
149     : -------1-0-0-----
149     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
150     : ------1-0-0------
150     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', '~vote(NODE1,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,VALUE0,NODE0. vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
184 (*) : 0-0---1-1--------
184     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
185     : -0-0---1-1-------
185     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
186     : 0---0-1---1------
186     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
187     : -0---0-1---1-----
187     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
188     : --0-0-1-----1----
188     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
189     : ---0-0-1-----1---
189     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decided(value0)', 'vote(node0,value0)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0, value$0$vote$1$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decided(value0)', 'vote(node0,value0)', 'member(node0,quorum__node0_node2)', 'member(node0,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE0)', 'decided(VALUE0)', 'member(NODE0,QUORUM1)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,QUORUM1,VALUE0. chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | ~decided(VALUE0) | ~member(NODE0,QUORUM1) | ~member(NODE0,QUORUM0) | QUORUM0 = QUORUM1


=== Prime Orbit 25 =====================
size : 2
num_suborbits: 1
190 (*) : 0-0-0-1----------
190     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
191     : -0-0-0-1---------
191     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
198 (*) : ---0-0-1----0---1
198     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
199     : --0-0-1------0--1
199     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
200     : -0---0-1--0----1-
200     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
201     : 0---0-1----0---1-
201     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
202     : -0-0---10-----1--
202     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
203     : 0-0---1--0----1--
203     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', '~vote(node2,value0)', 'voted(node2)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$voted$0$0, node$0$member$0$0, node$0$member$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', '~vote(node2,value0)', 'voted(node2)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '1$vote': 1, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, 'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'voted(NODE0)', 'decided(VALUE0)', '~vote(NODE0,VALUE1)', 'member(NODE0,QUORUM1)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,QUORUM1,QUORUM0,VALUE0. chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~voted(NODE0) | ~decided(VALUE0) | vote(NODE0,VALUE1) | ~member(NODE0,QUORUM1) | ~member(NODE0,QUORUM0) | (QUORUM0 = QUORUM1 | VALUE0 = VALUE1)


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

==================================================================================================================


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
157 (*) : --------00----1--
157     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
158     : ----------00---1-
158     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
159     : ------------00--1
159     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0))
qcost : 4




=== Prime Orbit 6 =====================
size : 3
num_suborbits: 1
49 (*) : ------------11---
49     : ['vote(node2,value0)', 'vote(node2,value1)']
50     : ----------11-----
50     : ['vote(node1,value0)', 'vote(node1,value1)']
51     : --------11-------
51     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : ----1--1---------
18     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
19     : -----11----------
19     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
22     : 1------1---------
22     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
23     : -1----1----------
23     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall QUORUM0,VALUE1,VALUE0. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
24 (*) : ------11---------
24     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists VALUE0. ~decided(VALUE0)
qcost : 2




=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
61 (*) : 0-----1------1---
61     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
62     : -0-----1----1----
62     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
63     : --0---1----1-----
63     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
64     : ---0---1--1------
64     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
65     : ----0-1--1-------
65     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
66     : -----0-11--------
66     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall QUORUM0,NODE0,VALUE1,VALUE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
67 (*) : ------1------10--
67     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
68     : -------1----1-0--
68     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
69     : ------1----1--0--
69     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
70     : -------1--1---0--
70     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
71     : ------1------1-0-
71     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
72     : -------1----1--0-
72     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
73     : ------1--1-----0-
73     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
74     : -------11------0-
74     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
75     : ------1----1----0
75     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
76     : -------1--1-----0
76     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
77     : ------1--1------0
77     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
78     : -------11-------0
78     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | voted(NODE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 11 =====================
size : 12
num_suborbits: 1
79 (*) : ------1---0--1---
79     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
80     : -------1---01----
80     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
81     : ------1----10----
81     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
82     : -------1--1--0---
82     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
83     : ------1-0----1---
83     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
84     : -------1-0--1----
84     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
85     : ------1--1--0----
85     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
86     : -------11----0---
86     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
87     : ------1-0--1-----
87     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
88     : -------1-01------
88     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
89     : ------1--10------
89     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
90     : -------11--0-----
90     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | ~decided(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
91 (*) : ------1----1-1---
91     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
92     : -------1--1-1----
92     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
93     : ------1--1---1---
93     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
94     : -------11---1----
94     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
95     : ------1--1-1-----
95     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
96     : -------11-1------
96     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE1,VALUE1,VALUE0,NODE0. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ~vote(NODE1,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
115 (*) : -0-----1--------0
115     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
116     : 0-----1---------0
116     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
117     : ---0---1-------0-
117     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
118     : --0---1--------0-
118     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
119     : -----0-1------0--
119     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
120     : ----0-1-------0--
120     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. ~decided(VALUE0) | voted(NODE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
121 (*) : -------1------0-0
121     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
122     : ------1-------0-0
122     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
123     : -------1------00-
123     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
124     : ------1-------00-
124     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
125     : -------1-------00
125     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
126     : ------1--------00
126     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,VALUE0,NODE0. ~decided(VALUE0) | voted(NODE1) | voted(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
127 (*) : -------1-0------0
127     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
128     : ------1-0-------0
128     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
129     : -------1-0-----0-
129     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
130     : ------1-0------0-
130     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
131     : -------1---0----0
131     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
132     : ------1---0-----0
132     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
133     : -------1---0--0--
133     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
134     : ------1---0---0--
134     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
135     : -------1-----0-0-
135     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
136     : ------1-----0--0-
136     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
137     : -------1-----00--
137     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
138     : ------1-----0-0--
138     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,VALUE0,NODE0. vote(NODE0,VALUE0) | ~decided(VALUE0) | voted(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
139 (*) : -0-----1-----0---
139     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
140     : 0-----1-----0----
140     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
141     : ---0---1---0-----
141     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
142     : --0---1---0------
142     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
143     : -----0-1-0-------
143     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
144     : ----0-1-0--------
144     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. vote(NODE0,VALUE0) | ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
145 (*) : -------1---0-0---
145     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
146     : ------1---0-0----
146     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
147     : -------1-0---0---
147     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
148     : ------1-0---0----
148     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
149     : -------1-0-0-----
149     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
150     : ------1-0-0------
150     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,VALUE0,NODE0. vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
184 (*) : 0-0---1-1--------
184     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
185     : -0-0---1-1-------
185     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
186     : 0---0-1---1------
186     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
187     : -0---0-1---1-----
187     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
188     : --0-0-1-----1----
188     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
189     : ---0-0-1-----1---
189     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall QUORUM0,NODE0,QUORUM1,VALUE0. chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE0) | ~decided(VALUE0) | ~member(NODE0,QUORUM1) | ~member(NODE0,QUORUM0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 25 =====================
size : 2
num_suborbits: 1
190 (*) : 0-0-0-1----------
190     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
191     : -0-0-0-1---------
191     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
198 (*) : ---0-0-1----0---1
198     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
199     : --0-0-1------0--1
199     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
200     : -0---0-1--0----1-
200     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
201     : 0---0-1----0---1-
201     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
202     : -0-0---10-----1--
202     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
203     : 0-0---1--0----1--
203     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
num_forall :   5
num_exists :   0
num_literals : 9
quantified form : forall VALUE1,NODE0,QUORUM1,QUORUM0,VALUE0. chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~voted(NODE0) | ~decided(VALUE0) | vote(NODE0,VALUE1) | ~member(NODE0,QUORUM1) | ~member(NODE0,QUORUM0) | (QUORUM0 = QUORUM1 | VALUE0 = VALUE1)
qcost : 14



[QRM NOTE]: Time elapsed since start: 7.370 seconds

[QRM NOTE]: Time elapsed since last: 0.138 seconds

[QRM NOTE]: Peak memory: 2211189 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

=================================================================================================


New level: 1
 pending : [2, 3, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [2, 3, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 3, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6]


Solution : [1, 21, 6] has cost 11.


Decide in level 1 among pending : [2, 3, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 1

After decision at level 1
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6, 3]


New level: 2
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6, 3]


Before reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6, 3]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, 1048576), (19, 524288), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, 2097152), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]
 solution : [1, 21, 6, 3]


Solution : [1, 21, 6, 3] has cost 13.


Decide in level 2 among pending : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 25, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, 1048576), (19, 524288), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, 2097152), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 2

After decision at level 2
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27]
 solution : [1, 21, 6, 3, 25]


New level: 3
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27]
 solution : [1, 21, 6, 3, 25]


Before reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27]
 solution : [1, 21, 6, 3, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, 1048576), (19, 524288), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, 2097152), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : {2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 21, 6, 3, 25]


Before reduction : 
 pending  : []
 solution : [1, 21, 6, 3, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 21, 6, 3, 25]


Solution : [1, 21, 6, 3, 25] has cost 17.


Before backtrack at level 3
 pending : []
 solution : [1, 21, 6, 3, 25]

After backtrack at level 3
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27]
 solution : [1, 21, 6, 3, 25]


Invert decision for 25 at level 2


New level: 3
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27]
 solution : [1, 21, 6, 3]


Before reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27]
 solution : [1, 21, 6, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, 1048576), (19, 524288), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27]
 solution : [1, 21, 6, 3]


Solution : [1, 21, 6, 3] has cost 13.


Decide in level 3 among pending : [2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, 1048576), (19, 524288), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 18 with phase True at level 3

After decision at level 3
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27]
 solution : [1, 21, 6, 3, 18]


New level: 4
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27]
 solution : [1, 21, 6, 3, 18]


Before reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27]
 solution : [1, 21, 6, 3, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, 1048576), (19, 524288), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : {2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 21, 6, 3, 18]


Before reduction : 
 pending  : []
 solution : [1, 21, 6, 3, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 21, 6, 3, 18]


Solution : [1, 21, 6, 3, 18] has cost 20.


Before backtrack at level 4
 pending : []
 solution : [1, 21, 6, 3, 18]

After backtrack at level 4
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27]
 solution : [1, 21, 6, 3, 18]


Invert decision for 18 at level 3


New level: 4
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27]
 solution : [1, 21, 6, 3]


Before reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27]
 solution : [1, 21, 6, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, 524288), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27]
 solution : [1, 21, 6, 3]


Solution : [1, 21, 6, 3] has cost 13.


Decide in level 4 among pending : [2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, 524288), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 19 with phase True at level 4

After decision at level 4
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 19]


New level: 5
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 19]


Before reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, 524288), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : {2, 9, 10, 11, 12, 15, 16, 17, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 21, 6, 3, 19]


Before reduction : 
 pending  : []
 solution : [1, 21, 6, 3, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 21, 6, 3, 19]


Solution : [1, 21, 6, 3, 19] has cost 20.


Before backtrack at level 5
 pending : []
 solution : [1, 21, 6, 3, 19]

After backtrack at level 5
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 19]


Invert decision for 19 at level 4


New level: 5
 pending : [2, 9, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3]


Before reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 9, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3]


Solution : [1, 21, 6, 3] has cost 13.


Decide in level 5 among pending : [2, 9, 10, 11, 12, 15, 16, 17, 24, 27]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [2, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 9]


New level: 6
 pending : [2, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 9]


Before reduction : 
 pending  : [2, 10, 11, 12, 15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 262144), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 8192), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {11, 2, 10, 12}

After reduction : 
 pending  : [15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 9]


Before reduction : 
 pending  : [15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 8192), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 9]


Solution : [1, 21, 6, 3, 9] has cost 22.


Before backtrack at level 6
 pending : [15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 9]

After backtrack at level 6
 pending : [15, 16, 17, 24, 27, 2, 10, 11, 12]
 solution : [1, 21, 6, 3, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [15, 16, 17, 24, 27, 2, 10, 11, 12]
 solution : [1, 21, 6, 3]


Before reduction : 
 pending  : [15, 16, 17, 24, 27, 2, 10, 11, 12]
 solution : [1, 21, 6, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [15, 16, 17, 24, 27, 2, 10, 11, 12]
 solution : [1, 21, 6, 3]


Solution : [1, 21, 6, 3] has cost 13.


Decide in level 6 among pending : [15, 16, 17, 24, 27, 2, 10, 11, 12]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [15, 16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3, 11]


New level: 7
 pending : [15, 16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3, 11]


Before reduction : 
 pending  : [15, 16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, 131072), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 8192), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : {2, 10, 12}

After reduction : 
 pending  : [15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 11]


Before reduction : 
 pending  : [15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 8192), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 11]


Solution : [1, 21, 6, 3, 11] has cost 22.


Before backtrack at level 7
 pending : [15, 16, 17, 24, 27]
 solution : [1, 21, 6, 3, 11]

After backtrack at level 7
 pending : [15, 16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [15, 16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3]


Before reduction : 
 pending  : [15, 16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 8192), (16, 2048), (17, 2048), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [15, 16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3]


Solution : [1, 21, 6, 3] has cost 13.


Decide in level 7 among pending : [15, 16, 17, 24, 27, 2, 10, 12]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 15 with phase True at level 7

After decision at level 7
 pending : [16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3, 15]


New level: 8
 pending : [16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3, 15]


Before reduction : 
 pending  : [16, 17, 24, 27, 2, 10, 12]
 solution : [1, 21, 6, 3, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, 16384), (13, -1), (14, -1), (15, 65536), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {16, 17, 10}

After reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 3, 15]


Before reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 3, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 3, 15]


Solution : [1, 21, 6, 3, 15] has cost 20.


Before backtrack at level 8
 pending : [24, 27, 2, 12]
 solution : [1, 21, 6, 3, 15]

After backtrack at level 8
 pending : [24, 27, 2, 12, 16, 17, 10]
 solution : [1, 21, 6, 3, 15]


Invert decision for 15 at level 7


New level: 8
 pending : [24, 27, 2, 12, 16, 17, 10]
 solution : [1, 21, 6, 3]


Before reduction : 
 pending  : [24, 27, 2, 12, 16, 17, 10]
 solution : [1, 21, 6, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 16, 17, 10]
 solution : [1, 21, 6, 3]


Solution : [1, 21, 6, 3] has cost 13.


Decide in level 8 among pending : [24, 27, 2, 12, 16, 17, 10]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 3, 17]


New level: 9
 pending : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 3, 17]


Before reduction : 
 pending  : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 3, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, 4096), (17, 32768), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {16, 10}

After reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 3, 17]


Before reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 3, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 3, 17]


Solution : [1, 21, 6, 3, 17] has cost 20.


Before backtrack at level 9
 pending : [24, 27, 2, 12]
 solution : [1, 21, 6, 3, 17]

After backtrack at level 9
 pending : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 3, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 3]


Before reduction : 
 pending  : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 3]

Essensial at level 9 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4096), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 10]
 solution : [1, 21, 6, 3, 16]


Before reduction : 
 pending  : [24, 27, 2, 12, 10]
 solution : [1, 21, 6, 3, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4096), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4096), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 10]
 solution : [1, 21, 6, 3, 16]


Solution : [1, 21, 6, 3, 16] has cost 20.


Before backtrack at level 9
 pending : [24, 27, 2, 12, 10]
 solution : [1, 21, 6, 3, 16]

After backtrack at level 9
 pending : [24, 27, 2, 12, 10, 16]
 solution : [1, 21, 6, 3]


Before backtrack at level 8
 pending : [24, 27, 2, 12, 10, 16]
 solution : [1, 21, 6, 3]

After backtrack at level 8
 pending : [24, 27, 2, 12, 10, 16, 17]
 solution : [1, 21, 6, 3]


Before backtrack at level 7
 pending : [24, 27, 2, 12, 10, 16, 17]
 solution : [1, 21, 6, 3]

After backtrack at level 7
 pending : [24, 27, 2, 12, 10, 16, 17, 15]
 solution : [1, 21, 6, 3]


Before backtrack at level 6
 pending : [24, 27, 2, 12, 10, 16, 17, 15]
 solution : [1, 21, 6, 3]

After backtrack at level 6
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11]
 solution : [1, 21, 6, 3]


Before backtrack at level 5
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11]
 solution : [1, 21, 6, 3]

After backtrack at level 5
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6, 3]


Before backtrack at level 4
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6, 3]

After backtrack at level 4
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6, 3]


Before backtrack at level 3
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6, 3]

After backtrack at level 3
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6, 3]


Before backtrack at level 2
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6, 3]

After backtrack at level 2
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18, 25]
 solution : [1, 21, 6, 3]


Invert decision for 3 at level 1


New level: 2
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18, 25]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18, 25]
 solution : [1, 21, 6]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4096), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 16384), (25, -1), (26, -1), (27, 16384), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18, 25]
 solution : [1, 21, 6]


Solution : [1, 21, 6] has cost 11.


Decide in level 2 among pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18, 25]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 2

After decision at level 2
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6, 25]


New level: 3
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6, 25]


Before reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, 4194304), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : {2, 9, 10, 11, 12, 15, 16, 17, 18, 19, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 21, 6, 25]


Before reduction : 
 pending  : []
 solution : [1, 21, 6, 25]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 21, 6, 25]


Solution : [1, 21, 6, 25] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [1, 21, 6, 25]

After backtrack at level 3
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6, 25]


Invert decision for 25 at level 2


New level: 3
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6]


Solution : [1, 21, 6] has cost 11.


Decide in level 3 among pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 18 with phase True at level 3

After decision at level 3
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6, 18]


New level: 4
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6, 18]


Before reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, 2097152), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : {2, 9, 10, 11, 12, 15, 16, 17, 19, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 21, 6, 18]


Before reduction : 
 pending  : []
 solution : [1, 21, 6, 18]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 21, 6, 18]


Solution : [1, 21, 6, 18] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [1, 21, 6, 18]

After backtrack at level 4
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6, 18]


Invert decision for 18 at level 3


New level: 4
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6]


Solution : [1, 21, 6] has cost 11.


Decide in level 4 among pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 19 with phase True at level 4

After decision at level 4
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6, 19]


New level: 5
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6, 19]


Before reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, 1048576), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : {2, 9, 10, 11, 12, 15, 16, 17, 24, 27}

After reduction : 
 pending  : []
 solution : [1, 21, 6, 19]


Before reduction : 
 pending  : []
 solution : [1, 21, 6, 19]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 21, 6, 19]


Solution : [1, 21, 6, 19] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [1, 21, 6, 19]

After backtrack at level 5
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6, 19]


Invert decision for 19 at level 4


New level: 5
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6]


Solution : [1, 21, 6] has cost 11.


Decide in level 5 among pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11]
 solution : [1, 21, 6, 9]


New level: 6
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11]
 solution : [1, 21, 6, 9]


Before reduction : 
 pending  : [24, 27, 2, 12, 10, 16, 17, 15, 11]
 solution : [1, 21, 6, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 16384), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : {11, 2, 10, 12}

After reduction : 
 pending  : [24, 27, 16, 17, 15]
 solution : [1, 21, 6, 9]


Before reduction : 
 pending  : [24, 27, 16, 17, 15]
 solution : [1, 21, 6, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 16384), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 16384), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [24, 27, 16, 17, 15]
 solution : [1, 21, 6, 9]


Solution : [1, 21, 6, 9] has cost 20.


Before backtrack at level 6
 pending : [24, 27, 16, 17, 15]
 solution : [1, 21, 6, 9]

After backtrack at level 6
 pending : [24, 27, 16, 17, 15, 2, 12, 10, 11]
 solution : [1, 21, 6, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [24, 27, 16, 17, 15, 2, 12, 10, 11]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [24, 27, 16, 17, 15, 2, 12, 10, 11]
 solution : [1, 21, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 16384), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [24, 27, 16, 17, 15, 2, 12, 10, 11]
 solution : [1, 21, 6]


Solution : [1, 21, 6] has cost 11.


Decide in level 6 among pending : [24, 27, 16, 17, 15, 2, 12, 10, 11]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [24, 27, 16, 17, 15, 2, 12, 10]
 solution : [1, 21, 6, 11]


New level: 7
 pending : [24, 27, 16, 17, 15, 2, 12, 10]
 solution : [1, 21, 6, 11]


Before reduction : 
 pending  : [24, 27, 16, 17, 15, 2, 12, 10]
 solution : [1, 21, 6, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, 262144), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 16384), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : {2, 10, 12}

After reduction : 
 pending  : [24, 27, 16, 17, 15]
 solution : [1, 21, 6, 11]


Before reduction : 
 pending  : [24, 27, 16, 17, 15]
 solution : [1, 21, 6, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 16384), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 16384), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [24, 27, 16, 17, 15]
 solution : [1, 21, 6, 11]


Solution : [1, 21, 6, 11] has cost 20.


Before backtrack at level 7
 pending : [24, 27, 16, 17, 15]
 solution : [1, 21, 6, 11]

After backtrack at level 7
 pending : [24, 27, 16, 17, 15, 2, 12, 10]
 solution : [1, 21, 6, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [24, 27, 16, 17, 15, 2, 12, 10]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [24, 27, 16, 17, 15, 2, 12, 10]
 solution : [1, 21, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 16384), (16, 4096), (17, 4096), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 512), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, -1), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [24, 27, 16, 17, 15, 2, 12, 10]
 solution : [1, 21, 6]


Solution : [1, 21, 6] has cost 11.


Decide in level 7 among pending : [24, 27, 16, 17, 15, 2, 12, 10]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, -1), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 15 with phase True at level 7

After decision at level 7
 pending : [24, 27, 16, 17, 2, 12, 10]
 solution : [1, 21, 6, 15]


New level: 8
 pending : [24, 27, 16, 17, 2, 12, 10]
 solution : [1, 21, 6, 15]


Before reduction : 
 pending  : [24, 27, 16, 17, 2, 12, 10]
 solution : [1, 21, 6, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, -1), (12, 32768), (13, -1), (14, -1), (15, 131072), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {16, 17, 10}

After reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 15]


Before reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 15]


Solution : [1, 21, 6, 15] has cost 18.


Before backtrack at level 8
 pending : [24, 27, 2, 12]
 solution : [1, 21, 6, 15]

After backtrack at level 8
 pending : [24, 27, 2, 12, 16, 17, 10]
 solution : [1, 21, 6, 15]


Invert decision for 15 at level 7


New level: 8
 pending : [24, 27, 2, 12, 16, 17, 10]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [24, 27, 2, 12, 16, 17, 10]
 solution : [1, 21, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, -1), (12, 32768), (13, -1), (14, -1), (15, -1), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 16, 17, 10]
 solution : [1, 21, 6]


Solution : [1, 21, 6] has cost 11.


Decide in level 8 among pending : [24, 27, 2, 12, 16, 17, 10]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, -1), (12, 32768), (13, -1), (14, -1), (15, -1), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 17]


New level: 9
 pending : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 17]


Before reduction : 
 pending  : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16384), (11, -1), (12, 32768), (13, -1), (14, -1), (15, -1), (16, 8192), (17, 65536), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {16, 10}

After reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 17]


Before reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 2, 12]
 solution : [1, 21, 6, 17]


Solution : [1, 21, 6, 17] has cost 18.


Before backtrack at level 9
 pending : [24, 27, 2, 12]
 solution : [1, 21, 6, 17]

After backtrack at level 9
 pending : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6]


Before reduction : 
 pending  : [24, 27, 2, 12, 16, 10]
 solution : [1, 21, 6]

Essensial at level 9 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16384), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 1024), (25, -1), (26, -1), (27, 1024), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, 32768), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 10]
 solution : [1, 21, 6, 16]


Before reduction : 
 pending  : [24, 27, 2, 12, 10]
 solution : [1, 21, 6, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, 32768), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8192), (11, -1), (12, 32768), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32768), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [24, 27, 2, 12, 10]
 solution : [1, 21, 6, 16]


Solution : [1, 21, 6, 16] has cost 18.


Before backtrack at level 9
 pending : [24, 27, 2, 12, 10]
 solution : [1, 21, 6, 16]

After backtrack at level 9
 pending : [24, 27, 2, 12, 10, 16]
 solution : [1, 21, 6]


Before backtrack at level 8
 pending : [24, 27, 2, 12, 10, 16]
 solution : [1, 21, 6]

After backtrack at level 8
 pending : [24, 27, 2, 12, 10, 16, 17]
 solution : [1, 21, 6]


Before backtrack at level 7
 pending : [24, 27, 2, 12, 10, 16, 17]
 solution : [1, 21, 6]

After backtrack at level 7
 pending : [24, 27, 2, 12, 10, 16, 17, 15]
 solution : [1, 21, 6]


Before backtrack at level 6
 pending : [24, 27, 2, 12, 10, 16, 17, 15]
 solution : [1, 21, 6]

After backtrack at level 6
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11]
 solution : [1, 21, 6]


Before backtrack at level 5
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11]
 solution : [1, 21, 6]

After backtrack at level 5
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6]


Before backtrack at level 4
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9]
 solution : [1, 21, 6]

After backtrack at level 4
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6]


Before backtrack at level 3
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19]
 solution : [1, 21, 6]

After backtrack at level 3
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6]


Before backtrack at level 2
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18]
 solution : [1, 21, 6]

After backtrack at level 2
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18, 25]
 solution : [1, 21, 6]


Before backtrack at level 1
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18, 25]
 solution : [1, 21, 6]

After backtrack at level 1
 pending : [24, 27, 2, 12, 10, 16, 17, 15, 11, 9, 19, 18, 25, 3]
 solution : [1, 21, 6]


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 15

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=1)

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [1, 21, 6, 25] (length = 4)

invariant [invar_1] forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_21] forall NODE0. (exists VALUE0. vote(NODE0,VALUE0) | ~voted(NODE0)) # qcost: 4

invariant [invar_6] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_25] forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 7.477 seconds

[QRM NOTE]: Time elapsed since last: 0.108 seconds

[QRM NOTE]: Peak memory: 2176176 bytes


====================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

====================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 45: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 46: invar_21
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 47: invar_6
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 48: invar_25

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 45: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 46: invar_21 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 47: invar_6 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 48: invar_25 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 46: invar_21 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 47: invar_6 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 48: invar_25 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 46: invar_21 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 47: invar_6 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 48: invar_25 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 30: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 9.415 seconds

[QRM NOTE]: Time elapsed since last: 1.938 seconds

[QRM NOTE]: Peak memory: 1177354 bytes


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy -s node=4,value=2 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=4,value=2]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 22

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 48

[FW NOTE]: number of branching actions: 16

ivy_to_cpp target=qrm toy_consensus_epr.node_4_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_4_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_4_value_2.finite.cpp toy_consensus_epr.node_4_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_4_value_2.finite.o toy_consensus_epr.node_4_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.419 seconds

[QRM NOTE]: Time elapsed since last: 7.419 seconds

[QRM NOTE]: Peak memory: 1194342 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        99

[FW NOTE]: number of dfs representative states:     12

[FW NOTE]: number of dfs non-representative states: 87


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=4,value=2]

===============================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)']
representative states : 60855, 1174967, 5500343, 1096281527, 91358227895, 91626663351, 1231023543, 1499458999, 1364716983, 23588279, 95415735, 6548919


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000
lex min decimal: 60855
states:
0000000000000000000000




=== State Orbit 1 =====================
size : 8
repr state: 0000000000100000001000
lex min decimal: 1174967
states:
0000000000000001000010
0000000000010000001000
0000000000100000001000
0000000000000000010001
0000000000000010000010
0000000000001000000100
0000000000000000100001
0000000000000100000100




=== State Orbit 2 =====================
size : 12
repr state: 0000000000101000001100
lex min decimal: 5500343
states:
0000000000101000001100
0000000000100000101001
0000000000010001001010
0000000000010100001100
0000000000100010001010
0000000000010000011001
0000000000000101000110
0000000000000100010101
0000000000001000100101
0000000000000001010011
0000000000000010100011
0000000000001010000110




=== State Orbit 3 =====================
size : 8
repr state: 1000000000101010001110
lex min decimal: 1096281527
states:
0001000000010100011101
0000001000001010100111
1000000000101010001110
0000000100000101010111
0000100000100010101011
0100000000010101001110
0010000000101000101101
0000010000010001011011




=== State Orbit 4 =====================
size : 2
repr state: 1010101000101010101111
lex min decimal: 91358227895
states:
0101010100010101011111
1010101000101010101111




=== State Orbit 5 =====================
size : 2
repr state: 1010101010101010101111
lex min decimal: 91626663351
states:
1010101010101010101111
0101010101010101011111




=== State Orbit 6 =====================
size : 8
repr state: 1000000000101010011111
lex min decimal: 1231023543
states:
0000001000011010101111
0001000000010110011111
0000100000100110101111
0000000100100101011111
0000010000011001011111
0100000000010101101111
0010000000101001101111
1000000000101010011111




=== State Orbit 7 =====================
size : 8
repr state: 1000000010101010011111
lex min decimal: 1499458999
states:
0000001010011010101111
0100000001010101101111
0000000101100101011111
0001000001010110011111
0000010001011001011111
1000000010101010011111
0010000010101001101111
0000100010100110101111




=== State Orbit 8 =====================
size : 8
repr state: 1000000010101010001110
lex min decimal: 1364716983
states:
0010000010101000101101
1000000010101010001110
0100000001010101001110
0000001010001010100111
0000010001010001011011
0000000101000101010111
0001000001010100011101
0000100010100010101011




=== State Orbit 9 =====================
size : 24
repr state: 0000000000101001001110
lex min decimal: 23588279
states:
0000000000001001010111
0000000000100010011011
0000000000011010001110
0000000000010010101011
0000000000001001100111
0000000000000110010111
0000000000010110001110
0000000000100100011101
0000000000100001101011
0000000000010001101011
0000000000000101100111
0000000000011001001110
0000000000010010011011
0000000000011000011101
0000000000101000011101
0000000000000110100111
0000000000011000101101
0000000000010100101101
0000000000001010010111
0000000000100101001110
0000000000101001001110
0000000000100001011011
0000000000100100101101
0000000000100110001110




=== State Orbit 10 =====================
size : 6
repr state: 0000000000101001011111
lex min decimal: 95415735
states:
0000000000010110101111
0000000000101001011111
0000000000011001101111
0000000000100101101111
0000000000011010011111
0000000000100110011111




=== State Orbit 11 =====================
size : 12
repr state: 0000000000100100001100
lex min decimal: 6548919
states:
0000000000011000001100
0000000000010010001010
0000000000100000011001
0000000000100001001010
0000000000000110000110
0000000000001000010101
0000000000000100100101
0000000000000001100011
0000000000100100001100
0000000000000010010011
0000000000001001000110
0000000000010000101001



[QRM NOTE]: Time elapsed since start: 7.878 seconds

[QRM NOTE]: Time elapsed since last: 0.458 seconds

[QRM NOTE]: Peak memory: 1262424 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=4,value=2]

====================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.283 seconds

[QRM NOTE]: Time elapsed since last: 0.405 seconds

[QRM NOTE]: Peak memory: 327046 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 36

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_3.finite.cpp toy_consensus_epr.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_3.finite.o toy_consensus_epr.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.716 seconds

[QRM NOTE]: Time elapsed since last: 7.716 seconds

[QRM NOTE]: Peak memory: 1193141 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        94

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 84


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 16816043, 1225039787, 1227136939, 17342379, 19439531, 18913195, 42923, 348075


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000
lex min decimal: 427
states:
000000000000000000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000100000000100
lex min decimal: 5035
states:
000000000000000001000010
000000000000000000100001
000000000000100000000100
000000000000000000010001
000000000000010000000100
000000000000001000000100
000000000000000100000010
000000000000000000001001
000000000000000010000010




=== State Orbit 2 =====================
size : 9
repr state: 100000000000100100000110
lex min decimal: 16816043
states:
000000010000000010010011
000001000000001000001101
000000100000000100100011
100000000000100100000110
010000000000010010000110
000100000000100000100101
001000000000001001000110
000000001000000001001011
000010000000010000010101




=== State Orbit 3 =====================
size : 3
repr state: 100100100000100100100111
lex min decimal: 1225039787
states:
001001001000001001001111
010010010000010010010111
100100100000100100100111




=== State Orbit 4 =====================
size : 3
repr state: 100100100100100100100111
lex min decimal: 1227136939
states:
010010010010010010010111
001001001001001001001111
100100100100100100100111




=== State Orbit 5 =====================
size : 18
repr state: 100000000000100100010111
lex min decimal: 17342379
states:
000000100000010100100111
010000000000010010100111
010000000000010010001111
100000000000100100001111
000100000000100010100111
001000000000001001010111
000000100000001100100111
100000000000100100010111
000000010000100010010111
000000010000001010010111
000000001000010001001111
001000000000001001100111
000100000000100001100111
000010000000010100010111
000001000000001010001111
000010000000010001010111
000001000000001100001111
000000001000100001001111




=== State Orbit 6 =====================
size : 18
repr state: 100000000100100100010111
lex min decimal: 19439531
states:
001000000001001001100111
000100000100100001100111
000001000001001010001111
000001000001001100001111
000000100100010100100111
000000100100001100100111
000000010010100010010111
000100000100100010100111
100000000100100100001111
010000000010010010001111
000000010010001010010111
000000001001100001001111
000000001001010001001111
000010000010010001010111
100000000100100100010111
001000000001001001010111
000010000010010100010111
010000000010010010100111




=== State Orbit 7 =====================
size : 9
repr state: 100000000100100100000110
lex min decimal: 18913195
states:
010000000010010010000110
000000010010000010010011
000001000001001000001101
001000000001001001000110
000000100100000100100011
000000001001000001001011
000010000010010000010101
000100000100100000100101
100000000100100100000110




=== State Orbit 8 =====================
size : 18
repr state: 000000000000100010000110
lex min decimal: 42923
states:
000000000000000010001011
000000000000100000010101
000000000000100000001101
000000000000001000010101
000000000000001000100101
000000000000010001000110
000000000000001100000110
000000000000001010000110
000000000000000010100011
000000000000000001010011
000000000000000100001011
000000000000010000100101
000000000000010000001101
000000000000100010000110
000000000000010100000110
000000000000000001100011
000000000000100001000110
000000000000000100010011




=== State Orbit 9 =====================
size : 6
repr state: 000000000000100010001111
lex min decimal: 348075
states:
000000000000100010001111
000000000000001010100111
000000000000100001010111
000000000000001100010111
000000000000010001100111
000000000000010100001111



[QRM NOTE]: Time elapsed since start: 7.914 seconds

[QRM NOTE]: Time elapsed since last: 0.198 seconds

[QRM NOTE]: Peak memory: 1255751 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

====================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 13227, binary: 000000000000000000011001

Found a representative state in Rmin not in reachability: decimal: 16897963, binary: 000000001000000011101011

Found a representative state in Rmin not in reachability: decimal: 3681402795, binary: 011011011011011011011111

Found a representative state in Rmin not in reachability: decimal: 3677208491, binary: 011011011001011011011111

Found a representative state in Rmin not in reachability: decimal: 57786283, binary: 000000011011100011011111

Found a representative state in Rmin not in reachability: decimal: 18995115, binary: 000000001001000011101011

Found a representative state in Rmin not in reachability: decimal: 18921387, binary: 000000001001000001011011

Found a representative state in Rmin not in reachability: decimal: 16824235, binary: 000000001000000001011011

Found a representative state in Rmin not in reachability: decimal: 59307, binary: 000000000000000001110011

Found a representative state in Rmin not in reachability: decimal: 50444203, binary: 000000011000000011011011

Found a representative state in Rmin not in reachability: decimal: 52541355, binary: 000000011001000011011011

Found a representative state in Rmin not in reachability: decimal: 56735659, binary: 000000011011000011011011

Found a representative state in Rmin not in reachability: decimal: 19455915, binary: 000000001001010001101111

Found a representative state in Rmin not in reachability: decimal: 17358763, binary: 000000001000010001101111

Found a representative state in Rmin not in reachability: decimal: 1225121707, binary: 001001001000001011101111

Found a representative state in Rmin not in reachability: decimal: 1227218859, binary: 001001001001001011101111

Found a representative state in Rmin not in reachability: decimal: 1227145131, binary: 001001001001001001011111

Found a representative state in Rmin not in reachability: decimal: 1225047979, binary: 001001001000001001011111

Found a representative state in Rmin not in reachability: decimal: 1261813675, binary: 001001011001101011011111

Found a representative state in Rmin not in reachability: decimal: 1266007979, binary: 001001011011101011011111

Found a representative state in Rmin not in reachability: decimal: 1263910827, binary: 001001011010101011011111

Found a representative state in Rmin not in reachability: decimal: 1259716523, binary: 001001011000101011011111

Found a representative state in Rmin not in reachability: decimal: 170344363, binary: 000001010001001110011111

Found a representative state in Rmin not in reachability: decimal: 168247211, binary: 000001010000001110011111

Found a representative state in Rmin not in reachability: decimal: 171261867, binary: 000001010001101010011111

Found a representative state in Rmin not in reachability: decimal: 174538667, binary: 000001010011001110011111

Found a representative state in Rmin not in reachability: decimal: 18390955, binary: 000000001000110001001111

Found a representative state in Rmin not in reachability: decimal: 20488107, binary: 000000001001110001001111

Found a representative state in Rmin not in reachability: decimal: 51494827, binary: 000000011000100011011111

Found a representative state in Rmin not in reachability: decimal: 53591979, binary: 000000011001100011011111

Found a representative state in Rmin not in reachability: decimal: 1416556459, binary: 001010100011011101110111

Found a representative state in Rmin not in reachability: decimal: 1412362155, binary: 001010100001011101110111

Found a representative state in Rmin not in reachability: decimal: 1424945067, binary: 001010100111011101110111

Found a representative state in Rmin not in reachability: decimal: 1410265003, binary: 001010100000011101110111

Found a representative state in Rmin not in reachability: decimal: 1258667947, binary: 001001011000001011011111

Found a representative state in Rmin not in reachability: decimal: 1260765099, binary: 001001011001001011011111

Found a representative state in Rmin not in reachability: decimal: 1264959403, binary: 001001011011001011011111

Found a representative state in Rmin not in reachability: decimal: 1262862251, binary: 001001011010001011011111

Found a representative state in Rmin not in reachability: decimal: 170213291, binary: 000001010001001010011111

Found a representative state in Rmin not in reachability: decimal: 174407595, binary: 000001010011001010011111

Found a representative state in Rmin not in reachability: decimal: 168116139, binary: 000001010000001010011111

Found a representative state in Rmin not in reachability: decimal: 3675111339, binary: 011011011000011011011111

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 8.705 seconds

[QRM NOTE]: Time elapsed since last: 0.791 seconds

[QRM NOTE]: Peak memory: 295610 bytes

next size: node=3,value=3


************************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3

************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=3,value=3 -f 1 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.043 seconds

[QRM NOTE]: Time elapsed since last: 0.043 seconds

[QRM NOTE]: Peak memory: 36492 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : -------1-------1--------
9     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
10     : --------1------1--------
10     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
11     : ------1---------1-------
11     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
12     : --------1-------1-------
12     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
13     : ------1----------1------
13     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
14     : -------1---------1------
14     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
15     : -------1----------1-----
15     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
16     : --------1---------1-----
16     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
17     : ------1------------1----
17     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
18     : --------1----------1----
18     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
19     : ------1-------------1---
19     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
20     : -------1------------1---
20     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
21     : ----1-------1-----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
22     : -----1------1-----------
22     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
23     : ---1---------1----------
23     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
24     : -----1-------1----------
24     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
25     : ---1----------1---------
25     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
26     : ----1---------1---------
26     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
27     : ----1-------------1-----
27     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
28     : -----1------------1-----
28     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
29     : ---1---------------1----
29     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
30     : -----1-------------1----
30     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
31     : ---1----------------1---
31     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
32     : ----1---------------1---
32     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
33     : -1----------1-----------
33     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
34     : --1---------1-----------
34     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
35     : 1------------1----------
35     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
36     : --1----------1----------
36     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
37     : 1-------------1---------
37     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
38     : -1------------1---------
38     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
39     : -1-------------1--------
39     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
40     : --1------------1--------
40     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
41     : 1---------------1-------
41     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
42     : --1-------------1-------
42     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
43     : 1----------------1------
43     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
44     : -1---------------1------
44     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : ------------1--------0--
45     : ['vote(node0,value0)', '~voted(node0)']
46     : -------------1-------0--
46     : ['vote(node0,value1)', '~voted(node0)']
47     : --------------1------0--
47     : ['vote(node0,value2)', '~voted(node0)']
48     : ---------------1------0-
48     : ['vote(node1,value0)', '~voted(node1)']
49     : ----------------1-----0-
49     : ['vote(node1,value1)', '~voted(node1)']
50     : -----------------1----0-
50     : ['vote(node1,value2)', '~voted(node1)']
51     : ------------------1----0
51     : ['vote(node2,value0)', '~voted(node2)']
52     : -------------------1---0
52     : ['vote(node2,value1)', '~voted(node2)']
53     : --------------------1--0
53     : ['vote(node2,value2)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : --------1-1-------------
54     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
55     : -------1---1------------
55     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
56     : --------11--------------
56     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
57     : ------1----1------------
57     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
58     : -------1-1--------------
58     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
59     : ------1---1-------------
59     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
60     : -----1----1-------------
60     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
61     : ----1------1------------
61     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
62     : -----1---1--------------
62     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
63     : ---1-------1------------
63     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
64     : ----1----1--------------
64     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
65     : ---1------1-------------
65     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
66     : --1-------1-------------
66     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
67     : -1---------1------------
67     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
68     : --1------1--------------
68     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
69     : 1----------1------------
69     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
70     : -1-------1--------------
70     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
71     : 1---------1-------------
71     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ---------11-------------
72     : ['decided(value0)', 'decided(value1)']
73     : ---------1-1------------
73     : ['decided(value0)', 'decided(value2)']
74     : ----------11------------
74     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : ----1----------------0--
75     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node0)']
76     : -----1---------------0--
76     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node0)']
77     : ---1-----------------0--
77     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node0)']
78     : -1-------------------0--
78     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node0)']
79     : --1------------------0--
79     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node0)']
80     : 1--------------------0--
80     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
81     : -------1--------------0-
81     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node1)']
82     : --------1-------------0-
82     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node1)']
83     : ------1---------------0-
83     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node1)']
84     : -1--------------------0-
84     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node1)']
85     : --1-------------------0-
85     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node1)']
86     : 1---------------------0-
86     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
87     : -------1---------------0
87     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node2)']
88     : --------1--------------0
88     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node2)']
89     : ------1----------------0
89     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node2)']
90     : ----1------------------0
90     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node2)']
91     : -----1-----------------0
91     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node2)']
92     : ---1-------------------0
92     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
93 (*) : ----1--------------0----
93     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
94     : -----1--------------0---
94     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
95     : ---1--------------0-----
95     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
96     : -1--------------0-------
96     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
97     : --1--------------0------
97     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
98     : 1--------------0--------
98     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
99     : -------1-----------0----
99     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
100     : --------1-----------0---
100     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
101     : ------1-----------0-----
101     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
102     : -1-----------0----------
102     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
103     : --1-----------0---------
103     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
104     : 1-----------0-----------
104     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
105     : -------1--------0-------
105     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
106     : --------1--------0------
106     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
107     : ------1--------0--------
107     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
108     : ----1--------0----------
108     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
109     : -----1--------0---------
109     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
110     : ---1--------0-----------
110     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 18
num_suborbits: 1
111 (*) : ----1-1-----------------
111     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
112     : -----11-----------------
112     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
113     : ---1---1----------------
113     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
114     : -----1-1----------------
114     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
115     : ---1----1---------------
115     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
116     : ----1---1---------------
116     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
117     : -1----1-----------------
117     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
118     : --1---1-----------------
118     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
119     : 1------1----------------
119     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
120     : --1----1----------------
120     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
121     : 1-------1---------------
121     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
122     : -1------1---------------
122     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
123     : -1-1--------------------
123     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
124     : --11--------------------
124     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
125     : 1---1-------------------
125     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
126     : --1-1-------------------
126     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
127     : 1----1------------------
127     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
128     : -1---1------------------
128     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
129 (*) : ------11----------------
129     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
130     : ------1-1---------------
130     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
131     : -------11---------------
131     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
132     : ---11-------------------
132     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
133     : ---1-1------------------
133     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
134     : ----11------------------
134     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
135     : 11----------------------
135     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
136     : 1-1---------------------
136     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
137     : -11---------------------
137     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
138 (*) : --------0--1---------0--
138     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
139     : -------0--1----------0--
139     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
140     : ------0--1-----------0--
140     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
141     : -----0-----1----------0-
141     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
142     : ----0-----1-----------0-
142     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
143     : ---0-----1------------0-
143     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
144     : --0--------1-----------0
144     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
145     : -0--------1------------0
145     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
146     : 0--------1-------------0
146     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
147 (*) : -----------1-----0---0--
147     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
148     : ----------1-----0----0--
148     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
149     : ---------1-----0-----0--
149     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
150     : -----------1--------00--
150     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
151     : ----------1--------0-0--
151     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
152     : ---------1--------0--0--
152     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
153     : -----------1--0-------0-
153     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
154     : ----------1--0--------0-
154     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
155     : ---------1--0---------0-
155     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
156     : -----------1--------0-0-
156     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
157     : ----------1--------0--0-
157     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
158     : ---------1--------0---0-
158     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
159     : -----------1--0--------0
159     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
160     : ----------1--0---------0
160     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
161     : ---------1--0----------0
161     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
162     : -----------1-----0-----0
162     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
163     : ----------1-----0------0
163     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
164     : ---------1-----0-------0
164     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
165 (*) : -----------1-------1-0--
165     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
166     : ----------1---------10--
166     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
167     : -----------1------1--0--
167     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
168     : ---------1----------10--
168     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
169     : ----------1-------1--0--
169     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
170     : ---------1---------1-0--
170     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
171     : -----------1----1----0--
171     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
172     : ----------1------1---0--
172     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
173     : -----------1---1-----0--
173     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
174     : ---------1-------1---0--
174     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
175     : ----------1----1-----0--
175     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
176     : ---------1------1----0--
176     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
177     : -----------1-------1--0-
177     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
178     : ----------1---------1-0-
178     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
179     : -----------1------1---0-
179     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
180     : ---------1----------1-0-
180     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
181     : ----------1-------1---0-
181     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
182     : ---------1---------1--0-
182     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
183     : -----------1-1--------0-
183     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
184     : ----------1---1-------0-
184     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
185     : -----------11---------0-
185     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
186     : ---------1----1-------0-
186     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
187     : ----------1-1---------0-
187     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
188     : ---------1---1--------0-
188     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
189     : -----------1----1------0
189     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
190     : ----------1------1-----0
190     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
191     : -----------1---1-------0
191     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
192     : ---------1-------1-----0
192     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
193     : ----------1----1-------0
193     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
194     : ---------1------1------0
194     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
195     : -----------1-1---------0
195     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
196     : ----------1---1--------0
196     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
197     : -----------11----------0
197     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
198     : ---------1----1--------0
198     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
199     : ----------1-1----------0
199     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
200     : ---------1---1---------0
200     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
201 (*) : -----------1---------0-0
201     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
202     : ----------1----------0-0
202     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
203     : ---------1-----------0-0
203     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
204     : -----------1---------00-
204     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
205     : ----------1----------00-
205     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
206     : ---------1-----------00-
206     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
207     : -----------1----------00
207     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
208     : ----------1-----------00
208     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
209     : ---------1------------00
209     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
210 (*) : ------0--1--0-----------
210     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
211     : -------0--1--0----------
211     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
212     : --------0--1--0---------
212     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
213     : ---0-----1-----0--------
213     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
214     : ----0-----1-----0-------
214     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
215     : -----0-----1-----0------
215     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
216     : 0--------1--------0-----
216     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
217     : -0--------1--------0----
217     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
218     : --0--------1--------0---
218     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
219 (*) : ---------1--0--0--------
219     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
220     : ----------1--0--0-------
220     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
221     : -----------1--0--0------
221     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
222     : ---------1--0-----0-----
222     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
223     : ----------1--0-----0----
223     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
224     : -----------1--0-----0---
224     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
225     : ---------1-----0--0-----
225     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
226     : ----------1-----0--0----
226     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
227     : -----------1-----0--0---
227     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 18
num_suborbits: 1
228 (*) : 0--------1---------1----
228     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
229     : 0--------1----------1---
229     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
230     : -0--------1-------1-----
230     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
231     : -0--------1---------1---
231     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
232     : --0--------1------1-----
232     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
233     : --0--------1-------1----
233     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
234     : ---0-----1------1-------
234     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
235     : ---0-----1-------1------
235     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
236     : ----0-----1----1--------
236     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
237     : ----0-----1------1------
237     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
238     : -----0-----1---1--------
238     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
239     : -----0-----1----1-------
239     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
240     : ------0--1---1----------
240     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
241     : ------0--1----1---------
241     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
242     : -------0--1-1-----------
242     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
243     : -------0--1---1---------
243     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
244     : --------0--11-----------
244     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
245     : --------0--1-1----------
245     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 36
num_suborbits: 1
246 (*) : ---------1--0------1----
246     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
247     : ---------1--0-------1---
247     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
248     : ----------1--0----1-----
248     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
249     : ----------1--0------1---
249     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
250     : -----------1--0---1-----
250     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
251     : -----------1--0----1----
251     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
252     : ---------1--0---1-------
252     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
253     : ---------1--0----1------
253     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
254     : ----------1--0-1--------
254     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
255     : ----------1--0---1------
255     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
256     : -----------1--01--------
256     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
257     : -----------1--0-1-------
257     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
258     : ---------1-----0---1----
258     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
259     : ---------1-----0----1---
259     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
260     : ----------1-----0-1-----
260     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
261     : ----------1-----0---1---
261     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
262     : -----------1-----01-----
262     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
263     : -----------1-----0-1----
263     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
264     : ---------1---1-0--------
264     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
265     : ---------1----10--------
265     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
266     : ----------1-1---0-------
266     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
267     : ----------1---1-0-------
267     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
268     : -----------11----0------
268     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
269     : -----------1-1---0------
269     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
270     : ---------1------1-0-----
270     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
271     : ---------1-------10-----
271     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
272     : ----------1----1---0----
272     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
273     : ----------1------1-0----
273     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
274     : -----------1---1----0---
274     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
275     : -----------1----1---0---
275     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
276     : ---------1---1----0-----
276     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
277     : ---------1----1---0-----
277     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
278     : ----------1-1------0----
278     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
279     : ----------1---1----0----
279     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
280     : -----------11-------0---
280     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
281     : -----------1-1------0---
281     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
282 (*) : ---------1------1--1----
282     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
283     : ---------1-------1--1---
283     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
284     : ----------1----1--1-----
284     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
285     : ----------1------1--1---
285     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
286     : -----------1---1--1-----
286     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
287     : -----------1----1--1----
287     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
288     : ---------1---1-----1----
288     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
289     : ---------1----1-----1---
289     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
290     : ----------1-1-----1-----
290     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
291     : ----------1---1-----1---
291     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
292     : -----------11-----1-----
292     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
293     : -----------1-1-----1----
293     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
294     : ---------1---1--1-------
294     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
295     : ---------1----1--1------
295     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
296     : ----------1-1--1--------
296     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
297     : ----------1---1--1------
297     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
298     : -----------11--1--------
298     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
299     : -----------1-1--1-------
299     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
300 (*) : ---------1-------1-1----
300     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
301     : ---------1------1---1---
301     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
302     : ----------1------11-----
302     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
303     : ----------1----1----1---
303     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
304     : -----------1----1-1-----
304     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
305     : -----------1---1---1----
305     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
306     : ---------1----1----1----
306     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
307     : ---------1---1------1---
307     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
308     : ----------1---1---1-----
308     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
309     : ----------1-1-------1---
309     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
310     : -----------1-1----1-----
310     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
311     : -----------11------1----
311     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
312     : ---------1----1-1-------
312     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
313     : ---------1---1---1------
313     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
314     : ----------1---11--------
314     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
315     : ----------1-1----1------
315     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
316     : -----------1-1-1--------
316     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
317     : -----------11---1-------
317     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
318 (*) : ----0--------1-----1----
318     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
319     : -----0--------1-----1---
319     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
320     : ---0--------1-----1-----
320     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
321     : -0-----------1--1-------
321     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
322     : --0-----------1--1------
322     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
323     : 0-----------1--1--------
323     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
324     : -------0--------1--1----
324     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
325     : --------0--------1--1---
325     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
326     : ------0--------1--1-----
326     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 18
num_suborbits: 1
327 (*) : -1-----0-----------1----
327     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
328     : --1-----0-----------1---
328     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
329     : 1-----0-----------1-----
329     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
330     : ----1--0--------1-------
330     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
331     : -----1--0--------1------
331     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
332     : ---1--0--------1--------
332     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
333     : -1--0--------------1----
333     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
334     : --1--0--------------1---
334     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
335     : 1--0--------------1-----
335     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
336     : ----0--1-----1----------
336     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
337     : -----0--1-----1---------
337     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
338     : ---0--1-----1-----------
338     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
339     : -0--1-----------1-------
339     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
340     : --0--1-----------1------
340     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
341     : 0--1-----------1--------
341     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
342     : -0-----1-----1----------
342     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
343     : --0-----1-----1---------
343     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
344     : 0-----1-----1-----------
344     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 9
num_suborbits: 1
345 (*) : -0--1--1----------------
345     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
346     : --0--1--1---------------
346     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
347     : 0--1--1-----------------
347     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
348     : -1--0--1----------------
348     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
349     : --1--0--1---------------
349     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
350     : 1--0--1-----------------
350     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
351     : -1--1--0----------------
351     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
352     : --1--1--0---------------
352     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
353     : 1--1--0-----------------
353     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
354 (*) : ------------------000--1
354     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
355     : ---------------000----1-
355     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : ------------000------1--
356     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 9
num_suborbits: 1
357 (*) : ----0--0--1--------1----
357     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
358     : -----0--0--1--------1---
358     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
359     : ---0--0--1--------1-----
359     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : -0-----0--1-----1-------
360     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
361     : --0-----0--1-----1------
361     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
362     : 0-----0--1-----1--------
362     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : -0--0-----1--1----------
363     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
364     : --0--0-----1--1---------
364     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 3
num_suborbits: 1
366 (*) : -0--0--0--1-------------
366     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
367     : --0--0--0--1------------
367     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
368     : 0--0--0--1--------------
368     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 1
369 (*) : -------0--------1-0-0--1
369     : ['vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
370     : --------0--------100---1
370     : ['vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
371     : ------0--------1---00--1
371     : ['vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
372     : -------0-------0-0-1--1-
372     : ['vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
373     : --------0------00---1-1-
373     : ['vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
374     : ------0---------001---1-
374     : ['vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
375     : ----0--------1----0-0--1
375     : ['vote(node0,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
376     : -----0--------1---00---1
376     : ['vote(node0,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
377     : ---0--------1------00--1
377     : ['vote(node0,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
378     : ----0-------0-0----1-1--
378     : ['vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
379     : -----0------00------11--
379     : ['vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
380     : ---0---------00---1--1--
380     : ['vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
381     : -0-----------1-0-0----1-
381     : ['vote(node0,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
382     : --0-----------100-----1-
382     : ['vote(node0,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
383     : 0-----------1---00----1-
383     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
384     : -0----------0-0-1----1--
384     : ['vote(node1,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
385     : --0---------00---1---1--
385     : ['vote(node1,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
386     : 0------------001-----1--
386     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 18
num_suborbits: 1
387 (*) : --1-----0---------00---1
387     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
388     : -1-----0----------0-0--1
388     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
389     : 1-----0------------00--1
389     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
390     : -----1--0------00-----1-
390     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
391     : ----1--0-------0-0----1-
391     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
392     : ---1--0---------00----1-
392     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
393     : --1--0------------00---1
393     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
394     : -1--0-------------0-0--1
394     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
395     : 1--0---------------00--1
395     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
396     : -----0--1---00-------1--
396     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
397     : ----0--1----0-0------1--
397     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
398     : ---0--1------00------1--
398     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
399     : --0--1---------00-----1-
399     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
400     : -0--1----------0-0----1-
400     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
401     : 0--1------------00----1-
401     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
402     : --0-----1---00-------1--
402     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
403     : -0-----1----0-0------1--
403     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
404     : 0-----1------00------1--
404     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
405 (*) : 0--0-----1---00------1--
405     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
406     : -0--0-----1-0-0------1--
406     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
407     : --0--0-----100-------1--
407     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
408     : 0-----0--1------00----1-
408     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
409     : -0-----0--1----0-0----1-
409     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : --0-----0--1---00-----1-
410     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
411     : ---0--0--1---------00--1
411     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
412     : ----0--0--1-------0-0--1
412     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
413     : -----0--0--1------00---1
413     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 18
num_suborbits: 1
414 (*) : -0------0----1-0----1-1-
414     : ['vote(node0,value1)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)']
415     : --0----0------10---1--1-
415     : ['vote(node0,value2)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
416     : 0-------0---1---0---1-1-
416     : ['vote(node0,value0)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)']
417     : --0---0-------1-0-1---1-
417     : ['vote(node0,value2)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
418     : 0------0----1----0-1--1-
418     : ['vote(node0,value0)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)']
419     : -0----0------1---01---1-
419     : ['vote(node0,value1)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)']
420     : ----0---0----1---10----1
420     : ['vote(node0,value1)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)']
421     : -----0-0------1-1-0----1
421     : ['vote(node0,value2)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
422     : ---0----0---1----1-0---1
422     : ['vote(node0,value0)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value1)']
423     : -----00-------11---0---1
423     : ['vote(node0,value2)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
424     : ---0---0----1---1---0--1
424     : ['vote(node0,value0)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value2)']
425     : ----0-0------1-1----0--1
425     : ['vote(node0,value1)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value2)']
426     : -0---0------0---1---11--
426     : ['vote(node1,value1)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)']
427     : --0-0-------0----1-1-1--
427     : ['vote(node1,value2)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
428     : 0----0-------0-1----11--
428     : ['vote(node1,value0)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)']
429     : --00---------0---11--1--
429     : ['vote(node1,value2)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
430     : 0---0---------01---1-1--
430     : ['vote(node1,value0)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)']
431     : -0-0----------0-1-1--1--
431     : ['vote(node1,value1)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 9
num_suborbits: 1
432 (*) : --0---------00-00----11-
432     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
433     : -0----------0-00-0---11-
433     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
434     : 0------------00-00---11-
434     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
435     : -----0------00----00-1-1
435     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
436     : ----0-------0-0---0-01-1
436     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
437     : ---0---------00----001-1
437     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
438     : --------0------00-00--11
438     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
439     : -------0-------0-00-0-11
439     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
440     : ------0---------00-00-11
440     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
441 (*) : 0---0--0------0--0-1-11-
441     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
442     : 0----0--0----0--0---111-
442     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)']
443     : -0-0--0-------0--01--11-
443     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
444     : -0---0--0---0--0----111-
444     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)']
445     : --00--0------0--0-1--11-
445     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
446     : --0-0--0----0--0---1-11-
446     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)']
447     : -0-0---0------0-1---01-1
447     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
448     : --00----0----0---1-0-1-1
448     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node2,value1)']
449     : 0---0-0-------01----01-1
449     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
450     : --0-0---0---0----10--1-1
450     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)']
451     : 0----00------0-1---0-1-1
451     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
452     : -0---0-0----0---1-0--1-1
452     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)']
453     : -0--0-0------1---0--0-11
453     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
454     : --0--00-------1-0--0--11
454     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
455     : 0--0---0----1----0--0-11
455     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
456     : --0--0-0------10--0---11
456     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
457     : 0--0----0---1---0--0--11
457     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
458     : -0--0---0----1-0--0---11
458     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 36
num_suborbits: 1
459 (*) : 0---0---------0-00-1-11-
459     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
460     : 0----0-------0--00--111-
460     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
461     : -0-0----------00-01--11-
461     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
462     : -0---0------0--0-0--111-
462     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
463     : --00---------0-00-1--11-
463     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
464     : --0-0-------0--00--1-11-
464     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
465     : -0-0----------0-1--001-1
465     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
466     : --00---------0---1-001-1
466     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
467     : 0---0---------01--0-01-1
467     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
468     : --0-0-------0----10-01-1
468     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
469     : 0----0-------0-1--00-1-1
469     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
470     : -0---0------0---1-00-1-1
470     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
471     : 0------0-----00--0-1-11-
471     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
472     : 0-------0----00-0---111-
472     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
473     : -0----0-----0-0--01--11-
473     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
474     : -0------0---0-00----111-
474     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
475     : --0---0-----00--0-1--11-
475     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
476     : --0----0----00-0---1-11-
476     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
477     : -0----0------1---0-00-11
477     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
478     : --0---0-------1-0--00-11
478     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
479     : 0------0----1----00-0-11
479     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
480     : --0----0------10--0-0-11
480     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
481     : 0-------0---1---0-00--11
481     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
482     : -0------0----1-0--00--11
482     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
483     : ---0---0-----00-1---01-1
483     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
484     : ---0----0----00--1-0-1-1
484     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
485     : ----0-0-----0-01----01-1
485     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
486     : ----0---0---0-0--10--1-1
486     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
487     : -----00-----00-1---0-1-1
487     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
488     : -----0-0----00--1-0--1-1
488     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
489     : ----0-0------1--00--0-11
489     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
490     : -----00-------1-00-0--11
490     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
491     : ---0---0----1--0-0--0-11
491     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
492     : -----0-0------10-00---11
492     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
493     : ---0----0---1--00--0--11
493     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
494     : ----0---0----1-00-0---11
494     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 18
num_suborbits: 1
495 (*) : 0--0---0-----00--0--0111
495     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
496     : 0--0----0----00-0--0-111
496     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
497     : -0--0-0-----0-0--0--0111
497     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
498     : -0--0---0---0-00--0--111
498     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
499     : --0--00-----00--0--0-111
499     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
500     : --0--0-0----00-0--0--111
500     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
501     : 0---0-0-------0-00--0111
501     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
502     : 0----00------0--00-0-111
502     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
503     : -0-0---0------00-0--0111
503     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
504     : -0---0-0----0--0-00--111
504     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
505     : --00----0----0-00--0-111
505     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
506     : --0-0---0---0--00-0--111
506     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
507     : -0-0--0-------0--0-00111
507     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
508     : --00--0------0--0--00111
508     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
509     : 0---0--0------0--00-0111
509     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
510     : --0-0--0----0--0--0-0111
510     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
511     : 0----0--0----0--0-00-111
511     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
512     : -0---0--0---0--0--00-111
512     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 18
num_suborbits: 1
513 (*) : ---0---0-----000-0--0111
513     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
514     : ---0----0----0000--0-111
514     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
515     : ----0-0-----0-0-00--0111
515     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
516     : ----0---0---0-000-0--111
516     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
517     : -----00-----00--00-0-111
517     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
518     : -----0-0----00-0-00--111
518     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
519     : 0------0-----00--00-0111
519     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
520     : 0-------0----00-0-00-111
520     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
521     : -0----0-----0-0--0-00111
521     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
522     : -0------0---0-00--00-111
522     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
523     : --0---0-----00--0--00111
523     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
524     : --0----0----00-0--0-0111
524     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
525     : 0---0---------0-000-0111
525     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
526     : 0----0-------0--0000-111
526     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
527     : -0-0----------00-0-00111
527     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
528     : -0---0------0--0-000-111
528     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
529     : --00---------0-00--00111
529     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
530     : --0-0-------0--00-0-0111
530     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 34 =====================
size : 3
num_suborbits: 1
531 (*) : 0-00-00-0----0--0--0-111
531     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
532     : 00-00-00------0--0--0111
532     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
533     : -00-00-00---0--0--0--111
533     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 35

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 0.297 seconds

[QRM NOTE]: Time elapsed since last: 0.253 seconds

[QRM NOTE]: Peak memory: 1737898 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

====================================================================================================

definition primes: {19, 20, 21, 6}


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
 solution : []

Essensial at level 0 : {0, 2, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 131072), (4, 2147483648), (5, 0), (6, -1), (7, 0), (8, 0), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, 0), (26, 0), (27, 524288), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0)]

Covered at level 0 : {32, 1, 33, 34, 5, 7, 8, 25, 26, 28, 29, 30, 31}

After reduction : 
 pending  : [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 131072), (4, 2147483648), (5, 0), (6, -1), (7, 0), (8, 0), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, 0), (26, 0), (27, 524288), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22]

[QRM NOTE]: Time elapsed since start: 0.405 seconds

[QRM NOTE]: Time elapsed since last: 0.108 seconds

[QRM NOTE]: Peak memory: 676124 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', 'vote(node1,value1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', 'vote(node1,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : ------------1--------0--
45     : ['vote(node0,value0)', '~voted(node0)']
46     : -------------1-------0--
46     : ['vote(node0,value1)', '~voted(node0)']
47     : --------------1------0--
47     : ['vote(node0,value2)', '~voted(node0)']
48     : ---------------1------0-
48     : ['vote(node1,value0)', '~voted(node1)']
49     : ----------------1-----0-
49     : ['vote(node1,value1)', '~voted(node1)']
50     : -----------------1----0-
50     : ['vote(node1,value2)', '~voted(node1)']
51     : ------------------1----0
51     : ['vote(node2,value0)', '~voted(node2)']
52     : -------------------1---0
52     : ['vote(node2,value1)', '~voted(node2)']
53     : --------------------1--0
53     : ['vote(node2,value2)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', '~voted(node0)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', '~voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
354 (*) : ------------------000--1
354     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
355     : ---------------000----1-
355     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : ------------000------1--
356     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)']

sign_func_name2args: {'1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$1$vote$0$2, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$2]}

sig2const: {'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2', 'value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2')


---------- SigGenerator ----------

terms:  ['~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 3, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : --------1-1-------------
54     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
55     : -------1---1------------
55     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
56     : --------11--------------
56     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
57     : ------1----1------------
57     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
58     : -------1-1--------------
58     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
59     : ------1---1-------------
59     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
60     : -----1----1-------------
60     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
61     : ----1------1------------
61     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
62     : -----1---1--------------
62     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
63     : ---1-------1------------
63     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
64     : ----1----1--------------
64     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
65     : ---1------1-------------
65     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
66     : --1-------1-------------
66     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
67     : -1---------1------------
67     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
68     : --1------1--------------
68     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
69     : 1----------1------------
69     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
70     : -1-------1--------------
70     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
71     : 1---------1-------------
71     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['chosenAt(QUORUM0,VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,QUORUM0. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ---------11-------------
72     : ['decided(value0)', 'decided(value1)']
73     : ---------1-1------------
73     : ['decided(value0)', 'decided(value2)']
74     : ----------11------------
74     : ['decided(value1)', 'decided(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1. ~decided(VALUE1) | ~decided(VALUE0) | VALUE0 = VALUE1


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
138 (*) : --------0--1---------0--
138     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
139     : -------0--1----------0--
139     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
140     : ------0--1-----------0--
140     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
141     : -----0-----1----------0-
141     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
142     : ----0-----1-----------0-
142     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
143     : ---0-----1------------0-
143     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
144     : --0--------1-----------0
144     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
145     : -0--------1------------0
145     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
146     : 0--------1-------------0
146     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', '~voted(node0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', '~voted(node0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', '~member(NODE0,QUORUM0)', 'decided(VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0) | voted(NODE0)


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
147 (*) : -----------1-----0---0--
147     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
148     : ----------1-----0----0--
148     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
149     : ---------1-----0-----0--
149     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
150     : -----------1--------00--
150     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
151     : ----------1--------0-0--
151     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
152     : ---------1--------0--0--
152     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
153     : -----------1--0-------0-
153     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
154     : ----------1--0--------0-
154     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
155     : ---------1--0---------0-
155     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
156     : -----------1--------0-0-
156     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
157     : ----------1--------0--0-
157     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
158     : ---------1--------0---0-
158     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
159     : -----------1--0--------0
159     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
160     : ----------1--0---------0
160     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
161     : ---------1--0----------0
161     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
162     : -----------1-----0-----0
162     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
163     : ----------1-----0------0
163     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
164     : ---------1-----0-------0
164     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~voted(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | voted(NODE1) | NODE0 = NODE1


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
165 (*) : -----------1-------1-0--
165     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
166     : ----------1---------10--
166     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
167     : -----------1------1--0--
167     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
168     : ---------1----------10--
168     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
169     : ----------1-------1--0--
169     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
170     : ---------1---------1-0--
170     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
171     : -----------1----1----0--
171     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
172     : ----------1------1---0--
172     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
173     : -----------1---1-----0--
173     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
174     : ---------1-------1---0--
174     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
175     : ----------1----1-----0--
175     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
176     : ---------1------1----0--
176     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
177     : -----------1-------1--0-
177     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
178     : ----------1---------1-0-
178     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
179     : -----------1------1---0-
179     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
180     : ---------1----------1-0-
180     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
181     : ----------1-------1---0-
181     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
182     : ---------1---------1--0-
182     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
183     : -----------1-1--------0-
183     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
184     : ----------1---1-------0-
184     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
185     : -----------11---------0-
185     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
186     : ---------1----1-------0-
186     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
187     : ----------1-1---------0-
187     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
188     : ---------1---1--------0-
188     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
189     : -----------1----1------0
189     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
190     : ----------1------1-----0
190     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
191     : -----------1---1-------0
191     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
192     : ---------1-------1-----0
192     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
193     : ----------1----1-------0
193     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
194     : ---------1------1------0
194     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
195     : -----------1-1---------0
195     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
196     : ----------1---1--------0
196     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
197     : -----------11----------0
197     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
198     : ---------1----1--------0
198     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
199     : ----------1-1----------0
199     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
200     : ---------1---1---------0
200     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', '~voted(NODE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | voted(NODE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
201 (*) : -----------1---------0-0
201     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
202     : ----------1----------0-0
202     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
203     : ---------1-----------0-0
203     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
204     : -----------1---------00-
204     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
205     : ----------1----------00-
205     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
206     : ---------1-----------00-
206     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
207     : -----------1----------00
207     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
208     : ----------1-----------00
208     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
209     : ---------1------------00
209     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~voted(node0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~voted(node0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'decided(VALUE0)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. voted(NODE1) | ~decided(VALUE0) | voted(NODE0) | NODE0 = NODE1


=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
210 (*) : ------0--1--0-----------
210     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
211     : -------0--1--0----------
211     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
212     : --------0--1--0---------
212     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
213     : ---0-----1-----0--------
213     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
214     : ----0-----1-----0-------
214     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
215     : -----0-----1-----0------
215     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
216     : 0--------1--------0-----
216     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
217     : -0--------1--------0----
217     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
218     : --0--------1--------0---
218     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node0,value0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node0,value0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', '~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE0) | ~decided(VALUE0) | member(NODE0,QUORUM0)


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
219 (*) : ---------1--0--0--------
219     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
220     : ----------1--0--0-------
220     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
221     : -----------1--0--0------
221     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
222     : ---------1--0-----0-----
222     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
223     : ----------1--0-----0----
223     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
224     : -----------1--0-----0---
224     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
225     : ---------1-----0--0-----
225     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
226     : ----------1-----0--0----
226     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
227     : -----------1-----0--0---
227     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decided(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


=== Prime Orbit 15 =====================
size : 18
num_suborbits: 1
228 (*) : 0--------1---------1----
228     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
229     : 0--------1----------1---
229     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
230     : -0--------1-------1-----
230     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
231     : -0--------1---------1---
231     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
232     : --0--------1------1-----
232     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
233     : --0--------1-------1----
233     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
234     : ---0-----1------1-------
234     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
235     : ---0-----1-------1------
235     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
236     : ----0-----1----1--------
236     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
237     : ----0-----1------1------
237     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
238     : -----0-----1---1--------
238     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
239     : -----0-----1----1-------
239     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
240     : ------0--1---1----------
240     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
241     : ------0--1----1---------
241     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
242     : -------0--1-1-----------
242     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
243     : -------0--1---1---------
243     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
244     : --------0--11-----------
244     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
245     : --------0--1-1----------
245     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)', 'vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', 'decided(value0)', 'vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'vote(NODE0,VALUE1)', 'decided(VALUE0)', '~member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | member(NODE0,QUORUM0) | VALUE0 = VALUE1


=== Prime Orbit 16 =====================
size : 36
num_suborbits: 1
246 (*) : ---------1--0------1----
246     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
247     : ---------1--0-------1---
247     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
248     : ----------1--0----1-----
248     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
249     : ----------1--0------1---
249     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
250     : -----------1--0---1-----
250     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
251     : -----------1--0----1----
251     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
252     : ---------1--0---1-------
252     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
253     : ---------1--0----1------
253     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
254     : ----------1--0-1--------
254     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
255     : ----------1--0---1------
255     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
256     : -----------1--01--------
256     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
257     : -----------1--0-1-------
257     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
258     : ---------1-----0---1----
258     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
259     : ---------1-----0----1---
259     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
260     : ----------1-----0-1-----
260     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
261     : ----------1-----0---1---
261     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
262     : -----------1-----01-----
262     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
263     : -----------1-----0-1----
263     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
264     : ---------1---1-0--------
264     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
265     : ---------1----10--------
265     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
266     : ----------1-1---0-------
266     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
267     : ----------1---1-0-------
267     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
268     : -----------11----0------
268     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
269     : -----------1-1---0------
269     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
270     : ---------1------1-0-----
270     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
271     : ---------1-------10-----
271     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
272     : ----------1----1---0----
272     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
273     : ----------1------1-0----
273     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
274     : -----------1---1----0---
274     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
275     : -----------1----1---0---
275     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
276     : ---------1---1----0-----
276     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
277     : ---------1----1---0-----
277     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
278     : ----------1-1------0----
278     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
279     : ----------1---1----0----
279     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
280     : -----------11-------0---
280     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
281     : -----------1-1------0---
281     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
282 (*) : ---------1------1--1----
282     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
283     : ---------1-------1--1---
283     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
284     : ----------1----1--1-----
284     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
285     : ----------1------1--1---
285     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
286     : -----------1---1--1-----
286     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
287     : -----------1----1--1----
287     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
288     : ---------1---1-----1----
288     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
289     : ---------1----1-----1---
289     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
290     : ----------1-1-----1-----
290     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
291     : ----------1---1-----1---
291     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
292     : -----------11-----1-----
292     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
293     : -----------1-1-----1----
293     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
294     : ---------1---1--1-------
294     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
295     : ---------1----1--1------
295     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
296     : ----------1-1--1--------
296     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
297     : ----------1---1--1------
297     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
298     : -----------11--1--------
298     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
299     : -----------1-1--1-------
299     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'vote(NODE1,VALUE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
300 (*) : ---------1-------1-1----
300     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
301     : ---------1------1---1---
301     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
302     : ----------1------11-----
302     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
303     : ----------1----1----1---
303     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
304     : -----------1----1-1-----
304     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
305     : -----------1---1---1----
305     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
306     : ---------1----1----1----
306     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
307     : ---------1---1------1---
307     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
308     : ----------1---1---1-----
308     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
309     : ----------1-1-------1---
309     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
310     : -----------1-1----1-----
310     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
311     : -----------11------1----
311     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
312     : ---------1----1-1-------
312     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
313     : ---------1---1---1------
313     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
314     : ----------1---11--------
314     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
315     : ----------1-1----1------
315     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
316     : -----------1-1-1--------
316     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
317     : -----------11---1-------
317     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'decided(VALUE0)', 'vote(NODE1,VALUE2)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE2,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ~vote(NODE1,VALUE2) | (VALUE0 = VALUE2 | VALUE0 = VALUE1 | NODE0 = NODE1 | VALUE1 = VALUE2)


=== Prime Orbit 23 =====================
size : 9
num_suborbits: 1
357 (*) : ----0--0--1--------1----
357     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
358     : -----0--0--1--------1---
358     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
359     : ---0--0--1--------1-----
359     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : -0-----0--1-----1-------
360     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
361     : --0-----0--1-----1------
361     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
362     : 0-----0--1-----1--------
362     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : -0--0-----1--1----------
363     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
364     : --0--0-----1--1---------
364     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', 'vote(node2,value1)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', 'vote(node2,value1)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', 'vote(NODE0,VALUE0)', '~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0,QUORUM1. ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | ~decided(VALUE0) | QUORUM0 = QUORUM1


=== Prime Orbit 24 =====================
size : 3
num_suborbits: 1
366 (*) : -0--0--0--1-------------
366     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
367     : --0--0--0--1------------
367     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
368     : 0--0--0--1--------------
368     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
405 (*) : 0--0-----1---00------1--
405     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
406     : -0--0-----1-0-0------1--
406     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
407     : --0--0-----100-------1--
407     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
408     : 0-----0--1------00----1-
408     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
409     : -0-----0--1----0-0----1-
409     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : --0-----0--1---00-----1-
410     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
411     : ---0--0--1---------00--1
411     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
412     : ----0--0--1-------0-0--1
412     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
413     : -----0--0--1------00---1
413     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decided(value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', 'decided(value0)', '~vote(node0,value1)', '~vote(node0,value2)', 'voted(node0)', 'member(node0,quorum__node0_node1)', 'member(node0,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '1$vote': 2, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', 'member(NODE0,QUORUM0)', '~chosenAt(QUORUM1,VALUE1)', 'decided(VALUE1)', '~chosenAt(QUORUM0,VALUE1)', 'member(NODE0,QUORUM1)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE1,QUORUM0,QUORUM1. ~voted(NODE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE1) | ~decided(VALUE1) | chosenAt(QUORUM0,VALUE1) | ~member(NODE0,QUORUM1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : ------------1--------0--
45     : ['vote(node0,value0)', '~voted(node0)']
46     : -------------1-------0--
46     : ['vote(node0,value1)', '~voted(node0)']
47     : --------------1------0--
47     : ['vote(node0,value2)', '~voted(node0)']
48     : ---------------1------0-
48     : ['vote(node1,value0)', '~voted(node1)']
49     : ----------------1-----0-
49     : ['vote(node1,value1)', '~voted(node1)']
50     : -----------------1----0-
50     : ['vote(node1,value2)', '~voted(node1)']
51     : ------------------1----0
51     : ['vote(node2,value0)', '~voted(node2)']
52     : -------------------1---0
52     : ['vote(node2,value1)', '~voted(node2)']
53     : --------------------1--0
53     : ['vote(node2,value2)', '~voted(node2)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)
qcost : 4




=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
354 (*) : ------------------000--1
354     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
355     : ---------------000----1-
355     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : ------------000------1--
356     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))
qcost : 4




=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : --------1-1-------------
54     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
55     : -------1---1------------
55     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
56     : --------11--------------
56     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
57     : ------1----1------------
57     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
58     : -------1-1--------------
58     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
59     : ------1---1-------------
59     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
60     : -----1----1-------------
60     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
61     : ----1------1------------
61     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
62     : -----1---1--------------
62     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
63     : ---1-------1------------
63     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
64     : ----1----1--------------
64     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
65     : ---1------1-------------
65     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
66     : --1-------1-------------
66     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
67     : -1---------1------------
67     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
68     : --1------1--------------
68     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
69     : 1----------1------------
69     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
70     : -1-------1--------------
70     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
71     : 1---------1-------------
71     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1,QUORUM0. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
72 (*) : ---------11-------------
72     : ['decided(value0)', 'decided(value1)']
73     : ---------1-1------------
73     : ['decided(value0)', 'decided(value2)']
74     : ----------11------------
74     : ['decided(value1)', 'decided(value2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1. ~decided(VALUE1) | ~decided(VALUE0) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
138 (*) : --------0--1---------0--
138     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
139     : -------0--1----------0--
139     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
140     : ------0--1-----------0--
140     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
141     : -----0-----1----------0-
141     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
142     : ----0-----1-----------0-
142     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
143     : ---0-----1------------0-
143     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
144     : --0--------1-----------0
144     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
145     : -0--------1------------0
145     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
146     : 0--------1-------------0
146     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | member(NODE0,QUORUM0) | ~decided(VALUE0) | voted(NODE0)
qcost : 7




=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
147 (*) : -----------1-----0---0--
147     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
148     : ----------1-----0----0--
148     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
149     : ---------1-----0-----0--
149     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
150     : -----------1--------00--
150     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
151     : ----------1--------0-0--
151     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
152     : ---------1--------0--0--
152     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
153     : -----------1--0-------0-
153     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
154     : ----------1--0--------0-
154     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
155     : ---------1--0---------0-
155     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
156     : -----------1--------0-0-
156     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
157     : ----------1--------0--0-
157     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
158     : ---------1--------0---0-
158     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
159     : -----------1--0--------0
159     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
160     : ----------1--0---------0
160     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
161     : ---------1--0----------0
161     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
162     : -----------1-----0-----0
162     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
163     : ----------1-----0------0
163     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
164     : ---------1-----0-------0
164     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | voted(NODE1) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
165 (*) : -----------1-------1-0--
165     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
166     : ----------1---------10--
166     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
167     : -----------1------1--0--
167     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
168     : ---------1----------10--
168     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
169     : ----------1-------1--0--
169     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
170     : ---------1---------1-0--
170     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
171     : -----------1----1----0--
171     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
172     : ----------1------1---0--
172     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
173     : -----------1---1-----0--
173     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
174     : ---------1-------1---0--
174     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
175     : ----------1----1-----0--
175     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
176     : ---------1------1----0--
176     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
177     : -----------1-------1--0-
177     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
178     : ----------1---------1-0-
178     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
179     : -----------1------1---0-
179     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
180     : ---------1----------1-0-
180     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
181     : ----------1-------1---0-
181     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
182     : ---------1---------1--0-
182     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
183     : -----------1-1--------0-
183     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
184     : ----------1---1-------0-
184     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
185     : -----------11---------0-
185     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
186     : ---------1----1-------0-
186     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
187     : ----------1-1---------0-
187     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
188     : ---------1---1--------0-
188     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
189     : -----------1----1------0
189     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
190     : ----------1------1-----0
190     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
191     : -----------1---1-------0
191     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
192     : ---------1-------1-----0
192     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
193     : ----------1----1-------0
193     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
194     : ---------1------1------0
194     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
195     : -----------1-1---------0
195     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
196     : ----------1---1--------0
196     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
197     : -----------11----------0
197     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
198     : ---------1----1--------0
198     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
199     : ----------1-1----------0
199     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
200     : ---------1---1---------0
200     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | voted(NODE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
201 (*) : -----------1---------0-0
201     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
202     : ----------1----------0-0
202     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
203     : ---------1-----------0-0
203     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
204     : -----------1---------00-
204     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
205     : ----------1----------00-
205     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
206     : ---------1-----------00-
206     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
207     : -----------1----------00
207     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
208     : ----------1-----------00
208     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
209     : ---------1------------00
209     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. voted(NODE1) | ~decided(VALUE0) | voted(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 13 =====================
size : 9
num_suborbits: 1
210 (*) : ------0--1--0-----------
210     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
211     : -------0--1--0----------
211     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
212     : --------0--1--0---------
212     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
213     : ---0-----1-----0--------
213     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
214     : ----0-----1-----0-------
214     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
215     : -----0-----1-----0------
215     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
216     : 0--------1--------0-----
216     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
217     : -0--------1--------0----
217     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
218     : --0--------1--------0---
218     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | vote(NODE0,VALUE0) | ~decided(VALUE0) | member(NODE0,QUORUM0)
qcost : 7




=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
219 (*) : ---------1--0--0--------
219     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
220     : ----------1--0--0-------
220     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
221     : -----------1--0--0------
221     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
222     : ---------1--0-----0-----
222     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
223     : ----------1--0-----0----
223     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
224     : -----------1--0-----0---
224     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
225     : ---------1-----0--0-----
225     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
226     : ----------1-----0--0----
226     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
227     : -----------1-----0--0---
227     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,NODE1. vote(NODE0,VALUE0) | ~decided(VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 15 =====================
size : 18
num_suborbits: 1
228 (*) : 0--------1---------1----
228     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
229     : 0--------1----------1---
229     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
230     : -0--------1-------1-----
230     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
231     : -0--------1---------1---
231     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
232     : --0--------1------1-----
232     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
233     : --0--------1-------1----
233     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
234     : ---0-----1------1-------
234     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
235     : ---0-----1-------1------
235     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
236     : ----0-----1----1--------
236     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
237     : ----0-----1------1------
237     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
238     : -----0-----1---1--------
238     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
239     : -----0-----1----1-------
239     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
240     : ------0--1---1----------
240     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
241     : ------0--1----1---------
241     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
242     : -------0--1-1-----------
242     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
243     : -------0--1---1---------
243     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
244     : --------0--11-----------
244     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
245     : --------0--1-1----------
245     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~vote(NODE0,VALUE1) | ~decided(VALUE0) | member(NODE0,QUORUM0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 16 =====================
size : 36
num_suborbits: 1
246 (*) : ---------1--0------1----
246     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
247     : ---------1--0-------1---
247     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
248     : ----------1--0----1-----
248     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
249     : ----------1--0------1---
249     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
250     : -----------1--0---1-----
250     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
251     : -----------1--0----1----
251     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
252     : ---------1--0---1-------
252     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
253     : ---------1--0----1------
253     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
254     : ----------1--0-1--------
254     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
255     : ----------1--0---1------
255     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
256     : -----------1--01--------
256     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
257     : -----------1--0-1-------
257     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
258     : ---------1-----0---1----
258     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
259     : ---------1-----0----1---
259     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
260     : ----------1-----0-1-----
260     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
261     : ----------1-----0---1---
261     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
262     : -----------1-----01-----
262     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
263     : -----------1-----0-1----
263     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
264     : ---------1---1-0--------
264     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
265     : ---------1----10--------
265     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
266     : ----------1-1---0-------
266     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
267     : ----------1---1-0-------
267     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
268     : -----------11----0------
268     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
269     : -----------1-1---0------
269     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
270     : ---------1------1-0-----
270     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
271     : ---------1-------10-----
271     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
272     : ----------1----1---0----
272     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
273     : ----------1------1-0----
273     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
274     : -----------1---1----0---
274     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
275     : -----------1----1---0---
275     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
276     : ---------1---1----0-----
276     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
277     : ---------1----1---0-----
277     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
278     : ----------1-1------0----
278     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
279     : ----------1---1----0----
279     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
280     : -----------11-------0---
280     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
281     : -----------1-1------0---
281     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
282 (*) : ---------1------1--1----
282     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
283     : ---------1-------1--1---
283     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
284     : ----------1----1--1-----
284     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
285     : ----------1------1--1---
285     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
286     : -----------1---1--1-----
286     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
287     : -----------1----1--1----
287     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
288     : ---------1---1-----1----
288     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
289     : ---------1----1-----1---
289     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
290     : ----------1-1-----1-----
290     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
291     : ----------1---1-----1---
291     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
292     : -----------11-----1-----
292     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
293     : -----------1-1-----1----
293     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
294     : ---------1---1--1-------
294     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
295     : ---------1----1--1------
295     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
296     : ----------1-1--1--------
296     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
297     : ----------1---1--1------
297     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
298     : -----------11--1--------
298     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
299     : -----------1-1--1-------
299     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE1) | ~decided(VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 18 =====================
size : 18
num_suborbits: 1
300 (*) : ---------1-------1-1----
300     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
301     : ---------1------1---1---
301     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
302     : ----------1------11-----
302     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
303     : ----------1----1----1---
303     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
304     : -----------1----1-1-----
304     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
305     : -----------1---1---1----
305     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
306     : ---------1----1----1----
306     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
307     : ---------1---1------1---
307     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
308     : ----------1---1---1-----
308     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
309     : ----------1-1-------1---
309     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
310     : -----------1-1----1-----
310     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
311     : -----------11------1----
311     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
312     : ---------1----1-1-------
312     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
313     : ---------1---1---1------
313     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
314     : ----------1---11--------
314     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
315     : ----------1-1----1------
315     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
316     : -----------1-1-1--------
316     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
317     : -----------11---1-------
317     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
num_forall :   5
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,NODE0,VALUE2,VALUE1,NODE1. ~vote(NODE0,VALUE1) | ~decided(VALUE0) | ~vote(NODE1,VALUE2) | (VALUE0 = VALUE2 | VALUE0 = VALUE1 | NODE0 = NODE1 | VALUE1 = VALUE2)
qcost : 12




=== Prime Orbit 23 =====================
size : 9
num_suborbits: 1
357 (*) : ----0--0--1--------1----
357     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
358     : -----0--0--1--------1---
358     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
359     : ---0--0--1--------1-----
359     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : -0-----0--1-----1-------
360     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
361     : --0-----0--1-----1------
361     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
362     : 0-----0--1-----1--------
362     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
363     : -0--0-----1--1----------
363     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
364     : --0--0-----1--1---------
364     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
365     : 0--0-----1--1-----------
365     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall NODE0,VALUE0,QUORUM0,QUORUM1. ~member(NODE0,QUORUM0) | ~vote(NODE0,VALUE0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM1) | ~decided(VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 24 =====================
size : 3
num_suborbits: 1
366 (*) : -0--0--0--1-------------
366     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
367     : --0--0--0--1------------
367     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
368     : 0--0--0--1--------------
368     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))
qcost : 4




=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
405 (*) : 0--0-----1---00------1--
405     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
406     : -0--0-----1-0-0------1--
406     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
407     : --0--0-----100-------1--
407     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
408     : 0-----0--1------00----1-
408     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
409     : -0-----0--1----0-0----1-
409     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : --0-----0--1---00-----1-
410     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
411     : ---0--0--1---------00--1
411     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
412     : ----0--0--1-------0-0--1
412     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
413     : -----0--0--1------00---1
413     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall NODE0,VALUE1,QUORUM0,QUORUM1. ~voted(NODE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE1) | ~decided(VALUE1) | chosenAt(QUORUM0,VALUE1) | ~member(NODE0,QUORUM1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 0.567 seconds

[QRM NOTE]: Time elapsed since last: 0.162 seconds

[QRM NOTE]: Peak memory: 2420419 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

=================================================================================================


New level: 1
 pending : [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 1 among pending : [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 4 with phase True at level 1

After decision at level 1
 pending : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22, 4]


New level: 2
 pending : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, 2147483648), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, 67108864), (14, 33554432), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, 134217728), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 2 among pending : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, 67108864), (14, 33554432), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, 134217728), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 24 with phase True at level 2

After decision at level 2
 pending : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 24]


New level: 3
 pending : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 24]


Before reduction : 
 pending  : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, 67108864), (14, 33554432), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, 134217728), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : {3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 24]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 24]


Solution : [0, 2, 22, 4, 24] has cost 23.


Before backtrack at level 3
 pending : []
 solution : [0, 2, 22, 4, 24]

After backtrack at level 3
 pending : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 24]


Invert decision for 24 at level 2


New level: 3
 pending : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, 67108864), (14, 33554432), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 3 among pending : [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, 67108864), (14, 33554432), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 13 with phase True at level 3

After decision at level 3
 pending : [3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 13]


New level: 4
 pending : [3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 13]


Before reduction : 
 pending  : [3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, 67108864), (14, 33554432), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : {3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 13]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 13]


Solution : [0, 2, 22, 4, 13] has cost 26.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 22, 4, 13]

After backtrack at level 4
 pending : [3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 13]


Invert decision for 13 at level 3


New level: 4
 pending : [3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, 33554432), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 4 among pending : [3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, 33554432), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 14]


New level: 5
 pending : [3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 14]


Before reduction : 
 pending  : [3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, 33554432), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : {3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 14]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 4, 14]


Solution : [0, 2, 22, 4, 14] has cost 26.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 22, 4, 14]

After backtrack at level 5
 pending : [3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 5 among pending : [3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 15 with phase True at level 5

After decision at level 5
 pending : [3, 9, 10, 11, 12, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 15]


New level: 6
 pending : [3, 9, 10, 11, 12, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 15]


Before reduction : 
 pending  : [3, 9, 10, 11, 12, 16, 17, 18, 23, 27]
 solution : [0, 2, 22, 4, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, 2097152), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, 2048), (11, 0), (12, 2048), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : {3, 11, 16, 17, 18}

After reduction : 
 pending  : [9, 10, 12, 23, 27]
 solution : [0, 2, 22, 4, 15]


Before reduction : 
 pending  : [9, 10, 12, 23, 27]
 solution : [0, 2, 22, 4, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, 2048), (11, 0), (12, 2048), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, 2048), (11, -1), (12, 2048), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 10, 12, 23, 27]
 solution : [0, 2, 22, 4, 15]


Solution : [0, 2, 22, 4, 15] has cost 28.


Before backtrack at level 6
 pending : [9, 10, 12, 23, 27]
 solution : [0, 2, 22, 4, 15]

After backtrack at level 6
 pending : [9, 10, 12, 23, 27, 3, 11, 16, 17, 18]
 solution : [0, 2, 22, 4, 15]


Invert decision for 15 at level 5


New level: 6
 pending : [9, 10, 12, 23, 27, 3, 11, 16, 17, 18]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [9, 10, 12, 23, 27, 3, 11, 16, 17, 18]
 solution : [0, 2, 22, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, 2048), (11, -1), (12, 2048), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, -1), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 10, 12, 23, 27, 3, 11, 16, 17, 18]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 6 among pending : [9, 10, 12, 23, 27, 3, 11, 16, 17, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, -1), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 16 with phase True at level 6

After decision at level 6
 pending : [9, 10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4, 16]


New level: 7
 pending : [9, 10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4, 16]


Before reduction : 
 pending  : [9, 10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4, 16]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, -1), (16, 1048576), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, 2048), (11, 0), (12, 2048), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : {11, 17, 18, 3}

After reduction : 
 pending  : [9, 10, 12, 23, 27]
 solution : [0, 2, 22, 4, 16]


Before reduction : 
 pending  : [9, 10, 12, 23, 27]
 solution : [0, 2, 22, 4, 16]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, 2048), (11, 0), (12, 2048), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, 2048), (11, -1), (12, 2048), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 10, 12, 23, 27]
 solution : [0, 2, 22, 4, 16]


Solution : [0, 2, 22, 4, 16] has cost 28.


Before backtrack at level 7
 pending : [9, 10, 12, 23, 27]
 solution : [0, 2, 22, 4, 16]

After backtrack at level 7
 pending : [9, 10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4, 16]


Invert decision for 16 at level 6


New level: 7
 pending : [9, 10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [9, 10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8192), (10, 2048), (11, -1), (12, 2048), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 7 among pending : [9, 10, 12, 23, 27, 3, 11, 17, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4, 9]


New level: 8
 pending : [10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4, 9]


Before reduction : 
 pending  : [10, 12, 23, 27, 3, 11, 17, 18]
 solution : [0, 2, 22, 4, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 524288), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 16384), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : {10, 11, 12}

After reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 4, 9]


Before reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 4, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 16384), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 16384), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 4, 9]


Solution : [0, 2, 22, 4, 9] has cost 26.


Before backtrack at level 8
 pending : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 4, 9]

After backtrack at level 8
 pending : [23, 27, 3, 17, 18, 10, 12, 11]
 solution : [0, 2, 22, 4, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [23, 27, 3, 17, 18, 10, 12, 11]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 10, 12, 11]
 solution : [0, 2, 22, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 16384), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 10, 12, 11]
 solution : [0, 2, 22, 4]


Solution : [0, 2, 22, 4] has cost 19.


Decide in level 8 among pending : [23, 27, 3, 17, 18, 10, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 10 with phase True at level 8

After decision at level 8
 pending : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 4, 10]


New level: 9
 pending : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 4, 10]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 4, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 262144), (11, 16384), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 16384), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : {11, 12}

After reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 4, 10]


Before reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 4, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 16384), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 16384), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 4, 10]


Solution : [0, 2, 22, 4, 10] has cost 26.


Before backtrack at level 9
 pending : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 4, 10]

After backtrack at level 9
 pending : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 4, 10]


Invert decision for 10 at level 8


New level: 9
 pending : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 4]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 4]

Essensial at level 9 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16384), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 16384), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, -1), (26, -1), (27, 32768), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 11]
 solution : [0, 2, 22, 4, 12]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11]
 solution : [0, 2, 22, 4, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 11]
 solution : [0, 2, 22, 4, 12]


Solution : [0, 2, 22, 4, 12] has cost 26.


Before backtrack at level 9
 pending : [23, 27, 3, 17, 18, 11]
 solution : [0, 2, 22, 4, 12]

After backtrack at level 9
 pending : [23, 27, 3, 17, 18, 11, 12]
 solution : [0, 2, 22, 4]


Before backtrack at level 8
 pending : [23, 27, 3, 17, 18, 11, 12]
 solution : [0, 2, 22, 4]

After backtrack at level 8
 pending : [23, 27, 3, 17, 18, 11, 12, 10]
 solution : [0, 2, 22, 4]


Before backtrack at level 7
 pending : [23, 27, 3, 17, 18, 11, 12, 10]
 solution : [0, 2, 22, 4]

After backtrack at level 7
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9]
 solution : [0, 2, 22, 4]


Before backtrack at level 6
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9]
 solution : [0, 2, 22, 4]

After backtrack at level 6
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16]
 solution : [0, 2, 22, 4]


Before backtrack at level 5
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16]
 solution : [0, 2, 22, 4]

After backtrack at level 5
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22, 4]


Before backtrack at level 4
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22, 4]

After backtrack at level 4
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22, 4]


Before backtrack at level 3
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22, 4]

After backtrack at level 3
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22, 4]


Before backtrack at level 2
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22, 4]

After backtrack at level 2
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13, 24]
 solution : [0, 2, 22, 4]


Invert decision for 4 at level 1


New level: 2
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13, 24]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13, 24]
 solution : [0, 2, 22]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32768), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32768), (18, 32768), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13, 24]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 2 among pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 24 with phase True at level 2

After decision at level 2
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22, 24]


New level: 3
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22, 24]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, 536870912), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : {3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 24]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 24]


Solution : [0, 2, 22, 24] has cost 18.


Before backtrack at level 3
 pending : []
 solution : [0, 2, 22, 24]

After backtrack at level 3
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22, 24]


Invert decision for 24 at level 2


New level: 3
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 3 among pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 13 with phase True at level 3

After decision at level 3
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22, 13]


New level: 4
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22, 13]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, 268435456), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : {3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 13]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 13]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 13]


Solution : [0, 2, 22, 13] has cost 21.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 22, 13]

After backtrack at level 4
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22, 13]


Invert decision for 13 at level 3


New level: 4
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 4 among pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22, 14]


New level: 5
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22, 14]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, 134217728), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : {3, 9, 10, 11, 12, 15, 16, 17, 18, 23, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 14]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 14]


Solution : [0, 2, 22, 14] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 22, 14]

After backtrack at level 5
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 5 among pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 15 with phase True at level 5

After decision at level 5
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16]
 solution : [0, 2, 22, 15]


New level: 6
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16]
 solution : [0, 2, 22, 15]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16]
 solution : [0, 2, 22, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, 8388608), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, 8192), (11, 0), (12, 8192), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : {3, 11, 16, 17, 18}

After reduction : 
 pending  : [23, 27, 12, 10, 9]
 solution : [0, 2, 22, 15]


Before reduction : 
 pending  : [23, 27, 12, 10, 9]
 solution : [0, 2, 22, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, 8192), (11, 0), (12, 8192), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, 8192), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 27, 12, 10, 9]
 solution : [0, 2, 22, 15]


Solution : [0, 2, 22, 15] has cost 23.


Before backtrack at level 6
 pending : [23, 27, 12, 10, 9]
 solution : [0, 2, 22, 15]

After backtrack at level 6
 pending : [23, 27, 12, 10, 9, 3, 17, 18, 11, 16]
 solution : [0, 2, 22, 15]


Invert decision for 15 at level 5


New level: 6
 pending : [23, 27, 12, 10, 9, 3, 17, 18, 11, 16]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [23, 27, 12, 10, 9, 3, 17, 18, 11, 16]
 solution : [0, 2, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, 8192), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, -1), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 27, 12, 10, 9, 3, 17, 18, 11, 16]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 6 among pending : [23, 27, 12, 10, 9, 3, 17, 18, 11, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, -1), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 16 with phase True at level 6

After decision at level 6
 pending : [23, 27, 12, 10, 9, 3, 17, 18, 11]
 solution : [0, 2, 22, 16]


New level: 7
 pending : [23, 27, 12, 10, 9, 3, 17, 18, 11]
 solution : [0, 2, 22, 16]


Before reduction : 
 pending  : [23, 27, 12, 10, 9, 3, 17, 18, 11]
 solution : [0, 2, 22, 16]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, -1), (16, 4194304), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, 8192), (11, 0), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : {11, 17, 18, 3}

After reduction : 
 pending  : [23, 27, 12, 10, 9]
 solution : [0, 2, 22, 16]


Before reduction : 
 pending  : [23, 27, 12, 10, 9]
 solution : [0, 2, 22, 16]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, 8192), (11, 0), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, 8192), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 27, 12, 10, 9]
 solution : [0, 2, 22, 16]


Solution : [0, 2, 22, 16] has cost 23.


Before backtrack at level 7
 pending : [23, 27, 12, 10, 9]
 solution : [0, 2, 22, 16]

After backtrack at level 7
 pending : [23, 27, 12, 10, 9, 3, 17, 18, 11]
 solution : [0, 2, 22, 16]


Invert decision for 16 at level 6


New level: 7
 pending : [23, 27, 12, 10, 9, 3, 17, 18, 11]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [23, 27, 12, 10, 9, 3, 17, 18, 11]
 solution : [0, 2, 22]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32768), (10, 8192), (11, -1), (12, 8192), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, -1), (26, -1), (27, 512), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, -1), (16, -1), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 27, 12, 10, 9, 3, 17, 18, 11]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 7 among pending : [23, 27, 12, 10, 9, 3, 17, 18, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, -1), (16, -1), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [23, 27, 12, 10, 3, 17, 18, 11]
 solution : [0, 2, 22, 9]


New level: 8
 pending : [23, 27, 12, 10, 3, 17, 18, 11]
 solution : [0, 2, 22, 9]


Before reduction : 
 pending  : [23, 27, 12, 10, 3, 17, 18, 11]
 solution : [0, 2, 22, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2097152), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, -1), (16, -1), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 65536), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : {10, 11, 12}

After reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 9]


Before reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 65536), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 65536), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 9]


Solution : [0, 2, 22, 9] has cost 21.


Before backtrack at level 8
 pending : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 9]

After backtrack at level 8
 pending : [23, 27, 3, 17, 18, 12, 10, 11]
 solution : [0, 2, 22, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [23, 27, 3, 17, 18, 12, 10, 11]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 12, 10, 11]
 solution : [0, 2, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 65536), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, -1), (16, -1), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 12, 10, 11]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 8 among pending : [23, 27, 3, 17, 18, 12, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, -1), (16, -1), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Decide 10 with phase True at level 8

After decision at level 8
 pending : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 10]


New level: 9
 pending : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 10]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 65536), (12, 32768), (13, -1), (14, -1), (15, -1), (16, -1), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 65536), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : {11, 12}

After reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 10]


Before reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 65536), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 65536), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 10]


Solution : [0, 2, 22, 10] has cost 21.


Before backtrack at level 9
 pending : [23, 27, 3, 17, 18]
 solution : [0, 2, 22, 10]

After backtrack at level 9
 pending : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22, 10]


Invert decision for 10 at level 8


New level: 9
 pending : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 12, 11]
 solution : [0, 2, 22]

Essensial at level 9 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 65536), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 65536), (18, 65536), (19, -1), (20, -1), (21, -1), (22, -1), (23, 131072), (24, -1), (25, -1), (26, -1), (27, 131072), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 11]
 solution : [0, 2, 22, 12]


Before reduction : 
 pending  : [23, 27, 3, 17, 18, 11]
 solution : [0, 2, 22, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 131072), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 131072), (18, 131072), (19, -1), (20, -1), (21, -1), (22, -1), (23, 524288), (24, -1), (25, -1), (26, -1), (27, 524288), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 27, 3, 17, 18, 11]
 solution : [0, 2, 22, 12]


Solution : [0, 2, 22, 12] has cost 21.


Before backtrack at level 9
 pending : [23, 27, 3, 17, 18, 11]
 solution : [0, 2, 22, 12]

After backtrack at level 9
 pending : [23, 27, 3, 17, 18, 11, 12]
 solution : [0, 2, 22]


Before backtrack at level 8
 pending : [23, 27, 3, 17, 18, 11, 12]
 solution : [0, 2, 22]

After backtrack at level 8
 pending : [23, 27, 3, 17, 18, 11, 12, 10]
 solution : [0, 2, 22]


Before backtrack at level 7
 pending : [23, 27, 3, 17, 18, 11, 12, 10]
 solution : [0, 2, 22]

After backtrack at level 7
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9]
 solution : [0, 2, 22]


Before backtrack at level 6
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9]
 solution : [0, 2, 22]

After backtrack at level 6
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16]
 solution : [0, 2, 22]


Before backtrack at level 5
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16]
 solution : [0, 2, 22]

After backtrack at level 5
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22]


Before backtrack at level 4
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15]
 solution : [0, 2, 22]

After backtrack at level 4
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22]


Before backtrack at level 3
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14]
 solution : [0, 2, 22]

After backtrack at level 3
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22]


Before backtrack at level 2
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13]
 solution : [0, 2, 22]

After backtrack at level 2
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13, 24]
 solution : [0, 2, 22]


Before backtrack at level 1
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13, 24]
 solution : [0, 2, 22]

After backtrack at level 1
 pending : [23, 27, 3, 17, 18, 11, 12, 10, 9, 16, 15, 14, 13, 24, 4]
 solution : [0, 2, 22]


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 18

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=1)

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 2, 22, 24] (length = 4)

invariant [invar_0] forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_2] forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0) # qcost: 4

invariant [invar_22] forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)) # qcost: 4

invariant [invar_24] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 0.702 seconds

[QRM NOTE]: Time elapsed since last: 0.135 seconds

[QRM NOTE]: Peak memory: 2383733 bytes


====================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

====================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_24

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_24 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_24 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_24 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 30: assumption

OK
[IVY_CHECK RESULT]: PASS

[(R & P) & T & ~(R' & P')]: unsatisfiable

[Strengthening Assertion]: ((forall V,Q. chosenAt(Q,V) <-> (forall N. member(N,Q) -> vote(N,V))) & (forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1) & (forall NODE0,VALUE0. ~vote(NODE0,VALUE0) | voted(NODE0)) & (forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))) & (forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decided(VALUE0))))

[QRM NOTE]: Time elapsed since start: 2.682 seconds

[QRM NOTE]: Time elapsed since last: 1.980 seconds

[QRM NOTE]: Peak memory: 1427984 bytes


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy -s node=4,value=3 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=4,value=3]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 16

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 24

ivy_to_cpp target=qrm toy_consensus_epr.node_4_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_4_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_4_value_3.finite.cpp toy_consensus_epr.node_4_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_4_value_3.finite.o toy_consensus_epr.node_4_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.059 seconds

[QRM NOTE]: Time elapsed since last: 7.059 seconds

[QRM NOTE]: Peak memory: 1189862 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        295

[FW NOTE]: number of dfs representative states:     14

[FW NOTE]: number of dfs non-representative states: 281


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=4,value=3]

===============================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node2_node3', 'quorum__node1_node2_node3']
predicate: voted('node',)
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node1_node2_node3)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node2,value2)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node1_node3,value2)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value2)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value2)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)']
representative states : 60855, 1174967, 9694647, 34436804023, 20101061406135, 20105356373431, 35511070135, 39806037431, 38731771319, 78114231, 623898039, 625995191, 10743223, 88599991


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000000000000
lex min decimal: 60855
states:
0000000000000000000000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000001000000000001000
lex min decimal: 1174967
states:
0000000000000000000000010000010
0000000000000000000000000100001
0000000000000000000000001000001
0000000000000000100000000001000
0000000000000000000001000000010
0000000000000000000100000000100
0000000000000000000000000010001
0000000000000000000000100000010
0000000000000000000010000000100
0000000000000000010000000001000
0000000000000000001000000000100
0000000000000001000000000001000




=== State Orbit 2 =====================
size : 18
repr state: 0000000000000001001000000001100
lex min decimal: 9694647
states:
0000000000000000000010000010101
0000000000000000000000010010011
0000000000000001001000000001100
0000000000000000010000010001010
0000000000000000000010010000110
0000000000000000000000100100011
0000000000000000100100000001100
0000000000000001000000001001001
0000000000000000000100000100101
0000000000000000000001001000011
0000000000000000010010000001100
0000000000000000010000000011001
0000000000000000100000000101001
0000000000000001000001000001010
0000000000000000000100100000110
0000000000000000100000100001010
0000000000000000001001000000110
0000000000000000001000001000101




=== State Orbit 3 =====================
size : 12
repr state: 1000000000000001001001000001110
lex min decimal: 34436804023
states:
0000000100000000100000100101011
0000000000010000000010010010111
0000010000000000010010000011101
1000000000000001001001000001110
0100000000000000100100100001110
0010000000000000010010010001110
0000100000000000100100000101101
0000000000100000000100100100111
0000000010000000010000010011011
0000000001000000001001001000111
0001000000000001001000001001101
0000001000000001000001001001011




=== State Orbit 4 =====================
size : 3
repr state: 1001001001000001001001001001111
lex min decimal: 20101061406135
states:
0010010010010000010010010011111
1001001001000001001001001001111
0100100100100000100100100101111




=== State Orbit 5 =====================
size : 3
repr state: 1001001001001001001001001001111
lex min decimal: 20105356373431
states:
0100100100100100100100100101111
0010010010010010010010010011111
1001001001001001001001001001111




=== State Orbit 6 =====================
size : 24
repr state: 1000000000000001001001000101111
lex min decimal: 35511070135
states:
0000000000100001000100100101111
0000100000000000100100010101111
0000001000000001000011001001111
0001000000000001001000011001111
0000010000000000010010100011111
0000000001000000101001001001111
0100000000000000100100100011111
0010000000000000010010010101111
0000000000010001000010010011111
0000000000010000100010010011111
1000000000000001001001000101111
0000100000000000100101000101111
0010000000000000010010011001111
0000000001000000011001001001111
0000000100000000100010100101111
0000010000000000010011000011111
0000001000000001000101001001111
0100000000000000100100101001111
1000000000000001001001000011111
0000000010000000011000010011111
0000000000100000010100100101111
0001000000000001001000101001111
0000000010000000010100010011111
0000000100000000101000100101111




=== State Orbit 7 =====================
size : 24
repr state: 1000000000001001001001000101111
lex min decimal: 39806037431
states:
0010000000000010010010011001111
0000001000001001000101001001111
0000000010000010010100010011111
1000000000001001001001000101111
1000000000001001001001000011111
0000100000000100100100010101111
0000010000000010010010100011111
0001000000001001001000101001111
0000010000000010010011000011111
0000000001001000101001001001111
0000000000100100010100100101111
0000000000010010100010010011111
0100000000000100100100100011111
0000001000001001000011001001111
0000000000010011000010010011111
0001000000001001001000011001111
0000000100000100101000100101111
0000000100000100100010100101111
0000000001001000011001001001111
0010000000000010010010010101111
0000000010000010011000010011111
0100000000000100100100101001111
0000000000100101000100100101111
0000100000000100100101000101111




=== State Orbit 8 =====================
size : 12
repr state: 1000000000001001001001000001110
lex min decimal: 38731771319
states:
0000000001001000001001001000111
0010000000000010010010010001110
0000000000010010000010010010111
0000000100000100100000100101011
0000000000100100000100100100111
0000000010000010010000010011011
0000001000001001000001001001011
0000100000000100100100000101101
0000010000000010010010000011101
0001000000001001001000001001101
1000000000001001001001000001110
0100000000000100100100100001110




=== State Orbit 9 =====================
size : 72
repr state: 0000000000000001001000100001110
lex min decimal: 78114231
states:
0000000000000000010000100101011
0000000000000000010000011001011
0000000000000001001000010001110
0000000000000000100001000101011
0000000000000000010001001001011
0000000000000001001000100001110
0000000000000001000000101001011
0000000000000000010001000011011
0000000000000000010010100001110
0000000000000001000010000011101
0000000000000000010100100001110
0000000000000000100101000001110
0000000000000000100000100011011
0000000000000000010010001001101
0000000000000000000100010010111
0000000000000000001000011000111
0000000000000000100010100001110
0000000000000000100000101001011
0000000000000000000010011000111
0000000000000000000100101000111
0000000000000001000000010011011
0000000000000000000011001000111
0000000000000000100000010101011
0000000000000000000100100010111
0000000000000000011000001001101
0000000000000000100010000011101
0000000000000000100100010001110
0000000000000001000000011001011
0000000000000000011001000001110
0000000000000000000011000010111
0000000000000000100001001001011
0000000000000000010010000101101
0000000000000000101000001001101
0000000000000001000001000011011
0000000000000000000010100010111
0000000000000000101000000101101
0000000000000000010100010001110
0000000000000000100100001001101
0000000000000001000100100001110
0000000000000001000000100101011
0000000000000000000010010100111
0000000000000001000001000101011
0000000000000001000010001001101
0000000000000000001001000010111
0000000000000000000101001000111
0000000000000000010000010101011
0000000000000000100000010011011
0000000000000000100010010001110
0000000000000000001001000100111
0000000000000001000011000001110
0000000000000000100100000011101
0000000000000000101000100001110
0000000000000000010000100011011
0000000000000000000100010100111
0000000000000000000101000100111
0000000000000000101001000001110
0000000000000001000010010001110
0000000000000000001000010010111
0000000000000000100010000101101
0000000000000001000100000101101
0000000000000000000010100100111
0000000000000000011000010001110
0000000000000000001000101000111
0000000000000001001000000011101
0000000000000001001000000101101
0000000000000001000100001001101
0000000000000000011000000011101
0000000000000000010011000001110
0000000000000000010100000101101
0000000000000000001000100100111
0000000000000001000101000001110
0000000000000000010100000011101




=== State Orbit 10 =====================
size : 18
repr state: 0000000000000001001000100101111
lex min decimal: 623898039
states:
0000000000000000100010100011111
0000000000000000010100010101111
0000000000000001001000010011111
0000000000000001000010011001111
0000000000000000010011001001111
0000000000000000101000101001111
0000000000000001000011000011111
0000000000000001000100101001111
0000000000000000010010100101111
0000000000000000011000011001111
0000000000000000100010010101111
0000000000000001001000100101111
0000000000000000011001000011111
0000000000000000010100100011111
0000000000000000100101001001111
0000000000000000100100010011111
0000000000000000101001000101111
0000000000000001000101000101111




=== State Orbit 11 =====================
size : 36
repr state: 0000000000000001001000100011111
lex min decimal: 625995191
states:
0000000000000000011000100011111
0000000000000000100011000101111
0000000000000001000010010101111
0000000000000000100011001001111
0000000000000000101000010011111
0000000000000000010100101001111
0000000000000001000010101001111
0000000000000001001000100011111
0000000000000000011001000101111
0000000000000000011000101001111
0000000000000000100010101001111
0000000000000000011000100101111
0000000000000001000100011001111
0000000000000001000010100011111
0000000000000000010101000011111
0000000000000001001000010101111
0000000000000000101000011001111
0000000000000001000101000011111
0000000000000000101000100011111
0000000000000000100100011001111
0000000000000000101000010101111
0000000000000001000100010101111
0000000000000001000010100101111
0000000000000000010010101001111
0000000000000000100101000011111
0000000000000000010101001001111
0000000000000000100011000011111
0000000000000000010101000101111
0000000000000000100010011001111
0000000000000001000100100011111
0000000000000000010011000101111
0000000000000000010100011001111
0000000000000000101001000011111
0000000000000000011000010101111
0000000000000001000011000101111
0000000000000001000100010011111




=== State Orbit 12 =====================
size : 36
repr state: 0000000000000001000100000001100
lex min decimal: 10743223
states:
0000000000000000010100000001100
0000000000000000100010000001100
0000000000000000000011000000110
0000000000000000000100010000110
0000000000000000100000001001001
0000000000000000000000101000011
0000000000000000001000000010101
0000000000000001000000010001010
0000000000000001000000000011001
0000000000000000000100000010101
0000000000000000010000000101001
0000000000000001000100000001100
0000000000000000000101000000110
0000000000000001000010000001100
0000000000000000001000010000110
0000000000000000000000100010011
0000000000000000000000010100011
0000000000000000000010100000110
0000000000000001000000100001010
0000000000000000100000000011001
0000000000000000010000100001010
0000000000000000010001000001010
0000000000000001000000000101001
0000000000000000000001000010011
0000000000000000001000100000110
0000000000000000100000010001010
0000000000000000000000011000011
0000000000000000011000000001100
0000000000000000000001000100011
0000000000000000000010001000101
0000000000000000101000000001100
0000000000000000010000001001001
0000000000000000000100001000101
0000000000000000000010000100101
0000000000000000001000000100101
0000000000000000100001000001010




=== State Orbit 13 =====================
size : 24
repr state: 0000000000000001000100010001110
lex min decimal: 88599991
states:
0000000000000000101000010001110
0000000000000000000100011000111
0000000000000000101000000011101
0000000000000001000100010001110
0000000000000000010100001001101
0000000000000000001000010100111
0000000000000000000010101000111
0000000000000000000101000010111
0000000000000001000010000101101
0000000000000000011000000101101
0000000000000000011000100001110
0000000000000000100000011001011
0000000000000000010001000101011
0000000000000000010000101001011
0000000000000000001000100010111
0000000000000001000000010101011
0000000000000000010101000001110
0000000000000001000100000011101
0000000000000001000000100011011
0000000000000000100010001001101
0000000000000000100011000001110
0000000000000000000011000100111
0000000000000001000010100001110
0000000000000000100001000011011



[QRM NOTE]: Time elapsed since start: 7.919 seconds

[QRM NOTE]: Time elapsed since last: 0.861 seconds

[QRM NOTE]: Peak memory: 1308202 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=4,value=3]

====================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 9.013 seconds

[QRM NOTE]: Time elapsed since last: 1.094 seconds

[QRM NOTE]: Peak memory: 459417 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -m -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=4]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: symmetric group order: 144

[FW NOTE]: number of branching actions: 24

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_4.finite.cpp toy_consensus_epr.node_3_value_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_4.finite.o toy_consensus_epr.node_3_value_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.114 seconds

[QRM NOTE]: Time elapsed since last: 7.114 seconds

[QRM NOTE]: Peak memory: 1204601 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        177

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 167


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=4]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node1,value3)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node0_node2,value3)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'chosenAt(quorum__node1_node2,value3)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'decided(value3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 268507051, 73284001707, 73300778923, 270606251, 287383467, 285284267, 75691, 1200043


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000000000000
lex min decimal: 427
states:
0000000000000000000000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000000100000000000100
lex min decimal: 5035
states:
0000000000000000100000000000100
0000000000000000010000000000100
0000000000000000000000000001001
0000000000000000001000000000100
0000000000000000000100000000100
0000000000000000000000001000001
0000000000000000000001000000010
0000000000000000000000000100001
0000000000000000000000010000010
0000000000000000000000100000010
0000000000000000000000000010001
0000000000000000000010000000010




=== State Orbit 2 =====================
size : 12
repr state: 1000000000000000100010000000110
lex min decimal: 268507051
states:
0000001000000000001000000010101
0000000010000000000010001000011
0010000000000000001000100000110
0001000000000000000100010000110
0000010000000000010000000100101
0100000000000000010001000000110
0000000001000000000001000100011
0000000000010000000000010001011
0000000000100000000000100010011
1000000000000000100010000000110
0000100000000000100000001000101
0000000100000000000100000001101




=== State Orbit 3 =====================
size : 4
repr state: 1000100010000000100010001000111
lex min decimal: 73284001707
states:
1000100010000000100010001000111
0001000100010000000100010001111
0010001000100000001000100010111
0100010001000000010001000100111




=== State Orbit 4 =====================
size : 4
repr state: 1000100010001000100010001000111
lex min decimal: 73300778923
states:
0100010001000100010001000100111
0010001000100010001000100010111
0001000100010001000100010001111
1000100010001000100010001000111




=== State Orbit 5 =====================
size : 36
repr state: 1000000000000000100010000100111
lex min decimal: 270606251
states:
1000000000000000100010000010111
0000000000100000100000100010111
0100000000000000010001000001111
1000000000000000100010000001111
0000000001000000100001000100111
0000010000000000010000100100111
0001000000000000000100010100111
0000000000100000010000100010111
0000000100000000000101000001111
0000000100000000000100100001111
0000000010000000010010001000111
0000000000010000100000010001111
0000000001000000000101000100111
0000010000000000010000010100111
0000001000000000001001000010111
0010000000000000001000101000111
0000001000000000001000010010111
0000000000010000010000010001111
0000010000000000010010000100111
0010000000000000001000100100111
0000000100000000000110000001111
0000000010000000000110001000111
0000000010000000001010001000111
0000000000010000001000010001111
0001000000000000000100011000111
0000000001000000001001000100111
0000100000000000100000011000111
0010000000000000001000100001111
0000000000100000000100100010111
0100000000000000010001001000111
0000100000000000100000101000111
0000001000000000001010000010111
0100000000000000010001000010111
1000000000000000100010000100111
0000100000000000100001001000111
0001000000000000000100010010111




=== State Orbit 6 =====================
size : 36
repr state: 1000000000001000100010000100111
lex min decimal: 287383467
states:
0000000010001000010010001000111
1000000000001000100010000001111
0000010000000100010000010100111
0000010000000100010010000100111
0000000001000100001001000100111
0010000000000010001000101000111
0010000000000010001000100001111
0000000001000100000101000100111
0000000000100010000100100010111
0000010000000100010000100100111
0000100000001000100000101000111
1000000000001000100010000100111
0000000100000001000110000001111
0001000000000001000100010010111
0100000000000100010001000010111
0000000000010001100000010001111
0100000000000100010001001000111
0000000000100010010000100010111
0100000000000100010001000001111
0000000100000001000100100001111
0000100000001000100001001000111
0000001000000010001001000010111
0000000000010001010000010001111
0000001000000010001000010010111
0000000000100010100000100010111
0001000000000001000100010100111
0000000010001000000110001000111
0001000000000001000100011000111
1000000000001000100010000010111
0000000010001000001010001000111
0000000000010001001000010001111
0000000001000100100001000100111
0000100000001000100000011000111
0000001000000010001010000010111
0000000100000001000101000001111
0010000000000010001000100100111




=== State Orbit 7 =====================
size : 12
repr state: 1000000000001000100010000000110
lex min decimal: 285284267
states:
1000000000001000100010000000110
0000000100000001000100000001101
0000000000010001000000010001011
0000001000000010001000000010101
0000000010001000000010001000011
0000000001000100000001000100011
0001000000000001000100010000110
0010000000000010001000100000110
0100000000000100010001000000110
0000100000001000100000001000101
0000010000000100010000000100101
0000000000100010000000100010011




=== State Orbit 8 =====================
size : 36
repr state: 0000000000000000100001000000110
lex min decimal: 75691
states:
0000000000000000000101000000110
0000000000000000000000010010011
0000000000000000010010000000110
0000000000000000100000010000110
0000000000000000000000100100011
0000000000000000010000000001101
0000000000000000000100000010101
0000000000000000000010000001011
0000000000000000100000000100101
0000000000000000000100100000110
0000000000000000001000001000101
0000000000000000010000100000110
0000000000000000010000000010101
0000000000000000100001000000110
0000000000000000000001000001011
0000000000000000000000011000011
0000000000000000001001000000110
0000000000000000010000001000101
0000000000000000000001001000011
0000000000000000000000101000011
0000000000000000000100001000101
0000000000000000000000100001011
0000000000000000000000010100011
0000000000000000100000000001101
0000000000000000000110000000110
0000000000000000000100000100101
0000000000000000000010000100011
0000000000000000001000000100101
0000000000000000000010000010011
0000000000000000001000010000110
0000000000000000100000000010101
0000000000000000100000100000110
0000000000000000001010000000110
0000000000000000001000000001101
0000000000000000000001000010011
0000000000000000010000010000110




=== State Orbit 9 =====================
size : 24
repr state: 0000000000000000100001000010111
lex min decimal: 1200043
states:
0000000000000000010000010010111
0000000000000000100001000010111
0000000000000000100000100100111
0000000000000000010000100001111
0000000000000000001001001000111
0000000000000000010010000010111
0000000000000000000110000010111
0000000000000000010000101000111
0000000000000000100000100001111
0000000000000000000100100100111
0000000000000000100000010100111
0000000000000000010010000001111
0000000000000000001001000001111
0000000000000000001010000001111
0000000000000000000100101000111
0000000000000000010000011000111
0000000000000000000110000100111
0000000000000000001000010100111
0000000000000000100001000001111
0000000000000000100000010010111
0000000000000000000101000010111
0000000000000000000101001000111
0000000000000000001010000100111
0000000000000000001000011000111



[QRM NOTE]: Time elapsed since start: 7.748 seconds

[QRM NOTE]: Time elapsed since last: 0.634 seconds

[QRM NOTE]: Peak memory: 1292954 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=4]

====================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.610 seconds

[QRM NOTE]: Time elapsed since last: 0.862 seconds

[QRM NOTE]: Peak memory: 384245 bytes

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_24

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_24 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_24 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_24 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 30: assumption

OK
[IVY_CHECK RESULT]: PASS


************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.ivy

************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 112.972 seconds

[QRM NOTE]: Time elapsed since last: 112.972 seconds

