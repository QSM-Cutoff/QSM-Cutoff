
********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************


********************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1

********************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.ivy -s node=1,value=1 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_1_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_1_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_1_value_1.finite.cpp toy_consensus.node_1_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_1_value_1.finite.o toy_consensus.node_1_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 4

[FW NOTE]: number of interpreted atoms (e.g. member,le): 1

[FW NOTE]: number of branching actions: 2

[FW NOTE]: symmetric group order: 1

[QRM NOTE]: Time elapsed since start: 6.738 seconds

[QRM NOTE]: Time elapsed since last: 6.738 seconds

[QRM NOTE]: Peak memory: 1175478 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        3

[FW NOTE]: number of dfs representative states:     3

[FW NOTE]: number of dfs non-representative states: 0


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

===========================================================================================================

sort: node=['node0']
sort: value=['value0']
sort: quorum=['quorum__node0']
predicate: didNotVote('node',)
predicate: decision('value',)
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0)': '1'}
state atoms: ['chosenAt(quorum__node0,value0)', 'decision(value0)', 'didNotVote(node0)', 'vote(node0,value0)']
representative states : 5, 19, 27


=== State Orbit 0 =====================
size : 1
repr state: 0010
lex min decimal: 5
states:
0010




=== State Orbit 1 =====================
size : 1
repr state: 1001
lex min decimal: 19
states:
1001




=== State Orbit 2 =====================
size : 1
repr state: 1101
lex min decimal: 27
states:
1101



[QRM NOTE]: Time elapsed since start: 6.816 seconds

[QRM NOTE]: Time elapsed since last: 0.078 seconds

[QRM NOTE]: Peak memory: 1201299 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.820 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 150890 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

======================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1--0
0     : ['chosenAt(quorum__node0,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : --00
1     : ['~didNotVote(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -1-0
2     : ['decision(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 0--1
3     : ['vote(node0,value0)', '~chosenAt(quorum__node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : 0-0-
4     : ['~chosenAt(quorum__node0,value0)', '~didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 01--
5     : ['decision(value0)', '~chosenAt(quorum__node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 1-1-
6     : ['chosenAt(quorum__node0,value0)', 'didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
7 (*) : --11
7     : ['didNotVote(node0)', 'vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : -11-
8     : ['decision(value0)', 'didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 9

[PRIME NOTE]: number of orbits before merging: 9

[PRIME NOTE]: number of primes: 9

[QRM NOTE]: Time elapsed since start: 6.832 seconds

[QRM NOTE]: Time elapsed since last: 0.012 seconds

[QRM NOTE]: Peak memory: 1218696 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

================================================================================================

definition primes: {0, 1, 3, 4, 6, 7}


New level: 0
 pending : [2, 5, 8]
 solution : []


Before reduction : 
 pending  : [2, 5, 8]
 solution : []

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 5, 8]
 solution : []

[QRM NOTE]: Time elapsed since start: 6.836 seconds

[QRM NOTE]: Time elapsed since last: 0.005 seconds

[QRM NOTE]: Peak memory: 171920 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -1-0
2     : ['decision(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', '~vote(node0,value0)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0',)): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0',)): node$1$vote$0$0}

part_sig: ('node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', '~vote(node0,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0',)),), 'vote': (EnumeratedSort('node', ('node0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0',)): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0',)): node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~decision(VALUE0)


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 01--
5     : ['decision(value0)', '~chosenAt(quorum__node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0,value0)', 'decision(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)]}

const2sigs: {Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$chosenAt$1$0, value$0$decision$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$chosenAt$1$0}

part_sig: ('quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0,value0)', 'decision(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0',)), EnumeratedSort('value', ('value0',))), 'decision': (EnumeratedSort('value', ('value0',)),)}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decision$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decision$0$0; value$1$chosenAt$1$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0]}

	identical_single_classes: {'quorum$1$chosenAt$0': quorum$1$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0',))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : -11-
8     : ['decision(value0)', 'didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'didNotVote(node0)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$0$didNotVote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0], EnumeratedSort('node', ('node0',)): [node$0$didNotVote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0, EnumeratedSort('node', ('node0',)): node$0$didNotVote$0$0}

part_sig: ('node$0$didNotVote$0$0', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value0)', 'didNotVote(node0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0',)),), 'didNotVote': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decision$0$0], EnumeratedSort('node', ('node0',)): [node$0$didNotVote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decision$0$0, EnumeratedSort('node', ('node0',)): node$0$didNotVote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. ~decision(VALUE0) | ~didNotVote(NODE0)


---------- Quantifier Inference: orbit 8 ----------

[QI_CHECK RESULT]: PASS


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

==============================================================================================================


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -1-0
2     : ['decision(value0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~decision(VALUE0)
qcost : 4




=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 01--
5     : ['decision(value0)', '~chosenAt(quorum__node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)
qcost : 4




=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : -11-
8     : ['decision(value0)', 'didNotVote(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. ~decision(VALUE0) | ~didNotVote(NODE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 6.909 seconds

[QRM NOTE]: Time elapsed since last: 0.073 seconds

[QRM NOTE]: Peak memory: 1834982 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

=============================================================================================


New level: 1
 pending : [2, 5, 8]
 solution : []


Before reduction : 
 pending  : [2, 5, 8]
 solution : []

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 5, 8]
 solution : []


Solution : [] has cost 0.


Decide in level 1 among pending : [2, 5, 8]

Coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [5, 8]
 solution : [2]


New level: 2
 pending : [5, 8]
 solution : [2]


Before reduction : 
 pending  : [5, 8]
 solution : [2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0)]

Covered at level 2 : {8, 5}

After reduction : 
 pending  : []
 solution : [2]


Before reduction : 
 pending  : []
 solution : [2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [2]


Solution : [2] has cost 4.


Before backtrack at level 2
 pending : []
 solution : [2]

After backtrack at level 2
 pending : [5, 8]
 solution : [2]


Invert decision for 2 at level 1


New level: 2
 pending : [5, 8]
 solution : []


Before reduction : 
 pending  : [5, 8]
 solution : []

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2)]

Covered at level 2 : set()

After reduction : 
 pending  : [5, 8]
 solution : []


Solution : [] has cost 0.


Decide in level 2 among pending : [5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2)]

Decide 5 with phase True at level 2

After decision at level 2
 pending : [8]
 solution : [5]


New level: 3
 pending : [8]
 solution : [5]


Before reduction : 
 pending  : [8]
 solution : [5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0)]

Covered at level 3 : {8}

After reduction : 
 pending  : []
 solution : [5]


Before reduction : 
 pending  : []
 solution : [5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [5]


Solution : [5] has cost 4.


Before backtrack at level 3
 pending : []
 solution : [5]

After backtrack at level 3
 pending : [8]
 solution : [5]


Invert decision for 5 at level 2


New level: 3
 pending : [8]
 solution : []


Before reduction : 
 pending  : [8]
 solution : []

Essensial at level 3 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [8]


Before reduction : 
 pending  : []
 solution : [8]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [8]


Solution : [8] has cost 4.


Before backtrack at level 3
 pending : []
 solution : [8]

After backtrack at level 3
 pending : [8]
 solution : []


Before backtrack at level 2
 pending : [8]
 solution : []

After backtrack at level 2
 pending : [8, 5]
 solution : []


Before backtrack at level 1
 pending : [8, 5]
 solution : []

After backtrack at level 1
 pending : [8, 5, 2]
 solution : []


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 3

[MIN NOTE]: total qcost: 4

[MIN NOTE]: maximum branch and bound depth: 3

Definitions (length=2)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [2] (length = 1)

invariant [invar_2] forall NODE0,VALUE0. vote(NODE0,VALUE0) | ~decision(VALUE0) # qcost: 4




Solution 1 : [5] (length = 1)

invariant [invar_5] forall VALUE0,QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) # qcost: 4




Solution 2 : [8] (length = 1)

invariant [invar_8] forall NODE0,VALUE0. ~decision(VALUE0) | ~didNotVote(NODE0) # qcost: 4




[QRM NOTE]: Time elapsed since start: 6.998 seconds

[QRM NOTE]: Time elapsed since last: 0.088 seconds

[QRM NOTE]: Peak memory: 1826540 bytes


===============================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

===============================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

Minimization check for Solution 1

[MIN_CHECK RESULT]: PASS

Minimization check for Solution 2

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.002 seconds

[QRM NOTE]: Time elapsed since last: 0.005 seconds

[QRM NOTE]: Peak memory: 778283 bytes


================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1]

================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 44: invar_2

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 44: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 44: invar_2 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 44: invar_2 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 44: invar_5

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 44: invar_5 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 44: invar_5 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 44: invar_5 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 44: invar_8

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 44: invar_8 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 44: invar_8 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 44: invar_8 ... FAIL

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 12.355 seconds

[QRM NOTE]: Time elapsed since last: 5.353 seconds

[QRM NOTE]: Peak memory: 828793 bytes


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_1.finite.cpp toy_consensus.node_3_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_1.finite.o toy_consensus.node_3_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 6

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 6.136 seconds

[QRM NOTE]: Time elapsed since last: 6.136 seconds

[QRM NOTE]: Peak memory: 1178066 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        12

[FW NOTE]: number of dfs representative states:     6

[FW NOTE]: number of dfs non-representative states: 6


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decision('value',)
predicate: chosenAt('quorum', 'value')
predicate: vote('node', 'value')
predicate: didNotVote('node',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)']
representative states : 29099, 14763, 83883, 462763, 495531, 116651


=== State Orbit 0 =====================
size : 1
repr state: 0000111000
lex min decimal: 29099
states:
0000111000




=== State Orbit 1 =====================
size : 3
repr state: 0000011100
lex min decimal: 14763
states:
0000110001
0000011100
0000101010




=== State Orbit 2 =====================
size : 3
repr state: 1000001110
lex min decimal: 83883
states:
0100010101
1000001110
0010100011




=== State Orbit 3 =====================
size : 1
repr state: 1110000111
lex min decimal: 462763
states:
1110000111




=== State Orbit 4 =====================
size : 1
repr state: 1111000111
lex min decimal: 495531
states:
1111000111




=== State Orbit 5 =====================
size : 3
repr state: 1001001110
lex min decimal: 116651
states:
1001001110
0011100011
0101010101



[QRM NOTE]: Time elapsed since start: 6.218 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 1210225 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

================================================================================================================================

Representatitive states in reachability not in Rmin

{116651}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.312 seconds

[QRM NOTE]: Time elapsed since last: 0.095 seconds

[QRM NOTE]: Peak memory: 204603 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.0.ivy -s node=1,value=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=2]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_1_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_1_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_1_value_2.finite.cpp toy_consensus.node_1_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_1_value_2.finite.o toy_consensus.node_1_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 7

[FW NOTE]: number of interpreted atoms (e.g. member,le): 1

[FW NOTE]: number of branching actions: 4

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.138 seconds

[QRM NOTE]: Time elapsed since last: 6.138 seconds

[QRM NOTE]: Peak memory: 1176217 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        5

[FW NOTE]: number of dfs representative states:     3

[FW NOTE]: number of dfs non-representative states: 2


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=2]

===========================================================================================================

sort: node=['node0']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0']
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: didNotVote('node',)
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0)': '1'}
state atoms: ['chosenAt(quorum__node0,value0)', 'chosenAt(quorum__node0,value1)', 'decision(value0)', 'decision(value1)', 'didNotVote(node0)', 'vote(node0,value0)', 'vote(node0,value1)']
representative states : 9, 67, 83


=== State Orbit 0 =====================
size : 1
repr state: 0000100
lex min decimal: 9
states:
0000100




=== State Orbit 1 =====================
size : 2
repr state: 1000010
lex min decimal: 67
states:
0100001
1000010




=== State Orbit 2 =====================
size : 2
repr state: 1010010
lex min decimal: 83
states:
1010010
0101001



[QRM NOTE]: Time elapsed since start: 6.210 seconds

[QRM NOTE]: Time elapsed since last: 0.072 seconds

[QRM NOTE]: Peak memory: 1203153 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=2]

================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 247, binary: 1111011

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.226 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 164358 bytes

next size: node=3,value=2


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy -s node=3,value=1 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

================================================================================================================================

Representatitive states in reachability not in Rmin

{116651}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.088 seconds

[QRM NOTE]: Time elapsed since last: 0.088 seconds

[QRM NOTE]: Peak memory: 48411 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.1.ivy -s node=1,value=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=2]

================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 247, binary: 1111011

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.035 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 14156 bytes

next size: node=3,value=2


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=1,value=1

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy -s node=3,value=1 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=1]

================================================================================================================================

Representatitive states in reachability not in Rmin

{116651}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.089 seconds

[QRM NOTE]: Time elapsed since last: 0.089 seconds

[QRM NOTE]: Peak memory: 48411 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_1_value_1.2.ivy -s node=1,value=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=1,value=2]

================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 247, binary: 1111011

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.035 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 14788 bytes

next size: node=3,value=2


********************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2

********************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.ivy -s node=3,value=2 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_2.finite.cpp toy_consensus.node_3_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_2.finite.o toy_consensus.node_3_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 12

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 6.346 seconds

[QRM NOTE]: Time elapsed since last: 6.346 seconds

[QRM NOTE]: Peak memory: 1182797 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        41

[FW NOTE]: number of dfs representative states:     9

[FW NOTE]: number of dfs non-representative states: 32


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: didNotVote('node',)
predicate: decision('value',)
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'decision(value0)', 'decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)']
representative states : 229803, 106923, 1182635, 22031275, 22293419, 1067947, 1330091, 1444779, 45483


=== State Orbit 0 =====================
size : 1
repr state: 00000000111000000
lex min decimal: 229803
states:
00000000111000000




=== State Orbit 1 =====================
size : 6
repr state: 00000000011100000
lex min decimal: 106923
states:
00000000011100000
00000000011010000
00000000110000010
00000000101000100
00000000110000001
00000000101001000




=== State Orbit 2 =====================
size : 6
repr state: 10000000001101000
lex min decimal: 1182635
states:
01000000001010100
10000000001101000
00010000010010001
00000100100000101
00100000010100010
00001000100001010




=== State Orbit 3 =====================
size : 2
repr state: 10101000000101010
lex min decimal: 22031275
states:
01010100000010101
10101000000101010




=== State Orbit 4 =====================
size : 2
repr state: 10101010000101010
lex min decimal: 22293419
states:
01010101000010101
10101010000101010




=== State Orbit 5 =====================
size : 6
repr state: 10000000000101001
lex min decimal: 1067947
states:
00100000000100110
01000000000010110
00000100000100101
00001000000011010
00010000000011001
10000000000101001




=== State Orbit 6 =====================
size : 6
repr state: 10000010000101001
lex min decimal: 1330091
states:
00000101000100101
00010001000011001
00100010000100110
00001010000011010
10000010000101001
01000001000010110




=== State Orbit 7 =====================
size : 6
repr state: 10000010001101000
lex min decimal: 1444779
states:
00100010010100010
01000001001010100
00001010100001010
00000101100000101
00010001010010001
10000010001101000




=== State Orbit 8 =====================
size : 6
repr state: 00000000001100100
lex min decimal: 45483
states:
00000000010100001
00000000100001001
00000000010010010
00000000001100100
00000000001011000
00000000100000110



[QRM NOTE]: Time elapsed since start: 6.452 seconds

[QRM NOTE]: Time elapsed since last: 0.105 seconds

[QRM NOTE]: Peak memory: 1227099 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.453 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 183896 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

======================================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : -------------11--
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------11
1     : ['vote(node2,value0)', 'vote(node2,value1)']
2     : -----------11----
2     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 12
num_suborbits: 1
3 (*) : -1-----------1---
3     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
4     : 1-------------1--
4     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
5     : ---1-----------1-
5     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
6     : --1-------------1
6     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
7     : -1---------1-----
7     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
8     : 1-----------1----
8     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
9     : -----1---------1-
9     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
10     : ----1-----------1
10     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
11     : ---1-------1-----
11     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
12     : --1---------1----
12     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
13     : -----1-------1---
13     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
14     : ----1---------1--
14     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
15 (*) : ---------1---1---
15     : ['didNotVote(node1)', 'vote(node1,value0)']
16     : ---------1----1--
16     : ['didNotVote(node1)', 'vote(node1,value1)']
17     : ----------1----1-
17     : ['didNotVote(node2)', 'vote(node2,value0)']
18     : ----------1-----1
18     : ['didNotVote(node2)', 'vote(node2,value1)']
19     : --------1--1-----
19     : ['didNotVote(node0)', 'vote(node0,value0)']
20     : --------1---1----
20     : ['didNotVote(node0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 12
num_suborbits: 1
21 (*) : ----1-----1------
21     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node2)']
22     : -----1----1------
22     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node2)']
23     : ----1----1-------
23     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node1)']
24     : -----1---1-------
24     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node1)']
25     : --1-------1------
25     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node2)']
26     : ---1------1------
26     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node2)']
27     : --1-----1--------
27     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node0)']
28     : ---1----1--------
28     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node0)']
29     : 1--------1-------
29     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
30     : -1-------1-------
30     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node1)']
31     : 1-------1--------
31     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
32     : -1------1--------
32     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
33 (*) : 1----------0-----
33     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
34     : -1----------0----
34     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
35     : --1--------0-----
35     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
36     : ---1--------0----
36     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
37     : 1------------0---
37     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
38     : -1------------0--
38     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
39     : ----1--------0---
39     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
40     : -----1--------0--
40     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
41     : --1------------0-
41     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
42     : ---1------------0
42     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
43     : ----1----------0-
43     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
44     : -----1----------0
44     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 2
45 (*) : 1--1-------------
45     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
46     : -11--------------
46     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
47     : 1----1-----------
47     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
48     : -1--1------------
48     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
49     : --1--1-----------
49     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
50     : ---11------------
50     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
57 (*) : 11---------------
57     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
58     : --11-------------
58     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
59     : ----11-----------
59     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
51 (*) : 1------1---------
51     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
52     : -1----1----------
52     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
53     : --1----1---------
53     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
54     : ---1--1----------
54     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
55     : ----1--1---------
55     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
56     : -----11----------
56     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
60 (*) : ------11---------
60     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
61 (*) : -----0-1----0----
61     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
62     : ----0-1----0-----
62     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
63     : ---0---1------0--
63     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
64     : --0---1------0---
64     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
65     : -0-----1--------0
65     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
66     : 0-----1--------0-
66     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 12
num_suborbits: 1
67 (*) : -------1--1-0----
67     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
68     : ------1---10-----
68     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
69     : -------1-1--0----
69     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
70     : ------1--1-0-----
70     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
71     : -------1--1---0--
71     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
72     : ------1---1--0---
72     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
73     : -------11-----0--
73     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
74     : ------1-1----0---
74     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
75     : -------1-1------0
75     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
76     : ------1--1-----0-
76     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
77     : -------11-------0
77     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
78     : ------1-1------0-
78     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
79 (*) : -------1----0--1-
79     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
80     : ------1----0----1
80     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
81     : -------1----01---
81     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
82     : ------1----0--1--
82     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
83     : -------1------01-
83     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
84     : ------1------0--1
84     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
85     : -------1---1--0--
85     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
86     : ------1-----10---
86     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
87     : -------1-----1--0
87     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
88     : ------1-------10-
88     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
89     : -------1---1----0
89     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
90     : ------1-----1--0-
90     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
91 (*) : -------1----0---0
91     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
92     : ------1----0---0-
92     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
93     : -------1----0-0--
93     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
94     : ------1----0-0---
94     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
95     : -------1------0-0
95     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
96     : ------1------0-0-
96     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
97 (*) : -0-----1-------1-
97     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
98     : 0-----1---------1
98     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
99     : ---0---1-----1---
99     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
100     : --0---1-------1--
100     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
101     : -----0-1---1-----
101     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
102     : ----0-1-----1----
102     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
103 (*) : -0-----1--1------
103     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
104     : 0-----1---1------
104     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
105     : ---0---1-1-------
105     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
106     : --0---1--1-------
106     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
107     : -----0-11--------
107     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
108     : ----0-1-1--------
108     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
109 (*) : -------1-----1-1-
109     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
110     : ------1-------1-1
110     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
111     : -------1---1---1-
111     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
112     : ------1-----1---1
112     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
113     : -------1---1-1---
113     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
114     : ------1-----1-1--
114     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 12
num_suborbits: 1
115 (*) : -------1--1--1---
115     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
116     : ------1---1---1--
116     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
117     : -------1-1-----1-
117     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
118     : ------1--1------1
118     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
119     : -------1--11-----
119     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
120     : ------1---1-1----
120     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
121     : -------11------1-
121     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
122     : ------1-1-------1
122     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
123     : -------1-1-1-----
123     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
124     : ------1--1--1----
124     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
125     : -------11----1---
125     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
126     : ------1-1-----1--
126     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : -------1-11------
127     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
128     : ------1--11------
128     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
129     : -------11-1------
129     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
130     : ------1-1-1------
130     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
131     : -------111-------
131     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
132     : ------1-11-------
132     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 1
133 (*) : --0-1------1-----
133     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
134     : ---0-1------1----
134     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
135     : 0---1------1-----
135     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
136     : -0---1------1----
136     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
137     : --1-0--------1---
137     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
138     : ---1-0--------1--
138     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
139     : 0-1----------1---
139     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
140     : -0-1----------1--
140     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
141     : 1---0----------1-
141     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
142     : -1---0----------1
142     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
143     : 1-0------------1-
143     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
144     : -1-0------------1
144     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
145 (*) : --0--------1---1-
145     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
146     : ---0--------1---1
146     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
147     : 0----------1-1---
147     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
148     : -0----------1-1--
148     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
149     : ----0--------1-1-
149     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
150     : -----0--------1-1
150     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 3
num_suborbits: 1
151 (*) : --------0--00----
151     : ['~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
152     : ---------0---00--
152     : ['~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
153     : ----------0----00
153     : ['~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
154 (*) : 1-1-0------------
154     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
155     : -1-1-0-----------
155     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
156     : 1-0-1------------
156     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
157     : -1-0-1-----------
157     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
158     : 0-1-1------------
158     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
159     : -0-1-1-----------
159     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 12
num_suborbits: 1
160 (*) : 1---0-----0-----0
160     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
161     : -1---0----0----0-
161     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
162     : --1-0----0----0--
162     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
163     : ---1-0---0---0---
163     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
164     : 1-0-------0-----0
164     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
165     : -1-0------0----0-
165     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
166     : --0-1---0---0----
166     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
167     : ---0-1--0--0-----
167     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
168     : 0-1------0----0--
168     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
169     : -0-1-----0---0---
169     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
170     : 0---1---0---0----
170     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
171     : -0---1--0--0-----
171     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 12
num_suborbits: 1
172 (*) : ---0------0-1--0-
172     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
173     : --0-------01----0
173     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
174     : -0-------0--10---
174     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
175     : 0--------0-1--0--
175     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
176     : -----0----0---10-
176     : ['vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
177     : ----0-----0--1--0
177     : ['vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
178     : -0------0--0--1--
178     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
179     : 0-------0---01---
179     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
180     : -----0---0---0--1
180     : ['vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
181     : ----0----0----01-
181     : ['vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
182     : ---0----0--0----1
182     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
183     : --0-----0---0--1-
183     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
184 (*) : -0---0-1------1--
184     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
185     : 0---0-1------1---
185     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
186     : ---0-0-1--------1
186     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
187     : --0-0-1--------1-
187     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
188     : -0-0---1----1----
188     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
189     : 0-0---1----1-----
189     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 2
num_suborbits: 1
190 (*) : -0-0-0-1---------
190     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
191     : 0-0-0-1----------
191     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
192 (*) : --0-0-1---0-----0
192     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
193     : ---0-0-1--0----0-
193     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
194     : 0---0-1--0----0--
194     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
195     : -0---0-1-0---0---
195     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
196     : 0-0---1-0---0----
196     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
197     : -0-0---10--0-----
197     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
198 (*) : -00-----0-----11-
198     : ['vote(node1,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)']
199     : 0--0----0----1--1
199     : ['vote(node1,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)']
200     : -0--0----0--1--1-
200     : ['vote(node0,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)']
201     : 0----0---0-1----1
201     : ['vote(node0,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)']
202     : ---00-----0-11---
202     : ['vote(node0,value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)']
203     : --0--0----01--1--
203     : ['vote(node0,value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
204 (*) : --0-----0-0-0---0
204     : ['~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
205     : ---0----0-00---0-
205     : ['~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
206     : 0-------00--0-0--
206     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
207     : -0------00-0-0---
207     : ['~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
208     : ----0----00---0-0
208     : ['~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
209     : -----0---00--0-0-
209     : ['~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
210 (*) : 0--00---0-0--1---
210     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)']
211     : -00--0--0-0---1--
211     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)']
212     : -00-0---00-----1-
212     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)']
213     : 0--0-0--00------1
213     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)']
214     : 0-0--0---001-----
214     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)']
215     : -0-00----00-1----
215     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 1
216 (*) : ---00---0-00-1---
216     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)']
217     : --0--0--0-0-0-1--
217     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)']
218     : -0--0---00-0---1-
218     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)']
219     : 0----0--00--0---1
219     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)']
220     : --0--0---001-0---
220     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)']
221     : ---00----00-1-0--
221     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)']
222     : -00-----00---0-1-
222     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node1,value0)']
223     : 0--0----00----0-1
223     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node1,value1)']
224     : 0----0---001---0-
224     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value0)']
225     : -0--0----00-1---0
225     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value1)']
226     : 0--0----0-0--1-0-
226     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node2,value0)']
227     : -00-----0-0---1-0
227     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
228 (*) : 0-0--0--000-0----
228     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)']
229     : -0-00---0000-----
229     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)']
230     : 0--00---000---0--
230     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)']
231     : -00--0--000--0---
231     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)']
232     : -00-0---000-----0
232     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value1)']
233     : 0--0-0--000----0-
233     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
234 (*) : -00-----000--0--0
234     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value1)']
235     : 0--0----000---00-
235     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value0)']
236     : -0--0---0000----0
236     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value1)']
237     : 0----0--000-0--0-
237     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value0)']
238     : ---00---0000--0--
238     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value1)']
239     : --0--0--000-00---
239     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 1
num_suborbits: 1
240 (*) : 000000--000------
240     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 34

[PRIME NOTE]: number of primes: 241

[QRM NOTE]: Time elapsed since start: 6.527 seconds

[QRM NOTE]: Time elapsed since last: 0.074 seconds

[QRM NOTE]: Peak memory: 1522279 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

================================================================================================

definition primes: {32, 2, 3, 4, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31}


New level: 0
 pending : [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : []


Before reduction : 
 pending  : [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32768), (7, 16777216), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : {1, 5}

After reduction : 
 pending  : [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0]


Before reduction : 
 pending  : [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32768), (7, 16777216), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, 16777216), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 6.593 seconds

[QRM NOTE]: Time elapsed since last: 0.066 seconds

[QRM NOTE]: Peak memory: 485049 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : -------------11--
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------11
1     : ['vote(node2,value0)', 'vote(node2,value1)']
2     : -----------11----
2     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', 'vote(node1,value1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', 'vote(node1,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
51 (*) : 1------1---------
51     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
52     : -1----1----------
52     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
53     : --1----1---------
53     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
54     : ---1--1----------
54     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
55     : ----1--1---------
55     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
56     : -----11----------
56     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$chosenAt$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decision$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decision$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE0,QUORUM0. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
60 (*) : ------11---------
60     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'decision(value1)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$1]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$decision$0$1}

part_sig: ('value$0$decision$0$0 | value$0$decision$0$1',)


---------- SigGenerator ----------

terms:  ['decision(value0)', 'decision(value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$decision': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$decision$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: exists VALUE0. ~decision(VALUE0)


---------- Quantifier Inference: orbit 7 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
61 (*) : -----0-1----0----
61     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
62     : ----0-1----0-----
62     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
63     : ---0---1------0--
63     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
64     : --0---1------0---
64     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
65     : -0-----1--------0
65     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
66     : 0-----1--------0-
66     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', '~vote(node0,value1)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', '~vote(node0,value1)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0)


---------- Quantifier Inference: orbit 8 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 9 =====================
size : 12
num_suborbits: 1
67 (*) : -------1--1-0----
67     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
68     : ------1---10-----
68     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
69     : -------1-1--0----
69     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
70     : ------1--1-0-----
70     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
71     : -------1--1---0--
71     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
72     : ------1---1--0---
72     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
73     : -------11-----0--
73     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
74     : ------1-1----0---
74     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
75     : -------1-1------0
75     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
76     : ------1--1-----0-
76     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
77     : -------11-------0
77     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
78     : ------1-1------0-
78     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'didNotVote(NODE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0. vote(NODE1,VALUE0) | ~didNotVote(NODE0) | ~decision(VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 9 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
79 (*) : -------1----0--1-
79     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
80     : ------1----0----1
80     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
81     : -------1----01---
81     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
82     : ------1----0--1--
82     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
83     : -------1------01-
83     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
84     : ------1------0--1
84     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
85     : -------1---1--0--
85     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
86     : ------1-----10---
86     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
87     : -------1-----1--0
87     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
88     : ------1-------10-
88     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
89     : -------1---1----0
89     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
90     : ------1-----1--0-
90     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node0,value1)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node0,value1)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'vote(NODE0,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


---------- Quantifier Inference: orbit 10 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
91 (*) : -------1----0---0
91     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
92     : ------1----0---0-
92     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
93     : -------1----0-0--
93     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
94     : ------1----0-0---
94     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
95     : -------1------0-0
95     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
96     : ------1------0-0-
96     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE1,VALUE0)', 'decision(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 11 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
97 (*) : -0-----1-------1-
97     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
98     : 0-----1---------1
98     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
99     : ---0---1-----1---
99     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
100     : --0---1-------1--
100     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
101     : -----0-1---1-----
101     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
102     : ----0-1-----1----
102     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'vote(node2,value0)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'vote(node2,value0)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', 'vote(NODE0,VALUE1)', '~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,VALUE0,QUORUM0. member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 12 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
103 (*) : -0-----1--1------
103     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
104     : 0-----1---1------
104     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
105     : ---0---1-1-------
105     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
106     : --0---1--1-------
106     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
107     : -----0-11--------
107     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
108     : ----0-1-1--------
108     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'didNotVote(node2)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

part_sig: ('node$0$didNotVote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'didNotVote(node2)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$didNotVote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0; node$1$member$0': [node$0$didNotVote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$didNotVote$0; node$1$member$0': node$0$didNotVote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~member(NODE0,QUORUM0)', 'didNotVote(NODE0)', '~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0. member(NODE0,QUORUM0) | ~didNotVote(NODE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)


---------- Quantifier Inference: orbit 13 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
109 (*) : -------1-----1-1-
109     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
110     : ------1-------1-1
110     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
111     : -------1---1---1-
111     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
112     : ------1-----1---1
112     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
113     : -------1---1-1---
113     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
114     : ------1-----1-1--
114     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'vote(NODE1,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,VALUE0,NODE1. ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


---------- Quantifier Inference: orbit 14 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 15 =====================
size : 12
num_suborbits: 1
115 (*) : -------1--1--1---
115     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
116     : ------1---1---1--
116     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
117     : -------1-1-----1-
117     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
118     : ------1--1------1
118     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
119     : -------1--11-----
119     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
120     : ------1---1-1----
120     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
121     : -------11------1-
121     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
122     : ------1-1-------1
122     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
123     : -------1-1-1-----
123     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
124     : ------1--1--1----
124     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
125     : -------11----1---
125     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
126     : ------1-1-----1--
126     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$0$vote$0$0', 'value$0$decision$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$0$vote$0': [node$0$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$0$vote$0': node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE0)', 'vote(NODE1,VALUE1)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,NODE0,VALUE0,NODE1. ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


---------- Quantifier Inference: orbit 15 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : -------1-11------
127     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
128     : ------1--11------
128     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
129     : -------11-1------
129     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
130     : ------1-1-1------
130     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
131     : -------111-------
131     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
132     : ------1-11-------
132     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$didNotVote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$didNotVote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$didNotVote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

part_sig: ('node$0$didNotVote$0$0 | node$0$didNotVote$0$1', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['didNotVote(NODE1)', 'didNotVote(NODE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,VALUE0. ~didNotVote(NODE1) | ~didNotVote(NODE0) | ~decision(VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 16 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
184 (*) : -0---0-1------1--
184     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
185     : 0---0-1------1---
185     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
186     : ---0-0-1--------1
186     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
187     : --0-0-1--------1-
187     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
188     : -0-0---1----1----
188     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
189     : 0-0---1----1-----
189     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'vote(node1,value1)', 'member(node1,quorum__node0_node1)', 'member(node1,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'vote(node1,value1)', 'member(node1,quorum__node0_node1)', 'member(node1,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM0)', '~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)', 'vote(NODE0,VALUE0)', 'member(NODE0,QUORUM1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,VALUE0,QUORUM1. ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM1) | QUORUM0 = QUORUM1


---------- Quantifier Inference: orbit 23 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 24 =====================
size : 2
num_suborbits: 1
190 (*) : -0-0-0-1---------
190     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
191     : 0-0-0-1----------
191     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decision(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))


---------- Quantifier Inference: orbit 24 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
192 (*) : --0-0-1---0-----0
192     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
193     : ---0-0-1--0----0-
193     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
194     : 0---0-1--0----0--
194     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
195     : -0---0-1-0---0---
195     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
196     : 0-0---1-0---0----
196     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
197     : -0-0---10--0-----
197     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', '~didNotVote(node2)', '~vote(node2,value1)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '1$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$didNotVote$0$0, node$1$vote$0$0, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', '~didNotVote(node2)', '~vote(node2,value1)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decision': (EnumeratedSort('value', ('value0', 'value1')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '1$didNotVote': 1, '1$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, 'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~vote(NODE0,VALUE1)', '~didNotVote(NODE0)', 'member(NODE0,QUORUM0)', '~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)', 'member(NODE0,QUORUM1)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,VALUE1,VALUE0,NODE0,QUORUM1. vote(NODE0,VALUE1) | didNotVote(NODE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | ~member(NODE0,QUORUM1) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)


---------- Quantifier Inference: orbit 25 ----------

[QI_CHECK RESULT]: PASS


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : -------------11--
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------11
1     : ['vote(node2,value0)', 'vote(node2,value1)']
2     : -----------11----
2     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3




=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
51 (*) : 1------1---------
51     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
52     : -1----1----------
52     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
53     : --1----1---------
53     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
54     : ---1--1----------
54     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
55     : ----1--1---------
55     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
56     : -----11----------
56     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE1,VALUE0,QUORUM0. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
60 (*) : ------11---------
60     : ['decision(value0)', 'decision(value1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists VALUE0. ~decision(VALUE0)
qcost : 2




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
61 (*) : -----0-1----0----
61     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
62     : ----0-1----0-----
62     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
63     : ---0---1------0--
63     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
64     : --0---1------0---
64     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
65     : -0-----1--------0
65     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
66     : 0-----1--------0-
66     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0)
qcost : 7




=== Prime Orbit 9 =====================
size : 12
num_suborbits: 1
67 (*) : -------1--1-0----
67     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
68     : ------1---10-----
68     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
69     : -------1-1--0----
69     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
70     : ------1--1-0-----
70     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
71     : -------1--1---0--
71     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
72     : ------1---1--0---
72     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
73     : -------11-----0--
73     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
74     : ------1-1----0---
74     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
75     : -------1-1------0
75     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
76     : ------1--1-----0-
76     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
77     : -------11-------0
77     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
78     : ------1-1------0-
78     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0,VALUE0. vote(NODE1,VALUE0) | ~didNotVote(NODE0) | ~decision(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 10 =====================
size : 12
num_suborbits: 1
79 (*) : -------1----0--1-
79     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
80     : ------1----0----1
80     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
81     : -------1----01---
81     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
82     : ------1----0--1--
82     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
83     : -------1------01-
83     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
84     : ------1------0--1
84     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
85     : -------1---1--0--
85     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
86     : ------1-----10---
86     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
87     : -------1-----1--0
87     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
88     : ------1-------10-
88     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
89     : -------1---1----0
89     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
90     : ------1-----1--0-
90     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,NODE0,VALUE0,NODE1. vote(NODE1,VALUE0) | ~vote(NODE0,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
91 (*) : -------1----0---0
91     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
92     : ------1----0---0-
92     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
93     : -------1----0-0--
93     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
94     : ------1----0-0---
94     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
95     : -------1------0-0
95     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
96     : ------1------0-0-
96     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0,VALUE0. vote(NODE1,VALUE0) | ~decision(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
97 (*) : -0-----1-------1-
97     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
98     : 0-----1---------1
98     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
99     : ---0---1-----1---
99     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
100     : --0---1-------1--
100     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
101     : -----0-1---1-----
101     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
102     : ----0-1-----1----
102     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,NODE0,VALUE0,QUORUM0. member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
103 (*) : -0-----1--1------
103     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
104     : 0-----1---1------
104     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
105     : ---0---1-1-------
105     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
106     : --0---1--1-------
106     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
107     : -----0-11--------
107     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
108     : ----0-1-1--------
108     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall QUORUM0,NODE0,VALUE0. member(NODE0,QUORUM0) | ~didNotVote(NODE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)
qcost : 7




=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
109 (*) : -------1-----1-1-
109     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
110     : ------1-------1-1
110     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
111     : -------1---1---1-
111     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
112     : ------1-----1---1
112     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
113     : -------1---1-1---
113     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
114     : ------1-----1-1--
114     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,NODE0,VALUE0,NODE1. ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 12
num_suborbits: 1
115 (*) : -------1--1--1---
115     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
116     : ------1---1---1--
116     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
117     : -------1-1-----1-
117     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
118     : ------1--1------1
118     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
119     : -------1--11-----
119     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
120     : ------1---1-1----
120     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
121     : -------11------1-
121     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
122     : ------1-1-------1
122     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
123     : -------1-1-1-----
123     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
124     : ------1--1--1----
124     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
125     : -------11----1---
125     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
126     : ------1-1-----1--
126     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE1,NODE0,VALUE0,NODE1. ~didNotVote(NODE0) | ~vote(NODE1,VALUE1) | ~decision(VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : -------1-11------
127     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
128     : ------1--11------
128     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
129     : -------11-1------
129     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
130     : ------1-1-1------
130     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
131     : -------111-------
131     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
132     : ------1-11-------
132     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0,VALUE0. ~didNotVote(NODE1) | ~didNotVote(NODE0) | ~decision(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
184 (*) : -0---0-1------1--
184     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
185     : 0---0-1------1---
185     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
186     : ---0-0-1--------1
186     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
187     : --0-0-1--------1-
187     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
188     : -0-0---1----1----
188     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
189     : 0-0---1----1-----
189     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall QUORUM0,NODE0,VALUE0,QUORUM1. ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM1) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 24 =====================
size : 2
num_suborbits: 1
190 (*) : -0-0-0-1---------
190     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
191     : 0-0-0-1----------
191     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))
qcost : 4




=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
192 (*) : --0-0-1---0-----0
192     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
193     : ---0-0-1--0----0-
193     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
194     : 0---0-1--0----0--
194     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
195     : -0---0-1-0---0---
195     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
196     : 0-0---1-0---0----
196     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
197     : -0-0---10--0-----
197     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
num_forall :   5
num_exists :   0
num_literals : 9
quantified form : forall QUORUM0,VALUE1,VALUE0,NODE0,QUORUM1. vote(NODE0,VALUE1) | didNotVote(NODE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | ~member(NODE0,QUORUM1) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)
qcost : 14



[QRM NOTE]: Time elapsed since start: 7.569 seconds

[QRM NOTE]: Time elapsed since last: 0.976 seconds

[QRM NOTE]: Peak memory: 2497306 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

=============================================================================================


New level: 1
 pending : [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0]


Before reduction : 
 pending  : [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, 16777216), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, 16777216), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0]


Solution : [0] has cost 3.


Decide in level 1 among pending : [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, 16777216), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 7 with phase True at level 1

After decision at level 1
 pending : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0, 7]


New level: 2
 pending : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0, 7]


Before reduction : 
 pending  : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0, 7]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, 16777216), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, 1048576), (9, 32768), (10, 131072), (11, 524288), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, 2097152), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]
 solution : [0, 7]


Solution : [0, 7] has cost 5.


Decide in level 2 among pending : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, 1048576), (9, 32768), (10, 131072), (11, 524288), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, 2097152), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 24 with phase True at level 2

After decision at level 2
 pending : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 24]


New level: 3
 pending : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 24]


Before reduction : 
 pending  : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, 1048576), (9, 32768), (10, 131072), (11, 524288), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, 2097152), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 7, 24]


Before reduction : 
 pending  : []
 solution : [0, 7, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 7, 24]


Solution : [0, 7, 24] has cost 9.


Before backtrack at level 3
 pending : []
 solution : [0, 7, 24]

After backtrack at level 3
 pending : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 24]


Invert decision for 24 at level 2


New level: 3
 pending : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7]


Before reduction : 
 pending  : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, 1048576), (9, 32768), (10, 131072), (11, 524288), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7]


Solution : [0, 7] has cost 5.


Decide in level 3 among pending : [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, 1048576), (9, 32768), (10, 131072), (11, 524288), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 3

After decision at level 3
 pending : [6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 8]


New level: 4
 pending : [6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 8]


Before reduction : 
 pending  : [6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 8]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, 1048576), (9, 32768), (10, 131072), (11, 524288), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 7, 8]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 7, 8]


Solution : [0, 7, 8] has cost 12.


Before backtrack at level 4
 pending : []
 solution : [0, 7, 8]

After backtrack at level 4
 pending : [6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 8]


Invert decision for 8 at level 3


New level: 4
 pending : [6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7]


Before reduction : 
 pending  : [6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, 131072), (11, 524288), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7]


Solution : [0, 7] has cost 5.


Decide in level 4 among pending : [6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, 131072), (11, 524288), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 4

After decision at level 4
 pending : [6, 9, 10, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 11]


New level: 5
 pending : [6, 9, 10, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 11]


Before reduction : 
 pending  : [6, 9, 10, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, 131072), (11, 524288), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {6, 9, 10, 12, 13, 14, 15, 16, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 7, 11]


Before reduction : 
 pending  : []
 solution : [0, 7, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 7, 11]


Solution : [0, 7, 11] has cost 12.


Before backtrack at level 5
 pending : []
 solution : [0, 7, 11]

After backtrack at level 5
 pending : [6, 9, 10, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 11]


Invert decision for 11 at level 4


New level: 5
 pending : [6, 9, 10, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7]


Before reduction : 
 pending  : [6, 9, 10, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, 131072), (11, -1), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [6, 9, 10, 12, 13, 14, 15, 16, 23, 25]
 solution : [0, 7]


Solution : [0, 7] has cost 5.


Decide in level 5 among pending : [6, 9, 10, 12, 13, 14, 15, 16, 23, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, 131072), (11, -1), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 5

After decision at level 5
 pending : [6, 9, 10, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 12]


New level: 6
 pending : [6, 9, 10, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 12]


Before reduction : 
 pending  : [6, 9, 10, 13, 14, 15, 16, 23, 25]
 solution : [0, 7, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, 131072), (11, -1), (12, 262144), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 2048), (10, 0), (11, -1), (12, -1), (13, 8192), (14, 0), (15, 0), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {10, 15, 6, 14}

After reduction : 
 pending  : [9, 13, 16, 23, 25]
 solution : [0, 7, 12]


Before reduction : 
 pending  : [9, 13, 16, 23, 25]
 solution : [0, 7, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 2048), (10, 0), (11, -1), (12, -1), (13, 8192), (14, 0), (15, 0), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2048), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 13, 16, 23, 25]
 solution : [0, 7, 12]


Solution : [0, 7, 12] has cost 14.


Before backtrack at level 6
 pending : [9, 13, 16, 23, 25]
 solution : [0, 7, 12]

After backtrack at level 6
 pending : [9, 13, 16, 23, 25, 6, 10, 14, 15]
 solution : [0, 7, 12]


Invert decision for 12 at level 5


New level: 6
 pending : [9, 13, 16, 23, 25, 6, 10, 14, 15]
 solution : [0, 7]


Before reduction : 
 pending  : [9, 13, 16, 23, 25, 6, 10, 14, 15]
 solution : [0, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2048), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, 131072), (11, -1), (12, -1), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 13, 16, 23, 25, 6, 10, 14, 15]
 solution : [0, 7]


Solution : [0, 7] has cost 5.


Decide in level 6 among pending : [9, 13, 16, 23, 25, 6, 10, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, 131072), (11, -1), (12, -1), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 6

After decision at level 6
 pending : [9, 13, 16, 23, 25, 6, 14, 15]
 solution : [0, 7, 10]


New level: 7
 pending : [9, 13, 16, 23, 25, 6, 14, 15]
 solution : [0, 7, 10]


Before reduction : 
 pending  : [9, 13, 16, 23, 25, 6, 14, 15]
 solution : [0, 7, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, 131072), (11, -1), (12, -1), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 2048), (10, -1), (11, -1), (12, -1), (13, 8192), (14, 0), (15, 0), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {15, 6, 14}

After reduction : 
 pending  : [9, 13, 16, 23, 25]
 solution : [0, 7, 10]


Before reduction : 
 pending  : [9, 13, 16, 23, 25]
 solution : [0, 7, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 2048), (10, -1), (11, -1), (12, -1), (13, 8192), (14, 0), (15, 0), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2048), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 13, 16, 23, 25]
 solution : [0, 7, 10]


Solution : [0, 7, 10] has cost 14.


Before backtrack at level 7
 pending : [9, 13, 16, 23, 25]
 solution : [0, 7, 10]

After backtrack at level 7
 pending : [9, 13, 16, 23, 25, 6, 14, 15]
 solution : [0, 7, 10]


Invert decision for 10 at level 6


New level: 7
 pending : [9, 13, 16, 23, 25, 6, 14, 15]
 solution : [0, 7]


Before reduction : 
 pending  : [9, 13, 16, 23, 25, 6, 14, 15]
 solution : [0, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 2048), (10, -1), (11, -1), (12, -1), (13, 8192), (14, -1), (15, -1), (16, 2048), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, -1), (11, -1), (12, -1), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 13, 16, 23, 25, 6, 14, 15]
 solution : [0, 7]


Solution : [0, 7] has cost 5.


Decide in level 7 among pending : [9, 13, 16, 23, 25, 6, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, -1), (11, -1), (12, -1), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 7

After decision at level 7
 pending : [9, 16, 23, 25, 6, 14, 15]
 solution : [0, 7, 13]


New level: 8
 pending : [9, 16, 23, 25, 6, 14, 15]
 solution : [0, 7, 13]


Before reduction : 
 pending  : [9, 16, 23, 25, 6, 14, 15]
 solution : [0, 7, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, -1), (11, -1), (12, -1), (13, 65536), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8192), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {16, 9, 15}

After reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 7, 13]


Before reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 7, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8192), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8192), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 7, 13]


Solution : [0, 7, 13] has cost 12.


Before backtrack at level 8
 pending : [23, 25, 6, 14]
 solution : [0, 7, 13]

After backtrack at level 8
 pending : [23, 25, 6, 14, 9, 16, 15]
 solution : [0, 7, 13]


Invert decision for 13 at level 7


New level: 8
 pending : [23, 25, 6, 14, 9, 16, 15]
 solution : [0, 7]


Before reduction : 
 pending  : [23, 25, 6, 14, 9, 16, 15]
 solution : [0, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8192), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 9, 16, 15]
 solution : [0, 7]


Solution : [0, 7] has cost 5.


Decide in level 8 among pending : [23, 25, 6, 14, 9, 16, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [23, 25, 6, 14, 16, 15]
 solution : [0, 7, 9]


New level: 9
 pending : [23, 25, 6, 14, 16, 15]
 solution : [0, 7, 9]


Before reduction : 
 pending  : [23, 25, 6, 14, 16, 15]
 solution : [0, 7, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 32768), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 8192), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8192), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {16, 15}

After reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 7, 9]


Before reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 7, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8192), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8192), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 7, 9]


Solution : [0, 7, 9] has cost 12.


Before backtrack at level 9
 pending : [23, 25, 6, 14]
 solution : [0, 7, 9]

After backtrack at level 9
 pending : [23, 25, 6, 14, 16, 15]
 solution : [0, 7, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [23, 25, 6, 14, 16, 15]
 solution : [0, 7]


Before reduction : 
 pending  : [23, 25, 6, 14, 16, 15]
 solution : [0, 7]

Essensial at level 9 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8192), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 4096), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 15]
 solution : [0, 7, 16]


Before reduction : 
 pending  : [23, 25, 6, 14, 15]
 solution : [0, 7, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 4096), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 4096), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 15]
 solution : [0, 7, 16]


Solution : [0, 7, 16] has cost 12.


Before backtrack at level 9
 pending : [23, 25, 6, 14, 15]
 solution : [0, 7, 16]

After backtrack at level 9
 pending : [23, 25, 6, 14, 15, 16]
 solution : [0, 7]


Before backtrack at level 8
 pending : [23, 25, 6, 14, 15, 16]
 solution : [0, 7]

After backtrack at level 8
 pending : [23, 25, 6, 14, 15, 16, 9]
 solution : [0, 7]


Before backtrack at level 7
 pending : [23, 25, 6, 14, 15, 16, 9]
 solution : [0, 7]

After backtrack at level 7
 pending : [23, 25, 6, 14, 15, 16, 9, 13]
 solution : [0, 7]


Before backtrack at level 6
 pending : [23, 25, 6, 14, 15, 16, 9, 13]
 solution : [0, 7]

After backtrack at level 6
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10]
 solution : [0, 7]


Before backtrack at level 5
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10]
 solution : [0, 7]

After backtrack at level 5
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0, 7]


Before backtrack at level 4
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0, 7]

After backtrack at level 4
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0, 7]


Before backtrack at level 3
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0, 7]

After backtrack at level 3
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0, 7]


Before backtrack at level 2
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0, 7]

After backtrack at level 2
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8, 24]
 solution : [0, 7]


Invert decision for 7 at level 1


New level: 2
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8, 24]
 solution : [0]


Before reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8, 24]
 solution : [0]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 4096), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16384), (24, -1), (25, 16384), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8, 24]
 solution : [0]


Solution : [0] has cost 3.


Decide in level 2 among pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 24 with phase True at level 2

After decision at level 2
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0, 24]


New level: 3
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0, 24]


Before reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, 4194304), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 24]


Before reduction : 
 pending  : []
 solution : [0, 24]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 24]


Solution : [0, 24] has cost 7.


Before backtrack at level 3
 pending : []
 solution : [0, 24]

After backtrack at level 3
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0, 24]


Invert decision for 24 at level 2


New level: 3
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0]


Before reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0]


Solution : [0] has cost 3.


Decide in level 3 among pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 8 with phase True at level 3

After decision at level 3
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0, 8]


New level: 4
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0, 8]


Before reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0, 8]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, 2097152), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {6, 9, 10, 11, 12, 13, 14, 15, 16, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 8]


Before reduction : 
 pending  : []
 solution : [0, 8]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 8]


Solution : [0, 8] has cost 10.


Before backtrack at level 4
 pending : []
 solution : [0, 8]

After backtrack at level 4
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0, 8]


Invert decision for 8 at level 3


New level: 4
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0]


Before reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0]


Solution : [0] has cost 3.


Decide in level 4 among pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 4

After decision at level 4
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0, 11]


New level: 5
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0, 11]


Before reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, 262144), (11, 1048576), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {6, 9, 10, 12, 13, 14, 15, 16, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 11]


Before reduction : 
 pending  : []
 solution : [0, 11]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 11]


Solution : [0, 11] has cost 10.


Before backtrack at level 5
 pending : []
 solution : [0, 11]

After backtrack at level 5
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0, 11]


Invert decision for 11 at level 4


New level: 5
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0]


Before reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, 262144), (11, -1), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0]


Solution : [0] has cost 3.


Decide in level 5 among pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, 262144), (11, -1), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 5

After decision at level 5
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10]
 solution : [0, 12]


New level: 6
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10]
 solution : [0, 12]


Before reduction : 
 pending  : [23, 25, 6, 14, 15, 16, 9, 13, 10]
 solution : [0, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, 262144), (11, -1), (12, 524288), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 4096), (10, 0), (11, -1), (12, -1), (13, 16384), (14, 0), (15, 0), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {10, 15, 6, 14}

After reduction : 
 pending  : [23, 25, 16, 9, 13]
 solution : [0, 12]


Before reduction : 
 pending  : [23, 25, 16, 9, 13]
 solution : [0, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 4096), (10, 0), (11, -1), (12, -1), (13, 16384), (14, 0), (15, 0), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 4096), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 25, 16, 9, 13]
 solution : [0, 12]


Solution : [0, 12] has cost 12.


Before backtrack at level 6
 pending : [23, 25, 16, 9, 13]
 solution : [0, 12]

After backtrack at level 6
 pending : [23, 25, 16, 9, 13, 6, 14, 15, 10]
 solution : [0, 12]


Invert decision for 12 at level 5


New level: 6
 pending : [23, 25, 16, 9, 13, 6, 14, 15, 10]
 solution : [0]


Before reduction : 
 pending  : [23, 25, 16, 9, 13, 6, 14, 15, 10]
 solution : [0]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 4096), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, 262144), (11, -1), (12, -1), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 25, 16, 9, 13, 6, 14, 15, 10]
 solution : [0]


Solution : [0] has cost 3.


Decide in level 6 among pending : [23, 25, 16, 9, 13, 6, 14, 15, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, 262144), (11, -1), (12, -1), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 6

After decision at level 6
 pending : [23, 25, 16, 9, 13, 6, 14, 15]
 solution : [0, 10]


New level: 7
 pending : [23, 25, 16, 9, 13, 6, 14, 15]
 solution : [0, 10]


Before reduction : 
 pending  : [23, 25, 16, 9, 13, 6, 14, 15]
 solution : [0, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, 262144), (11, -1), (12, -1), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 4096), (10, -1), (11, -1), (12, -1), (13, 16384), (14, 0), (15, 0), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {15, 6, 14}

After reduction : 
 pending  : [23, 25, 16, 9, 13]
 solution : [0, 10]


Before reduction : 
 pending  : [23, 25, 16, 9, 13]
 solution : [0, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 4096), (10, -1), (11, -1), (12, -1), (13, 16384), (14, 0), (15, 0), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 4096), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 25, 16, 9, 13]
 solution : [0, 10]


Solution : [0, 10] has cost 12.


Before backtrack at level 7
 pending : [23, 25, 16, 9, 13]
 solution : [0, 10]

After backtrack at level 7
 pending : [23, 25, 16, 9, 13, 6, 14, 15]
 solution : [0, 10]


Invert decision for 10 at level 6


New level: 7
 pending : [23, 25, 16, 9, 13, 6, 14, 15]
 solution : [0]


Before reduction : 
 pending  : [23, 25, 16, 9, 13, 6, 14, 15]
 solution : [0]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 4096), (10, -1), (11, -1), (12, -1), (13, 16384), (14, -1), (15, -1), (16, 4096), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 512), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 25, 16, 9, 13, 6, 14, 15]
 solution : [0]


Solution : [0] has cost 3.


Decide in level 7 among pending : [23, 25, 16, 9, 13, 6, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 7

After decision at level 7
 pending : [23, 25, 16, 9, 6, 14, 15]
 solution : [0, 13]


New level: 8
 pending : [23, 25, 16, 9, 6, 14, 15]
 solution : [0, 13]


Before reduction : 
 pending  : [23, 25, 16, 9, 6, 14, 15]
 solution : [0, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, -1), (11, -1), (12, -1), (13, 131072), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, 1024), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {16, 9, 15}

After reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 13]


Before reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, 1024), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, 1024), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 13]


Solution : [0, 13] has cost 10.


Before backtrack at level 8
 pending : [23, 25, 6, 14]
 solution : [0, 13]

After backtrack at level 8
 pending : [23, 25, 6, 14, 16, 9, 15]
 solution : [0, 13]


Invert decision for 13 at level 7


New level: 8
 pending : [23, 25, 6, 14, 16, 9, 15]
 solution : [0]


Before reduction : 
 pending  : [23, 25, 6, 14, 16, 9, 15]
 solution : [0]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, 1024), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 16, 9, 15]
 solution : [0]


Solution : [0] has cost 3.


Decide in level 8 among pending : [23, 25, 6, 14, 16, 9, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [23, 25, 6, 14, 16, 15]
 solution : [0, 9]


New level: 9
 pending : [23, 25, 6, 14, 16, 15]
 solution : [0, 9]


Before reduction : 
 pending  : [23, 25, 6, 14, 16, 15]
 solution : [0, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, 65536), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32768), (15, 16384), (16, 8192), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, 1024), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {16, 15}

After reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 9]


Before reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, 1024), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, 1024), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 25, 6, 14]
 solution : [0, 9]


Solution : [0, 9] has cost 10.


Before backtrack at level 9
 pending : [23, 25, 6, 14]
 solution : [0, 9]

After backtrack at level 9
 pending : [23, 25, 6, 14, 16, 15]
 solution : [0, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [23, 25, 6, 14, 16, 15]
 solution : [0]


Before reduction : 
 pending  : [23, 25, 6, 14, 16, 15]
 solution : [0]

Essensial at level 9 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16384), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1024), (24, -1), (25, 1024), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32768), (15, 8192), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 15]
 solution : [0, 16]


Before reduction : 
 pending  : [23, 25, 6, 14, 15]
 solution : [0, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32768), (15, 8192), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32768), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32768), (15, 8192), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32768), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 25, 6, 14, 15]
 solution : [0, 16]


Solution : [0, 16] has cost 10.


Before backtrack at level 9
 pending : [23, 25, 6, 14, 15]
 solution : [0, 16]

After backtrack at level 9
 pending : [23, 25, 6, 14, 15, 16]
 solution : [0]


Before backtrack at level 8
 pending : [23, 25, 6, 14, 15, 16]
 solution : [0]

After backtrack at level 8
 pending : [23, 25, 6, 14, 15, 16, 9]
 solution : [0]


Before backtrack at level 7
 pending : [23, 25, 6, 14, 15, 16, 9]
 solution : [0]

After backtrack at level 7
 pending : [23, 25, 6, 14, 15, 16, 9, 13]
 solution : [0]


Before backtrack at level 6
 pending : [23, 25, 6, 14, 15, 16, 9, 13]
 solution : [0]

After backtrack at level 6
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10]
 solution : [0]


Before backtrack at level 5
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10]
 solution : [0]

After backtrack at level 5
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0]


Before backtrack at level 4
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12]
 solution : [0]

After backtrack at level 4
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0]


Before backtrack at level 3
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11]
 solution : [0]

After backtrack at level 3
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0]


Before backtrack at level 2
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8]
 solution : [0]

After backtrack at level 2
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8, 24]
 solution : [0]


Before backtrack at level 1
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8, 24]
 solution : [0]

After backtrack at level 1
 pending : [23, 25, 6, 14, 15, 16, 9, 13, 10, 12, 11, 8, 24, 7]
 solution : [0]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 7

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=2)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 24] (length = 2)

invariant [invar_0] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_24] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 7.692 seconds

[QRM NOTE]: Time elapsed since last: 0.123 seconds

[QRM NOTE]: Peak memory: 2463549 bytes


===============================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

===============================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.728 seconds

[QRM NOTE]: Time elapsed since last: 0.036 seconds

[QRM NOTE]: Peak memory: 1413704 bytes


================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2]

================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 45: invar_24

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 45: invar_24 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 44: invar_0 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 45: invar_24 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 45: invar_24 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy: line 29: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 9.661 seconds

[QRM NOTE]: Time elapsed since last: 1.934 seconds

[QRM NOTE]: Peak memory: 1427012 bytes


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=3,value=2

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy -s node=5,value=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=5,value=2]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_5_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_5_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_5_value_2.finite.cpp toy_consensus.node_5_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_5_value_2.finite.o toy_consensus.node_5_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 37

[FW NOTE]: number of interpreted atoms (e.g. member,le): 50

[FW NOTE]: number of branching actions: 30

[FW NOTE]: symmetric group order: 240

[QRM NOTE]: Time elapsed since start: 6.624 seconds

[QRM NOTE]: Time elapsed since last: 6.624 seconds

[QRM NOTE]: Peak memory: 1229923 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 6

[FW NOTE]: number of total reachable states:        345

[FW NOTE]: number of dfs representative states:     18

[FW NOTE]: number of dfs non-representative states: 327


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=5,value=2]

===========================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3', 'node4']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node1_node4', 'quorum__node0_node2_node3', 'quorum__node0_node2_node4', 'quorum__node0_node3_node4', 'quorum__node1_node2_node3', 'quorum__node1_node2_node4', 'quorum__node1_node3_node4', 'quorum__node2_node3_node4']
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
predicate: didNotVote('node',)
predicate: member('node', 'quorum')
predicate: decision('value',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node1_node4)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node0_node2_node4)': '1', 'member(node0,quorum__node0_node3_node4)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node0,quorum__node1_node2_node4)': '0', 'member(node0,quorum__node1_node3_node4)': '0', 'member(node0,quorum__node2_node3_node4)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node1_node4)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node0_node2_node4)': '0', 'member(node1,quorum__node0_node3_node4)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node1,quorum__node1_node2_node4)': '1', 'member(node1,quorum__node1_node3_node4)': '1', 'member(node1,quorum__node2_node3_node4)': '0', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node1_node4)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node0_node2_node4)': '1', 'member(node2,quorum__node0_node3_node4)': '0', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node1_node2_node4)': '1', 'member(node2,quorum__node1_node3_node4)': '0', 'member(node2,quorum__node2_node3_node4)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node1_node4)': '0', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node0_node2_node4)': '0', 'member(node3,quorum__node0_node3_node4)': '1', 'member(node3,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node1_node2_node4)': '0', 'member(node3,quorum__node1_node3_node4)': '1', 'member(node3,quorum__node2_node3_node4)': '1', 'member(node4,quorum__node0_node1_node2)': '0', 'member(node4,quorum__node0_node1_node3)': '0', 'member(node4,quorum__node0_node1_node4)': '1', 'member(node4,quorum__node0_node2_node3)': '0', 'member(node4,quorum__node0_node2_node4)': '1', 'member(node4,quorum__node0_node3_node4)': '1', 'member(node4,quorum__node1_node2_node3)': '0', 'member(node4,quorum__node1_node2_node4)': '1', 'member(node4,quorum__node1_node3_node4)': '1', 'member(node4,quorum__node2_node3_node4)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node1_node4,value0)', 'chosenAt(quorum__node0_node1_node4,value1)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node0_node2_node4,value0)', 'chosenAt(quorum__node0_node2_node4,value1)', 'chosenAt(quorum__node0_node3_node4,value0)', 'chosenAt(quorum__node0_node3_node4,value1)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node4,value0)', 'chosenAt(quorum__node1_node2_node4,value1)', 'chosenAt(quorum__node1_node3_node4,value0)', 'chosenAt(quorum__node1_node3_node4,value1)', 'chosenAt(quorum__node2_node3_node4,value0)', 'chosenAt(quorum__node2_node3_node4,value1)', 'decision(value0)', 'decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'didNotVote(node3)', 'didNotVote(node4)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node4,value0)', 'vote(node4,value1)']
representative states : 35741675928289635511, 17583162230731795639, 8431847787914947767, 175268821883761814711, 12562329524973763652791, 51580786163947801939373239, 51580823057435949358476471, 12544459241652357524663, 12581352729799776627895, 12599223013121182756023, 157398538562355686583, 148319281713576766647, 185212769860995869879, 194292026709774789815, 212162310031180917943, 3856190566506523831, 1559354756547570871, 8503905381952875703


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000111110000000000
lex min decimal: 35741675928289635511
states:
0000000000000000000000111110000000000




=== State Orbit 1 =====================
size : 10
repr state: 0000000000000000000000011111000000000
lex min decimal: 17583162230731795639
states:
0000000000000000000000110110000100000
0000000000000000000000111010000001000
0000000000000000000000111100000000010
0000000000000000000000011110100000000
0000000000000000000000101110010000000
0000000000000000000000111010000000100
0000000000000000000000110110000010000
0000000000000000000000111100000000001
0000000000000000000000101110001000000
0000000000000000000000011111000000000




=== State Orbit 2 =====================
size : 20
repr state: 0000000000000000000000001111010000000
lex min decimal: 8431847787914947767
states:
0000000000000000000000100110001010000
0000000000000000000000010110100010000
0000000000000000000000011011000001000
0000000000000000000000111000000000101
0000000000000000000000110100000010001
0000000000000000000000101010010001000
0000000000000000000000110010000010100
0000000000000000000000100110010100000
0000000000000000000000110100000100010
0000000000000000000000110010000101000
0000000000000000000000101100001000001
0000000000000000000000011100100000001
0000000000000000000000011010100000100
0000000000000000000000001111010000000
0000000000000000000000111000000001010
0000000000000000000000011101000000010
0000000000000000000000101100010000010
0000000000000000000000010111000100000
0000000000000000000000001110101000000
0000000000000000000000101010001000100




=== State Orbit 3 =====================
size : 20
repr state: 1000000000000000000000000111010100000
lex min decimal: 175268821883761814711
states:
0000000000000001000000100100001010001
1000000000000000000000000111010100000
0000000100000000000000010010100010100
0000000000000000000100110000000010101
0000000000000000100000101000010001010
0001000000000000000000001010101000100
0000001000000000000000010011000101000
0000000001000000000000010100100010001
0000000000001000000000100010010101000
0000100000000000000000001101010000010
0010000000000000000000001011010001000
0000010000000000000000001100101000001
0000000000000000010000101000001000101
0000000010000000000000010101000100010
0100000000000000000000000110101010000
0000000000000010000000100100010100010
0000000000010000000000011000100000101
0000000000100000000000011001000001010
0000000000000000001000110000000101010
0000000000000100000000100010001010100




=== State Orbit 4 =====================
size : 10
repr state: 1010001000001000000000000011010101000
lex min decimal: 12562329524973763652791
states:
0010100000100000100000001001010001010
0101000100000100000000000010101010100
1000100010000010000000000101010100010
1010001000001000000000000011010101000
0000000000001010101000100000010101010
0000001010100000001000010001000101010
0000000101010000000100010000100010101
0000000000000101010100100000001010101
0001010000010000010000001000101000101
0100010001000001000000000100101010001




=== State Orbit 5 =====================
size : 2
repr state: 1010101010101010101000000001010101010
lex min decimal: 51580786163947801939373239
states:
0101010101010101010100000000101010101
1010101010101010101000000001010101010




=== State Orbit 6 =====================
size : 2
repr state: 1010101010101010101010000001010101010
lex min decimal: 51580823057435949358476471
states:
1010101010101010101010000001010101010
0101010101010101010101000000101010101




=== State Orbit 7 =====================
size : 10
repr state: 1010001000001000000000000001010101001
lex min decimal: 12544459241652357524663
states:
0101000100000100000000000000101010110
1000100010000010000000000001010100110
0100010001000001000000000000101011001
0000001010100000001000000001001101010
0000000101010000000100000000110010101
1010001000001000000000000001010101001
0001010000010000010000000000101100101
0000000000001010101000000000110101010
0000000000000101010100000001001010101
0010100000100000100000000001010011010




=== State Orbit 8 =====================
size : 10
repr state: 1010001000001000000010000001010101001
lex min decimal: 12581352729799776627895
states:
0000001010100000001010000001001101010
0000000101010000000101000000110010101
0100010001000001000001000000101011001
0010100000100000100010000001010011010
1010001000001000000010000001010101001
1000100010000010000010000001010100110
0000000000000101010101000001001010101
0001010000010000010001000000101100101
0101000100000100000001000000101010110
0000000000001010101010000000110101010




=== State Orbit 9 =====================
size : 10
repr state: 1010001000001000000010000011010101000
lex min decimal: 12599223013121182756023
states:
0101000100000100000001000010101010100
0100010001000001000001000100101010001
0001010000010000010001001000101000101
1000100010000010000010000101010100010
0010100000100000100010001001010001010
0000000000000101010101100000001010101
1010001000001000000010000011010101000
0000001010100000001010010001000101010
0000000101010000000101010000100010101
0000000000001010101010100000010101010




=== State Orbit 10 =====================
size : 40
repr state: 1000000000000000000000000011010100100
lex min decimal: 157398538562355686583
states:
0000000001000000000000010000100011001
0000000000100000000000001001001001010
0000000000010000000000001000110000101
0001000000000000000000001000101000110
0000001000000000000000000011001101000
0000000000000000010000100000001100101
1000000000000000000000000011010100100
0000000000000000000100010001000010101
0010000000000000000000000011010011000
0000000000000000000100100000010010101
0010000000000000000000001001010001001
0000010000000000000000001000101001001
0000000000000000001000100000001101010
0000000100000000000000000010110010100
0000000000000100000000000011001010100
0000000000000001000000100000001011001
0000000000000000100000001000110001010
0000000010000000000000000101001100010
0000100000000000000000000101010010010
0000001000000000000000010001000101001
0000000100000000000000010000100010110
0000000000000000010000001001001000101
1000000000000000000000000101010100001
0100000000000000000000000010101011000
0000000000100000000000010001000011010
0000000000000000100000100000010011010
0000100000000000000000001001010000110
0000000010000000000000010001000100110
0001000000000000000000000010101100100
0100000000000000000000000100101010010
0000000000001000000000100000010101001
0000000000001000000000000010110101000
0000000000000010000000000100110100010
0000000000010000000000010000100100101
0000010000000000000000000100101100001
0000000000000010000000100000010100110
0000000000000000001000010000100101010
0000000000000100000000100000001010110
0000000001000000000000000100110010001
0000000000000001000000000101001010001




=== State Orbit 11 =====================
size : 20
repr state: 1000000000000000000000000001010100101
lex min decimal: 148319281713576766647
states:
0000000000000000100000000000110011010
0000000000000000010000000001001100101
0001000000000000000000000000101100110
0000000000000001000000000001001011001
0000000000000100000000000001001010110
0000000000000000000100000001010010101
0000000000010000000000000000110100101
1000000000000000000000000001010100101
0000010000000000000000000000101101001
0000100000000000000000000001010010110
0010000000000000000000000001010011001
0100000000000000000000000000101011010
0000000010000000000000000001001100110
0000000001000000000000000000110011001
0000000000000010000000000000110100110
0000000000000000001000000000101101010
0000000000100000000000000001001011010
0000000100000000000000000000110010110
0000000000001000000000000000110101001
0000001000000000000000000001001101001




=== State Orbit 12 =====================
size : 20
repr state: 1000000000000000000010000001010100101
lex min decimal: 185212769860995869879
states:
0001000000000000000001000000101100110
0000000010000000000010000001001100110
0000000000000000010001000001001100101
1000000000000000000010000001010100101
0000100000000000000010000001010010110
0000000000000010000010000000110100110
0000000000001000000010000000110101001
0000001000000000000010000001001101001
0000000000100000000010000001001011010
0000000000000000000101000001010010101
0000000000000000100010000000110011010
0000000000010000000001000000110100101
0000000001000000000001000000110011001
0000000100000000000001000000110010110
0000010000000000000001000000101101001
0000000000000100000001000001001010110
0100000000000000000001000000101011010
0000000000000001000001000001001011001
0000000000000000001010000000101101010
0010000000000000000010000001010011001




=== State Orbit 13 =====================
size : 40
repr state: 1000000000000000000010000011010100100
lex min decimal: 194292026709774789815
states:
0000000000000010000010000100110100010
0000000000000000001010100000001101010
0000000000000000100010100000010011010
0000000000100000000010010001000011010
0000000010000000000010000101001100010
0000000000010000000001010000100100101
0000000100000000000001010000100010110
1000000000000000000010000011010100100
0010000000000000000010001001010001001
0000000010000000000010010001000100110
0000010000000000000001000100101100001
0100000000000000000001000010101011000
0000000001000000000001000100110010001
0010000000000000000010000011010011000
0000000000000100000001000011001010100
0000000000010000000001001000110000101
0000100000000000000010001001010000110
1000000000000000000010000101010100001
0000000000100000000010001001001001010
0000000000000000000101100000010010101
0001000000000000000001001000101000110
0000000000000000010001100000001100101
0000000000000000001010010000100101010
0000000000000010000010100000010100110
0000000000000000000101010001000010101
0000100000000000000010000101010010010
0100000000000000000001000100101010010
0000000000001000000010000010110101000
0000000001000000000001010000100011001
0000000000000001000001000101001010001
0000001000000000000010010001000101001
0000000000001000000010100000010101001
0000000000000100000001100000001010110
0000000000000000100010001000110001010
0000000100000000000001000010110010100
0000000000000000010001001001001000101
0000010000000000000001001000101001001
0000000000000001000001100000001011001
0001000000000000000001000010101100100
0000001000000000000010000011001101000




=== State Orbit 14 =====================
size : 20
repr state: 1000000000000000000010000111010100000
lex min decimal: 212162310031180917943
states:
0000000000000000000101110000000010101
0100000000000000000001000110101010000
0000000000000010000010100100010100010
0000000100000000000001010010100010100
0000000010000000000010010101000100010
0000000000100000000010011001000001010
0000100000000000000010001101010000010
0000000000000000001010110000000101010
0000000000000000100010101000010001010
0001000000000000000001001010101000100
0000000001000000000001010100100010001
0000010000000000000001001100101000001
0000000000001000000010100010010101000
1000000000000000000010000111010100000
0000000000000100000001100010001010100
0010000000000000000010001011010001000
0000000000010000000001011000100000101
0000000000000001000001100100001010001
0000000000000000010001101000001000101
0000001000000000000010010011000101000




=== State Orbit 15 =====================
size : 60
repr state: 0000000000000000000000000111010010000
lex min decimal: 3856190566506523831
states:
0000000000000000000000011000100000110
0000000000000000000000000110110010000
0000000000000000000000010010100100100
0000000000000000000000011001000000110
0000000000000000000000010010100011000
0000000000000000000000011001000001001
0000000000000000000000010011000011000
0000000000000000000000001100110000001
0000000000000000000000010011000100100
0000000000000000000000010101000010010
0000000000000000000000110000000101001
0000000000000000000000010100100100010
0000000000000000000000100100001100010
0000000000000000000000100010001101000
0000000000000000000000001100101000010
0000000000000000000000011000100001010
0000000000000000000000001010101001000
0000000000000000000000001010110000100
0000000000000000000000011001000000101
0000000000000000000000100010010010100
0000000000000000000000010101000010001
0000000000000000000000100010010011000
0000000000000000000000010100100100001
0000000000000000000000001011001000100
0000000000000000000000001101001000010
0000000000000000000000011000100001001
0000000000000000000000100100010100001
0000000000000000000000100100001010010
0000000000000000000000001010110001000
0000000000000000000000001100110000010
0000000000000000000000110000000100101
0000000000000000000000100100010010001
0000000000000000000000100100010010010
0000000000000000000000100100001100001
0000000000000000000000000110110100000
0000000000000000000000101000001001001
0000000000000000000000000111010010000
0000000000000000000000010100100010010
0000000000000000000000100010010100100
0000000000000000000000000111001010000
0000000000000000000000101000010000110
0000000000000000000000010010100101000
0000000000000000000000010101000100001
0000000000000000000000110000000011001
0000000000000000000000000110101100000
0000000000000000000000100010001100100
0000000000000000000000110000000100110
0000000000000000000000101000010000101
0000000000000000000000101000001000110
0000000000000000000000001101010000001
0000000000000000000000001011010000100
0000000000000000000000101000010001001
0000000000000000000000000111001100000
0000000000000000000000110000000010110
0000000000000000000000101000001001010
0000000000000000000000001011001001000
0000000000000000000000110000000011010
0000000000000000000000100010001011000
0000000000000000000000001101001000001
0000000000000000000000010011000010100




=== State Orbit 16 =====================
size : 30
repr state: 0000000000000000000000000011010010100
lex min decimal: 1559354756547570871
states:
0000000000000000000000000101010010001
0000000000000000000000010000100101001
0000000000000000000000000011001011000
0000000000000000000000010001000010110
0000000000000000000000010001000011001
0000000000000000000000001001010000101
0000000000000000000000001000110000110
0000000000000000000000100000010010110
0000000000000000000000000100110010010
0000000000000000000000000100101100010
0000000000000000000000100000010011001
0000000000000000000000001000101001010
0000000000000000000000000101001010010
0000000000000000000000000010101101000
0000000000000000000000001001001001001
0000000000000000000000100000001011010
0000000000000000000000000011010010100
0000000000000000000000100000010100101
0000000000000000000000000101001100001
0000000000000000000000001000110001001
0000000000000000000000100000001100110
0000000000000000000000000100110100001
0000000000000000000000001001001000110
0000000000000000000000010000100100110
0000000000000000000000100000001101001
0000000000000000000000000010110011000
0000000000000000000000010001000100101
0000000000000000000000000011001100100
0000000000000000000000000010110100100
0000000000000000000000010000100011010




=== State Orbit 17 =====================
size : 20
repr state: 0000000000000000000000001111001000000
lex min decimal: 8503905381952875703
states:
0000000000000000000000101010010000100
0000000000000000000000001111001000000
0000000000000000000000011010100001000
0000000000000000000000101100001000010
0000000000000000000000100110001100000
0000000000000000000000110010000100100
0000000000000000000000111000000001001
0000000000000000000000011011000000100
0000000000000000000000011100100000010
0000000000000000000000011101000000001
0000000000000000000000110010000011000
0000000000000000000000110100000100001
0000000000000000000000001110110000000
0000000000000000000000010111000010000
0000000000000000000000101100010000001
0000000000000000000000100110010010000
0000000000000000000000111000000000110
0000000000000000000000110100000010010
0000000000000000000000010110100100000
0000000000000000000000101010001001000



[QRM NOTE]: Time elapsed since start: 8.705 seconds

[QRM NOTE]: Time elapsed since last: 2.082 seconds

[QRM NOTE]: Peak memory: 1384331 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=5,value=2]

================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 11.532 seconds

[QRM NOTE]: Time elapsed since last: 2.827 seconds

[QRM NOTE]: Peak memory: 930119 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_3.finite.cpp toy_consensus.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_3.finite.o toy_consensus.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 18

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 6.496 seconds

[QRM NOTE]: Time elapsed since last: 6.496 seconds

[QRM NOTE]: Peak memory: 1186746 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        94

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 84


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decision('value',)
predicate: chosenAt('quorum', 'value')
predicate: didNotVote('node',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)']
representative states : 1835435, 819627, 17830827, 1224774571, 1226871723, 16847787, 18944939, 19927979, 303531, 43435


=== State Orbit 0 =====================
size : 1
repr state: 000000000000111000000000
lex min decimal: 1835435
states:
000000000000111000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000011100000000
lex min decimal: 819627
states:
000000000000011100000000
000000000000011010000000
000000000000101000010000
000000000000110000000010
000000000000110000000100
000000000000110000000001
000000000000011001000000
000000000000101000100000
000000000000101000001000




=== State Orbit 2 =====================
size : 9
repr state: 100000000000001100100000
lex min decimal: 17830827
states:
001000000000001001001000
000000001000100000001001
100000000000001100100000
000001000000010001000001
010000000000001010010000
000100000000010100000100
000000100000100000100100
000010000000010010000010
000000010000100000010010




=== State Orbit 3 =====================
size : 3
repr state: 100100100000000100100100
lex min decimal: 1224774571
states:
100100100000000100100100
010010010000000010010010
001001001000000001001001




=== State Orbit 4 =====================
size : 3
repr state: 100100100100000100100100
lex min decimal: 1226871723
states:
001001001001000001001001
010010010010000010010010
100100100100000100100100




=== State Orbit 5 =====================
size : 18
repr state: 100000000000000100100010
lex min decimal: 16847787
states:
000010000000000010001010
000000010000000001010010
000001000000000001010001
000100000000000100001100
010000000000000010010001
000010000000000010100010
000000100000000001100100
000000001000000100001001
001000000000000001001100
100000000000000100100001
000100000000000100010100
001000000000000001001010
010000000000000010010100
000000100000000010100100
000000010000000100010010
000001000000000001100001
000000001000000010001001
100000000000000100100010




=== State Orbit 6 =====================
size : 18
repr state: 100000000100000100100010
lex min decimal: 18944939
states:
100000000100000100100001
010000000010000010010100
010000000010000010010001
000010000010000010001010
000000100100000001100100
000000010010000100010010
000000001001000010001001
100000000100000100100010
000100000100000100001100
000100000100000100010100
000000010010000001010010
000010000010000010100010
001000000001000001001010
000001000001000001100001
000001000001000001010001
000000001001000100001001
000000100100000010100100
001000000001000001001100




=== State Orbit 7 =====================
size : 9
repr state: 100000000100001100100000
lex min decimal: 19927979
states:
001000000001001001001000
000000010010100000010010
000000001001100000001001
000010000010010010000010
000000100100100000100100
000100000100010100000100
010000000010001010010000
100000000100001100100000
000001000001010001000001




=== State Orbit 8 =====================
size : 18
repr state: 000000000000001100010000
lex min decimal: 303531
states:
000000000000001100001000
000000000000100000001100
000000000000001001010000
000000000000100000100010
000000000000010100000001
000000000000010001000100
000000000000100000010100
000000000000010100000010
000000000000100000100001
000000000000001001100000
000000000000001100010000
000000000000001010001000
000000000000001010100000
000000000000010010000100
000000000000100000010001
000000000000010010000001
000000000000010001000010
000000000000100000001010




=== State Orbit 9 =====================
size : 6
repr state: 000000000000000100010001
lex min decimal: 43435
states:
000000000000000100001010
000000000000000010001100
000000000000000010100001
000000000000000001100010
000000000000000100010001
000000000000000001010100



[QRM NOTE]: Time elapsed since start: 6.689 seconds

[QRM NOTE]: Time elapsed since last: 0.193 seconds

[QRM NOTE]: Peak memory: 1249510 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 3680614315, binary: 011011011011000011011011

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.857 seconds

[QRM NOTE]: Time elapsed since last: 0.168 seconds

[QRM NOTE]: Peak memory: 283163 bytes

next size: node=3,value=3


********************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3

********************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.ivy -s node=3,value=3 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.025 seconds

[QRM NOTE]: Time elapsed since last: 0.025 seconds

[QRM NOTE]: Peak memory: 36492 bytes


===========================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===========================================================================================================


======================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

======================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : --1------------1--------
9     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
10     : -1-------------1--------
10     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
11     : --1-------------1-------
11     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
12     : 1---------------1-------
12     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
13     : -1---------------1------
13     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
14     : 1----------------1------
14     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
15     : -----1---------1--------
15     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
16     : ----1----------1--------
16     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
17     : -----1----------1-------
17     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
18     : ---1------------1-------
18     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
19     : ----1------------1------
19     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
20     : ---1-------------1------
20     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
21     : --1---------------1-----
21     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
22     : -1----------------1-----
22     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
23     : --1----------------1----
23     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
24     : 1------------------1----
24     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
25     : -1------------------1---
25     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
26     : 1-------------------1---
26     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
27     : --------1---------1-----
27     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
28     : -------1----------1-----
28     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
29     : --------1----------1----
29     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
30     : ------1------------1----
30     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
31     : -------1------------1---
31     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
32     : ------1-------------1---
32     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
33     : -----1---------------1--
33     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
34     : ----1----------------1--
34     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
35     : -----1----------------1-
35     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
36     : ---1------------------1-
36     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
37     : ----1------------------1
37     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
38     : ---1-------------------1
38     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
39     : --------1------------1--
39     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
40     : -------1-------------1--
40     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
41     : --------1-------------1-
41     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
42     : ------1---------------1-
42     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
43     : -------1---------------1
43     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
44     : ------1----------------1
44     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : ------------1--1--------
45     : ['didNotVote(node0)', 'vote(node0,value0)']
46     : ------------1---1-------
46     : ['didNotVote(node0)', 'vote(node0,value1)']
47     : ------------1----1------
47     : ['didNotVote(node0)', 'vote(node0,value2)']
48     : -------------1----1-----
48     : ['didNotVote(node1)', 'vote(node1,value0)']
49     : -------------1-----1----
49     : ['didNotVote(node1)', 'vote(node1,value1)']
50     : -------------1------1---
50     : ['didNotVote(node1)', 'vote(node1,value2)']
51     : --------------1------1--
51     : ['didNotVote(node2)', 'vote(node2,value0)']
52     : --------------1-------1-
52     : ['didNotVote(node2)', 'vote(node2,value1)']
53     : --------------1--------1
53     : ['didNotVote(node2)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 18
num_suborbits: 1
54 (*) : --------1-----1---------
54     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node2)']
55     : -------1------1---------
55     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node2)']
56     : ------1-------1---------
56     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node2)']
57     : --------1----1----------
57     : ['chosenAt(quorum__node1_node2,value2)', 'didNotVote(node1)']
58     : -------1-----1----------
58     : ['chosenAt(quorum__node1_node2,value1)', 'didNotVote(node1)']
59     : ------1------1----------
59     : ['chosenAt(quorum__node1_node2,value0)', 'didNotVote(node1)']
60     : -----1--------1---------
60     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node2)']
61     : ----1---------1---------
61     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node2)']
62     : ---1----------1---------
62     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node2)']
63     : -----1------1-----------
63     : ['chosenAt(quorum__node0_node2,value2)', 'didNotVote(node0)']
64     : ----1-------1-----------
64     : ['chosenAt(quorum__node0_node2,value1)', 'didNotVote(node0)']
65     : ---1--------1-----------
65     : ['chosenAt(quorum__node0_node2,value0)', 'didNotVote(node0)']
66     : --1----------1----------
66     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node1)']
67     : -1-----------1----------
67     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node1)']
68     : 1------------1----------
68     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node1)']
69     : --1---------1-----------
69     : ['chosenAt(quorum__node0_node1,value2)', 'didNotVote(node0)']
70     : -1----------1-----------
70     : ['chosenAt(quorum__node0_node1,value1)', 'didNotVote(node0)']
71     : 1-----------1-----------
71     : ['chosenAt(quorum__node0_node1,value0)', 'didNotVote(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : -------1-1--------------
72     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
73     : --------11--------------
73     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
74     : ------1---1-------------
74     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
75     : --------1-1-------------
75     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
76     : ------1----1------------
76     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
77     : -------1---1------------
77     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
78     : ----1----1--------------
78     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
79     : -----1---1--------------
79     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
80     : ---1------1-------------
80     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
81     : -----1----1-------------
81     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
82     : ---1-------1------------
82     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
83     : ----1------1------------
83     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
84     : -1-------1--------------
84     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
85     : --1------1--------------
85     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
86     : 1---------1-------------
86     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
87     : --1-------1-------------
87     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
88     : 1----------1------------
88     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
89     : -1---------1------------
89     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
90 (*) : ---------1-1------------
90     : ['decision(value0)', 'decision(value2)']
91     : ---------11-------------
91     : ['decision(value0)', 'decision(value1)']
92     : ----------11------------
92     : ['decision(value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 18
num_suborbits: 1
93 (*) : ----1-----------0-------
93     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
94     : -----1-----------0------
94     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
95     : ---1-----------0--------
95     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
96     : -1--------------0-------
96     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
97     : --1--------------0------
97     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
98     : 1--------------0--------
98     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
99     : -------1-----------0----
99     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
100     : --------1-----------0---
100     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
101     : ------1-----------0-----
101     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
102     : -1-----------------0----
102     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
103     : --1-----------------0---
103     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
104     : 1-----------------0-----
104     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
105     : -------1--------------0-
105     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
106     : --------1--------------0
106     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
107     : ------1--------------0--
107     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
108     : ----1-----------------0-
108     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
109     : -----1-----------------0
109     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
110     : ---1-----------------0--
110     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 27
num_suborbits: 2
111 (*) : ---11-------------------
111     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
112     : ---1-1------------------
112     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
113     : ----11------------------
113     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
114     : 11----------------------
114     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
115     : 1-1---------------------
115     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
116     : -11---------------------
116     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
117     : ------11----------------
117     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
118     : ------1-1---------------
118     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
119     : -------11---------------
119     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
120 (*) : ----1-1-----------------
120     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
121     : -----11-----------------
121     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
122     : ---1---1----------------
122     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
123     : -----1-1----------------
123     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
124     : ---1----1---------------
124     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
125     : ----1---1---------------
125     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
126     : -1----1-----------------
126     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
127     : --1---1-----------------
127     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
128     : 1------1----------------
128     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
129     : --1----1----------------
129     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
130     : 1-------1---------------
130     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
131     : -1------1---------------
131     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
132     : -1-1--------------------
132     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
133     : --11--------------------
133     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
134     : 1---1-------------------
134     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
135     : --1-1-------------------
135     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
136     : 1----1------------------
136     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
137     : -1---1------------------
137     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 18
num_suborbits: 1
138 (*) : -1--0-----------------1-
138     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
139     : --1--0-----------------1
139     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
140     : 1--0-----------------1--
140     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
141     : -0--1--------------1----
141     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
142     : --0--1--------------1---
142     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
143     : 0--1--------------1-----
143     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
144     : -1-----0--------------1-
144     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
145     : --1-----0--------------1
145     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
146     : 1-----0--------------1--
146     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
147     : -0-----1--------1-------
147     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
148     : --0-----1--------1------
148     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
149     : 0-----1--------1--------
149     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
150     : ----1--0-----------1----
150     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
151     : -----1--0-----------1---
151     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
152     : ---1--0-----------1-----
152     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
153     : ----0--1--------1-------
153     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
154     : -----0--1--------1------
154     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
155     : ---0--1--------1--------
155     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 9
num_suborbits: 1
156 (*) : -1--0--1----------------
156     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
157     : --1--0--1---------------
157     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
158     : 1--0--1-----------------
158     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
159     : -0--1--1----------------
159     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
160     : --0--1--1---------------
160     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
161     : 0--1--1-----------------
161     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
162     : -1--1--0----------------
162     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
163     : --1--1--0---------------
163     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
164     : 1--1--0-----------------
164     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
165 (*) : ----------1--------0-1--
165     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
166     : -----------1--------01--
166     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
167     : ---------1--------0---1-
167     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
168     : -----------1--------0-1-
168     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
169     : ---------1--------0----1
169     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
170     : ----------1--------0---1
170     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
171     : ----------1-------1---0-
171     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
172     : -----------1------1----0
172     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
173     : ---------1---------1-0--
173     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
174     : -----------1-------1---0
174     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
175     : ---------1----------10--
175     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
176     : ----------1---------1-0-
176     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
177     : ----------1-----0----1--
177     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
178     : -----------1-----0---1--
178     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
179     : ---------1-----0------1-
179     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
180     : -----------1-----0----1-
180     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
181     : ---------1-----0-------1
181     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
182     : ----------1-----0------1
182     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
183     : ----------1----1------0-
183     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
184     : -----------1---1-------0
184     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
185     : ---------1------1----0--
185     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
186     : -----------1----1------0
186     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
187     : ---------1-------1---0--
187     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
188     : ----------1------1----0-
188     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
189     : ----------1-----0-1-----
189     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
190     : -----------1-----01-----
190     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
191     : ---------1-----0---1----
191     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
192     : -----------1-----0-1----
192     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
193     : ---------1-----0----1---
193     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
194     : ----------1-----0---1---
194     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
195     : ----------1----1---0----
195     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
196     : -----------1---1----0---
196     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
197     : ---------1------1-0-----
197     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
198     : -----------1----1---0---
198     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
199     : ---------1-------10-----
199     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
200     : ----------1------1-0----
200     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 2
201 (*) : ----------1---------11--
201     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
202     : -----------1-------1-1--
202     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
203     : ---------1----------1-1-
203     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
204     : -----------1------1---1-
204     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
205     : ---------1---------1---1
205     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
206     : ----------1-------1----1
206     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
207     : ----------1------1---1--
207     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
208     : -----------1----1----1--
208     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
209     : ---------1-------1----1-
209     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
210     : -----------1---1------1-
210     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
211     : ---------1------1------1
211     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
212     : ----------1----1-------1
212     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
213     : ----------1------11-----
213     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
214     : -----------1----1-1-----
214     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
215     : ---------1-------1-1----
215     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
216     : -----------1---1---1----
216     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
217     : ---------1------1---1---
217     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
218     : ----------1----1----1---
218     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
228 (*) : ----------1-------1--1--
228     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
229     : -----------1------1--1--
229     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
230     : ---------1---------1--1-
230     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
231     : -----------1-------1--1-
231     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
232     : ---------1----------1--1
232     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
233     : ----------1---------1--1
233     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
234     : ----------1----1-----1--
234     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
235     : -----------1---1-----1--
235     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
236     : ---------1------1-----1-
236     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
237     : -----------1----1-----1-
237     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
238     : ---------1-------1-----1
238     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
239     : ----------1------1-----1
239     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
240     : ----------1----1--1-----
240     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
241     : -----------1---1--1-----
241     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
242     : ---------1------1--1----
242     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
243     : -----------1----1--1----
243     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
244     : ---------1-------1--1---
244     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
245     : ----------1------1--1---
245     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 9
num_suborbits: 1
219 (*) : ------0-----------1--1--
219     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
220     : -------0-----------1--1-
220     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
221     : --------0-----------1--1
221     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
222     : ---0-----------1-----1--
222     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
223     : ----0-----------1-----1-
223     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
224     : -----0-----------1-----1
224     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
225     : 0--------------1--1-----
225     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
226     : -0--------------1--1----
226     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
227     : --0--------------1--1---
227     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
246 (*) : -0--------1----------1--
246     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
247     : --0--------1---------1--
247     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
248     : 0--------1------------1-
248     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
249     : --0--------1----------1-
249     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
250     : 0--------1-------------1
250     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
251     : -0--------1------------1
251     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
252     : ----0-----1-------1-----
252     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
253     : -----0-----1------1-----
253     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
254     : ---0-----1---------1----
254     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
255     : -----0-----1-------1----
255     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
256     : ---0-----1----------1---
256     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
257     : ----0-----1---------1---
257     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
258     : -------0--1----1--------
258     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
259     : --------0--1---1--------
259     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
260     : ------0--1------1-------
260     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
261     : --------0--1----1-------
261     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
262     : ------0--1-------1------
262     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
263     : -------0--1------1------
263     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
264 (*) : ----------1-1--------1--
264     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
265     : -----------11--------1--
265     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
266     : ---------1--1---------1-
266     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
267     : -----------11---------1-
267     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
268     : ---------1--1----------1
268     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
269     : ----------1-1----------1
269     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
270     : ----------1-1-----1-----
270     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
271     : -----------11-----1-----
271     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
272     : ---------1--1------1----
272     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
273     : -----------11------1----
273     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
274     : ---------1--1-------1---
274     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
275     : ----------1-1-------1---
275     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
276     : ----------1--1-------1--
276     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
277     : -----------1-1-------1--
277     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
278     : ---------1---1--------1-
278     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
279     : -----------1-1--------1-
279     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
280     : ---------1---1---------1
280     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
281     : ----------1--1---------1
281     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
282     : ----------1--1-1--------
282     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
283     : -----------1-1-1--------
283     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
284     : ---------1---1--1-------
284     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
285     : -----------1-1--1-------
285     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
286     : ---------1---1---1------
286     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
287     : ----------1--1---1------
287     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
288     : ----------1---1---1-----
288     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
289     : -----------1--1---1-----
289     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
290     : ---------1----1----1----
290     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
291     : -----------1--1----1----
291     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
292     : ---------1----1-----1---
292     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
293     : ----------1---1-----1---
293     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
294     : ----------1---11--------
294     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
295     : -----------1--11--------
295     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
296     : ---------1----1-1-------
296     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
297     : -----------1--1-1-------
297     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
298     : ---------1----1--1------
298     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
299     : ----------1---1--1------
299     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : -------0--1-----0-------
300     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
301     : --------0--1-----0------
301     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
302     : ------0--1-----0--------
302     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
303     : ----0-----1--------0----
303     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
304     : -----0-----1--------0---
304     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
305     : ---0-----1--------0-----
305     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
306     : -0--------1-----------0-
306     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
307     : --0--------1-----------0
307     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
308     : 0--------1-----------0--
308     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----------1-----0-----0-
309     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
310     : -----------1-----0-----0
310     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
311     : ---------1-----0-----0--
311     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
312     : ----------1-----0--0----
312     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
313     : -----------1-----0--0---
313     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
314     : ---------1-----0--0-----
314     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
315     : ----------1--------0--0-
315     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
316     : -----------1--------0--0
316     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
317     : ---------1--------0--0--
317     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
318 (*) : ----------1-1------0----
318     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
319     : -----------11-------0---
319     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
320     : ---------1--1-----0-----
320     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
321     : ----------1-1---------0-
321     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
322     : -----------11----------0
322     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
323     : ---------1--1--------0--
323     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
324     : ----------1--1--0-------
324     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
325     : -----------1-1---0------
325     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
326     : ---------1---1-0--------
326     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
327     : ----------1--1--------0-
327     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
328     : -----------1-1---------0
328     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
329     : ---------1---1-------0--
329     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
330     : ----------1---1-0-------
330     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
331     : -----------1--1--0------
331     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
332     : ---------1----10--------
332     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
333     : ----------1---1----0----
333     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
334     : -----------1--1-----0---
334     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
335     : ---------1----1---0-----
335     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : -------0--1-1-----------
336     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
337     : --------0--11-----------
337     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
338     : ------0--1--1-----------
338     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
339     : ----0-----1--1----------
339     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
340     : -----0-----1-1----------
340     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
341     : ---0-----1---1----------
341     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
342     : -0--------1---1---------
342     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
343     : --0--------1--1---------
343     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
344     : 0--------1----1---------
344     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ----------1-11----------
345     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
346     : -----------111----------
346     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
347     : ---------1--11----------
347     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
348     : ----------1-1-1---------
348     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
349     : -----------11-1---------
349     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
350     : ---------1--1-1---------
350     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
351     : ----------1--11---------
351     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
352     : -----------1-11---------
352     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
353     : ---------1---11---------
353     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
354 (*) : ------------0--000------
354     : ['~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
355     : -------------0----000---
355     : ['~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
356     : --------------0------000
356     : ['~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
357 (*) : 0--0--0--1--------------
357     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : -0--0--0--1-------------
358     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : --0--0--0--1------------
359     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 9
num_suborbits: 1
360 (*) : ---0--0--1-----------1--
360     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : ----0--0--1-----------1-
361     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : -----0--0--1-----------1
362     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : 0-----0--1--------1-----
363     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
364     : -0-----0--1--------1----
364     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
365     : --0-----0--1--------1---
365     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
366     : 0--0-----1-----1--------
366     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
367     : -0--0-----1-----1-------
367     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
368     : --0--0-----1-----1------
368     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 1
369 (*) : -----0------0--00------1
369     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
370     : ----0-------0--0-0----1-
370     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
371     : ---0--------0---00---1--
371     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
372     : --0---------0--00---1---
372     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
373     : -0----------0--0-0-1----
373     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
374     : 0-----------0---001-----
374     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
375     : --------0----0----00---1
375     : ['vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
376     : -------0-----0----0-0-1-
376     : ['vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
377     : ------0------0-----001--
377     : ['vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
378     : --0----------0---100----
378     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
379     : -0-----------0--1-0-0---
379     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
380     : 0------------0-1---00---
380     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
381     : --------0-----0-----100-
381     : ['vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
382     : -------0------0----1-0-0
382     : ['vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
383     : ------0-------0---1---00
383     : ['vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
384     : -----0--------0--1---00-
384     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
385     : ----0---------0-1----0-0
385     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
386     : ---0----------01------00
386     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 1
387 (*) : 0-----1-----0---00------
387     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
388     : -0-----1----0--0-0------
388     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
389     : --0-----1---0--00-------
389     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
390     : ---0--1-----0---00------
390     : ['chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
391     : ----0--1----0--0-0------
391     : ['chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
392     : -----0--1---0--00-------
392     : ['chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
393     : 0--1---------0-----00---
393     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
394     : -0--1--------0----0-0---
394     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
395     : --0--1-------0----00----
395     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
396     : ---1--0------0-----00---
396     : ['chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
397     : ----1--0-----0----0-0---
397     : ['chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
398     : -----1--0----0----00----
398     : ['chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
399     : 1--0----------0-------00
399     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
400     : -1--0---------0------0-0
400     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
401     : --1--0--------0------00-
401     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
402     : 1-----0-------0-------00
402     : ['chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
403     : -1-----0------0------0-0
403     : ['chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
404     : --1-----0-----0------00-
404     : ['chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 18
num_suborbits: 1
405 (*) : -0----0------0--1---01--
405     : ['vote(node0,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value2)']
406     : --0---0------0---1-0-1--
406     : ['vote(node0,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)']
407     : 0------0-----0-1----0-1-
407     : ['vote(node0,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value2)']
408     : --0----0-----0---10---1-
408     : ['vote(node0,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)']
409     : 0-------0----0-1---0---1
409     : ['vote(node0,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value1)']
410     : -0------0----0--1-0----1
410     : ['vote(node0,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)']
411     : ----0-0-------0-1-1----0
411     : ['vote(node0,value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value2)']
412     : -----00-------0--11---0-
412     : ['vote(node0,value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)']
413     : ---0---0------01---1---0
413     : ['vote(node0,value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value2)']
414     : -----0-0------0--1-1-0--
414     : ['vote(node0,value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)']
415     : ---0----0-----01----1-0-
415     : ['vote(node0,value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value1)']
416     : ----0---0-----0-1---10--
416     : ['vote(node0,value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)']
417     : -0-0--------0----0-1-1--
417     : ['vote(node1,value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value2)']
418     : --00--------0---0---11--
418     : ['vote(node1,value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)']
419     : 0---0-------0----01---1-
419     : ['vote(node1,value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value2)']
420     : --0-0-------0--0----1-1-
420     : ['vote(node1,value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)']
421     : 0----0------0---0-1----1
421     : ['vote(node1,value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value1)']
422     : -0---0------0--0---1---1
422     : ['vote(node1,value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : ---0--0--1----0-------00
423     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
424     : ----0--0--1---0------0-0
424     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
425     : -----0--0--1--0------00-
425     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
426     : 0-----0--1---0-----00---
426     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
427     : -0-----0--1--0----0-0---
427     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : --0-----0--1-0----00----
428     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
429     : 0--0-----1--0---00------
429     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0--0-0------
430     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----10--00-------
431     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
432 (*) : -------0-----00---0-00-0
432     : ['~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
433     : --------0----00---00-00-
433     : ['~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
434     : ------0------00----00-00
434     : ['~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
435     : ----0-------0-00-0---0-0
435     : ['~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
436     : -----0------0-000----00-
436     : ['~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
437     : ---0--------0-0-00----00
437     : ['~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
438     : -0----------00-0-00-0---
438     : ['~chosenAt(quorum__node0_node1,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
439     : --0---------00-00-00----
439     : ['~chosenAt(quorum__node0_node1,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
440     : 0-----------00--00-00---
440     : ['~chosenAt(quorum__node0_node1,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 18
num_suborbits: 1
441 (*) : --0-0--0----00-0--0---1-
441     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
442     : -0---0--0---00-0--0----1
442     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)']
443     : --00--0-----00--0--0-1--
443     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
444     : 0----0--0---00--0--0---1
444     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)']
445     : -0-0--0-----00---0--01--
445     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
446     : 0---0--0----00---0--0-1-
446     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value2)']
447     : -0---0-0----0-00---1-0--
447     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
448     : --0-0---0---0-00----10--
448     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)']
449     : 0----00-----0-0-0-1---0-
449     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
450     : --00----0---0-0-0---1-0-
450     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)']
451     : 0---0-0-----0-0--01----0
451     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
452     : -0-0---0----0-0--0-1---0
452     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value2)']
453     : -0--0---0----00-1-0--0--
453     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
454     : --0--0-0-----00--10--0--
454     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)']
455     : 0--0----0----001---0--0-
455     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
456     : --0--00------00--1-0--0-
456     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)']
457     : 0--0---0-----001----0--0
457     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
458     : -0--0-0------00-1---0--0
458     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 36
num_suborbits: 1
459 (*) : 0------0----00--00--0-1-
459     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
460     : 0-------0---00--00-0---1
460     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
461     : -0----0-----00-0-0--01--
461     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
462     : -0------0---00-0-00----1
462     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
463     : --0---0-----00-00--0-1--
463     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
464     : --0----0----00-00-0---1-
464     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
465     : ---0---0----0-0-00-1---0
465     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
466     : ---0----0---0-0-00--1-0-
466     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
467     : ----0-0-----0-00-01----0
467     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
468     : ----0---0---0-00-0--10--
468     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
469     : -----00-----0-000-1---0-
469     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
470     : -----0-0----0-000--1-0--
470     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
471     : 0---0-------00---0-00-1-
471     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
472     : 0----0------00--0--00--1
472     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
473     : -0-0--------00---00-01--
473     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
474     : -0---0------00-0--0-0--1
474     : ['vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
475     : --00--------00--0-00-1--
475     : ['vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
476     : --0-0-------00-0--00--1-
476     : ['vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
477     : ----0-0------00-1--00--0
477     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
478     : -----00------00--1-00-0-
478     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
479     : ---0---0-----001--0-0--0
479     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
480     : -----0-0-----00--10-00--
480     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
481     : ---0----0----001--00--0-
481     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
482     : ----0---0----00-1-00-0--
482     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
483     : -0-0--------0-0--0-1--00
483     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
484     : --00--------0-0-0---1-00
484     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
485     : 0---0-------0-0--01--0-0
485     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
486     : --0-0-------0-00----10-0
486     : ['vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
487     : 0----0------0-0-0-1--00-
487     : ['vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
488     : -0---0------0-00---1-00-
488     : ['vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
489     : -0----0------00-1---0-00
489     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
490     : --0---0------00--1-0--00
490     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
491     : 0------0-----001----00-0
491     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
492     : --0----0-----00--10--0-0
492     : ['vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
493     : 0-------0----001---0-00-
493     : ['vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
494     : -0------0----00-1-0--00-
494     : ['vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
495 (*) : -0----0-----0000-0--0-00
495     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
496     : --0---0-----00000--0--00
496     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
497     : 0------0----000-00--00-0
497     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
498     : --0----0----00000-0--0-0
498     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
499     : 0-------0---000-00-0-00-
499     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
500     : -0------0---0000-00--00-
500     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
501     : ----0-0-----0000-0-00--0
501     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
502     : -----00-----00000--00-0-
502     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
503     : ---0---0----000-000-0--0
503     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
504     : -----0-0----00000-0-00--
504     : ['~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
505     : ---0----0---000-0000--0-
505     : ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
506     : ----0---0---0000-000-0--
506     : ['~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
507     : -0-0--------000--00-0-00
507     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
508     : --00--------000-0-00--00
508     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
509     : 0---0-------000--0-000-0
509     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
510     : --0-0-------0000--00-0-0
510     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
511     : 0----0------000-0--0000-
511     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
512     : -0---0------0000--0-000-
512     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
513 (*) : -0--0-0-----0000-0--0--0
513     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
514     : --0--00-----00000--0--0-
514     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
515     : 0--0---0----000-00--0--0
515     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
516     : --0--0-0----00000-0--0--
516     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
517     : 0--0----0---000-00-0--0-
517     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
518     : -0--0---0---0000-00--0--
518     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
519     : -0-0---0----000--00-0--0
519     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
520     : --00----0---000-0-00--0-
520     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
521     : 0---0-0-----000--0-00--0
521     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
522     : --0-0---0---0000--00-0--
522     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
523     : 0----00-----000-0--00-0-
523     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
524     : -0---0-0----0000--0-00--
524     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
525     : 0---0--0----000--0--00-0
525     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
526     : 0----0--0---000-0--0-00-
526     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
527     : -0-0--0-----000--0--0-00
527     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
528     : -0---0--0---0000--0--00-
528     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
529     : --00--0-----000-0--0--00
529     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
530     : --0-0--0----0000--0--0-0
530     : ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
531 (*) : -00-00-00---0000--0--0--
531     : ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
532     : 0-00-00-0---000-0--0--0-
532     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
533     : 00-00-00----000--0--0--0
533     : ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node0)', '~didNotVote(node1)', '~didNotVote(node2)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 0.232 seconds

[QRM NOTE]: Time elapsed since last: 0.206 seconds

[QRM NOTE]: Peak memory: 1744256 bytes


================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

definition primes: {32, 2, 3, 6, 8, 9, 12, 20, 23, 24, 25, 27, 28, 29, 30, 31}


New level: 0
 pending : [0, 1, 4, 5, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : []


Before reduction : 
 pending  : [0, 1, 4, 5, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, 0), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : {1, 7}

After reduction : 
 pending  : [4, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, 0), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [4, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 0.304 seconds

[QRM NOTE]: Time elapsed since last: 0.073 seconds

[QRM NOTE]: Peak memory: 671494 bytes


====================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

====================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', 'vote(node0,value1)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', 'vote(node0,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : -------1-1--------------
72     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
73     : --------11--------------
73     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
74     : ------1---1-------------
74     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
75     : --------1-1-------------
75     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
76     : ------1----1------------
76     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
77     : -------1---1------------
77     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
78     : ----1----1--------------
78     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
79     : -----1---1--------------
79     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
80     : ---1------1-------------
80     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
81     : -----1----1-------------
81     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
82     : ---1-------1------------
82     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
83     : ----1------1------------
83     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
84     : -1-------1--------------
84     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
85     : --1------1--------------
85     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
86     : 1---------1-------------
86     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
87     : --1-------1-------------
87     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
88     : 1----------1------------
88     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
89     : -1---------1------------
89     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decision$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decision$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE1)', 'chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,VALUE1. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
90 (*) : ---------1-1------------
90     : ['decision(value0)', 'decision(value2)']
91     : ---------11-------------
91     : ['decision(value0)', 'decision(value1)']
92     : ----------11------------
92     : ['decision(value1)', 'decision(value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value0)', 'decision(value2)']

sign_func_name2args: {'0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$1]}

sig2const: {'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

part_sig: ('value$0$decision$0$0 | value$0$decision$0$1',)


---------- SigGenerator ----------

terms:  ['decision(value0)', 'decision(value2)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decision': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$decision$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$decision$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decision$0': [value$0$decision$0$0, value$0$decision$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'decision(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
165 (*) : ----------1--------0-1--
165     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
166     : -----------1--------01--
166     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
167     : ---------1--------0---1-
167     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
168     : -----------1--------0-1-
168     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
169     : ---------1--------0----1
169     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
170     : ----------1--------0---1
170     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
171     : ----------1-------1---0-
171     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
172     : -----------1------1----0
172     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
173     : ---------1---------1-0--
173     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
174     : -----------1-------1---0
174     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
175     : ---------1----------10--
175     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
176     : ----------1---------1-0-
176     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
177     : ----------1-----0----1--
177     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
178     : -----------1-----0---1--
178     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
179     : ---------1-----0------1-
179     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
180     : -----------1-----0----1-
180     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
181     : ---------1-----0-------1
181     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
182     : ----------1-----0------1
182     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
183     : ----------1----1------0-
183     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
184     : -----------1---1-------0
184     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
185     : ---------1------1----0--
185     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
186     : -----------1----1------0
186     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
187     : ---------1-------1---0--
187     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
188     : ----------1------1----0-
188     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
189     : ----------1-----0-1-----
189     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
190     : -----------1-----01-----
190     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
191     : ---------1-----0---1----
191     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
192     : -----------1-----0-1----
192     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
193     : ---------1-----0----1---
193     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
194     : ----------1-----0---1---
194     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
195     : ----------1----1---0----
195     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
196     : -----------1---1----0---
196     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
197     : ---------1------1-0-----
197     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
198     : -----------1----1---0---
198     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
199     : ---------1-------10-----
199     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
200     : ----------1------1-0----
200     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node1,value1)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node1,value1)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,VALUE1,NODE0. ~decision(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 10 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 2
201 (*) : ----------1---------11--
201     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
202     : -----------1-------1-1--
202     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
203     : ---------1----------1-1-
203     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
204     : -----------1------1---1-
204     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
205     : ---------1---------1---1
205     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
206     : ----------1-------1----1
206     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
207     : ----------1------1---1--
207     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
208     : -----------1----1----1--
208     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
209     : ---------1-------1----1-
209     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
210     : -----------1---1------1-
210     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
211     : ---------1------1------1
211     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
212     : ----------1----1-------1
212     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
213     : ----------1------11-----
213     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
214     : -----------1----1-1-----
214     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
215     : ---------1-------1-1----
215     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
216     : -----------1---1---1----
216     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
217     : ---------1------1---1---
217     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
218     : ----------1----1----1---
218     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
228 (*) : ----------1-------1--1--
228     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
229     : -----------1------1--1--
229     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
230     : ---------1---------1--1-
230     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
231     : -----------1-------1--1-
231     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
232     : ---------1----------1--1
232     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
233     : ----------1---------1--1
233     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
234     : ----------1----1-----1--
234     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
235     : -----------1---1-----1--
235     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
236     : ---------1------1-----1-
236     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
237     : -----------1----1-----1-
237     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
238     : ---------1-------1-----1
238     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
239     : ----------1------1-----1
239     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
240     : ----------1----1--1-----
240     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
241     : -----------1---1--1-----
241     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
242     : ---------1------1--1----
242     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
243     : -----------1----1--1----
243     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
244     : ---------1-------1--1---
244     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
245     : ----------1------1--1---
245     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'vote(NODE0,VALUE1)', 'vote(NODE1,VALUE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2', 'VALUE0:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decision$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decision$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE0:value', 'VALUE1:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall VALUE1,VALUE2,VALUE0,NODE1,NODE0. ~decision(VALUE0) | ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE0 = VALUE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2))


---------- Quantifier Inference: orbit 11 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
246 (*) : -0--------1----------1--
246     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
247     : --0--------1---------1--
247     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
248     : 0--------1------------1-
248     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
249     : --0--------1----------1-
249     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
250     : 0--------1-------------1
250     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
251     : -0--------1------------1
251     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
252     : ----0-----1-------1-----
252     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
253     : -----0-----1------1-----
253     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
254     : ---0-----1---------1----
254     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
255     : -----0-----1-------1----
255     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
256     : ---0-----1----------1---
256     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
257     : ----0-----1---------1---
257     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
258     : -------0--1----1--------
258     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
259     : --------0--1---1--------
259     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
260     : ------0--1------1-------
260     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
261     : --------0--1----1-------
261     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
262     : ------0--1-------1------
262     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
263     : -------0--1------1------
263     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'vote(node2,value0)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decision(value1)', 'vote(node2,value0)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)', '~member(NODE0,QUORUM0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,VALUE1,NODE0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 13 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
264 (*) : ----------1-1--------1--
264     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
265     : -----------11--------1--
265     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
266     : ---------1--1---------1-
266     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
267     : -----------11---------1-
267     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
268     : ---------1--1----------1
268     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
269     : ----------1-1----------1
269     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
270     : ----------1-1-----1-----
270     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
271     : -----------11-----1-----
271     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
272     : ---------1--1------1----
272     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
273     : -----------11------1----
273     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
274     : ---------1--1-------1---
274     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
275     : ----------1-1-------1---
275     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
276     : ----------1--1-------1--
276     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
277     : -----------1-1-------1--
277     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
278     : ---------1---1--------1-
278     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
279     : -----------1-1--------1-
279     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
280     : ---------1---1---------1
280     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
281     : ----------1--1---------1
281     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
282     : ----------1--1-1--------
282     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
283     : -----------1-1-1--------
283     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
284     : ---------1---1--1-------
284     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
285     : -----------1-1--1-------
285     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
286     : ---------1---1---1------
286     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
287     : ----------1--1---1------
287     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
288     : ----------1---1---1-----
288     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
289     : -----------1--1---1-----
289     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
290     : ---------1----1----1----
290     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
291     : -----------1--1----1----
291     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
292     : ---------1----1-----1---
292     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
293     : ----------1---1-----1---
293     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
294     : ----------1---11--------
294     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
295     : -----------1--11--------
295     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
296     : ---------1----1-1-------
296     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
297     : -----------1--1-1-------
297     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
298     : ---------1----1--1------
298     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
299     : ----------1---1--1------
299     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$0$vote$0$0', 'value$0$decision$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '0$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$0$vote$0': [node$0$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$0$vote$0': node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'vote(NODE1,VALUE1)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,VALUE1,NODE0. ~decision(VALUE0) | ~vote(NODE1,VALUE1) | ~didNotVote(NODE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 14 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : -------0--1-----0-------
300     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
301     : --------0--1-----0------
301     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
302     : ------0--1-----0--------
302     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
303     : ----0-----1--------0----
303     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
304     : -----0-----1--------0---
304     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
305     : ---0-----1--------0-----
305     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
306     : -0--------1-----------0-
306     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
307     : --0--------1-----------0
307     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
308     : 0--------1-----------0--
308     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', '~vote(node0,value1)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', '~vote(node0,value1)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$vote$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)', '~member(NODE0,QUORUM0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | member(NODE0,QUORUM0) | vote(NODE0,VALUE0)


---------- Quantifier Inference: orbit 15 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----------1-----0-----0-
309     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
310     : -----------1-----0-----0
310     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
311     : ---------1-----0-----0--
311     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
312     : ----------1-----0--0----
312     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
313     : -----------1-----0--0---
313     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
314     : ---------1-----0--0-----
314     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
315     : ----------1--------0--0-
315     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
316     : -----------1--------0--0
316     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
317     : ---------1--------0--0--
317     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~vote(NODE0,VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~decision(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 16 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
318 (*) : ----------1-1------0----
318     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
319     : -----------11-------0---
319     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
320     : ---------1--1-----0-----
320     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
321     : ----------1-1---------0-
321     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
322     : -----------11----------0
322     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
323     : ---------1--1--------0--
323     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
324     : ----------1--1--0-------
324     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
325     : -----------1-1---0------
325     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
326     : ---------1---1-0--------
326     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
327     : ----------1--1--------0-
327     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
328     : -----------1-1---------0
328     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
329     : ---------1---1-------0--
329     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
330     : ----------1---1-0-------
330     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
331     : -----------1--1--0------
331     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
332     : ---------1----10--------
332     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
333     : ----------1---1----0----
333     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
334     : -----------1--1-----0---
334     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
335     : ---------1----1---0-----
335     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$didNotVote$0$0 | node$1$vote$0$0', 'value$0$decision$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$vote$1': [value$0$decision$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$vote$1': value$0$decision$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$didNotVote$0': node$0$didNotVote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'didNotVote(NODE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~decision(VALUE0) | ~didNotVote(NODE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 17 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : -------0--1-1-----------
336     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
337     : --------0--11-----------
337     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
338     : ------0--1--1-----------
338     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
339     : ----0-----1--1----------
339     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
340     : -----0-----1-1----------
340     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
341     : ---0-----1---1----------
341     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
342     : -0--------1---1---------
342     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
343     : --0--------1--1---------
343     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
344     : 0--------1----1---------
344     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'didNotVote(node0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

part_sig: ('node$0$didNotVote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decision$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decision(value1)', 'didNotVote(node0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decision': 1, '0$didNotVote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0; node$1$member$0': [node$0$didNotVote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$didNotVote$0; node$1$member$0': node$0$didNotVote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)', '~member(NODE0,QUORUM0)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | member(NODE0,QUORUM0) | ~didNotVote(NODE0)


---------- Quantifier Inference: orbit 18 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ----------1-11----------
345     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
346     : -----------111----------
346     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
347     : ---------1--11----------
347     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
348     : ----------1-1-1---------
348     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
349     : -----------11-1---------
349     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
350     : ---------1--1-1---------
350     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
351     : ----------1--11---------
351     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
352     : -----------1-11---------
352     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
353     : ---------1---11---------
353     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']

sign_func_name2args: {'0$decision': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$didNotVote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decision$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$didNotVote$0$1]}

sig2const: {'value$0$decision$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$didNotVote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$didNotVote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

part_sig: ('node$0$didNotVote$0$0 | node$0$didNotVote$0$1', 'value$0$decision$0$0')


---------- SigGenerator ----------

terms:  ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']

func_name2symbol:  {'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decision': 1, '0$didNotVote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$didNotVote$0$0 | node$0$didNotVote$0$1}

	sort: value

	identical_classes: {'value$0$decision$0': [value$0$decision$0$0]}

	identical_single_classes: {'value$0$decision$0': value$0$decision$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$didNotVote$0': [node$0$didNotVote$0$0, node$0$didNotVote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', 'didNotVote(NODE1)', 'didNotVote(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE1,NODE0. ~decision(VALUE0) | ~didNotVote(NODE1) | ~didNotVote(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 19 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
357 (*) : 0--0--0--1--------------
357     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : -0--0--0--1-------------
358     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : --0--0--0--1------------
359     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decision$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decision': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM0,VALUE0)', 'decision(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))


---------- Quantifier Inference: orbit 21 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 22 =====================
size : 9
num_suborbits: 1
360 (*) : ---0--0--1-----------1--
360     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : ----0--0--1-----------1-
361     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : -----0--0--1-----------1
362     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : 0-----0--1--------1-----
363     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
364     : -0-----0--1--------1----
364     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
365     : --0-----0--1--------1---
365     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
366     : 0--0-----1-----1--------
366     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
367     : -0--0-----1-----1-------
367     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
368     : --0--0-----1-----1------
368     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node2,value0)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', 'vote(node2,value0)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decision$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decision(VALUE0)', '~chosenAt(QUORUM1,VALUE0)', 'member(NODE0,QUORUM1)', 'vote(NODE0,VALUE0)', 'member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,QUORUM1,NODE0. ~decision(VALUE0) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | QUORUM0 = QUORUM1


---------- Quantifier Inference: orbit 22 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : ---0--0--1----0-------00
423     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
424     : ----0--0--1---0------0-0
424     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
425     : -----0--0--1--0------00-
425     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
426     : 0-----0--1---0-----00---
426     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
427     : -0-----0--1--0----0-0---
427     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : --0-----0--1-0----00----
428     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
429     : 0--0-----1--0---00------
429     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0--0-0------
430     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----10--00-------
431     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decision': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$didNotVote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decision$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$didNotVote$0$0, node$1$vote$0$0, node$1$vote$0$1, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decision$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$didNotVote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decision(value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decision': Const('decision', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'didNotVote': Const('didNotVote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decision': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'didNotVote': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decision': 1, '1$didNotVote': 1, '1$vote': 2, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decision$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decision$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$1$didNotVote$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$1$didNotVote$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decision': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$didNotVote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~chosenAt(QUORUM1,VALUE1)', 'member(NODE0,QUORUM1)', 'member(NODE0,QUORUM0)', '~didNotVote(NODE0)', 'decision(VALUE1)', '~vote(NODE0,VALUE0)', '~chosenAt(QUORUM0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,QUORUM0,VALUE1,QUORUM1. chosenAt(QUORUM1,VALUE1) | ~member(NODE0,QUORUM1) | ~member(NODE0,QUORUM0) | didNotVote(NODE0) | ~decision(VALUE1) | chosenAt(QUORUM0,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


---------- Quantifier Inference: orbit 26 ----------

[QI_CHECK RESULT]: PASS


==============================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

==============================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node0,value0)', 'vote(node0,value1)']
1     : ---------------1-1------
1     : ['vote(node0,value0)', 'vote(node0,value2)']
2     : ----------------11------
2     : ['vote(node0,value1)', 'vote(node0,value2)']
3     : ------------------11----
3     : ['vote(node1,value0)', 'vote(node1,value1)']
4     : ------------------1-1---
4     : ['vote(node1,value0)', 'vote(node1,value2)']
5     : -------------------11---
5     : ['vote(node1,value1)', 'vote(node1,value2)']
6     : ---------------------11-
6     : ['vote(node2,value0)', 'vote(node2,value1)']
7     : ---------------------1-1
7     : ['vote(node2,value0)', 'vote(node2,value2)']
8     : ----------------------11
8     : ['vote(node2,value1)', 'vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
72 (*) : -------1-1--------------
72     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value0)']
73     : --------11--------------
73     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value0)']
74     : ------1---1-------------
74     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value1)']
75     : --------1-1-------------
75     : ['chosenAt(quorum__node1_node2,value2)', 'decision(value1)']
76     : ------1----1------------
76     : ['chosenAt(quorum__node1_node2,value0)', 'decision(value2)']
77     : -------1---1------------
77     : ['chosenAt(quorum__node1_node2,value1)', 'decision(value2)']
78     : ----1----1--------------
78     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value0)']
79     : -----1---1--------------
79     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value0)']
80     : ---1------1-------------
80     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value1)']
81     : -----1----1-------------
81     : ['chosenAt(quorum__node0_node2,value2)', 'decision(value1)']
82     : ---1-------1------------
82     : ['chosenAt(quorum__node0_node2,value0)', 'decision(value2)']
83     : ----1------1------------
83     : ['chosenAt(quorum__node0_node2,value1)', 'decision(value2)']
84     : -1-------1--------------
84     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value0)']
85     : --1------1--------------
85     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value0)']
86     : 1---------1-------------
86     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value1)']
87     : --1-------1-------------
87     : ['chosenAt(quorum__node0_node1,value2)', 'decision(value1)']
88     : 1----------1------------
88     : ['chosenAt(quorum__node0_node1,value0)', 'decision(value2)']
89     : -1---------1------------
89     : ['chosenAt(quorum__node0_node1,value1)', 'decision(value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,QUORUM0,VALUE1. ~decision(VALUE1) | ~chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
90 (*) : ---------1-1------------
90     : ['decision(value0)', 'decision(value2)']
91     : ---------11-------------
91     : ['decision(value0)', 'decision(value1)']
92     : ----------11------------
92     : ['decision(value1)', 'decision(value2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1. ~decision(VALUE0) | ~decision(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 10 =====================
size : 36
num_suborbits: 1
165 (*) : ----------1--------0-1--
165     : ['decision(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
166     : -----------1--------01--
166     : ['decision(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
167     : ---------1--------0---1-
167     : ['decision(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
168     : -----------1--------0-1-
168     : ['decision(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
169     : ---------1--------0----1
169     : ['decision(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
170     : ----------1--------0---1
170     : ['decision(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
171     : ----------1-------1---0-
171     : ['decision(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
172     : -----------1------1----0
172     : ['decision(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
173     : ---------1---------1-0--
173     : ['decision(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
174     : -----------1-------1---0
174     : ['decision(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
175     : ---------1----------10--
175     : ['decision(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
176     : ----------1---------1-0-
176     : ['decision(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
177     : ----------1-----0----1--
177     : ['decision(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
178     : -----------1-----0---1--
178     : ['decision(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
179     : ---------1-----0------1-
179     : ['decision(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
180     : -----------1-----0----1-
180     : ['decision(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
181     : ---------1-----0-------1
181     : ['decision(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
182     : ----------1-----0------1
182     : ['decision(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
183     : ----------1----1------0-
183     : ['decision(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
184     : -----------1---1-------0
184     : ['decision(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
185     : ---------1------1----0--
185     : ['decision(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
186     : -----------1----1------0
186     : ['decision(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
187     : ---------1-------1---0--
187     : ['decision(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
188     : ----------1------1----0-
188     : ['decision(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
189     : ----------1-----0-1-----
189     : ['decision(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
190     : -----------1-----01-----
190     : ['decision(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
191     : ---------1-----0---1----
191     : ['decision(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
192     : -----------1-----0-1----
192     : ['decision(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
193     : ---------1-----0----1---
193     : ['decision(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
194     : ----------1-----0---1---
194     : ['decision(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
195     : ----------1----1---0----
195     : ['decision(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
196     : -----------1---1----0---
196     : ['decision(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
197     : ---------1------1-0-----
197     : ['decision(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
198     : -----------1----1---0---
198     : ['decision(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
199     : ---------1-------10-----
199     : ['decision(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
200     : ----------1------1-0----
200     : ['decision(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE1,VALUE1,NODE0. ~decision(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 11 =====================
size : 36
num_suborbits: 2
201 (*) : ----------1---------11--
201     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
202     : -----------1-------1-1--
202     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
203     : ---------1----------1-1-
203     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
204     : -----------1------1---1-
204     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
205     : ---------1---------1---1
205     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
206     : ----------1-------1----1
206     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
207     : ----------1------1---1--
207     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
208     : -----------1----1----1--
208     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
209     : ---------1-------1----1-
209     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
210     : -----------1---1------1-
210     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
211     : ---------1------1------1
211     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
212     : ----------1----1-------1
212     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
213     : ----------1------11-----
213     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
214     : -----------1----1-1-----
214     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
215     : ---------1-------1-1----
215     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
216     : -----------1---1---1----
216     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
217     : ---------1------1---1---
217     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
218     : ----------1----1----1---
218     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
228 (*) : ----------1-------1--1--
228     : ['decision(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
229     : -----------1------1--1--
229     : ['decision(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
230     : ---------1---------1--1-
230     : ['decision(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
231     : -----------1-------1--1-
231     : ['decision(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
232     : ---------1----------1--1
232     : ['decision(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
233     : ----------1---------1--1
233     : ['decision(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
234     : ----------1----1-----1--
234     : ['decision(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
235     : -----------1---1-----1--
235     : ['decision(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
236     : ---------1------1-----1-
236     : ['decision(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
237     : -----------1----1-----1-
237     : ['decision(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
238     : ---------1-------1-----1
238     : ['decision(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
239     : ----------1------1-----1
239     : ['decision(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
240     : ----------1----1--1-----
240     : ['decision(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
241     : -----------1---1--1-----
241     : ['decision(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
242     : ---------1------1--1----
242     : ['decision(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
243     : -----------1----1--1----
243     : ['decision(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
244     : ---------1-------1--1---
244     : ['decision(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
245     : ----------1------1--1---
245     : ['decision(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
num_forall :   5
num_exists :   0
num_literals : 10
quantified form : forall VALUE1,VALUE2,VALUE0,NODE1,NODE0. ~decision(VALUE0) | ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE0 = VALUE1 | VALUE1 = VALUE2 | VALUE0 = VALUE2))
qcost : 15




=== Prime Orbit 13 =====================
size : 18
num_suborbits: 1
246 (*) : -0--------1----------1--
246     : ['decision(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
247     : --0--------1---------1--
247     : ['decision(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
248     : 0--------1------------1-
248     : ['decision(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
249     : --0--------1----------1-
249     : ['decision(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
250     : 0--------1-------------1
250     : ['decision(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
251     : -0--------1------------1
251     : ['decision(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
252     : ----0-----1-------1-----
252     : ['decision(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
253     : -----0-----1------1-----
253     : ['decision(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
254     : ---0-----1---------1----
254     : ['decision(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
255     : -----0-----1-------1----
255     : ['decision(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
256     : ---0-----1----------1---
256     : ['decision(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
257     : ----0-----1---------1---
257     : ['decision(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
258     : -------0--1----1--------
258     : ['decision(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
259     : --------0--1---1--------
259     : ['decision(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
260     : ------0--1------1-------
260     : ['decision(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
261     : --------0--1----1-------
261     : ['decision(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
262     : ------0--1-------1------
262     : ['decision(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
263     : -------0--1------1------
263     : ['decision(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,QUORUM0,VALUE1,NODE0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 14 =====================
size : 36
num_suborbits: 1
264 (*) : ----------1-1--------1--
264     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value0)']
265     : -----------11--------1--
265     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value0)']
266     : ---------1--1---------1-
266     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value1)']
267     : -----------11---------1-
267     : ['decision(value2)', 'didNotVote(node0)', 'vote(node2,value1)']
268     : ---------1--1----------1
268     : ['decision(value0)', 'didNotVote(node0)', 'vote(node2,value2)']
269     : ----------1-1----------1
269     : ['decision(value1)', 'didNotVote(node0)', 'vote(node2,value2)']
270     : ----------1-1-----1-----
270     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value0)']
271     : -----------11-----1-----
271     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value0)']
272     : ---------1--1------1----
272     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value1)']
273     : -----------11------1----
273     : ['decision(value2)', 'didNotVote(node0)', 'vote(node1,value1)']
274     : ---------1--1-------1---
274     : ['decision(value0)', 'didNotVote(node0)', 'vote(node1,value2)']
275     : ----------1-1-------1---
275     : ['decision(value1)', 'didNotVote(node0)', 'vote(node1,value2)']
276     : ----------1--1-------1--
276     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value0)']
277     : -----------1-1-------1--
277     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value0)']
278     : ---------1---1--------1-
278     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value1)']
279     : -----------1-1--------1-
279     : ['decision(value2)', 'didNotVote(node1)', 'vote(node2,value1)']
280     : ---------1---1---------1
280     : ['decision(value0)', 'didNotVote(node1)', 'vote(node2,value2)']
281     : ----------1--1---------1
281     : ['decision(value1)', 'didNotVote(node1)', 'vote(node2,value2)']
282     : ----------1--1-1--------
282     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value0)']
283     : -----------1-1-1--------
283     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value0)']
284     : ---------1---1--1-------
284     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value1)']
285     : -----------1-1--1-------
285     : ['decision(value2)', 'didNotVote(node1)', 'vote(node0,value1)']
286     : ---------1---1---1------
286     : ['decision(value0)', 'didNotVote(node1)', 'vote(node0,value2)']
287     : ----------1--1---1------
287     : ['decision(value1)', 'didNotVote(node1)', 'vote(node0,value2)']
288     : ----------1---1---1-----
288     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value0)']
289     : -----------1--1---1-----
289     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value0)']
290     : ---------1----1----1----
290     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value1)']
291     : -----------1--1----1----
291     : ['decision(value2)', 'didNotVote(node2)', 'vote(node1,value1)']
292     : ---------1----1-----1---
292     : ['decision(value0)', 'didNotVote(node2)', 'vote(node1,value2)']
293     : ----------1---1-----1---
293     : ['decision(value1)', 'didNotVote(node2)', 'vote(node1,value2)']
294     : ----------1---11--------
294     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value0)']
295     : -----------1--11--------
295     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value0)']
296     : ---------1----1-1-------
296     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value1)']
297     : -----------1--1-1-------
297     : ['decision(value2)', 'didNotVote(node2)', 'vote(node0,value1)']
298     : ---------1----1--1------
298     : ['decision(value0)', 'didNotVote(node2)', 'vote(node0,value2)']
299     : ----------1---1--1------
299     : ['decision(value1)', 'didNotVote(node2)', 'vote(node0,value2)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE1,VALUE1,NODE0. ~decision(VALUE0) | ~vote(NODE1,VALUE1) | ~didNotVote(NODE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : -------0--1-----0-------
300     : ['decision(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
301     : --------0--1-----0------
301     : ['decision(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
302     : ------0--1-----0--------
302     : ['decision(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
303     : ----0-----1--------0----
303     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
304     : -----0-----1--------0---
304     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
305     : ---0-----1--------0-----
305     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
306     : -0--------1-----------0-
306     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
307     : --0--------1-----------0
307     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
308     : 0--------1-----------0--
308     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | member(NODE0,QUORUM0) | vote(NODE0,VALUE0)
qcost : 7




=== Prime Orbit 16 =====================
size : 9
num_suborbits: 1
309 (*) : ----------1-----0-----0-
309     : ['decision(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
310     : -----------1-----0-----0
310     : ['decision(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
311     : ---------1-----0-----0--
311     : ['decision(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
312     : ----------1-----0--0----
312     : ['decision(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
313     : -----------1-----0--0---
313     : ['decision(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
314     : ---------1-----0--0-----
314     : ['decision(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
315     : ----------1--------0--0-
315     : ['decision(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
316     : -----------1--------0--0
316     : ['decision(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
317     : ---------1--------0--0--
317     : ['decision(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~decision(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 17 =====================
size : 18
num_suborbits: 1
318 (*) : ----------1-1------0----
318     : ['decision(value1)', 'didNotVote(node0)', '~vote(node1,value1)']
319     : -----------11-------0---
319     : ['decision(value2)', 'didNotVote(node0)', '~vote(node1,value2)']
320     : ---------1--1-----0-----
320     : ['decision(value0)', 'didNotVote(node0)', '~vote(node1,value0)']
321     : ----------1-1---------0-
321     : ['decision(value1)', 'didNotVote(node0)', '~vote(node2,value1)']
322     : -----------11----------0
322     : ['decision(value2)', 'didNotVote(node0)', '~vote(node2,value2)']
323     : ---------1--1--------0--
323     : ['decision(value0)', 'didNotVote(node0)', '~vote(node2,value0)']
324     : ----------1--1--0-------
324     : ['decision(value1)', 'didNotVote(node1)', '~vote(node0,value1)']
325     : -----------1-1---0------
325     : ['decision(value2)', 'didNotVote(node1)', '~vote(node0,value2)']
326     : ---------1---1-0--------
326     : ['decision(value0)', 'didNotVote(node1)', '~vote(node0,value0)']
327     : ----------1--1--------0-
327     : ['decision(value1)', 'didNotVote(node1)', '~vote(node2,value1)']
328     : -----------1-1---------0
328     : ['decision(value2)', 'didNotVote(node1)', '~vote(node2,value2)']
329     : ---------1---1-------0--
329     : ['decision(value0)', 'didNotVote(node1)', '~vote(node2,value0)']
330     : ----------1---1-0-------
330     : ['decision(value1)', 'didNotVote(node2)', '~vote(node0,value1)']
331     : -----------1--1--0------
331     : ['decision(value2)', 'didNotVote(node2)', '~vote(node0,value2)']
332     : ---------1----10--------
332     : ['decision(value0)', 'didNotVote(node2)', '~vote(node0,value0)']
333     : ----------1---1----0----
333     : ['decision(value1)', 'didNotVote(node2)', '~vote(node1,value1)']
334     : -----------1--1-----0---
334     : ['decision(value2)', 'didNotVote(node2)', '~vote(node1,value2)']
335     : ---------1----1---0-----
335     : ['decision(value0)', 'didNotVote(node2)', '~vote(node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~decision(VALUE0) | ~didNotVote(NODE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : -------0--1-1-----------
336     : ['decision(value1)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value1)']
337     : --------0--11-----------
337     : ['decision(value2)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value2)']
338     : ------0--1--1-----------
338     : ['decision(value0)', 'didNotVote(node0)', '~chosenAt(quorum__node1_node2,value0)']
339     : ----0-----1--1----------
339     : ['decision(value1)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value1)']
340     : -----0-----1-1----------
340     : ['decision(value2)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value2)']
341     : ---0-----1---1----------
341     : ['decision(value0)', 'didNotVote(node1)', '~chosenAt(quorum__node0_node2,value0)']
342     : -0--------1---1---------
342     : ['decision(value1)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value1)']
343     : --0--------1--1---------
343     : ['decision(value2)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value2)']
344     : 0--------1----1---------
344     : ['decision(value0)', 'didNotVote(node2)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0) | member(NODE0,QUORUM0) | ~didNotVote(NODE0)
qcost : 7




=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : ----------1-11----------
345     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node1)']
346     : -----------111----------
346     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)']
347     : ---------1--11----------
347     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node1)']
348     : ----------1-1-1---------
348     : ['decision(value1)', 'didNotVote(node0)', 'didNotVote(node2)']
349     : -----------11-1---------
349     : ['decision(value2)', 'didNotVote(node0)', 'didNotVote(node2)']
350     : ---------1--1-1---------
350     : ['decision(value0)', 'didNotVote(node0)', 'didNotVote(node2)']
351     : ----------1--11---------
351     : ['decision(value1)', 'didNotVote(node1)', 'didNotVote(node2)']
352     : -----------1-11---------
352     : ['decision(value2)', 'didNotVote(node1)', 'didNotVote(node2)']
353     : ---------1---11---------
353     : ['decision(value0)', 'didNotVote(node1)', 'didNotVote(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE1,NODE0. ~decision(VALUE0) | ~didNotVote(NODE1) | ~didNotVote(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
357 (*) : 0--0--0--1--------------
357     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
358     : -0--0--0--1-------------
358     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : --0--0--0--1------------
359     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))
qcost : 4




=== Prime Orbit 22 =====================
size : 9
num_suborbits: 1
360 (*) : ---0--0--1-----------1--
360     : ['decision(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
361     : ----0--0--1-----------1-
361     : ['decision(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
362     : -----0--0--1-----------1
362     : ['decision(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
363     : 0-----0--1--------1-----
363     : ['decision(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
364     : -0-----0--1--------1----
364     : ['decision(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
365     : --0-----0--1--------1---
365     : ['decision(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
366     : 0--0-----1-----1--------
366     : ['decision(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
367     : -0--0-----1-----1-------
367     : ['decision(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
368     : --0--0-----1-----1------
368     : ['decision(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,QUORUM0,QUORUM1,NODE0. ~decision(VALUE0) | chosenAt(QUORUM1,VALUE0) | ~member(NODE0,QUORUM1) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 26 =====================
size : 9
num_suborbits: 1
423 (*) : ---0--0--1----0-------00
423     : ['decision(value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node2)', '~vote(node2,value1)', '~vote(node2,value2)']
424     : ----0--0--1---0------0-0
424     : ['decision(value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value2)']
425     : -----0--0--1--0------00-
425     : ['decision(value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
426     : 0-----0--1---0-----00---
426     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~didNotVote(node1)', '~vote(node1,value1)', '~vote(node1,value2)']
427     : -0-----0--1--0----0-0---
427     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value2)']
428     : --0-----0--1-0----00----
428     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~didNotVote(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
429     : 0--0-----1--0---00------
429     : ['decision(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~didNotVote(node0)', '~vote(node0,value1)', '~vote(node0,value2)']
430     : -0--0-----1-0--0-0------
430     : ['decision(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value2)']
431     : --0--0-----10--00-------
431     : ['decision(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~didNotVote(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall NODE0,QUORUM0,VALUE1,QUORUM1. chosenAt(QUORUM1,VALUE1) | ~member(NODE0,QUORUM1) | ~member(NODE0,QUORUM0) | didNotVote(NODE0) | ~decision(VALUE1) | chosenAt(QUORUM0,VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 2.478 seconds

[QRM NOTE]: Time elapsed since last: 2.174 seconds

[QRM NOTE]: Peak memory: 2948198 bytes


=============================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

=============================================================================================


New level: 1
 pending : [4, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]


Before reduction : 
 pending  : [4, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [4, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 1 among pending : [4, 5, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 5 with phase True at level 1

After decision at level 1
 pending : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 5]


New level: 2
 pending : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 5]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, 2147483648), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, 67108864), (16, 33554432), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, 134217728), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 2 among pending : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, 67108864), (16, 33554432), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, 134217728), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 21 with phase True at level 2

After decision at level 2
 pending : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26]
 solution : [0, 5, 21]


New level: 3
 pending : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26]
 solution : [0, 5, 21]


Before reduction : 
 pending  : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26]
 solution : [0, 5, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, 67108864), (16, 33554432), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, 134217728), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 21]


Before reduction : 
 pending  : []
 solution : [0, 5, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 21]


Solution : [0, 5, 21] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [0, 5, 21]

After backtrack at level 3
 pending : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26]
 solution : [0, 5, 21]


Invert decision for 21 at level 2


New level: 3
 pending : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26]
 solution : [0, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, 67108864), (16, 33554432), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 3 among pending : [4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, 67108864), (16, 33554432), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26]
 solution : [0, 5, 15]


New level: 4
 pending : [4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26]
 solution : [0, 5, 15]


Before reduction : 
 pending  : [4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26]
 solution : [0, 5, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, 67108864), (16, 33554432), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 15]


Before reduction : 
 pending  : []
 solution : [0, 5, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 15]


Solution : [0, 5, 15] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [0, 5, 15]

After backtrack at level 4
 pending : [4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26]
 solution : [0, 5, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26]
 solution : [0, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, -1), (16, 33554432), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 4 among pending : [4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, -1), (16, 33554432), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 4

After decision at level 4
 pending : [4, 10, 11, 13, 14, 17, 18, 19, 22, 26]
 solution : [0, 5, 16]


New level: 5
 pending : [4, 10, 11, 13, 14, 17, 18, 19, 22, 26]
 solution : [0, 5, 16]


Before reduction : 
 pending  : [4, 10, 11, 13, 14, 17, 18, 19, 22, 26]
 solution : [0, 5, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, -1), (16, 33554432), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {4, 10, 11, 13, 14, 17, 18, 19, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 16]


Before reduction : 
 pending  : []
 solution : [0, 5, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 16]


Solution : [0, 5, 16] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [0, 5, 16]

After backtrack at level 5
 pending : [4, 10, 11, 13, 14, 17, 18, 19, 22, 26]
 solution : [0, 5, 16]


Invert decision for 16 at level 4


New level: 5
 pending : [4, 10, 11, 13, 14, 17, 18, 19, 22, 26]
 solution : [0, 5]


Before reduction : 
 pending  : [4, 10, 11, 13, 14, 17, 18, 19, 22, 26]
 solution : [0, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 10, 11, 13, 14, 17, 18, 19, 22, 26]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 5 among pending : [4, 10, 11, 13, 14, 17, 18, 19, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 5

After decision at level 5
 pending : [4, 10, 11, 14, 17, 18, 19, 22, 26]
 solution : [0, 5, 13]


New level: 6
 pending : [4, 10, 11, 14, 17, 18, 19, 22, 26]
 solution : [0, 5, 13]


Before reduction : 
 pending  : [4, 10, 11, 14, 17, 18, 19, 22, 26]
 solution : [0, 5, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, 2097152), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {10, 11, 4, 14}

After reduction : 
 pending  : [17, 18, 19, 22, 26]
 solution : [0, 5, 13]


Before reduction : 
 pending  : [17, 18, 19, 22, 26]
 solution : [0, 5, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 22, 26]
 solution : [0, 5, 13]


Solution : [0, 5, 13] has cost 20.


Before backtrack at level 6
 pending : [17, 18, 19, 22, 26]
 solution : [0, 5, 13]

After backtrack at level 6
 pending : [17, 18, 19, 22, 26, 4, 10, 11, 14]
 solution : [0, 5, 13]


Invert decision for 13 at level 5


New level: 6
 pending : [17, 18, 19, 22, 26, 4, 10, 11, 14]
 solution : [0, 5]


Before reduction : 
 pending  : [17, 18, 19, 22, 26, 4, 10, 11, 14]
 solution : [0, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 22, 26, 4, 10, 11, 14]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 6 among pending : [17, 18, 19, 22, 26, 4, 10, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 6

After decision at level 6
 pending : [17, 18, 19, 22, 26, 4, 11, 14]
 solution : [0, 5, 10]


New level: 7
 pending : [17, 18, 19, 22, 26, 4, 11, 14]
 solution : [0, 5, 10]


Before reduction : 
 pending  : [17, 18, 19, 22, 26, 4, 11, 14]
 solution : [0, 5, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1048576), (11, 49152), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {11, 4, 14}

After reduction : 
 pending  : [17, 18, 19, 22, 26]
 solution : [0, 5, 10]


Before reduction : 
 pending  : [17, 18, 19, 22, 26]
 solution : [0, 5, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 22, 26]
 solution : [0, 5, 10]


Solution : [0, 5, 10] has cost 20.


Before backtrack at level 7
 pending : [17, 18, 19, 22, 26]
 solution : [0, 5, 10]

After backtrack at level 7
 pending : [17, 18, 19, 22, 26, 4, 11, 14]
 solution : [0, 5, 10]


Invert decision for 10 at level 6


New level: 7
 pending : [17, 18, 19, 22, 26, 4, 11, 14]
 solution : [0, 5]


Before reduction : 
 pending  : [17, 18, 19, 22, 26, 4, 11, 14]
 solution : [0, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2048), (18, 8192), (19, 2048), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 22, 26, 4, 11, 14]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 7 among pending : [17, 18, 19, 22, 26, 4, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 7

After decision at level 7
 pending : [17, 19, 22, 26, 4, 11, 14]
 solution : [0, 5, 18]


New level: 8
 pending : [17, 19, 22, 26, 4, 11, 14]
 solution : [0, 5, 18]


Before reduction : 
 pending  : [17, 19, 22, 26, 4, 11, 14]
 solution : [0, 5, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, 524288), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 24576), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {17, 19, 14}

After reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 5, 18]


Before reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 5, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 24576), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 24576), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 5, 18]


Solution : [0, 5, 18] has cost 18.


Before backtrack at level 8
 pending : [22, 26, 4, 11]
 solution : [0, 5, 18]

After backtrack at level 8
 pending : [22, 26, 4, 11, 17, 19, 14]
 solution : [0, 5, 18]


Invert decision for 18 at level 7


New level: 8
 pending : [22, 26, 4, 11, 17, 19, 14]
 solution : [0, 5]


Before reduction : 
 pending  : [22, 26, 4, 11, 17, 19, 14]
 solution : [0, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 24576), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, -1), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 17, 19, 14]
 solution : [0, 5]


Solution : [0, 5] has cost 11.


Decide in level 8 among pending : [22, 26, 4, 11, 17, 19, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, -1), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [22, 26, 4, 11, 19, 14]
 solution : [0, 5, 17]


New level: 9
 pending : [22, 26, 4, 11, 19, 14]
 solution : [0, 5, 17]


Before reduction : 
 pending  : [22, 26, 4, 11, 19, 14]
 solution : [0, 5, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 262144), (18, -1), (19, 8192), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 24576), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {19, 14}

After reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 5, 17]


Before reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 5, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 24576), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 24576), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 5, 17]


Solution : [0, 5, 17] has cost 18.


Before backtrack at level 9
 pending : [22, 26, 4, 11]
 solution : [0, 5, 17]

After backtrack at level 9
 pending : [22, 26, 4, 11, 19, 14]
 solution : [0, 5, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [22, 26, 4, 11, 19, 14]
 solution : [0, 5]


Before reduction : 
 pending  : [22, 26, 4, 11, 19, 14]
 solution : [0, 5]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 24576), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 32768), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 14]
 solution : [0, 5, 19]


Before reduction : 
 pending  : [22, 26, 4, 11, 14]
 solution : [0, 5, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 14]
 solution : [0, 5, 19]


Solution : [0, 5, 19] has cost 18.


Before backtrack at level 9
 pending : [22, 26, 4, 11, 14]
 solution : [0, 5, 19]

After backtrack at level 9
 pending : [22, 26, 4, 11, 14, 19]
 solution : [0, 5]


Before backtrack at level 8
 pending : [22, 26, 4, 11, 14, 19]
 solution : [0, 5]

After backtrack at level 8
 pending : [22, 26, 4, 11, 14, 19, 17]
 solution : [0, 5]


Before backtrack at level 7
 pending : [22, 26, 4, 11, 14, 19, 17]
 solution : [0, 5]

After backtrack at level 7
 pending : [22, 26, 4, 11, 14, 19, 17, 18]
 solution : [0, 5]


Before backtrack at level 6
 pending : [22, 26, 4, 11, 14, 19, 17, 18]
 solution : [0, 5]

After backtrack at level 6
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10]
 solution : [0, 5]


Before backtrack at level 5
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10]
 solution : [0, 5]

After backtrack at level 5
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0, 5]


Before backtrack at level 4
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0, 5]

After backtrack at level 4
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0, 5]


Before backtrack at level 3
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0, 5]

After backtrack at level 3
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0, 5]


Before backtrack at level 2
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0, 5]

After backtrack at level 2
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15, 21]
 solution : [0, 5]


Invert decision for 5 at level 1


New level: 2
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15, 21]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15, 21]
 solution : [0]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 49152), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15, 21]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 2 among pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 21 with phase True at level 2

After decision at level 2
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0, 21]


New level: 3
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0, 21]


Before reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, 536870912), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {4, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 21]


Before reduction : 
 pending  : []
 solution : [0, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 21]


Solution : [0, 21] has cost 10.


Before backtrack at level 3
 pending : []
 solution : [0, 21]

After backtrack at level 3
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0, 21]


Invert decision for 21 at level 2


New level: 3
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 3 among pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0, 15]


New level: 4
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0, 15]


Before reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, 268435456), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {4, 10, 11, 13, 14, 16, 17, 18, 19, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 15]


Before reduction : 
 pending  : []
 solution : [0, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 15]


Solution : [0, 15] has cost 13.


Before backtrack at level 4
 pending : []
 solution : [0, 15]

After backtrack at level 4
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, -1), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 4 among pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, -1), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 4

After decision at level 4
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0, 16]


New level: 5
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0, 16]


Before reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, -1), (16, 134217728), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {4, 10, 11, 13, 14, 17, 18, 19, 22, 26}

After reduction : 
 pending  : []
 solution : [0, 16]


Before reduction : 
 pending  : []
 solution : [0, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 16]


Solution : [0, 16] has cost 13.


Before backtrack at level 5
 pending : []
 solution : [0, 16]

After backtrack at level 5
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0, 16]


Invert decision for 16 at level 4


New level: 5
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 5 among pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 5

After decision at level 5
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10]
 solution : [0, 13]


New level: 6
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10]
 solution : [0, 13]


Before reduction : 
 pending  : [22, 26, 4, 11, 14, 19, 17, 18, 10]
 solution : [0, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, 8388608), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {10, 11, 4, 14}

After reduction : 
 pending  : [22, 26, 19, 17, 18]
 solution : [0, 13]


Before reduction : 
 pending  : [22, 26, 19, 17, 18]
 solution : [0, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 26, 19, 17, 18]
 solution : [0, 13]


Solution : [0, 13] has cost 15.


Before backtrack at level 6
 pending : [22, 26, 19, 17, 18]
 solution : [0, 13]

After backtrack at level 6
 pending : [22, 26, 19, 17, 18, 4, 11, 14, 10]
 solution : [0, 13]


Invert decision for 13 at level 5


New level: 6
 pending : [22, 26, 19, 17, 18, 4, 11, 14, 10]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 19, 17, 18, 4, 11, 14, 10]
 solution : [0]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, -1), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 26, 19, 17, 18, 4, 11, 14, 10]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 6 among pending : [22, 26, 19, 17, 18, 4, 11, 14, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, -1), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 6

After decision at level 6
 pending : [22, 26, 19, 17, 18, 4, 11, 14]
 solution : [0, 10]


New level: 7
 pending : [22, 26, 19, 17, 18, 4, 11, 14]
 solution : [0, 10]


Before reduction : 
 pending  : [22, 26, 19, 17, 18, 4, 11, 14]
 solution : [0, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 4194304), (11, 196608), (12, -1), (13, -1), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {11, 4, 14}

After reduction : 
 pending  : [22, 26, 19, 17, 18]
 solution : [0, 10]


Before reduction : 
 pending  : [22, 26, 19, 17, 18]
 solution : [0, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 26, 19, 17, 18]
 solution : [0, 10]


Solution : [0, 10] has cost 15.


Before backtrack at level 7
 pending : [22, 26, 19, 17, 18]
 solution : [0, 10]

After backtrack at level 7
 pending : [22, 26, 19, 17, 18, 4, 11, 14]
 solution : [0, 10]


Invert decision for 10 at level 6


New level: 7
 pending : [22, 26, 19, 17, 18, 4, 11, 14]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 19, 17, 18, 4, 11, 14]
 solution : [0]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 32768), (19, 8192), (20, -1), (21, -1), (22, 512), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 196608), (12, -1), (13, -1), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 26, 19, 17, 18, 4, 11, 14]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 7 among pending : [22, 26, 19, 17, 18, 4, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 196608), (12, -1), (13, -1), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 7

After decision at level 7
 pending : [22, 26, 19, 17, 4, 11, 14]
 solution : [0, 18]


New level: 8
 pending : [22, 26, 19, 17, 4, 11, 14]
 solution : [0, 18]


Before reduction : 
 pending  : [22, 26, 19, 17, 4, 11, 14]
 solution : [0, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 196608), (12, -1), (13, -1), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, 2097152), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 98304), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {17, 19, 14}

After reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 18]


Before reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 98304), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 98304), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 18]


Solution : [0, 18] has cost 13.


Before backtrack at level 8
 pending : [22, 26, 4, 11]
 solution : [0, 18]

After backtrack at level 8
 pending : [22, 26, 4, 11, 19, 17, 14]
 solution : [0, 18]


Invert decision for 18 at level 7


New level: 8
 pending : [22, 26, 4, 11, 19, 17, 14]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 4, 11, 19, 17, 14]
 solution : [0]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 98304), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 196608), (12, -1), (13, -1), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, -1), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 19, 17, 14]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 8 among pending : [22, 26, 4, 11, 19, 17, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 196608), (12, -1), (13, -1), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, -1), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [22, 26, 4, 11, 19, 14]
 solution : [0, 17]


New level: 9
 pending : [22, 26, 4, 11, 19, 14]
 solution : [0, 17]


Before reduction : 
 pending  : [22, 26, 4, 11, 19, 14]
 solution : [0, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 196608), (12, -1), (13, -1), (14, 65536), (15, -1), (16, -1), (17, 1048576), (18, -1), (19, 32768), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 98304), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {19, 14}

After reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 17]


Before reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 98304), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 98304), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 4, 11]
 solution : [0, 17]


Solution : [0, 17] has cost 13.


Before backtrack at level 9
 pending : [22, 26, 4, 11]
 solution : [0, 17]

After backtrack at level 9
 pending : [22, 26, 4, 11, 19, 14]
 solution : [0, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [22, 26, 4, 11, 19, 14]
 solution : [0]


Before reduction : 
 pending  : [22, 26, 4, 11, 19, 14]
 solution : [0]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 98304), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 131072), (23, -1), (24, -1), (25, -1), (26, 131072), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 196608), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 14]
 solution : [0, 19]


Before reduction : 
 pending  : [22, 26, 4, 11, 14]
 solution : [0, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 196608), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 196608), (12, -1), (13, -1), (14, 32768), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 524288), (23, -1), (24, -1), (25, -1), (26, 524288), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 26, 4, 11, 14]
 solution : [0, 19]


Solution : [0, 19] has cost 13.


Before backtrack at level 9
 pending : [22, 26, 4, 11, 14]
 solution : [0, 19]

After backtrack at level 9
 pending : [22, 26, 4, 11, 14, 19]
 solution : [0]


Before backtrack at level 8
 pending : [22, 26, 4, 11, 14, 19]
 solution : [0]

After backtrack at level 8
 pending : [22, 26, 4, 11, 14, 19, 17]
 solution : [0]


Before backtrack at level 7
 pending : [22, 26, 4, 11, 14, 19, 17]
 solution : [0]

After backtrack at level 7
 pending : [22, 26, 4, 11, 14, 19, 17, 18]
 solution : [0]


Before backtrack at level 6
 pending : [22, 26, 4, 11, 14, 19, 17, 18]
 solution : [0]

After backtrack at level 6
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10]
 solution : [0]


Before backtrack at level 5
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10]
 solution : [0]

After backtrack at level 5
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0]


Before backtrack at level 4
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13]
 solution : [0]

After backtrack at level 4
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0]


Before backtrack at level 3
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16]
 solution : [0]

After backtrack at level 3
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0]


Before backtrack at level 2
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15]
 solution : [0]

After backtrack at level 2
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15, 21]
 solution : [0]


Before backtrack at level 1
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15, 21]
 solution : [0]

After backtrack at level 1
 pending : [22, 26, 4, 11, 14, 19, 17, 18, 10, 13, 16, 15, 21, 5]
 solution : [0]


============================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

============================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 10

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=2)

invariant [def_didNotVote] didNotVote(N) = forall V. ~vote(N,V) # definition

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 21] (length = 2)

invariant [invar_0] forall VALUE0,VALUE1,NODE0. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_21] forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 2.596 seconds

[QRM NOTE]: Time elapsed since last: 0.118 seconds

[QRM NOTE]: Peak memory: 2906460 bytes


===============================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

===============================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 2.738 seconds

[QRM NOTE]: Time elapsed since last: 0.142 seconds

[QRM NOTE]: Peak memory: 1856509 bytes


================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3]

================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall N. didNotVote(N) <-> (forall V. ~vote(N,V))) & (forall Q,V. chosenAt(Q,V) <-> (forall N. member(N,Q) -> vote(N,V))) & (forall Q2,Q1. (exists N. (member(N,Q1) & member(N,Q2)))) & (forall NODE0,VALUE0,VALUE1. ~vote(NODE0,VALUE0) | ~vote(NODE0,VALUE1) | VALUE0 = VALUE1) & (forall VALUE0. (exists QUORUM0. chosenAt(QUORUM0,VALUE0) | ~decision(VALUE0))))

[QRM NOTE]: Time elapsed since start: 4.869 seconds

[QRM NOTE]: Time elapsed since last: 2.131 seconds

[QRM NOTE]: Peak memory: 1832157 bytes


***********************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus: node=3,value=3

***********************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy -s node=5,value=3 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=5,value=3]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_5_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_5_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_5_value_3.finite.cpp toy_consensus.node_5_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_5_value_3.finite.o toy_consensus.node_5_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 53

[FW NOTE]: number of interpreted atoms (e.g. member,le): 50

[FW NOTE]: number of branching actions: 45

[FW NOTE]: symmetric group order: 720

[QRM NOTE]: Time elapsed since start: 7.023 seconds

[QRM NOTE]: Time elapsed since last: 7.023 seconds

[QRM NOTE]: Peak memory: 1270660 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 6

[FW NOTE]: number of total reachable states:        1342

[FW NOTE]: number of dfs representative states:     23

[FW NOTE]: number of dfs non-representative states: 1319


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=5,value=3]

===========================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3', 'node4']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node1_node4', 'quorum__node0_node2_node3', 'quorum__node0_node2_node4', 'quorum__node0_node3_node4', 'quorum__node1_node2_node3', 'quorum__node1_node2_node4', 'quorum__node1_node3_node4', 'quorum__node2_node3_node4']
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: decision('value',)
predicate: chosenAt('quorum', 'value')
predicate: didNotVote('node',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node1_node4)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node0_node2_node4)': '1', 'member(node0,quorum__node0_node3_node4)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node0,quorum__node1_node2_node4)': '0', 'member(node0,quorum__node1_node3_node4)': '0', 'member(node0,quorum__node2_node3_node4)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node1_node4)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node0_node2_node4)': '0', 'member(node1,quorum__node0_node3_node4)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node1,quorum__node1_node2_node4)': '1', 'member(node1,quorum__node1_node3_node4)': '1', 'member(node1,quorum__node2_node3_node4)': '0', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node1_node4)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node0_node2_node4)': '1', 'member(node2,quorum__node0_node3_node4)': '0', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node1_node2_node4)': '1', 'member(node2,quorum__node1_node3_node4)': '0', 'member(node2,quorum__node2_node3_node4)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node1_node4)': '0', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node0_node2_node4)': '0', 'member(node3,quorum__node0_node3_node4)': '1', 'member(node3,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node1_node2_node4)': '0', 'member(node3,quorum__node1_node3_node4)': '1', 'member(node3,quorum__node2_node3_node4)': '1', 'member(node4,quorum__node0_node1_node2)': '0', 'member(node4,quorum__node0_node1_node3)': '0', 'member(node4,quorum__node0_node1_node4)': '1', 'member(node4,quorum__node0_node2_node3)': '0', 'member(node4,quorum__node0_node2_node4)': '1', 'member(node4,quorum__node0_node3_node4)': '1', 'member(node4,quorum__node1_node2_node3)': '0', 'member(node4,quorum__node1_node2_node4)': '1', 'member(node4,quorum__node1_node3_node4)': '1', 'member(node4,quorum__node2_node3_node4)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node2,value2)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node1_node3,value2)', 'chosenAt(quorum__node0_node1_node4,value0)', 'chosenAt(quorum__node0_node1_node4,value1)', 'chosenAt(quorum__node0_node1_node4,value2)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value2)', 'chosenAt(quorum__node0_node2_node4,value0)', 'chosenAt(quorum__node0_node2_node4,value1)', 'chosenAt(quorum__node0_node2_node4,value2)', 'chosenAt(quorum__node0_node3_node4,value0)', 'chosenAt(quorum__node0_node3_node4,value1)', 'chosenAt(quorum__node0_node3_node4,value2)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value2)', 'chosenAt(quorum__node1_node2_node4,value0)', 'chosenAt(quorum__node1_node2_node4,value1)', 'chosenAt(quorum__node1_node2_node4,value2)', 'chosenAt(quorum__node1_node3_node4,value0)', 'chosenAt(quorum__node1_node3_node4,value1)', 'chosenAt(quorum__node1_node3_node4,value2)', 'chosenAt(quorum__node2_node3_node4,value0)', 'chosenAt(quorum__node2_node3_node4,value1)', 'chosenAt(quorum__node2_node3_node4,value2)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'didNotVote(node3)', 'didNotVote(node4)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)', 'vote(node4,value0)', 'vote(node4,value1)', 'vote(node4,value2)']
representative states : 1143699241855469579447, 558015117515191315639, 263443673088141913271, 10330259981256025795767, 5525759740528574585990327, 1448743541774000339068598447287, 1448743542954591959786009750711, 5525178668090252735114423, 5526359259710970146417847, 5526940332149291997293751, 9749187542934174919863, 9455192559259428940983, 10635784179976840244407, 9456345480764035787959, 10636937101481447091383, 10929779163651586223287, 11510851601973437099191, 116013835686541356215, 42244873790212631735, 5355889242420898999, 42262888188722113719, 264020133840445336759, 116734411626920635575


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000000000000000000000011111000000000000000
lex min decimal: 1143699241855469579447
states:
00000000000000000000000000000000011111000000000000000




=== State Orbit 1 =====================
size : 15
repr state: 00000000000000000000000000000000001111100000000000000
lex min decimal: 558015117515191315639
states:
00000000000000000000000000000000011101000000000001000
00000000000000000000000000000000010111000001000000000
00000000000000000000000000000000001111100000000000000
00000000000000000000000000000000011101000000000010000
00000000000000000000000000000000011110000000000000100
00000000000000000000000000000000001111001000000000000
00000000000000000000000000000000011110000000000000010
00000000000000000000000000000000011011000000100000000
00000000000000000000000000000000011110000000000000001
00000000000000000000000000000000001111010000000000000
00000000000000000000000000000000011101000000000100000
00000000000000000000000000000000010111000010000000000
00000000000000000000000000000000011011000000010000000
00000000000000000000000000000000010111000100000000000
00000000000000000000000000000000011011000000001000000




=== State Orbit 2 =====================
size : 30
repr state: 00000000000000000000000000000000000111100100000000000
lex min decimal: 263443673088141913271
states:
00000000000000000000000000000000010110000100000000100
00000000000000000000000000000000000111001001000000000
00000000000000000000000000000000001110100000000000100
00000000000000000000000000000000001101100000000100000
00000000000000000000000000000000011001000000001001000
00000000000000000000000000000000001110010000000000010
00000000000000000000000000000000010101000001000001000
00000000000000000000000000000000011010000000010000010
00000000000000000000000000000000001011001000001000000
00000000000000000000000000000000000111010010000000000
00000000000000000000000000000000011100000000000001001
00000000000000000000000000000000001101010000000010000
00000000000000000000000000000000011010000000001000001
00000000000000000000000000000000010101000100000100000
00000000000000000000000000000000010110000010000000010
00000000000000000000000000000000010011000001001000000
00000000000000000000000000000000011100000000000100100
00000000000000000000000000000000010101000010000010000
00000000000000000000000000000000001101001000000001000
00000000000000000000000000000000011001000000100100000
00000000000000000000000000000000001011100000100000000
00000000000000000000000000000000010110000001000000001
00000000000000000000000000000000001110001000000000001
00000000000000000000000000000000011100000000000010010
00000000000000000000000000000000010011000100100000000
00000000000000000000000000000000011010000000100000100
00000000000000000000000000000000001011010000010000000
00000000000000000000000000000000000111100100000000000
00000000000000000000000000000000010011000010010000000
00000000000000000000000000000000011001000000010010000




=== State Orbit 3 =====================
size : 30
repr state: 10000000000000000000000000000000000011100100100000000
lex min decimal: 10330259981256025795767
states:
00000000000000000001000000000000010001000010010010000
00000000000010000000000000000000001010100000100000100
00000000000000000000000000100000010100000001000001001
00100000000000000000000000000000000011001001001000000
01000000000000000000000000000000000011010010010000000
00000001000000000000000000000000000110010010000000010
00000000000000000000000000000100011000000000001001001
00010000000000000000000000000000000101100100000100000
00000100000000000000000000000000000101001001000001000
00000000010000000000000000000000001001100000100100000
00000000000100000000000000000000001001001000001001000
00000000000000000010000000000000010001000100100100000
00000000100000000000000000000000000110001001000000001
00000000000000001000000000000000001100010000000010010
00000000000000000000010000000000010010000100100000100
00000000000001000000000000000000001010010000010000010
00000000000000000000000010000000010100000100000100100
00000000000000000000000100000000010010000001001000001
00000010000000000000000000000000000110100100000000100
00000000000000000000000000001000011000000000010010010
00000000000000100000000000000000001010001000001000001
00000000000000000100000000000000001100001000000001001
00000000000000000000000001000000010100000010000010010
10000000000000000000000000000000000011100100100000000
00000000000000000000000000010000011000000000100100100
00000000000000010000000000000000001100100000000100100
00000000000000000000001000000000010010000010010000010
00001000000000000000000000000000000101010010000010000
00000000000000000000100000000000010001000001001001000
00000000001000000000000000000000001001010000010010000




=== State Orbit 4 =====================
size : 15
repr state: 10010000010000000010000000000000000001100100100100000
lex min decimal: 5525759740528574585990327
states:
01001000001000000001000000000000000001010010010010000
00000000000100100100000000000100001000001000001001001
00000000000000000000100100100100010000000001001001001
00010010000000010000000010000000000100100100000100100
00000000010010010000000000010000001000100000100100100
00000100100000000100000000100000000100001001000001001
10000010000010000000010000000000000010100100100000100
00000000000000000010010010010000010000000100100100100
01000001000001000000001000000000000010010010010000010
10010000010000000010000000000000000001100100100100000
00000000000000000001001001001000010000000010010010010
00000000001001001000000000001000001000010000010010010
00001001000000001000000001000000000100010010000010010
00100100000100000000100000000000000001001001001001000
00100000100000100000000100000000000010001001001000001




=== State Orbit 5 =====================
size : 3
repr state: 10010010010010010010010010010000000000100100100100100
lex min decimal: 1448743541774000339068598447287
states:
01001001001001001001001001001000000000010010010010010
10010010010010010010010010010000000000100100100100100
00100100100100100100100100100100000000001001001001001




=== State Orbit 6 =====================
size : 3
repr state: 10010010010010010010010010010010000000100100100100100
lex min decimal: 1448743542954591959786009750711
states:
00100100100100100100100100100100100000001001001001001
10010010010010010010010010010010000000100100100100100
01001001001001001001001001001001000000010010010010010




=== State Orbit 7 =====================
size : 30
repr state: 10010000010000000010000000000000000000100100100100010
lex min decimal: 5525178668090252735114423
states:
10000010000010000000010000000000000000100100100010100
00000000010010010000000000010000000000100001100100100
01001000001000000001000000000000000000010010010010001
00000000000100100100000000000100000000001100001001001
00100000100000100000000100000000000000001001001100001
00010010000000010000000010000000000000100100001100100
00000000001001001000000000001000000000010100010010010
00000100100000000100000000100000000000001001010001001
00000000000000000000100100100100000000010001001001001
10010000010000000010000000000000000000100100100100010
00001001000000001000000001000000000000010010001010010
00100000100000100000000100000000000000001001001010001
00000000000000000001001001001000000000001010010010010
00000000000000000000100100100100000000100001001001001
01000001000001000000001000000000000000010010010100010
00000000010010010000000000010000000000100010100100100
00001001000000001000000001000000000000010010100010010
01001000001000000001000000000000000000010010010010100
00000000000000000001001001001000000000100010010010010
00000000000100100100000000000100000000001010001001001
00000000000000000010010010010000000000001100100100100
00000000000000000010010010010000000000010100100100100
00010010000000010000000010000000000000100100010100100
01000001000001000000001000000000000000010010010001010
00100100000100000000100000000000000000001001001001010
10000010000010000000010000000000000000100100100001100
00100100000100000000100000000000000000001001001001100
00000000001001001000000000001000000000010001010010010
00000100100000000100000000100000000000001001100001001
10010000010000000010000000000000000000100100100100001




=== State Orbit 8 =====================
size : 30
repr state: 10010000010000000010000000000010000000100100100100010
lex min decimal: 5526359259710970146417847
states:
10000010000010000000010000000010000000100100100010100
00100000100000100000000100000000100000001001001100001
00000000001001001000000000001001000000010100010010010
00000000000000000010010010010010000000001100100100100
00000100100000000100000000100000100000001001100001001
00001001000000001000000001000001000000010010100010010
00010010000000010000000010000010000000100100010100100
00000000010010010000000000010010000000100001100100100
00000000000000000010010010010010000000010100100100100
00010010000000010000000010000010000000100100001100100
00000000001001001000000000001001000000010001010010010
01001000001000000001000000000001000000010010010010100
00000000000000000001001001001001000000100010010010010
10010000010000000010000000000010000000100100100100001
00100100000100000000100000000000100000001001001001100
01001000001000000001000000000001000000010010010010001
00000000000100100100000000000100100000001010001001001
00100100000100000000100000000000100000001001001001010
00000000010010010000000000010010000000100010100100100
00000000000000000001001001001001000000001010010010010
00000000000000000000100100100100100000010001001001001
00000000000100100100000000000100100000001100001001001
01000001000001000000001000000001000000010010010100010
10010000010000000010000000000010000000100100100100010
00100000100000100000000100000000100000001001001010001
00000100100000000100000000100000100000001001010001001
00000000000000000000100100100100100000100001001001001
10000010000010000000010000000010000000100100100001100
01000001000001000000001000000001000000010010010001010
00001001000000001000000001000001000000010010001010010




=== State Orbit 9 =====================
size : 15
repr state: 10010000010000000010000000000010000001100100100100000
lex min decimal: 5526940332149291997293751
states:
00010010000000010000000010000010000100100100000100100
00000000000000000010010010010010010000000100100100100
10000010000010000000010000000010000010100100100000100
00100100000100000000100000000000100001001001001001000
00001001000000001000000001000001000100010010000010010
00000000010010010000000000010010001000100000100100100
01000001000001000000001000000001000010010010010000010
01001000001000000001000000000001000001010010010010000
00000000001001001000000000001001001000010000010010010
00000100100000000100000000100000100100001001000001001
00100000100000100000000100000000100010001001001000001
00000000000000000001001001001001010000000010010010010
10010000010000000010000000000010000001100100100100000
00000000000000000000100100100100110000000001001001001
00000000000100100100000000000100101000001000001001001




=== State Orbit 10 =====================
size : 120
repr state: 10000000000000000000000000000000000001100100100010000
lex min decimal: 9749187542934174919863
states:
00000000100000000000000000000000000010001001100000001
00000000000000000000000001000000000100100010000010010
00000000100000000000000000000000000010001001010000001
00000010000000000000000000000000000100100100000001100
00000000000000000000010000000000010000000100100010100
00000000010000000000000000000000001000100000100100001
00000000000000010000000000000000001000100000001100100
00001000000000000000000000000000000001010010001010000
00000000100000000000000000000000000100001001000010001
00000000000000010000000000000000000100100001000100100
00000000000000000001000000000000000001100010010010000
00000000000100000000000000000000001000001000001001100
01000000000000000000000000000000000001010010010100000
00000000000000100000000000000000001000001000001010001
00000000000000000000100000000000000001010001001001000
00000000000000000000000000100000010000000001100001001
00000000000000000000000010000000000100010100000100100
00000000000000000000000000010000010000000001100100100
00000000000000000100000000000000000100001010000001001
00000010000000000000000000000000000010100100010000100
00000000000000000000000100000000010000000001001010001
10000000000000000000000000000000000010100100100000010
00000000000000000000100000000000010000000001001001010
00000000000000000000000000000100010000000100001001001
00010000000000000000000000000000000001100100010100000
00000100000000000000000000000000000001001001010001000
01000000000000000000000000000000000010010010010000100
00001000000000000000000000000000000100010010000010001
00000000000000000000000000001000010000000001010010010
00000000000000000000010000000000010000000100100001100
00000000000000000100000000000000000100001100000001001
00000000000000000000001000000000000010001010010000010
00000000000010000000000000000000000010100001100000100
00000000000000001000000000000000000100010100000010010
00000010000000000000000000000000000100100100000010100
00000000000100000000000000000000000001001100001001000
00000000001000000000000000000000001000010000010010001
00000000000000000010000000000000000001001100100100000
00000000000000000000000100000000010000000001001100001
00000000000000000000001000000000010000000010010100010
00100000000000000000000000000000000010001001001000100
00000000000001000000000000000000001000010000010100010
00000000000000000000000010000000000100001100000100100
00000000000000000000100000000000000001100001001001000
01000000000000000000000000000000000001010010010001000
00000000010000000000000000000000000001100010100100000
00000000000000000000000010000000010000000100001100100
00000000000010000000000000000000001000100000100001100
00000000000000000100000000000000001000001000100001001
10000000000000000000000000000000000010100100100000001
00000000000000000000000100000000000010010001001000001
00000000000000000001000000000000010000000010010010001
00000000000000000000001000000000000010100010010000010
00000000000000000000000000100000000100100001000001001
00000000000000010000000000000000001000100000010100100
00000000000000100000000000000000000010001100001000001
00000001000000000000000000000000000010010010001000010
00000000000000000000001000000000010000000010010001010
00000000000000000000000000100000010000000001010001001
00000000001000000000000000000000001000010000010010100
00000001000000000000000000000000000100010010000100010
01000000000000000000000000000000000010010010010000001
00000000010000000000000000000000000001100001100100000
00000000000000000001000000000000000001001010010010000
00000000000000000000000010000000010000000100010100100
00000000000000001000000000000000001000010000001010010
00010000000000000000000000000000000001100100001100000
00000000010000000000000000000000001000100000100100010
00000000100000000000000000000000000100001001000100001
00000000000000000000000000001000001000100000010010010
00000100000000000000000000000000000001001001100001000
00000001000000000000000000000000000010010010100000010
00100000000000000000000000000000000001001001001010000
00010000000000000000000000000000000100100100000100001
00000000000000000000000001000000000100001010000010010
00000000000000000000000000000100010000000010001001001
00000000000001000000000000000000001000010000010001010
00000000000000000000010000000000000010001100100000100
10000000000000000000000000000000000001100100100010000
00000000000000100000000000000000001000001000001100001
00000000000000000000000000100000000100010001000001001
00000000000000000000000000000100001000010000001001001
00000000000000000000000000000100001000100000001001001
00000000000000000000000000001000010000000100010010010
00000000000000000000000000010000001000001000100100100
00001000000000000000000000000000000100010010000010100
00100000000000000000000000000000000010001001001000010
00000001000000000000000000000000000100010010000001010
10000000000000000000000000000000000001100100100001000
00000000000000000000000000001000001000001000010010010
00000000000000000000000001000000010000000010001010010
00000000000000000010000000000000010000000100100100001
00000000001000000000000000000000000001010001010010000
00000000000010000000000000000000001000100000100010100
00000100000000000000000000000000000100001001000001010
00100000000000000000000000000000000001001001001100000
00000000000000000000010000000000000010010100100000100
00010000000000000000000000000000000100100100000100010
00000000000000000001000000000000010000000010010010100
00000000000001000000000000000000000010010001010000010
00000000000000000000000001000000010000000010100010010
00000010000000000000000000000000000010100100001000100
00000000000000001000000000000000001000010000100010010
00000000000100000000000000000000001000001000001001010
00000000000000000010000000000000000001010100100100000
00000000000000000000000000010000010000000010100100100
00000000000100000000000000000000000001001010001001000
00000000000000010000000000000000000100100010000100100
00000000000000000000100000000000010000000001001001100
00001000000000000000000000000000000001010010100010000
00000000000010000000000000000000000010100010100000100
00000000000001000000000000000000000010010100010000010
00000000000000001000000000000000000100010001000010010
00000000000000100000000000000000000010001010001000001
00000000000000000000000100000000000010100001001000001
00000100000000000000000000000000000100001001000001100
00000000000000000100000000000000001000001000010001001
00000000000000000010000000000000010000000100100100010
00000000000000000000000000010000001000010000100100100
00000000001000000000000000000000000001010100010010000




=== State Orbit 11 =====================
size : 60
repr state: 10000000000000000000000000000000000000100100100010010
lex min decimal: 9455192559259428940983
states:
00000000000000000000000000100000000000100001100001001
00000100000000000000000000000000000000001001010001010
00000000000000000000000010000000000000001100001100100
00000000010000000000000000000000000000100010100100010
00000010000000000000000000000000000000100100001001100
00000001000000000000000000000000000000010010100100010
00000000000000000100000000000000000000001100100001001
00000000001000000000000000000000000000010100010010100
00000000000000000010000000000000000000010100100100010
00000000000000000000000100000000000000010001001010001
01000000000000000000000000000000000000010010010001001
00000000000000000000000100000000000000100001001100001
00000000000000000000000000100000000000010001010001001
00001000000000000000000000000000000000010010100010100
00000000000000010000000000000000000000100001001100100
00000000000010000000000000000000000000100010100010100
00000001000000000000000000000000000000010010001001010
01000000000000000000000000000000000000010010010100100
00000000000000010000000000000000000000100010010100100
00000000000010000000000000000000000000100001100001100
00000000000000000000100000000000000000100001001001100
00000000010000000000000000000000000000100001100100001
00000000000000000000000010000000000000010100010100100
00000000000000001000000000000000000000010001001010010
00000000000000000010000000000000000000001100100100001
00000000000000000000000001000000000000001010001010010
00010000000000000000000000000000000000100100001100001
00000000000000000100000000000000000000001010010001001
00000000000000000000001000000000000000001010010001010
00000000000000100000000000000000000000001010001010001
00000000000000000001000000000000000000100010010010100
00000000000000000000010000000000000000010100100010100
00010000000000000000000000000000000000100100010100010
00000000000000001000000000000000000000010100100010010
00000000100000000000000000000000000000001001100100001
00000000000001000000000000000000000000010100010100010
00000000000000000000000000000100000000100100001001001
00000000000000000000001000000000000000100010010100010
00000000000000100000000000000000000000001100001100001
00000000000100000000000000000000000000001100001001100
00000000000000000000100000000000000000010001001001010
00100000000000000000000000000000000000001001001010010
00000000000001000000000000000000000000010001010001010
00000100000000000000000000000000000000001001100001100
00000000000000000000010000000000000000001100100001100
00000000000000000000000000000100000000010010001001001
00000000000000000000000000001000000000100100010010010
00001000000000000000000000000000000000010010001010001
00000000100000000000000000000000000000001001010010001
00100000000000000000000000000000000000001001001100100
00000000000000000000000000001000000000001001010010010
10000000000000000000000000000000000000100100100001001
00000000000000000000000000010000000000010010100100100
00000000000000000001000000000000000000001010010010001
00000000000100000000000000000000000000001010001001010
00000000000000000000000001000000000000100010100010010
10000000000000000000000000000000000000100100100010010
00000010000000000000000000000000000000100100010010100
00000000001000000000000000000000000000010001010010001
00000000000000000000000000010000000000001001100100100




=== State Orbit 12 =====================
size : 60
repr state: 10000000000000000000000000000010000000100100100010010
lex min decimal: 10635784179976840244407
states:
00000000100000000000000000000000100000001001100100001
00000000000100000000000000000000100000001100001001100
00000000000000100000000000000000100000001100001100001
00000000000000000100000000000000100000001100100001001
00000000000000010000000000000010000000100001001100100
00000000000000001000000000000001000000010001001010010
00000000010000000000000000000010000000100010100100010
00000000000000000000000000010010000000001001100100100
10000000000000000000000000000010000000100100100001001
00000000000000000000000010000010000000001100001100100
00100000000000000000000000000000100000001001001100100
00000000000001000000000000000001000000010001010001010
00000000000000000010000000000010000000010100100100010
00000000000000001000000000000001000000010100100010010
00000100000000000000000000000000100000001001010001010
00000010000000000000000000000010000000100100001001100
00000000000000000000000000010010000000010010100100100
01000000000000000000000000000001000000010010010001001
00000010000000000000000000000010000000100100010010100
00000000000010000000000000000010000000100001100001100
00000000000000000000010000000010000000001100100001100
00000000000000100000000000000000100000001010001010001
00000000000000000100000000000000100000001010010001001
00000000000000000000100000000000100000100001001001100
00000000000000000001000000000001000000001010010010001
00000000000000000000010000000010000000010100100010100
00000000000000000000001000000001000000100010010100010
00000000000000000000000001000001000000001010001010010
00000000000000000000000001000001000000100010100010010
00000000010000000000000000000010000000100001100100001
00000000001000000000000000000001000000010100010010100
00000000000000000010000000000010000000001100100100001
00010000000000000000000000000010000000100100010100010
00100000000000000000000000000000100000001001001010010
10000000000000000000000000000010000000100100100010010
00000000000010000000000000000010000000100010100010100
00000000000000010000000000000010000000100010010100100
00000000000000000000100000000000100000010001001001010
00000000000000000000000100000000100000010001001010001
00001000000000000000000000000001000000010010001010001
00000100000000000000000000000000100000001001100001100
01000000000000000000000000000001000000010010010100100
00000000000001000000000000000001000000010100010100010
00000000000000000001000000000001000000100010010010100
00000000000100000000000000000000100000001010001001010
00000000000000000000000000100000100000010001010001001
00000000001000000000000000000001000000010001010010001
00000000000000000000001000000001000000001010010001010
00000000000000000000000000000100100000100100001001001
00000000000000000000000000100000100000100001100001001
00000000100000000000000000000000100000001001010010001
00000001000000000000000000000001000000010010100100010
00010000000000000000000000000010000000100100001100001
00000000000000000000000000001001000000100100010010010
00000000000000000000000000000100100000010010001001001
00000000000000000000000010000010000000010100010100100
00001000000000000000000000000001000000010010100010100
00000000000000000000000100000000100000100001001100001
00000000000000000000000000001001000000001001010010010
00000001000000000000000000000001000000010010001001010




=== State Orbit 13 =====================
size : 60
repr state: 10000000000000000000000000000000000000100100100010001
lex min decimal: 9456345480764035787959
states:
00000000000000000000000001000000000000100010001010010
00000000000100000000000000000000000000001010001001100
00000000000000000000000100000000000000010001001100001
00000000000000000000010000000000000000001100100010100
00000000000100000000000000000000000000001100001001010
00000000000000000000000000100000000000100001010001001
00000000010000000000000000000000000000100010100100001
00000100000000000000000000000000000000001001010001100
00000000000000000000000001000000000000001010100010010
00000000000000100000000000000000000000001100001010001
00000000000000000010000000000000000000001100100100010
00000000000000000000000010000000000000010100001100100
00000000000000000000000000000100000000100010001001001
00000000000010000000000000000000000000100001100010100
00000010000000000000000000000000000000100100001010100
00000000000000100000000000000000000000001010001100001
00000000000000000000100000000000000000100001001001010
00000000000000010000000000000000000000100001010100100
00001000000000000000000000000000000000010010100010001
00000000000000000000000000001000000000100001010010010
00000000000000000000000100000000000000100001001010001
00000100000000000000000000000000000000001001100001010
00000001000000000000000000000000000000010010100001010
00000000000000000000000000010000000000010001100100100
00000001000000000000000000000000000000010010001100010
10000000000000000000000000000000000000100100100010001
00001000000000000000000000000000000000010010001010100
00000000000000000100000000000000000000001010100001001
00000000000010000000000000000000000000100010100001100
00000000010000000000000000000000000000100001100100010
00000000000000000100000000000000000000001100010001001
00010000000000000000000000000000000000100100010100001
00100000000000000000000000000000000000001001001010100
00000000100000000000000000000000000000001001100010001
00010000000000000000000000000000000000100100001100010
00000000001000000000000000000000000000010100010010001
00000000000000001000000000000000000000010100001010010
00100000000000000000000000000000000000001001001100010
00000000000000000000000000010000000000001010100100100
00000000000000000000000000000100000000010100001001001
01000000000000000000000000000000000000010010010100001
00000000000000000000000000001000000000001100010010010
00000000000000000000001000000000000000001010010100010
00000010000000000000000000000000000000100100010001100
00000000000001000000000000000000000000010100010001010
00000000000000001000000000000000000000010001100010010
00000000000000000010000000000000000000010100100100001
00000000001000000000000000000000000000010001010010100
00000000000000000001000000000000000000100010010010001
00000000000000000000010000000000000000010100100001100
01000000000000000000000000000000000000010010010001100
00000000000000010000000000000000000000100010001100100
00000000000001000000000000000000000000010001010100010
00000000000000000001000000000000000000001010010010100
00000000000000000000000010000000000000001100010100100
00000000000000000000000000100000000000010001100001001
00000000000000000000100000000000000000010001001001100
00000000000000000000001000000000000000100010010001010
00000000100000000000000000000000000000001001010100001
10000000000000000000000000000000000000100100100001010




=== State Orbit 14 =====================
size : 60
repr state: 10000000000000000000000000000010000000100100100010001
lex min decimal: 10636937101481447091383
states:
00000001000000000000000000000001000000010010100001010
00010000000000000000000000000010000000100100001100010
00000000010000000000000000000010000000100010100100001
00000000000000000000000001000001000000001010100010010
00000000001000000000000000000001000000010100010010001
00000000000000000001000000000001000000100010010010001
00000000000000000000000000100000100000010001100001001
00000000000000000000001000000001000000100010010001010
00000000000000000000000010000010000000001100010100100
00001000000000000000000000000001000000010010100010001
00000000100000000000000000000000100000001001100010001
00000010000000000000000000000010000000100100010001100
00000000000000001000000000000001000000010100001010010
00000000000000000000010000000010000000001100100010100
00000000000000000000000000100000100000100001010001001
00000000000000000000001000000001000000001010010100010
00000000000000000000010000000010000000010100100001100
00000000000000000100000000000000100000001100010001001
00000000000100000000000000000000100000001100001001010
00000000000000100000000000000000100000001100001010001
00000000000000000000000010000010000000010100001100100
00000000000010000000000000000010000000100001100010100
00000000000000000000000000010010000000001010100100100
00100000000000000000000000000000100000001001001010100
01000000000000000000000000000001000000010010010001100
00000000000000000000000000001001000000100001010010010
00000000000000000000000000000100100000100010001001001
00000100000000000000000000000000100000001001010001100
00000000000001000000000000000001000000010001010100010
00000000000000000000000100000000100000010001001100001
00000000000000000000000000001001000000001100010010010
00000000000000010000000000000010000000100010001100100
10000000000000000000000000000010000000100100100001010
10000000000000000000000000000010000000100100100010001
00000000000000000000000001000001000000100010001010010
00000000000001000000000000000001000000010100010001010
00000000010000000000000000000010000000100001100100010
00000000000000000100000000000000100000001010100001001
00000000000000000000000100000000100000100001001010001
00000000001000000000000000000001000000010001010010100
00100000000000000000000000000000100000001001001100010
00000000000100000000000000000000100000001010001001100
00000000000010000000000000000010000000100010100001100
00000000000000000000100000000000100000100001001001010
00000000000000000010000000000010000000001100100100010
00000000000000001000000000000001000000010001100010010
00000001000000000000000000000001000000010010001100010
00000000000000100000000000000000100000001010001100001
00000000100000000000000000000000100000001001010100001
01000000000000000000000000000001000000010010010100001
00001000000000000000000000000001000000010010001010100
00010000000000000000000000000010000000100100010100001
00000000000000000000100000000000100000010001001001100
00000000000000000000000000000100100000010100001001001
00000000000000010000000000000010000000100001010100100
00000000000000000000000000010010000000010001100100100
00000100000000000000000000000000100000001001100001010
00000000000000000010000000000010000000010100100100001
00000010000000000000000000000010000000100100001010100
00000000000000000001000000000001000000001010010010100




=== State Orbit 15 =====================
size : 120
repr state: 10000000000000000000000000000010000001100100100010000
lex min decimal: 10929779163651586223287
states:
00000000100000000000000000000000100100001001000010001
00000001000000000000000000000001000100010010000100010
00000000000000000000000000001001010000000001010010010
00000000010000000000000000000010000001100010100100000
10000000000000000000000000000010000010100100100000001
00000000000000100000000000000000101000001000001100001
00000000000000000000000100000000100010010001001000001
00000001000000000000000000000001000100010010000001010
00000000000000000001000000000001000001100010010010000
00000000000001000000000000000001001000010000010100010
00000000100000000000000000000000100100001001000100001
00000000000000000000000000000100101000100000001001001
00000001000000000000000000000001000010010010100000010
00010000000000000000000000000010000001100100010100000
01000000000000000000000000000001000001010010010100000
00000000000000010000000000000010000100100010000100100
00000000000001000000000000000001000010010100010000010
00000000000000000000000000001001010000000100010010010
00000000000000000100000000000000101000001000100001001
00000000000000000000000010000010000100010100000100100
00000010000000000000000000000010000100100100000010100
00000000100000000000000000000000100010001001010000001
00000000000000000000000000100000110000000001010001001
00000000000000000000000000000100110000000100001001001
00000001000000000000000000000001000010010010001000010
00000000000000000000100000000000100001100001001001000
00001000000000000000000000000001000100010010000010001
00000000001000000000000000000001000001010100010010000
00000000000000000100000000000000101000001000010001001
00000000000000000000000001000001010000000010001010010
00100000000000000000000000000000100001001001001100000
00000000000010000000000000000010001000100000100001100
00000000000000000000000001000001010000000010100010010
00000000001000000000000000000001001000010000010010001
00000000000000000010000000000010010000000100100100001
00000000000100000000000000000000101000001000001001010
00000000000000000000001000000001010000000010010100010
00000000000000000000001000000001010000000010010001010
00000000000000000000000010000010010000000100010100100
00000010000000000000000000000010000010100100001000100
10000000000000000000000000000010000001100100100010000
01000000000000000000000000000001000001010010010001000
00000000000000100000000000000000101000001000001010001
00000000010000000000000000000010000001100001100100000
00000000000000100000000000000000100010001100001000001
01000000000000000000000000000001000010010010010000100
00000000000000010000000000000010001000100000010100100
00000000000000000000100000000000110000000001001001010
00000000000000000100000000000000100100001010000001001
10000000000000000000000000000010000001100100100001000
00000000000000000010000000000010010000000100100100010
00000000000000010000000000000010000100100001000100100
00001000000000000000000000000001000100010010000010100
00000000000000000000000000010010001000001000100100100
00000000000001000000000000000001001000010000010001010
00000000000000001000000000000001001000010000001010010
00000000000000000000001000000001000010100010010000010
00000000000010000000000000000010000010100001100000100
00000000000000000000000000100000100100100001000001001
00001000000000000000000000000001000001010010001010000
00000000000100000000000000000000100001001010001001000
00000000000000000000000000000100110000000010001001001
00000000000000000000000001000001000100100010000010010
00000000000000000000001000000001000010001010010000010
00000000000000000000000000010010010000000001100100100
00100000000000000000000000000000100010001001001000100
00010000000000000000000000000010000001100100001100000
00000000000010000000000000000010001000100000100010100
00010000000000000000000000000010000100100100000100010
00000000000000000000000001000001000100001010000010010
00000000000000000000010000000010010000000100100010100
00000000001000000000000000000001000001010001010010000
00000010000000000000000000000010000010100100010000100
00000000000000000000000100000000110000000001001010001
00000000000001000000000000000001000010010001010000010
00000000000000000000000000000100101000010000001001001
00000000000000000000100000000000100001010001001001000
00000000000000000000010000000010000010010100100000100
00000100000000000000000000000000100100001001000001010
00000000100000000000000000000000100010001001100000001
00000000000100000000000000000000101000001000001001100
00000010000000000000000000000010000100100100000001100
00000000000000000000100000000000110000000001001001100
00000100000000000000000000000000100001001001010001000
00000000000000000000000100000000100010100001001000001
00000000000000000000010000000010000010001100100000100
00000000000000000000000000100000100100010001000001001
00001000000000000000000000000001000001010010100010000
00000100000000000000000000000000100001001001100001000
00100000000000000000000000000000100010001001001000010
00000000000000000010000000000010000001001100100100000
00000000000000010000000000000010001000100000001100100
00000000000000000000000000010010010000000010100100100
00000000000010000000000000000010000010100010100000100
00000000000000000001000000000001010000000010010010001
00010000000000000000000000000010000100100100000100001
10000000000000000000000000000010000010100100100000010
00000000000000000000000010000010000100001100000100100
00000000000100000000000000000000100001001100001001000
00000000000000000001000000000001010000000010010010100
00000000010000000000000000000010001000100000100100001
00000000000000000000000010000010010000000100001100100
01000000000000000000000000000001000010010010010000001
00000000000000100000000000000000100010001010001000001
00000000010000000000000000000010001000100000100100010
00000000000000001000000000000001001000010000100010010
00000000000000000000000000001001001000100000010010010
00100000000000000000000000000000100001001001001010000
00000000000000000010000000000010000001010100100100000
00000000000000000000010000000010010000000100100001100
00000000000000000000000000001001001000001000010010010
00000000000000000000000100000000110000000001001100001
00000000000000000000000000010010001000010000100100100
00000000000000000100000000000000100100001100000001001
00000100000000000000000000000000100100001001000001100
00000000000000001000000000000001000100010001000010010
00000000000000000000000000100000110000000001100001001
00000000000000001000000000000001000100010100000010010
00000000001000000000000000000001001000010000010010100
00000000000000000001000000000001000001001010010010000




=== State Orbit 16 =====================
size : 30
repr state: 10000000000000000000000000000010000011100100100000000
lex min decimal: 11510851601973437099191
states:
00000000000000000000000000010010011000000000100100100
00000000000000000000010000000010010010000100100000100
00000000000000000000000000100000110100000001000001001
00100000000000000000000000000000100011001001001000000
00000000000000000000000001000001010100000010000010010
00000000000000000010000000000010010001000100100100000
00000000000000000000100000000000110001000001001001000
00000000000000000000000100000000110010000001001000001
00000000000000000000000000000100111000000000001001001
00000000000100000000000000000000101001001000001001000
00000010000000000000000000000010000110100100000000100
00000000000000100000000000000000101010001000001000001
00000000100000000000000000000000100110001001000000001
00000000000000010000000000000010001100100000000100100
00000000000001000000000000000001001010010000010000010
00000000000000000000000000001001011000000000010010010
10000000000000000000000000000010000011100100100000000
00010000000000000000000000000010000101100100000100000
00000000000000000100000000000000101100001000000001001
00000000010000000000000000000010001001100000100100000
00000100000000000000000000000000100101001001000001000
00000001000000000000000000000001000110010010000000010
00000000000000001000000000000001001100010000000010010
00000000001000000000000000000001001001010000010010000
00000000000000000000001000000001010010000010010000010
00000000000000000000000010000010010100000100000100100
00000000000000000001000000000001010001000010010010000
00001000000000000000000000000001000101010010000010000
01000000000000000000000000000001000011010010010000000
00000000000010000000000000000010001010100000100000100




=== State Orbit 17 =====================
size : 180
repr state: 00000000000000000000000000000000000011100100010000000
lex min decimal: 116013835686541356215
states:
00000000000000000000000000000000000110001010000000001
00000000000000000000000000000000000110010100000000010
00000000000000000000000000000000010010000100100000001
00000000000000000000000000000000000101010010000100000
00000000000000000000000000000000010010000100010000100
00000000000000000000000000000000001010010000001000001
00000000000000000000000000000000001010010000100000010
00000000000000000000000000000000011000000000001100001
00000000000000000000000000000000001001001000001100000
00000000000000000000000000000000001001100000010100000
00000000000000000000000000000000011000000000010001010
00000000000000000000000000000000010001000001100001000
00000000000000000000000000000000010100000100000100001
00000000000000000000000000000000011000000000010100010
00000000000000000000000000000000000011001010010000000
00000000000000000000000000000000011000000000001001010
00000000000000000000000000000000001100001000000100100
00000000000000000000000000000000001100001000000010010
00000000000000000000000000000000001010100000010000100
00000000000000000000000000000000010010000100100000010
00000000000000000000000000000000010100000100000010010
00000000000000000000000000000000000110001001000000100
00000000000000000000000000000000000101001010000010000
00000000000000000000000000000000010010000001010000001
00000000000000000000000000000000001100001000000100001
00000000000000000000000000000000001001010000010100000
00000000000000000000000000000000000110100100000000001
00000000000000000000000000000000010010000001100000001
00000000000000000000000000000000001001001000100001000
00000000000000000000000000000000000101010001000001000
00000000000000000000000000000000001010100000010000010
00000000000000000000000000000000011000000000001100100
00000000000000000000000000000000000110001100000000001
00000000000000000000000000000000000110001010000000010
00000000000000000000000000000000010100000100000001100
00000000000000000000000000000000001001001000010001000
00000000000000000000000000000000000101100001000100000
00000000000000000000000000000000001100100000000010010
00000000000000000000000000000000000101001001000010000
00000000000000000000000000000000010010000010010000001
00000000000000000000000000000000011000000000010010100
00000000000000000000000000000000001100001000000001100
00000000000000000000000000000000000110100001000000001
00000000000000000000000000000000010010000010100000100
00000000000000000000000000000000000011010100010000000
00000000000000000000000000000000001010100000100000001
00000000000000000000000000000000000110001001000000010
00000000000000000000000000000000000011010010001000000
00000000000000000000000000000000010001000100010100000
00000000000000000000000000000000010010000001001000010
00000000000000000000000000000000011000000000100010010
00000000000000000000000000000000011000000000001010001
00000000000000000000000000000000001100010000000001010
00000000000000000000000000000000010010000001100000100
00000000000000000000000000000000000101100010000010000
00000000000000000000000000000000000101010100000010000
00000000000000000000000000000000010001000100100010000
00000000000000000000000000000000000101010001000010000
00000000000000000000000000000000001001100000010010000
00000000000000000000000000000000010001000001010001000
00000000000000000000000000000000010001000100010010000
00000000000000000000000000000000011000000000001001100
00000000000000000000000000000000011000000000100001100
00000000000000000000000000000000001100010000000001001
00000000000000000000000000000000010100000100000001001
00000000000000000000000000000000010010000010010000100
00000000000000000000000000000000001001010000001010000
00000000000000000000000000000000000101100001000001000
00000000000000000000000000000000010010000001001000100
00000000000000000000000000000000001001100000001001000
00000000000000000000000000000000000110010001000000001
00000000000000000000000000000000001010001000010000010
00000000000000000000000000000000001100100000000010100
00000000000000000000000000000000010100000100000010100
00000000000000000000000000000000010100000001000100001
00000000000000000000000000000000001010001000100000100
00000000000000000000000000000000011000000000010001001
00000000000000000000000000000000000011100001100000000
00000000000000000000000000000000000110100010000000010
00000000000000000000000000000000010100000010000100010
00000000000000000000000000000000000011010100100000000
00000000000000000000000000000000001010100000001000001
00000000000000000000000000000000010010000010001000001
00000000000000000000000000000000010100000010000100100
00000000000000000000000000000000010001000010010001000
00000000000000000000000000000000000101001010000001000
00000000000000000000000000000000011000000000010010001
00000000000000000000000000000000000101100100000010000
00000000000000000000000000000000001001001000010010000
00000000000000000000000000000000000011001100100000000
00000000000000000000000000000000010001000010001010000
00000000000000000000000000000000001001010000100100000
00000000000000000000000000000000001100010000000100100
00000000000000000000000000000000010100000001000001100
00000000000000000000000000000000000110010100000000100
00000000000000000000000000000000001010001000001000100
00000000000000000000000000000000000110010001000000010
00000000000000000000000000000000001010001000010000001
00000000000000000000000000000000001010001000100000001
00000000000000000000000000000000001010010000010000001
00000000000000000000000000000000000011001001100000000
00000000000000000000000000000000010100000010000010100
00000000000000000000000000000000010010000010001000010
00000000000000000000000000000000001100001000000010001
00000000000000000000000000000000001100001000000001010
00000000000000000000000000000000010001000010100010000
00000000000000000000000000000000001001010000010001000
00000000000000000000000000000000010001000100001100000
00000000000000000000000000000000000101010010000001000
00000000000000000000000000000000010001000001001100000
00000000000000000000000000000000011000000000010100100
00000000000000000000000000000000011000000000001010010
00000000000000000000000000000000010100000010000010001
00000000000000000000000000000000001001010000100010000
00000000000000000000000000000000001001001000100100000
00000000000000000000000000000000001001100000100010000
00000000000000000000000000000000010100000100000100010
00000000000000000000000000000000000101001100000100000
00000000000000000000000000000000001100010000000010100
00000000000000000000000000000000001100100000000001100
00000000000000000000000000000000000011001010001000000
00000000000000000000000000000000000011100001001000000
00000000000000000000000000000000001001100000001100000
00000000000000000000000000000000000101001001000100000
00000000000000000000000000000000000101010100000100000
00000000000000000000000000000000010001000001100100000
00000000000000000000000000000000001100010000000100010
00000000000000000000000000000000000011100010100000000
00000000000000000000000000000000001001001000001010000
00000000000000000000000000000000000011001100001000000
00000000000000000000000000000000010100000001000010010
00000000000000000000000000000000000110100010000000100
00000000000000000000000000000000000011100100010000000
00000000000000000000000000000000010001000010001001000
00000000000000000000000000000000000011010001010000000
00000000000000000000000000000000000101001100000001000
00000000000000000000000000000000000101100100000001000
00000000000000000000000000000000010100000001000001010
00000000000000000000000000000000001010010000001000010
00000000000000000000000000000000010001000100100001000
00000000000000000000000000000000001010100000001000100
00000000000000000000000000000000001100100000000100010
00000000000000000000000000000000010100000010000001010
00000000000000000000000000000000010001000001001010000
00000000000000000000000000000000010100000001000010001
00000000000000000000000000000000001010100000100000010
00000000000000000000000000000000011000000000100001001
00000000000000000000000000000000001001100000100001000
00000000000000000000000000000000001100010000000010001
00000000000000000000000000000000000110100001000000100
00000000000000000000000000000000000011010010100000000
00000000000000000000000000000000011000000000100100001
00000000000000000000000000000000011000000000100010100
00000000000000000000000000000000000011100100001000000
00000000000000000000000000000000000011001001010000000
00000000000000000000000000000000010010000100010000010
00000000000000000000000000000000001010001000001000010
00000000000000000000000000000000000011010001001000000
00000000000000000000000000000000010010000001010000010
00000000000000000000000000000000010001000100001001000
00000000000000000000000000000000010100000010000001001
00000000000000000000000000000000010001000001010010000
00000000000000000000000000000000010001000010100100000
00000000000000000000000000000000000110001100000000100
00000000000000000000000000000000001010010000100000100
00000000000000000000000000000000000011100010010000000
00000000000000000000000000000000001100100000000001001
00000000000000000000000000000000001001010000001001000
00000000000000000000000000000000010010000100001000100
00000000000000000000000000000000000110100100000000010
00000000000000000000000000000000000110010010000000001
00000000000000000000000000000000001100100000000100001
00000000000000000000000000000000010010000010100000010
00000000000000000000000000000000011000000000100100010
00000000000000000000000000000000000110010010000000100
00000000000000000000000000000000010100000001000100100
00000000000000000000000000000000000101100010000100000
00000000000000000000000000000000001010010000010000100
00000000000000000000000000000000010001000010010100000
00000000000000000000000000000000010010000100001000001




=== State Orbit 18 =====================
size : 90
repr state: 00000000000000000000000000000000000001100100010010000
lex min decimal: 42244873790212631735
states:
00000000000000000000000000000000000010010001001000010
00000000000000000000000000000000000100010001000001010
00000000000000000000000000000000010000000001100100001
00000000000000000000000000000000000001100001100001000
00000000000000000000000000000000000010100010100000010
00000000000000000000000000000000000100100100000010010
00000000000000000000000000000000001000010000001001010
00000000000000000000000000000000010000000100010100010
00000000000000000000000000000000000100001001000010010
00000000000000000000000000000000000001010001001010000
00000000000000000000000000000000000010001010010000001
00000000000000000000000000000000010000000001001010010
00000000000000000000000000000000000001010100010100000
00000000000000000000000000000000001000001000001010010
00000000000000000000000000000000001000010000010100100
00000000000000000000000000000000010000000100100001001
00000000000000000000000000000000001000001000100001100
00000000000000000000000000000000000100010001000010001
00000000000000000000000000000000010000000100001001100
00000000000000000000000000000000000100010100000100010
00000000000000000000000000000000001000010000100010100
00000000000000000000000000000000000010100010010000100
00000000000000000000000000000000001000100000010010100
00000000000000000000000000000000000100001001000100100
00000000000000000000000000000000000010010100100000010
00000000000000000000000000000000000100100100000001001
00000000000000000000000000000000000100010010000100100
00000000000000000000000000000000000001001100001100000
00000000000000000000000000000000001000001000010001010
00000000000000000000000000000000000010001001010000010
00000000000000000000000000000000000010010001010000001
00000000000000000000000000000000000100001100000001100
00000000000000000000000000000000000001001010010001000
00000000000000000000000000000000000100010010000001001
00000000000000000000000000000000001000010000001010001
00000000000000000000000000000000000010100100001000001
00000000000000000000000000000000000001010100100010000
00000000000000000000000000000000010000000001010010001
00000000000000000000000000000000000100001100000100001
00000000000000000000000000000000010000000010001010001
00000000000000000000000000000000000001100100010010000
00000000000000000000000000000000001000100000001001100
00000000000000000000000000000000000010100001100000001
00000000000000000000000000000000000001100010010100000
00000000000000000000000000000000001000100000100001001
00000000000000000000000000000000001000100000100010010
00000000000000000000000000000000000010001100100000001
00000000000000000000000000000000000010001100001000100
00000000000000000000000000000000000001001001010010000
00000000000000000000000000000000000001100010100010000
00000000000000000000000000000000000100001010000010001
00000000000000000000000000000000010000000010100010100
00000000000000000000000000000000000010010100010000100
00000000000000000000000000000000010000000001010001010
00000000000000000000000000000000000010001001100000100
00000000000000000000000000000000000001001010001010000
00000000000000000000000000000000010000000001100001100
00000000000000000000000000000000000100100010000100010
00000000000000000000000000000000000001001001100100000
00000000000000000000000000000000001000100000010100010
00000000000000000000000000000000001000010000010001001
00000000000000000000000000000000000100010100000010100
00000000000000000000000000000000000010100001001000100
00000000000000000000000000000000000001001100100001000
00000000000000000000000000000000010000000010001001010
00000000000000000000000000000000000100001010000001010
00000000000000000000000000000000001000001000001100100
00000000000000000000000000000000000010010010001000001
00000000000000000000000000000000001000010000100100010
00000000000000000000000000000000000001010010100100000
00000000000000000000000000000000010000000100010010100
00000000000000000000000000000000000001010001010001000
00000000000000000000000000000000010000000010010100100
00000000000000000000000000000000000001100001001100000
00000000000000000000000000000000010000000100001100001
00000000000000000000000000000000010000000010010001001
00000000000000000000000000000000000001010010001001000
00000000000000000000000000000000000010001010001000010
00000000000000000000000000000000010000000100100010010
00000000000000000000000000000000010000000001001100100
00000000000000000000000000000000001000001000100100001
00000000000000000000000000000000000001100100001001000
00000000000000000000000000000000010000000010100100010
00000000000000000000000000000000001000100000001100001
00000000000000000000000000000000000100100010000010100
00000000000000000000000000000000000100100001000001100
00000000000000000000000000000000000010010010100000100
00000000000000000000000000000000000010100100010000010
00000000000000000000000000000000001000001000010010001
00000000000000000000000000000000000100100001000100001




=== State Orbit 19 =====================
size : 90
repr state: 00000000000000000000000000000000000000100100010010001
lex min decimal: 5355889242420898999
states:
00000000000000000000000000000000000000010001001100010
00000000000000000000000000000000000000010010100100001
00000000000000000000000000000000000000100010001001100
00000000000000000000000000000000000000010001100010100
00000000000000000000000000000000000000010010001001100
00000000000000000000000000000000000000100010001100001
00000000000000000000000000000000000000001100010010100
00000000000000000000000000000000000000100001010100010
00000000000000000000000000000000000000100010010001100
00000000000000000000000000000000000000100010001010100
00000000000000000000000000000000000000001100010001100
00000000000000000000000000000000000000100001001010100
00000000000000000000000000000000000000010001100010001
00000000000000000000000000000000000000100100010001010
00000000000000000000000000000000000000001010100010001
00000000000000000000000000000000000000010010001100100
00000000000000000000000000000000000000010010001100001
00000000000000000000000000000000000000010100100001001
00000000000000000000000000000000000000001010010100100
00000000000000000000000000000000000000100100001010001
00000000000000000000000000000000000000010100001100001
00000000000000000000000000000000000000001010100010100
00000000000000000000000000000000000000100001100001010
00000000000000000000000000000000000000010001001100100
00000000000000000000000000000000000000010100010001001
00000000000000000000000000000000000000100001010001010
00000000000000000000000000000000000000100001010100001
00000000000000000000000000000000000000100010010001001
00000000000000000000000000000000000000100001100010001
00000000000000000000000000000000000000001010100001100
00000000000000000000000000000000000000001100100010001
00000000000000000000000000000000000000010001010001100
00000000000000000000000000000000000000100100010010001
00000000000000000000000000000000000000100100001010010
00000000000000000000000000000000000000010100001010100
00000000000000000000000000000000000000010010100001001
00000000000000000000000000000000000000001010001100010
00000000000000000000000000000000000000001010100100010
00000000000000000000000000000000000000010001010100001
00000000000000000000000000000000000000010001100100010
00000000000000000000000000000000000000100010001100010
00000000000000000000000000000000000000010001001010100
00000000000000000000000000000000000000001010010100001
00000000000000000000000000000000000000001001100010100
00000000000000000000000000000000000000001001100010010
00000000000000000000000000000000000000001100010001010
00000000000000000000000000000000000000001010001100100
00000000000000000000000000000000000000001100001010010
00000000000000000000000000000000000000001010010001100
00000000000000000000000000000000000000010001010100100
00000000000000000000000000000000000000010100001001100
00000000000000000000000000000000000000001100001010100
00000000000000000000000000000000000000001001100100010
00000000000000000000000000000000000000010001100001100
00000000000000000000000000000000000000010100001010001
00000000000000000000000000000000000000100001010010001
00000000000000000000000000000000000000100001001100010
00000000000000000000000000000000000000100001010010100
00000000000000000000000000000000000000100010100010001
00000000000000000000000000000000000000010100001001010
00000000000000000000000000000000000000001100100010010
00000000000000000000000000000000000000001010100001010
00000000000000000000000000000000000000100010010100001
00000000000000000000000000000000000000010001100100001
00000000000000000000000000000000000000001100010010001
00000000000000000000000000000000000000100001001010010
00000000000000000000000000000000000000010100001100010
00000000000000000000000000000000000000001001010010100
00000000000000000000000000000000000000010010100001100
00000000000000000000000000000000000000100010100001010
00000000000000000000000000000000000000001100010100001
00000000000000000000000000000000000000010100010001100
00000000000000000000000000000000000000010100100001010
00000000000000000000000000000000000000010100100010001
00000000000000000000000000000000000000100100001001010
00000000000000000000000000000000000000100001010001100
00000000000000000000000000000000000000001100001100010
00000000000000000000000000000000000000001010001010100
00000000000000000000000000000000000000010001100001010
00000000000000000000000000000000000000001001010100100
00000000000000000000000000000000000000100001100010010
00000000000000000000000000000000000000100010001010001
00000000000000000000000000000000000000010100010100001
00000000000000000000000000000000000000001100010100010
00000000000000000000000000000000000000001001010100010
00000000000000000000000000000000000000001100100001010
00000000000000000000000000000000000000100100010001001
00000000000000000000000000000000000000100010001001010
00000000000000000000000000000000000000001010100100001
00000000000000000000000000000000000000100010100001001




=== State Orbit 20 =====================
size : 180
repr state: 00000000000000000000000000000000000001100100010001000
lex min decimal: 42262888188722113719
states:
00000000000000000000000000000000010000000010001100100
00000000000000000000000000000000000001010001100010000
00000000000000000000000000000000001000001000100010100
00000000000000000000000000000000010000000100001001010
00000000000000000000000000000000001000001000001100010
00000000000000000000000000000000000001100010001100000
00000000000000000000000000000000010000000001010100010
00000000000000000000000000000000001000100000010010001
00000000000000000000000000000000000010001010010000100
00000000000000000000000000000000010000000010010001100
00000000000000000000000000000000000010010100001000001
00000000000000000000000000000000000001001010100001000
00000000000000000000000000000000000100100100000001010
00000000000000000000000000000000000010100010001000010
00000000000000000000000000000000001000100000001001010
00000000000000000000000000000000010000000001100100010
00000000000000000000000000000000000100100001000100010
00000000000000000000000000000000000001010010100001000
00000000000000000000000000000000000001001010100010000
00000000000000000000000000000000000010100010010000001
00000000000000000000000000000000010000000001010100001
00000000000000000000000000000000000100010100000001100
00000000000000000000000000000000010000000001010100100
00000000000000000000000000000000001000010000100001100
00000000000000000000000000000000001000010000001010100
00000000000000000000000000000000000010001001100000010
00000000000000000000000000000000000100100010000001010
00000000000000000000000000000000010000000010001100010
00000000000000000000000000000000000010010001100000010
00000000000000000000000000000000000001100100010001000
00000000000000000000000000000000010000000100010001100
00000000000000000000000000000000000001010001100100000
00000000000000000000000000000000001000100000001010100
00000000000000000000000000000000000100100010000001100
00000000000000000000000000000000000001010010001100000
00000000000000000000000000000000001000001000001010100
00000000000000000000000000000000010000000100001010100
00000000000000000000000000000000000100100010000010001
00000000000000000000000000000000001000001000100100010
00000000000000000000000000000000000001001100010100000
00000000000000000000000000000000001000001000010001100
00000000000000000000000000000000000010100010001000001
00000000000000000000000000000000000010001100010000001
00000000000000000000000000000000000001001001100010000
00000000000000000000000000000000010000000010100001100
00000000000000000000000000000000000100010001000100010
00000000000000000000000000000000000010010001001000100
00000000000000000000000000000000000010001010001000100
00000000000000000000000000000000001000010000001001100
00000000000000000000000000000000001000100000010001100
00000000000000000000000000000000001000100000010001010
00000000000000000000000000000000000100010100000010001
00000000000000000000000000000000001000100000001010010
00000000000000000000000000000000000010010010001000100
00000000000000000000000000000000000100100100000010001
00000000000000000000000000000000010000000010001100001
00000000000000000000000000000000000001010001001100000
00000000000000000000000000000000000100001010000100001
00000000000000000000000000000000001000100000001010001
00000000000000000000000000000000000010100100010000001
00000000000000000000000000000000000010010100001000010
00000000000000000000000000000000000100010001000010100
00000000000000000000000000000000000100100010000001001
00000000000000000000000000000000000010010001100000001
00000000000000000000000000000000001000100000001100010
00000000000000000000000000000000001000010000001100010
00000000000000000000000000000000001000010000100100001
00000000000000000000000000000000000010100001010000100
00000000000000000000000000000000000001010100001010000
00000000000000000000000000000000010000000100001010001
00000000000000000000000000000000000001010100100001000
00000000000000000000000000000000000010001010100000001
00000000000000000000000000000000000010010001010000100
00000000000000000000000000000000010000000001100010010
00000000000000000000000000000000000001001100010001000
00000000000000000000000000000000000010100010100000001
00000000000000000000000000000000000100100001000010100
00000000000000000000000000000000000100010100000001010
00000000000000000000000000000000001000001000010010100
00000000000000000000000000000000000010001100010000010
00000000000000000000000000000000000001001100001010000
00000000000000000000000000000000000010010001100000100
00000000000000000000000000000000010000000001100010100
00000000000000000000000000000000010000000001001010100
00000000000000000000000000000000000100001010000100100
00000000000000000000000000000000010000000010100100001
00000000000000000000000000000000001000001000100001010
00000000000000000000000000000000001000010000001100001
00000000000000000000000000000000000001010001100001000
00000000000000000000000000000000000010001100010000100
00000000000000000000000000000000000100001100000010100
00000000000000000000000000000000010000000010100001001
00000000000000000000000000000000000100001100000100010
00000000000000000000000000000000000100010001000001100
00000000000000000000000000000000001000010000100010001
00000000000000000000000000000000001000001000100010001
00000000000000000000000000000000000010001010100000010
00000000000000000000000000000000000001001001010100000
00000000000000000000000000000000000010010100001000100
00000000000000000000000000000000000010100001010000001
00000000000000000000000000000000010000000010010100001
00000000000000000000000000000000010000000100100001010
00000000000000000000000000000000001000100000010001001
00000000000000000000000000000000010000000100001100010
00000000000000000000000000000000000010100001100000010
00000000000000000000000000000000000100001100000010001
00000000000000000000000000000000010000000001100001010
00000000000000000000000000000000000001100001100010000
00000000000000000000000000000000001000010000100001010
00000000000000000000000000000000000100100001000001010
00000000000000000000000000000000000001100001010001000
00000000000000000000000000000000010000000001001100010
00000000000000000000000000000000000010001010100000100
00000000000000000000000000000000010000000001100010001
00000000000000000000000000000000000010010100100000001
00000000000000000000000000000000010000000010001001100
00000000000000000000000000000000010000000001010010100
00000000000000000000000000000000010000000010100010001
00000000000000000000000000000000010000000100010010001
00000000000000000000000000000000000100010001000100100
00000000000000000000000000000000010000000100001010010
00000000000000000000000000000000001000010000010001100
00000000000000000000000000000000000001001100010010000
00000000000000000000000000000000000010100100001000010
00000000000000000000000000000000010000000100010100001
00000000000000000000000000000000000100010010000100001
00000000000000000000000000000000000001100010001001000
00000000000000000000000000000000000001100001001010000
00000000000000000000000000000000000100010010000001100
00000000000000000000000000000000001000100000100010001
00000000000000000000000000000000000001010100010001000
00000000000000000000000000000000000010100010001000100
00000000000000000000000000000000000010100001001000010
00000000000000000000000000000000000001010100001001000
00000000000000000000000000000000000001001100100010000
00000000000000000000000000000000000001001010001100000
00000000000000000000000000000000010000000010100001010
00000000000000000000000000000000001000010000001100100
00000000000000000000000000000000000100010001000100001
00000000000000000000000000000000000100001001000100010
00000000000000000000000000000000000100001100000010010
00000000000000000000000000000000000001100001010010000
00000000000000000000000000000000001000100000010100001
00000000000000000000000000000000000100001001000010100
00000000000000000000000000000000000001100010100001000
00000000000000000000000000000000010000000100010001010
00000000000000000000000000000000000100010100000100001
00000000000000000000000000000000000010010010100000001
00000000000000000000000000000000010000000010001010100
00000000000000000000000000000000000001100010010001000
00000000000000000000000000000000010000000100010001001
00000000000000000000000000000000000100100001000010001
00000000000000000000000000000000000100010100000001001
00000000000000000000000000000000000100001010000001100
00000000000000000000000000000000000100001010000010100
00000000000000000000000000000000000010010100010000001
00000000000000000000000000000000001000001000010100100
00000000000000000000000000000000000001001010100100000
00000000000000000000000000000000000001100100001010000
00000000000000000000000000000000000100001010000100010
00000000000000000000000000000000001000010000010100001
00000000000000000000000000000000010000000100100010001
00000000000000000000000000000000001000010000100001001
00000000000000000000000000000000000001010001010100000
00000000000000000000000000000000000100001100000001010
00000000000000000000000000000000001000001000010100001
00000000000000000000000000000000000010001100100000010
00000000000000000000000000000000000100100001000010010
00000000000000000000000000000000000001001010010100000
00000000000000000000000000000000000001100001010100000
00000000000000000000000000000000001000001000010100010
00000000000000000000000000000000000010001001010000100
00000000000000000000000000000000001000100000100001010
00000000000000000000000000000000000100100010000100001
00000000000000000000000000000000001000001000100010010
00000000000000000000000000000000000010001100001000010
00000000000000000000000000000000000001100010001010000
00000000000000000000000000000000000010100001010000010
00000000000000000000000000000000010000000001010001100
00000000000000000000000000000000000001010100001100000




=== State Orbit 21 =====================
size : 60
repr state: 00000000000000000000000000000000000111100010000000000
lex min decimal: 264020133840445336759
states:
00000000000000000000000000000000011100000000000100010
00000000000000000000000000000000011010000000010000100
00000000000000000000000000000000011100000000000010001
00000000000000000000000000000000010011000100001000000
00000000000000000000000000000000001110010000000000001
00000000000000000000000000000000001110100000000000010
00000000000000000000000000000000011010000000010000001
00000000000000000000000000000000001101001000000100000
00000000000000000000000000000000010110000001000000010
00000000000000000000000000000000011010000000001000100
00000000000000000000000000000000010101000100000010000
00000000000000000000000000000000010011000001010000000
00000000000000000000000000000000011001000000001100000
00000000000000000000000000000000011010000000100000001
00000000000000000000000000000000010011000100010000000
00000000000000000000000000000000001101100000000010000
00000000000000000000000000000000010110000100000000001
00000000000000000000000000000000010011000001100000000
00000000000000000000000000000000001011010000100000000
00000000000000000000000000000000010110000100000000010
00000000000000000000000000000000011100000000000001100
00000000000000000000000000000000011001000000010001000
00000000000000000000000000000000001110001000000000100
00000000000000000000000000000000011010000000100000010
00000000000000000000000000000000001110100000000000001
00000000000000000000000000000000001101010000000100000
00000000000000000000000000000000010101000001000100000
00000000000000000000000000000000010101000001000010000
00000000000000000000000000000000000111100010000000000
00000000000000000000000000000000000111010100000000000
00000000000000000000000000000000010110000010000000001
00000000000000000000000000000000011001000000100001000
00000000000000000000000000000000001101010000000001000
00000000000000000000000000000000011100000000000010100
00000000000000000000000000000000010101000100000001000
00000000000000000000000000000000011010000000001000010
00000000000000000000000000000000000111001010000000000
00000000000000000000000000000000011001000000001010000
00000000000000000000000000000000001011001000010000000
00000000000000000000000000000000001101100000000001000
00000000000000000000000000000000011001000000010100000
00000000000000000000000000000000011001000000100010000
00000000000000000000000000000000011100000000000100001
00000000000000000000000000000000000111001100000000000
00000000000000000000000000000000010101000010000001000
00000000000000000000000000000000001110010000000000100
00000000000000000000000000000000010110000010000000100
00000000000000000000000000000000001011100000001000000
00000000000000000000000000000000010011000010100000000
00000000000000000000000000000000001011010000001000000
00000000000000000000000000000000010110000001000000100
00000000000000000000000000000000001101001000000010000
00000000000000000000000000000000000111010001000000000
00000000000000000000000000000000001110001000000000010
00000000000000000000000000000000001011001000100000000
00000000000000000000000000000000011100000000000001010
00000000000000000000000000000000010101000010000100000
00000000000000000000000000000000010011000010001000000
00000000000000000000000000000000000111100001000000000
00000000000000000000000000000000001011100000010000000




=== State Orbit 22 =====================
size : 60
repr state: 00000000000000000000000000000000000011100010001000000
lex min decimal: 116734411626920635575
states:
00000000000000000000000000000000010001000100001010000
00000000000000000000000000000000000011100010001000000
00000000000000000000000000000000010001000001010100000
00000000000000000000000000000000000110010001000000100
00000000000000000000000000000000000101001100000010000
00000000000000000000000000000000001100100000000001010
00000000000000000000000000000000010100000100000001010
00000000000000000000000000000000000110001010000000100
00000000000000000000000000000000000110010100000000001
00000000000000000000000000000000000101010100000001000
00000000000000000000000000000000011000000000100010001
00000000000000000000000000000000000101100001000010000
00000000000000000000000000000000001010001000100000010
00000000000000000000000000000000000101100010000001000
00000000000000000000000000000000000011010001100000000
00000000000000000000000000000000001001010000100001000
00000000000000000000000000000000001010001000010000100
00000000000000000000000000000000000110100010000000001
00000000000000000000000000000000010010000001100000010
00000000000000000000000000000000001010100000010000001
00000000000000000000000000000000001010010000100000001
00000000000000000000000000000000000101010001000100000
00000000000000000000000000000000010010000010001000100
00000000000000000000000000000000001010100000001000010
00000000000000000000000000000000001001100000010001000
00000000000000000000000000000000010001000001100010000
00000000000000000000000000000000001100100000000010001
00000000000000000000000000000000010010000100010000001
00000000000000000000000000000000010100000010000001100
00000000000000000000000000000000001001001000100010000
00000000000000000000000000000000001100010000000001100
00000000000000000000000000000000001001001000010100000
00000000000000000000000000000000010100000100000010001
00000000000000000000000000000000011000000000010001100
00000000000000000000000000000000000011010100001000000
00000000000000000000000000000000001100010000000100001
00000000000000000000000000000000000110100001000000010
00000000000000000000000000000000000011001100010000000
00000000000000000000000000000000000110001100000000010
00000000000000000000000000000000010010000010100000001
00000000000000000000000000000000010100000001000100010
00000000000000000000000000000000001100001000000100010
00000000000000000000000000000000010001000010001100000
00000000000000000000000000000000001100001000000010100
00000000000000000000000000000000001001100000001010000
00000000000000000000000000000000010010000100001000010
00000000000000000000000000000000000011100001010000000
00000000000000000000000000000000010010000001010000100
00000000000000000000000000000000011000000000001100010
00000000000000000000000000000000001001010000001100000
00000000000000000000000000000000000011001010100000000
00000000000000000000000000000000010001000100010001000
00000000000000000000000000000000001010010000001000100
00000000000000000000000000000000010001000010100001000
00000000000000000000000000000000011000000000001010100
00000000000000000000000000000000011000000000010100001
00000000000000000000000000000000010100000010000100001
00000000000000000000000000000000010100000001000010100
00000000000000000000000000000000000101001010000100000
00000000000000000000000000000000011000000000100001010



[QRM NOTE]: Time elapsed since start: 18.522 seconds

[QRM NOTE]: Time elapsed since last: 11.499 seconds

[QRM NOTE]: Peak memory: 1691567 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=5,value=3]

================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 30.837 seconds

[QRM NOTE]: Time elapsed since last: 12.315 seconds

[QRM NOTE]: Peak memory: 1470712 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


====================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=4]

====================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus.node_3_value_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus.node_3_value_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus.node_3_value_4.finite.cpp toy_consensus.node_3_value_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus.node_3_value_4.finite.o toy_consensus.node_3_value_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 24

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 6.348 seconds

[QRM NOTE]: Time elapsed since last: 6.348 seconds

[QRM NOTE]: Peak memory: 1198652 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        177

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 167


===========================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=4]

===========================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: didNotVote('node',)
predicate: chosenAt('quorum', 'value')
predicate: decision('value',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node1,value3)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node0_node2,value3)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'chosenAt(quorum__node1_node2,value3)', 'decision(value0)', 'decision(value1)', 'decision(value2)', 'decision(value3)', 'didNotVote(node0)', 'didNotVote(node1)', 'didNotVote(node2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)']
representative states : 14680491, 6422955, 276833195, 73283019691, 73299796907, 268706731, 285483947, 293610411, 2245035, 149931


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000111000000000000
lex min decimal: 14680491
states:
0000000000000000111000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000000011100000000000
lex min decimal: 6422955
states:
0000000000000000011001000000000
0000000000000000011100000000000
0000000000000000011010000000000
0000000000000000011000100000000
0000000000000000101000001000000
0000000000000000101000000100000
0000000000000000110000000001000
0000000000000000110000000000100
0000000000000000110000000000001
0000000000000000110000000000010
0000000000000000101000000010000
0000000000000000101000010000000




=== State Orbit 2 =====================
size : 12
repr state: 1000000000000000001100010000000
lex min decimal: 276833195
states:
0000000001000000100000001000100
0010000000000000001001000100000
0100000000000000001010001000000
0000100000000000010100000001000
0000000010000000100000010001000
0000000100000000010000100000001
1000000000000000001100010000000
0000000000100000100000000100010
0001000000000000001000100010000
0000001000000000010001000000010
0000000000010000100000000010001
0000010000000000010010000000100




=== State Orbit 3 =====================
size : 4
repr state: 1000100010000000000100010001000
lex min decimal: 73283019691
states:
0100010001000000000010001000100
0001000100010000000000100010001
0010001000100000000001000100010
1000100010000000000100010001000




=== State Orbit 4 =====================
size : 4
repr state: 1000100010001000000100010001000
lex min decimal: 73299796907
states:
1000100010001000000100010001000
0001000100010001000000100010001
0010001000100010000001000100010
0100010001000100000010001000100




=== State Orbit 5 =====================
size : 36
repr state: 1000000000000000000100010000100
lex min decimal: 268706731
states:
0000001000000000000001000010010
0100000000000000000010001001000
0000000001000000000100001000100
0000000000100000000100000100010
0000000010000000000001010001000
0010000000000000000001000100100
0000000000010000000100000010001
1000000000000000000100010000100
0000001000000000000001010000010
0010000000000000000001000101000
1000000000000000000100010000010
0100000000000000000010001000010
0001000000000000000000100011000
0000000010000000000010010001000
0000100000000000000100001001000
0000001000000000000001001000010
0000000000100000000000100100010
0100000000000000000010001000001
0000000000100000000010000100010
0000010000000000000010000010100
0000000100000000000000100100001
0010000000000000000001000100001
0000010000000000000010000100100
0000010000000000000010010000100
0000000100000000000000101000001
0001000000000000000000100010100
0001000000000000000000100010010
0000000001000000000001001000100
0000000000010000000010000010001
0000000000010000000001000010001
0000000001000000000000101000100
1000000000000000000100010000001
0000000100000000000000110000001
0000100000000000000100000011000
0000100000000000000100000101000
0000000010000000000000110001000




=== State Orbit 6 =====================
size : 36
repr state: 1000000000001000000100010000100
lex min decimal: 285483947
states:
0000000000010001000001000010001
0000100000001000000100000011000
0000010000000100000010000100100
0000100000001000000100000101000
0000000010001000000000110001000
0000000001000100000000101000100
0000001000000010000001010000010
0000000000100010000100000100010
0000000000010001000100000010001
0100000000000100000010001000010
0000001000000010000001000010010
0100000000000100000010001001000
0000000100000001000000100100001
0000000000100010000010000100010
0010000000000010000001000101000
0000000010001000000001010001000
0000000100000001000000110000001
0000000000100010000000100100010
0000000000010001000010000010001
0000001000000010000001001000010
1000000000001000000100010000100
1000000000001000000100010000001
0000000001000100000100001000100
0000000001000100000001001000100
0010000000000010000001000100001
0010000000000010000001000100100
0001000000000001000000100010100
0000000010001000000010010001000
0001000000000001000000100011000
0100000000000100000010001000001
0000010000000100000010010000100
0000000100000001000000101000001
0001000000000001000000100010010
1000000000001000000100010000010
0000100000001000000100001001000
0000010000000100000010000010100




=== State Orbit 7 =====================
size : 12
repr state: 1000000000001000001100010000000
lex min decimal: 293610411
states:
0000000010001000100000010001000
0100000000000100001010001000000
0000010000000100010010000000100
0000000000100010100000000100010
0000000000010001100000000010001
0000000100000001010000100000001
0000100000001000010100000001000
0000001000000010010001000000010
0000000001000100100000001000100
0001000000000001001000100010000
1000000000001000001100010000000
0010000000000010001001000100000




=== State Orbit 8 =====================
size : 36
repr state: 0000000000000000001100001000000
lex min decimal: 2245035
states:
0000000000000000010001000001000
0000000000000000001100000010000
0000000000000000100000001000001
0000000000000000001010010000000
0000000000000000001000101000000
0000000000000000010000100001000
0000000000000000001010000100000
0000000000000000010100000000100
0000000000000000010000100000010
0000000000000000100000001000010
0000000000000000001001001000000
0000000000000000001000100100000
0000000000000000100000000100001
0000000000000000001010000010000
0000000000000000100000010000100
0000000000000000001100000100000
0000000000000000010001000000001
0000000000000000010010000000001
0000000000000000001000110000000
0000000000000000001001000010000
0000000000000000010000100000100
0000000000000000010001000000100
0000000000000000100000010000010
0000000000000000010100000000001
0000000000000000100000001001000
0000000000000000010010000000010
0000000000000000100000000101000
0000000000000000001001010000000
0000000000000000010010000001000
0000000000000000100000000011000
0000000000000000100000000010100
0000000000000000100000010000001
0000000000000000100000000010010
0000000000000000010100000000010
0000000000000000100000000100100
0000000000000000001100001000000




=== State Orbit 9 =====================
size : 24
repr state: 0000000000000000000100001000010
lex min decimal: 149931
states:
0000000000000000000001001001000
0000000000000000000010000010010
0000000000000000000000110000100
0000000000000000000001010000100
0000000000000000000000101000010
0000000000000000000100001000010
0000000000000000000010000100001
0000000000000000000100000010010
0000000000000000000010010000001
0000000000000000000000100100100
0000000000000000000010000101000
0000000000000000000001000011000
0000000000000000000100000010100
0000000000000000000100000100001
0000000000000000000000101001000
0000000000000000000000100101000
0000000000000000000010000011000
0000000000000000000100000100100
0000000000000000000100001000001
0000000000000000000010010000010
0000000000000000000001000010100
0000000000000000000001010000001
0000000000000000000000110000010
0000000000000000000001001000001



[QRM NOTE]: Time elapsed since start: 7.085 seconds

[QRM NOTE]: Time elapsed since last: 0.737 seconds

[QRM NOTE]: Peak memory: 1287171 bytes


================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus: node=3,value=4]

================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.823 seconds

[QRM NOTE]: Time elapsed since last: 0.738 seconds

[QRM NOTE]: Peak memory: 375843 bytes

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 10: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 15: def2
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 16: def3

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 23: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 28: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 18: init[after4]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 42: def_didNotVote ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 43: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 44: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 45: invar_21 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 24: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy: line 29: assumption

OK
[IVY_CHECK RESULT]: PASS


********************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus.ivy

********************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/toy_consensus.node_3_value_3.0.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 135.269 seconds

[QRM NOTE]: Time elapsed since last: 135.269 seconds

