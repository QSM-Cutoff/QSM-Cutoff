
********************************************************

	[QRM]: ivybench/sym/ivy/lockserv.ivy

********************************************************


************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/lockserv: node=1

************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv.ivy -s node=1 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lockserv.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv: node=1]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lockserv.node_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lockserv.node_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lockserv.node_1.finite.cpp lockserv.node_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lockserv.node_1.finite.o lockserv.node_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 5

[FW NOTE]: symmetric group order: 1

[QRM NOTE]: Time elapsed since start: 6.433 seconds

[QRM NOTE]: Time elapsed since last: 6.433 seconds

[QRM NOTE]: Peak memory: 1173703 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        8

[FW NOTE]: number of dfs representative states:     8

[FW NOTE]: number of dfs non-representative states: 0


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv: node=1]

=======================================================================================

sort: node=['node0']
predicate: unlock_msg('node',)
predicate: holds_lock('node',)
predicate: server_holds_lock()
predicate: lock_msg('node',)
predicate: grant_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'holds_lock(node0)', 'lock_msg(node0)', 'server_holds_lock()', 'unlock_msg(node0)']
representative states : 2, 6, 16, 20, 12, 5, 8, 1


=== State Orbit 0 =====================
size : 1
repr state: 00010
lex min decimal: 2
states:
00010




=== State Orbit 1 =====================
size : 1
repr state: 00110
lex min decimal: 6
states:
00110




=== State Orbit 2 =====================
size : 1
repr state: 10000
lex min decimal: 16
states:
10000




=== State Orbit 3 =====================
size : 1
repr state: 10100
lex min decimal: 20
states:
10100




=== State Orbit 4 =====================
size : 1
repr state: 01100
lex min decimal: 12
states:
01100




=== State Orbit 5 =====================
size : 1
repr state: 00101
lex min decimal: 5
states:
00101




=== State Orbit 6 =====================
size : 1
repr state: 01000
lex min decimal: 8
states:
01000




=== State Orbit 7 =====================
size : 1
repr state: 00001
lex min decimal: 1
states:
00001



[QRM NOTE]: Time elapsed since start: 6.512 seconds

[QRM NOTE]: Time elapsed since last: 0.079 seconds

[QRM NOTE]: Peak memory: 1203677 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.515 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 154087 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lockserv: node=1]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lockserv: node=1]

==================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1---1
0     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : ---11
1     : ['server_holds_lock()', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -1--1
2     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 1--1-
3     : ['grant_msg(node0)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : -1-1-
4     : ['holds_lock(node0)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 11---
5     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 00-00
6     : ['~grant_msg(node0)', '~holds_lock(node0)', '~server_holds_lock()', '~unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 7

[PRIME NOTE]: number of orbits before merging: 7

[PRIME NOTE]: number of primes: 7

[QRM NOTE]: Time elapsed since start: 6.526 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1222663 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lockserv: node=1]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6]
 solution : []

Essensial at level 0 : {0, 1, 2, 3, 4, 5, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]

[QRM NOTE]: Time elapsed since start: 6.527 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 175047 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lockserv: node=1]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1---1
0     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'unlock_msg(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'unlock_msg(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$unlock_msg$0': node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~unlock_msg(NODE0) | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : ---11
1     : ['server_holds_lock()', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['server_holds_lock', 'unlock_msg(node0)']

sign_func_name2args: {'0$server_holds_lock': [[]], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$unlock_msg$0$0}

part_sig: ('node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['server_holds_lock', 'unlock_msg(node0)']

func_name2symbol:  {'server_holds_lock': Const('server_holds_lock', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'server_holds_lock': [], 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$server_holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$server_holds_lock': [[]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['server_holds_lock', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~server_holds_lock | ~unlock_msg(NODE0)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -1--1
2     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'unlock_msg(node0)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'unlock_msg(node0)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0',)),), 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0; node$0$unlock_msg$0': node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE0)


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 1--1-
3     : ['grant_msg(node0)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'server_holds_lock']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$server_holds_lock': [[]]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$grant_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0}

part_sig: ('node$0$grant_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'server_holds_lock']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'server_holds_lock': Const('server_holds_lock', BooleanSort())}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'server_holds_lock': []}

sign_func_name2count:  {'0$grant_msg': 1, '0$server_holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$server_holds_lock': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['server_holds_lock', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~server_holds_lock | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : -1-1-
4     : ['holds_lock(node0)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'server_holds_lock']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$server_holds_lock': [[]]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0}

part_sig: ('node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'server_holds_lock']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'server_holds_lock': Const('server_holds_lock', BooleanSort())}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0',)),), 'server_holds_lock': []}

sign_func_name2count:  {'0$holds_lock': 1, '0$server_holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$server_holds_lock': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['server_holds_lock', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~server_holds_lock | ~holds_lock(NODE0)


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 11---
5     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'holds_lock(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'holds_lock(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'holds_lock': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0; node$0$holds_lock$0': node$0$grant_msg$0$0; node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~holds_lock(NODE0) | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 00-00
6     : ['~grant_msg(node0)', '~holds_lock(node0)', '~server_holds_lock()', '~unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~grant_msg(node0)', '~holds_lock(node0)', '~server_holds_lock', '~unlock_msg(node0)']

sign_func_name2args: {'1$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '1$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '1$server_holds_lock': [[]], '1$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0]}

sig2const: {'node$1$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$1$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$1$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0}

part_sig: ('node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['~grant_msg(node0)', '~holds_lock(node0)', '~server_holds_lock', '~unlock_msg(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'server_holds_lock': Const('server_holds_lock', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0',)),), 'holds_lock': (EnumeratedSort('node', ('node0',)),), 'server_holds_lock': [], 'unlock_msg': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'1$grant_msg': 1, '1$holds_lock': 1, '1$server_holds_lock': 1, '1$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0]}

	identical_single_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '1$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '1$server_holds_lock': [[]], '1$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~holds_lock(NODE0)', '~server_holds_lock', '~unlock_msg(NODE0)', '~grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. holds_lock(NODE0) | server_holds_lock | unlock_msg(NODE0) | grant_msg(NODE0)


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lockserv: node=1]

==========================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1---1
0     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~unlock_msg(NODE0) | ~grant_msg(NODE0)
qcost : 3




=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : ---11
1     : ['server_holds_lock()', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~server_holds_lock | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -1--1
2     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 1--1-
3     : ['grant_msg(node0)', 'server_holds_lock()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~server_holds_lock | ~grant_msg(NODE0)
qcost : 3




=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : -1-1-
4     : ['holds_lock(node0)', 'server_holds_lock()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~server_holds_lock | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 11---
5     : ['grant_msg(node0)', 'holds_lock(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~holds_lock(NODE0) | ~grant_msg(NODE0)
qcost : 3




=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 00-00
6     : ['~grant_msg(node0)', '~holds_lock(node0)', '~server_holds_lock()', '~unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 4
quantified form : forall NODE0. holds_lock(NODE0) | server_holds_lock | unlock_msg(NODE0) | grant_msg(NODE0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 6.612 seconds

[QRM NOTE]: Time elapsed since last: 0.085 seconds

[QRM NOTE]: Peak memory: 1842910 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lockserv: node=1]

=========================================================================


New level: 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6]


Solution : [0, 1, 2, 3, 4, 5, 6] has cost 23.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lockserv: node=1]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 23

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 1, 2, 3, 4, 5, 6] (length = 7)

invariant [invar_0] forall NODE0. ~unlock_msg(NODE0) | ~grant_msg(NODE0) # qcost: 3

invariant [invar_1] forall NODE0. ~server_holds_lock | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_2] forall NODE0. ~holds_lock(NODE0) | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_3] forall NODE0. ~server_holds_lock | ~grant_msg(NODE0) # qcost: 3

invariant [invar_4] forall NODE0. ~server_holds_lock | ~holds_lock(NODE0) # qcost: 3

invariant [invar_5] forall NODE0. ~holds_lock(NODE0) | ~grant_msg(NODE0) # qcost: 3

invariant [invar_6] forall NODE0. holds_lock(NODE0) | server_holds_lock | unlock_msg(NODE0) | grant_msg(NODE0) # qcost: 5




[QRM NOTE]: Time elapsed since start: 6.652 seconds

[QRM NOTE]: Time elapsed since last: 0.040 seconds

[QRM NOTE]: Peak memory: 1832172 bytes


===========================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/lockserv: node=1]

===========================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.659 seconds

[QRM NOTE]: Time elapsed since last: 0.007 seconds

[QRM NOTE]: Peak memory: 784535 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/lockserv: node=1]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/lockserv.node_1.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 70: invar_0
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 71: invar_1
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 72: invar_2
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 73: invar_3
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 74: invar_4
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 75: invar_5
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 76: invar_6

    The following action implementations are present:
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 32: implementation of recv_grant
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 23: implementation of recv_lock
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 46: implementation of recv_unlock
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 20: implementation of send_lock
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 39: implementation of unlock

    The following initializers are present:
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 11: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 70: invar_0 ... PASS
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 71: invar_1 ... PASS
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 72: invar_2 ... PASS
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 73: invar_3 ... PASS
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 74: invar_4 ... PASS
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 75: invar_5 ... PASS
        ivybench/sym/ivy/lockserv.node_1.0.ivy: line 76: invar_6 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:recv_grant
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 76: invar_6 ... PASS
        (internal) ext:recv_lock
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 76: invar_6 ... FAIL
        (internal) ext:recv_unlock
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 71: invar_1 ... FAIL
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 73: invar_3 ... FAIL
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 74: invar_4 ... FAIL
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 76: invar_6 ... PASS
        (internal) ext:send_lock
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 76: invar_6 ... PASS
        (internal) ext:unlock
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 76: invar_6 ... PASS

    The following program assertions are treated as assumptions:
        in action recv_lock when called from the environment:
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 24: assumption
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 25: assumption
        in action recv_grant when called from the environment:
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 33: assumption
        in action unlock when called from the environment:
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 40: assumption
        in action recv_unlock when called from the environment:
            ivybench/sym/ivy/lockserv.node_1.0.ivy: line 47: assumption

error: failed checks: 4
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 8.443 seconds

[QRM NOTE]: Time elapsed since last: 1.783 seconds

[QRM NOTE]: Peak memory: 834650 bytes


***************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/lockserv: node=1

***************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv.node_1.0.ivy -s node=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lockserv.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv: node=2]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lockserv.node_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lockserv.node_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lockserv.node_2.finite.cpp lockserv.node_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lockserv.node_2.finite.o lockserv.node_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 9

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 10

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.131 seconds

[QRM NOTE]: Time elapsed since last: 6.131 seconds

[QRM NOTE]: Peak memory: 1175751 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 6

[FW NOTE]: number of total reachable states:        28

[FW NOTE]: number of dfs representative states:     15

[FW NOTE]: number of dfs non-representative states: 13


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv: node=2]

=======================================================================================

sort: node=['node0', 'node1']
predicate: lock_msg('node',)
predicate: server_holds_lock()
predicate: grant_msg('node',)
predicate: holds_lock('node',)
predicate: unlock_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'grant_msg(node1)', 'holds_lock(node0)', 'holds_lock(node1)', 'lock_msg(node0)', 'lock_msg(node1)', 'server_holds_lock()', 'unlock_msg(node0)', 'unlock_msg(node1)']
representative states : 4, 12, 28, 144, 152, 56, 25, 48, 10, 128, 136, 40, 9, 32, 1


=== State Orbit 0 =====================
size : 1
repr state: 000000100
lex min decimal: 4
states:
000000100




=== State Orbit 1 =====================
size : 2
repr state: 000010100
lex min decimal: 12
states:
000001100
000010100




=== State Orbit 2 =====================
size : 1
repr state: 000011100
lex min decimal: 28
states:
000011100




=== State Orbit 3 =====================
size : 2
repr state: 100001000
lex min decimal: 144
states:
100001000
010010000




=== State Orbit 4 =====================
size : 2
repr state: 100011000
lex min decimal: 152
states:
100011000
010011000




=== State Orbit 5 =====================
size : 2
repr state: 001011000
lex min decimal: 56
states:
000111000
001011000




=== State Orbit 6 =====================
size : 2
repr state: 000011010
lex min decimal: 25
states:
000011001
000011010




=== State Orbit 7 =====================
size : 2
repr state: 001001000
lex min decimal: 48
states:
001001000
000110000




=== State Orbit 8 =====================
size : 2
repr state: 000001010
lex min decimal: 10
states:
000010001
000001010




=== State Orbit 9 =====================
size : 2
repr state: 100000000
lex min decimal: 128
states:
010000000
100000000




=== State Orbit 10 =====================
size : 2
repr state: 100010000
lex min decimal: 136
states:
010001000
100010000




=== State Orbit 11 =====================
size : 2
repr state: 001010000
lex min decimal: 40
states:
000101000
001010000




=== State Orbit 12 =====================
size : 2
repr state: 000010010
lex min decimal: 9
states:
000001001
000010010




=== State Orbit 13 =====================
size : 2
repr state: 001000000
lex min decimal: 32
states:
000100000
001000000




=== State Orbit 14 =====================
size : 2
repr state: 000000010
lex min decimal: 1
states:
000000001
000000010



[QRM NOTE]: Time elapsed since start: 6.266 seconds

[QRM NOTE]: Time elapsed since last: 0.135 seconds

[QRM NOTE]: Peak memory: 1213986 bytes


============================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lockserv: node=2]

============================================================================================================

Found a representative state in Rmin not in reachability: decimal: 408, binary: 110011000

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.282 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 176331 bytes

next size: node=2


************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/lockserv: node=2

************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv.ivy -s node=2 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lockserv.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.023 seconds

[QRM NOTE]: Time elapsed since last: 0.023 seconds

[QRM NOTE]: Peak memory: 6252 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lockserv: node=2]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lockserv: node=2]

==================================================================================


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 2
0 (*) : --1-----1
0     : ['holds_lock(node0)', 'unlock_msg(node1)']
1     : ---1---1-
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
2 (*) : ---1----1
2     : ['holds_lock(node1)', 'unlock_msg(node1)']
3     : --1----1-
3     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 4
num_suborbits: 2
4 (*) : 1-------1
4     : ['grant_msg(node0)', 'unlock_msg(node1)']
5     : -1-----1-
5     : ['grant_msg(node1)', 'unlock_msg(node0)']
6 (*) : -1------1
6     : ['grant_msg(node1)', 'unlock_msg(node1)']
7     : 1------1-
7     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
8 (*) : ------1-1
8     : ['server_holds_lock()', 'unlock_msg(node1)']
9     : ------11-
9     : ['server_holds_lock()', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
10 (*) : -------11
10     : ['unlock_msg(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
11 (*) : --11-----
11     : ['holds_lock(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 2
12 (*) : 1--1-----
12     : ['grant_msg(node0)', 'holds_lock(node1)']
13     : -11------
13     : ['grant_msg(node1)', 'holds_lock(node0)']
14 (*) : 1-1------
14     : ['grant_msg(node0)', 'holds_lock(node0)']
15     : -1-1-----
15     : ['grant_msg(node1)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
16 (*) : 11-------
16     : ['grant_msg(node0)', 'grant_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
17 (*) : -1----1--
17     : ['grant_msg(node1)', 'server_holds_lock()']
18     : 1-----1--
18     : ['grant_msg(node0)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
19 (*) : --1---1--
19     : ['holds_lock(node0)', 'server_holds_lock()']
20     : ---1--1--
20     : ['holds_lock(node1)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
21 (*) : 0000--000
21     : ['~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~server_holds_lock()', '~unlock_msg(node0)', '~unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 13

[PRIME NOTE]: number of primes: 22

[QRM NOTE]: Time elapsed since start: 0.037 seconds

[QRM NOTE]: Time elapsed since last: 0.014 seconds

[QRM NOTE]: Peak memory: 1103375 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lockserv: node=2]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 solution : []

Essensial at level 0 : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

[QRM NOTE]: Time elapsed since start: 0.039 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 54558 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lockserv: node=2]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 2
0 (*) : --1-----1
0     : ['holds_lock(node0)', 'unlock_msg(node1)']
1     : ---1---1-
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
2 (*) : ---1----1
2     : ['holds_lock(node1)', 'unlock_msg(node1)']
3     : --1----1-
3     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE1)', 'holds_lock(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$holds_lock$0$0 | node$0$unlock_msg$0$0

class signature: node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$holds_lock$0$0; node$0$unlock_msg$0$0

class signature: node$0$holds_lock$0$0; node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$holds_lock$0$0 | node$0$unlock_msg$0$0

class signature: node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$holds_lock$0$0; node$0$unlock_msg$0$0

class signature: node$0$holds_lock$0$0; node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~unlock_msg(NODE1) | ~holds_lock(NODE0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 4
num_suborbits: 2
4 (*) : 1-------1
4     : ['grant_msg(node0)', 'unlock_msg(node1)']
5     : -1-----1-
5     : ['grant_msg(node1)', 'unlock_msg(node0)']
6 (*) : -1------1
6     : ['grant_msg(node1)', 'unlock_msg(node1)']
7     : 1------1-
7     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'unlock_msg(NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$grant_msg$0$0 | node$0$unlock_msg$0$0

class signature: node$0$grant_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$grant_msg$0$0; node$0$unlock_msg$0$0

class signature: node$0$grant_msg$0$0; node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$grant_msg$0$0 | node$0$unlock_msg$0$0

class signature: node$0$grant_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$grant_msg$0$0; node$0$unlock_msg$0$0

class signature: node$0$grant_msg$0$0; node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE1)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
8 (*) : ------1-1
8     : ['server_holds_lock()', 'unlock_msg(node1)']
9     : ------11-
9     : ['server_holds_lock()', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['server_holds_lock', 'unlock_msg(node1)']

sign_func_name2args: {'0$server_holds_lock': [[]], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0}

part_sig: ('node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['server_holds_lock', 'unlock_msg(node1)']

func_name2symbol:  {'server_holds_lock': Const('server_holds_lock', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'server_holds_lock': [], 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$server_holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$server_holds_lock': [[]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['server_holds_lock', 'unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~server_holds_lock | ~unlock_msg(NODE0)


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
10 (*) : -------11
10     : ['unlock_msg(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['unlock_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$unlock_msg$0$1]}

sig2const: {'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

part_sig: ('node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1',)


---------- SigGenerator ----------

terms:  ['unlock_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$unlock_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~unlock_msg(NODE0)


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
11 (*) : --11-----
11     : ['holds_lock(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'holds_lock(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$1]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

part_sig: ('node$0$holds_lock$0$0 | node$0$holds_lock$0$1',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'holds_lock(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$holds_lock': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~holds_lock(NODE0)


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 2
12 (*) : 1--1-----
12     : ['grant_msg(node0)', 'holds_lock(node1)']
13     : -11------
13     : ['grant_msg(node1)', 'holds_lock(node0)']
14 (*) : 1-1------
14     : ['grant_msg(node0)', 'holds_lock(node0)']
15     : -1-1-----
15     : ['grant_msg(node1)', 'holds_lock(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'holds_lock(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$holds_lock': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$holds_lock$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'holds_lock(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'holds_lock(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$holds_lock': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)', 'holds_lock(NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)[]

sort partition signature: node$0$grant_msg$0$0 | node$0$holds_lock$0$0

class signature: node$0$grant_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)[]

sort partition signature: node$0$grant_msg$0$0; node$0$holds_lock$0$0

class signature: node$0$grant_msg$0$0; node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)[]

sort partition signature: node$0$grant_msg$0$0 | node$0$holds_lock$0$0

class signature: node$0$grant_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)[]

sort partition signature: node$0$grant_msg$0$0; node$0$holds_lock$0$0

class signature: node$0$grant_msg$0$0; node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE1)


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
16 (*) : 11-------
16     : ['grant_msg(node0)', 'grant_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'grant_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$1]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

part_sig: ('node$0$grant_msg$0$0 | node$0$grant_msg$0$1',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'grant_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$grant_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
17 (*) : -1----1--
17     : ['grant_msg(node1)', 'server_holds_lock()']
18     : 1-----1--
18     : ['grant_msg(node0)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'server_holds_lock']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$server_holds_lock': [[]]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$grant_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0}

part_sig: ('node$0$grant_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', 'server_holds_lock']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'server_holds_lock': Const('server_holds_lock', BooleanSort())}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'server_holds_lock': []}

sign_func_name2count:  {'0$grant_msg': 1, '0$server_holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$grant_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$server_holds_lock': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['server_holds_lock', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~server_holds_lock | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 7 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
19 (*) : --1---1--
19     : ['holds_lock(node0)', 'server_holds_lock()']
20     : ---1--1--
20     : ['holds_lock(node1)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'server_holds_lock']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$server_holds_lock': [[]]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0}

part_sig: ('node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'server_holds_lock']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'server_holds_lock': Const('server_holds_lock', BooleanSort())}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),), 'server_holds_lock': []}

sign_func_name2count:  {'0$holds_lock': 1, '0$server_holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$server_holds_lock': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['server_holds_lock', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~server_holds_lock | ~holds_lock(NODE0)


---------- Quantifier Inference: orbit 8 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
21 (*) : 0000--000
21     : ['~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~server_holds_lock()', '~unlock_msg(node0)', '~unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~server_holds_lock', '~unlock_msg(node0)', '~unlock_msg(node1)']

sign_func_name2args: {'1$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$server_holds_lock': [[]], '1$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1]}

sig2const: {'node$1$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1}

part_sig: ('node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1',)


---------- SigGenerator ----------

terms:  ['~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~server_holds_lock', '~unlock_msg(node0)', '~unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'server_holds_lock': Const('server_holds_lock', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1')),), 'server_holds_lock': [], 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'1$grant_msg': 2, '1$holds_lock': 2, '1$server_holds_lock': 1, '1$unlock_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1}

	sort: node

	identical_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0, node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$server_holds_lock': [[]], '1$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~holds_lock(NODE0)', '~unlock_msg(NODE0)', '~server_holds_lock', '~grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. holds_lock(NODE0) | unlock_msg(NODE0) | server_holds_lock | grant_msg(NODE0)


---------- Quantifier Inference: orbit 9 ----------

[QI_CHECK RESULT]: PASS


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lockserv: node=2]

==========================================================================================


=== Prime Orbit 0 =====================
size : 4
num_suborbits: 2
0 (*) : --1-----1
0     : ['holds_lock(node0)', 'unlock_msg(node1)']
1     : ---1---1-
1     : ['holds_lock(node1)', 'unlock_msg(node0)']
2 (*) : ---1----1
2     : ['holds_lock(node1)', 'unlock_msg(node1)']
3     : --1----1-
3     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE1,NODE0. ~unlock_msg(NODE1) | ~holds_lock(NODE0)
qcost : 4




=== Prime Orbit 1 =====================
size : 4
num_suborbits: 2
4 (*) : 1-------1
4     : ['grant_msg(node0)', 'unlock_msg(node1)']
5     : -1-----1-
5     : ['grant_msg(node1)', 'unlock_msg(node0)']
6 (*) : -1------1
6     : ['grant_msg(node1)', 'unlock_msg(node1)']
7     : 1------1-
7     : ['grant_msg(node0)', 'unlock_msg(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE1,NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE1)
qcost : 4




=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
8 (*) : ------1-1
8     : ['server_holds_lock()', 'unlock_msg(node1)']
9     : ------11-
9     : ['server_holds_lock()', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~server_holds_lock | ~unlock_msg(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
10 (*) : -------11
10     : ['unlock_msg(node0)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~unlock_msg(NODE0)
qcost : 2




=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
11 (*) : --11-----
11     : ['holds_lock(node0)', 'holds_lock(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~holds_lock(NODE0)
qcost : 2




=== Prime Orbit 5 =====================
size : 4
num_suborbits: 2
12 (*) : 1--1-----
12     : ['grant_msg(node0)', 'holds_lock(node1)']
13     : -11------
13     : ['grant_msg(node1)', 'holds_lock(node0)']
14 (*) : 1-1------
14     : ['grant_msg(node0)', 'holds_lock(node0)']
15     : -1-1-----
15     : ['grant_msg(node1)', 'holds_lock(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE1,NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE1)
qcost : 4




=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
16 (*) : 11-------
16     : ['grant_msg(node0)', 'grant_msg(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~grant_msg(NODE0)
qcost : 2




=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
17 (*) : -1----1--
17     : ['grant_msg(node1)', 'server_holds_lock()']
18     : 1-----1--
18     : ['grant_msg(node0)', 'server_holds_lock()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~server_holds_lock | ~grant_msg(NODE0)
qcost : 3




=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
19 (*) : --1---1--
19     : ['holds_lock(node0)', 'server_holds_lock()']
20     : ---1--1--
20     : ['holds_lock(node1)', 'server_holds_lock()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~server_holds_lock | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
21 (*) : 0000--000
21     : ['~grant_msg(node0)', '~grant_msg(node1)', '~holds_lock(node0)', '~holds_lock(node1)', '~server_holds_lock()', '~unlock_msg(node0)', '~unlock_msg(node1)']
num_forall :   0
num_exists :   1
num_literals : 4
quantified form : exists NODE0. holds_lock(NODE0) | unlock_msg(NODE0) | server_holds_lock | grant_msg(NODE0)
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.210 seconds

[QRM NOTE]: Time elapsed since last: 0.171 seconds

[QRM NOTE]: Peak memory: 1756622 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lockserv: node=2]

=========================================================================


New level: 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] has cost 32.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lockserv: node=2]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 32

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] (length = 10)

invariant [invar_0] forall NODE1,NODE0. ~unlock_msg(NODE1) | ~holds_lock(NODE0) # qcost: 4

invariant [invar_1] forall NODE1,NODE0. ~grant_msg(NODE0) | ~unlock_msg(NODE1) # qcost: 4

invariant [invar_2] forall NODE0. ~server_holds_lock | ~unlock_msg(NODE0) # qcost: 3

invariant [invar_3] exists NODE0. ~unlock_msg(NODE0) # qcost: 2

invariant [invar_4] exists NODE0. ~holds_lock(NODE0) # qcost: 2

invariant [invar_5] forall NODE1,NODE0. ~grant_msg(NODE0) | ~holds_lock(NODE1) # qcost: 4

invariant [invar_6] exists NODE0. ~grant_msg(NODE0) # qcost: 2

invariant [invar_7] forall NODE0. ~server_holds_lock | ~grant_msg(NODE0) # qcost: 3

invariant [invar_8] forall NODE0. ~server_holds_lock | ~holds_lock(NODE0) # qcost: 3

invariant [invar_9] exists NODE0. holds_lock(NODE0) | unlock_msg(NODE0) | server_holds_lock | grant_msg(NODE0) # qcost: 5




[QRM NOTE]: Time elapsed since start: 0.260 seconds

[QRM NOTE]: Time elapsed since last: 0.050 seconds

[QRM NOTE]: Peak memory: 1738737 bytes


===========================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/lockserv: node=2]

===========================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.286 seconds

[QRM NOTE]: Time elapsed since last: 0.026 seconds

[QRM NOTE]: Peak memory: 699691 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/lockserv: node=2]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/lockserv.node_2.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 70: invar_0
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 71: invar_1
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 72: invar_2
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 73: invar_3
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 74: invar_4
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 75: invar_5
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 76: invar_6
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 77: invar_7
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 78: invar_8
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 79: invar_9

    The following action implementations are present:
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 32: implementation of recv_grant
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 23: implementation of recv_lock
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 46: implementation of recv_unlock
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 20: implementation of send_lock
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 39: implementation of unlock

    The following initializers are present:
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 11: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 70: invar_0 ... PASS
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 71: invar_1 ... PASS
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 72: invar_2 ... PASS
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 73: invar_3 ... PASS
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 74: invar_4 ... PASS
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 75: invar_5 ... PASS
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 76: invar_6 ... PASS
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 77: invar_7 ... PASS
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 78: invar_8 ... PASS
        ivybench/sym/ivy/lockserv.node_2.0.ivy: line 79: invar_9 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:recv_grant
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 75: invar_5 ... FAIL
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:recv_lock
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 76: invar_6 ... FAIL
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:recv_unlock
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 72: invar_2 ... FAIL
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:send_lock
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:unlock
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 70: invar_0 ... FAIL
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 79: invar_9 ... PASS

    The following program assertions are treated as assumptions:
        in action recv_lock when called from the environment:
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 24: assumption
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 25: assumption
        in action recv_grant when called from the environment:
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 33: assumption
        in action unlock when called from the environment:
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 40: assumption
        in action recv_unlock when called from the environment:
            ivybench/sym/ivy/lockserv.node_2.0.ivy: line 47: assumption

error: failed checks: 4
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 2.065 seconds

[QRM NOTE]: Time elapsed since last: 1.780 seconds

[QRM NOTE]: Peak memory: 749897 bytes


***************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/lockserv: node=2

***************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv.node_2.0.ivy -s node=3 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lockserv.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv: node=3]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lockserv.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lockserv.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lockserv.node_3.finite.cpp lockserv.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lockserv.node_3.finite.o lockserv.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 13

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 15

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 6.361 seconds

[QRM NOTE]: Time elapsed since last: 6.361 seconds

[QRM NOTE]: Peak memory: 1173208 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 7

[FW NOTE]: number of total reachable states:        80

[FW NOTE]: number of dfs representative states:     22

[FW NOTE]: number of dfs non-representative states: 58


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv: node=3]

=======================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: unlock_msg('node',)
predicate: holds_lock('node',)
predicate: lock_msg('node',)
predicate: server_holds_lock()
predicate: grant_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'grant_msg(node1)', 'grant_msg(node2)', 'holds_lock(node0)', 'holds_lock(node1)', 'holds_lock(node2)', 'lock_msg(node0)', 'lock_msg(node1)', 'lock_msg(node2)', 'server_holds_lock()', 'unlock_msg(node0)', 'unlock_msg(node1)', 'unlock_msg(node2)']
representative states : 8, 24, 56, 120, 1120, 1136, 240, 113, 224, 52, 1056, 1072, 176, 49, 160, 18, 1024, 1040, 144, 17, 128, 1


=== State Orbit 0 =====================
size : 1
repr state: 0000000001000
lex min decimal: 8
states:
0000000001000




=== State Orbit 1 =====================
size : 3
repr state: 0000001001000
lex min decimal: 24
states:
0000000011000
0000000101000
0000001001000




=== State Orbit 2 =====================
size : 3
repr state: 0000001101000
lex min decimal: 56
states:
0000001101000
0000001011000
0000000111000




=== State Orbit 3 =====================
size : 1
repr state: 0000001111000
lex min decimal: 120
states:
0000001111000




=== State Orbit 4 =====================
size : 3
repr state: 1000000110000
lex min decimal: 1120
states:
0100001010000
1000000110000
0010001100000




=== State Orbit 5 =====================
size : 3
repr state: 1000001110000
lex min decimal: 1136
states:
1000001110000
0100001110000
0010001110000




=== State Orbit 6 =====================
size : 3
repr state: 0001001110000
lex min decimal: 240
states:
0000101110000
0000011110000
0001001110000




=== State Orbit 7 =====================
size : 3
repr state: 0000001110100
lex min decimal: 113
states:
0000001110001
0000001110010
0000001110100




=== State Orbit 8 =====================
size : 3
repr state: 0001000110000
lex min decimal: 224
states:
0001000110000
0000011100000
0000101010000




=== State Orbit 9 =====================
size : 3
repr state: 0000000110100
lex min decimal: 52
states:
0000001100001
0000000110100
0000001010010




=== State Orbit 10 =====================
size : 6
repr state: 1000000100000
lex min decimal: 1056
states:
0010001000000
0100001000000
0100000010000
0010000100000
1000000010000
1000000100000




=== State Orbit 11 =====================
size : 6
repr state: 1000001100000
lex min decimal: 1072
states:
0010001010000
1000001010000
0100001100000
1000001100000
0100000110000
0010000110000




=== State Orbit 12 =====================
size : 6
repr state: 0001001100000
lex min decimal: 176
states:
0001001100000
0000100110000
0000101100000
0000010110000
0000011010000
0001001010000




=== State Orbit 13 =====================
size : 6
repr state: 0000001100100
lex min decimal: 49
states:
0000000110001
0000001010100
0000000110010
0000001100010
0000001010001
0000001100100




=== State Orbit 14 =====================
size : 6
repr state: 0001000100000
lex min decimal: 160
states:
0000101000000
0000011000000
0001000010000
0000010100000
0000100010000
0001000100000




=== State Orbit 15 =====================
size : 6
repr state: 0000000100100
lex min decimal: 18
states:
0000000010100
0000001000001
0000001000010
0000000100001
0000000010010
0000000100100




=== State Orbit 16 =====================
size : 3
repr state: 1000000000000
lex min decimal: 1024
states:
0100000000000
0010000000000
1000000000000




=== State Orbit 17 =====================
size : 3
repr state: 1000001000000
lex min decimal: 1040
states:
0010000010000
1000001000000
0100000100000




=== State Orbit 18 =====================
size : 3
repr state: 0001001000000
lex min decimal: 144
states:
0000010010000
0001001000000
0000100100000




=== State Orbit 19 =====================
size : 3
repr state: 0000001000100
lex min decimal: 17
states:
0000000100010
0000000010001
0000001000100




=== State Orbit 20 =====================
size : 3
repr state: 0001000000000
lex min decimal: 128
states:
0001000000000
0000010000000
0000100000000




=== State Orbit 21 =====================
size : 3
repr state: 0000000000100
lex min decimal: 1
states:
0000000000100
0000000000001
0000000000010



[QRM NOTE]: Time elapsed since start: 6.473 seconds

[QRM NOTE]: Time elapsed since last: 0.111 seconds

[QRM NOTE]: Peak memory: 1233964 bytes


============================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lockserv: node=3]

============================================================================================================

Found a representative state in Rmin not in reachability: decimal: 3184, binary: 0110001110000

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.517 seconds

[QRM NOTE]: Time elapsed since last: 0.045 seconds

[QRM NOTE]: Peak memory: 215082 bytes

next size: node=3


************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/lockserv: node=3

************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv.ivy -s node=3 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lockserv.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.032 seconds

[QRM NOTE]: Time elapsed since last: 0.032 seconds

[QRM NOTE]: Peak memory: 21180 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lockserv: node=3]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lockserv: node=3]

==================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : -1-------1---
0     : ['grant_msg(node1)', 'server_holds_lock()']
1     : --1------1---
1     : ['grant_msg(node2)', 'server_holds_lock()']
2     : 1--------1---
2     : ['grant_msg(node0)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : ---------1-1-
3     : ['server_holds_lock()', 'unlock_msg(node1)']
4     : ---------1--1
4     : ['server_holds_lock()', 'unlock_msg(node2)']
5     : ---------11--
5     : ['server_holds_lock()', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
6 (*) : ---1-----1---
6     : ['holds_lock(node0)', 'server_holds_lock()']
7     : ----1----1---
7     : ['holds_lock(node1)', 'server_holds_lock()']
8     : -----1---1---
8     : ['holds_lock(node2)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 9
num_suborbits: 2
9 (*) : -1---------1-
9     : ['grant_msg(node1)', 'unlock_msg(node1)']
10     : --1---------1
10     : ['grant_msg(node2)', 'unlock_msg(node2)']
11     : 1---------1--
11     : ['grant_msg(node0)', 'unlock_msg(node0)']
15 (*) : 1----------1-
15     : ['grant_msg(node0)', 'unlock_msg(node1)']
16     : 1-----------1
16     : ['grant_msg(node0)', 'unlock_msg(node2)']
17     : -1--------1--
17     : ['grant_msg(node1)', 'unlock_msg(node0)']
18     : -1----------1
18     : ['grant_msg(node1)', 'unlock_msg(node2)']
19     : --1-------1--
19     : ['grant_msg(node2)', 'unlock_msg(node0)']
20     : --1--------1-
20     : ['grant_msg(node2)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
12 (*) : 11-----------
12     : ['grant_msg(node0)', 'grant_msg(node1)']
13     : 1-1----------
13     : ['grant_msg(node0)', 'grant_msg(node2)']
14     : -11----------
14     : ['grant_msg(node1)', 'grant_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 2
21 (*) : --11---------
21     : ['grant_msg(node2)', 'holds_lock(node0)']
22     : -1-1---------
22     : ['grant_msg(node1)', 'holds_lock(node0)']
23     : --1-1--------
23     : ['grant_msg(node2)', 'holds_lock(node1)']
24     : 1---1--------
24     : ['grant_msg(node0)', 'holds_lock(node1)']
25     : -1---1-------
25     : ['grant_msg(node1)', 'holds_lock(node2)']
26     : 1----1-------
26     : ['grant_msg(node0)', 'holds_lock(node2)']
33 (*) : 1--1---------
33     : ['grant_msg(node0)', 'holds_lock(node0)']
34     : -1--1--------
34     : ['grant_msg(node1)', 'holds_lock(node1)']
35     : --1--1-------
35     : ['grant_msg(node2)', 'holds_lock(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 9
num_suborbits: 2
27 (*) : ---1-------1-
27     : ['holds_lock(node0)', 'unlock_msg(node1)']
28     : ---1--------1
28     : ['holds_lock(node0)', 'unlock_msg(node2)']
29     : ----1-----1--
29     : ['holds_lock(node1)', 'unlock_msg(node0)']
30     : ----1-------1
30     : ['holds_lock(node1)', 'unlock_msg(node2)']
31     : -----1----1--
31     : ['holds_lock(node2)', 'unlock_msg(node0)']
32     : -----1-----1-
32     : ['holds_lock(node2)', 'unlock_msg(node1)']
39 (*) : ----1------1-
39     : ['holds_lock(node1)', 'unlock_msg(node1)']
40     : -----1------1
40     : ['holds_lock(node2)', 'unlock_msg(node2)']
41     : ---1------1--
41     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
36 (*) : ---11--------
36     : ['holds_lock(node0)', 'holds_lock(node1)']
37     : ---1-1-------
37     : ['holds_lock(node0)', 'holds_lock(node2)']
38     : ----11-------
38     : ['holds_lock(node1)', 'holds_lock(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
42 (*) : ----------11-
42     : ['unlock_msg(node0)', 'unlock_msg(node1)']
43     : ----------1-1
43     : ['unlock_msg(node0)', 'unlock_msg(node2)']
44     : -----------11
44     : ['unlock_msg(node1)', 'unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
45 (*) : 000000---0000
45     : ['~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~server_holds_lock()', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 13

[PRIME NOTE]: number of primes: 46

[QRM NOTE]: Time elapsed since start: 0.049 seconds

[QRM NOTE]: Time elapsed since last: 0.017 seconds

[QRM NOTE]: Peak memory: 1155943 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lockserv: node=3]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 solution : []

Essensial at level 0 : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

[QRM NOTE]: Time elapsed since start: 0.051 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 108886 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lockserv: node=3]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : -1-------1---
0     : ['grant_msg(node1)', 'server_holds_lock()']
1     : --1------1---
1     : ['grant_msg(node2)', 'server_holds_lock()']
2     : 1--------1---
2     : ['grant_msg(node0)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'server_holds_lock']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$server_holds_lock': [[]]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0}

part_sig: ('node$0$grant_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', 'server_holds_lock']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'server_holds_lock': Const('server_holds_lock', BooleanSort())}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'server_holds_lock': []}

sign_func_name2count:  {'0$grant_msg': 1, '0$server_holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$server_holds_lock': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['server_holds_lock', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~server_holds_lock | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : ---------1-1-
3     : ['server_holds_lock()', 'unlock_msg(node1)']
4     : ---------1--1
4     : ['server_holds_lock()', 'unlock_msg(node2)']
5     : ---------11--
5     : ['server_holds_lock()', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['server_holds_lock', 'unlock_msg(node1)']

sign_func_name2args: {'0$server_holds_lock': [[]], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0}

part_sig: ('node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['server_holds_lock', 'unlock_msg(node1)']

func_name2symbol:  {'server_holds_lock': Const('server_holds_lock', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'server_holds_lock': [], 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$server_holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$server_holds_lock': [[]], '0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', 'server_holds_lock']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~unlock_msg(NODE0) | ~server_holds_lock


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
6 (*) : ---1-----1---
6     : ['holds_lock(node0)', 'server_holds_lock()']
7     : ----1----1---
7     : ['holds_lock(node1)', 'server_holds_lock()']
8     : -----1---1---
8     : ['holds_lock(node2)', 'server_holds_lock()']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'server_holds_lock']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$server_holds_lock': [[]]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0}

part_sig: ('node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'server_holds_lock']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'server_holds_lock': Const('server_holds_lock', BooleanSort())}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'server_holds_lock': []}

sign_func_name2count:  {'0$holds_lock': 1, '0$server_holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$server_holds_lock': [[]]}


---------- QFormula: _set_qterms ----------

qterms: ['server_holds_lock', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~server_holds_lock | ~holds_lock(NODE0)


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 9
num_suborbits: 2
9 (*) : -1---------1-
9     : ['grant_msg(node1)', 'unlock_msg(node1)']
10     : --1---------1
10     : ['grant_msg(node2)', 'unlock_msg(node2)']
11     : 1---------1--
11     : ['grant_msg(node0)', 'unlock_msg(node0)']
15 (*) : 1----------1-
15     : ['grant_msg(node0)', 'unlock_msg(node1)']
16     : 1-----------1
16     : ['grant_msg(node0)', 'unlock_msg(node2)']
17     : -1--------1--
17     : ['grant_msg(node1)', 'unlock_msg(node0)']
18     : -1----------1
18     : ['grant_msg(node1)', 'unlock_msg(node2)']
19     : --1-------1--
19     : ['grant_msg(node2)', 'unlock_msg(node0)']
20     : --1--------1-
20     : ['grant_msg(node2)', 'unlock_msg(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node1)', 'unlock_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE1)', 'grant_msg(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$grant_msg$0$0; node$0$unlock_msg$0$0

class signature: node$0$grant_msg$0$0; node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$grant_msg$0$0 | node$0$unlock_msg$0$0

class signature: node$0$grant_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0; node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$grant_msg$0$0; node$0$unlock_msg$0$0

class signature: node$0$grant_msg$0$0; node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0 | node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$grant_msg$0$0 | node$0$unlock_msg$0$0

class signature: node$0$grant_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~unlock_msg(NODE1) | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
12 (*) : 11-----------
12     : ['grant_msg(node0)', 'grant_msg(node1)']
13     : 1-1----------
13     : ['grant_msg(node0)', 'grant_msg(node2)']
14     : -11----------
14     : ['grant_msg(node1)', 'grant_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'grant_msg(node1)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$1]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

part_sig: ('node$0$grant_msg$0$0 | node$0$grant_msg$0$1',)


---------- SigGenerator ----------

terms:  ['grant_msg(node0)', 'grant_msg(node1)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$grant_msg$0$1}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0, node$0$grant_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['grant_msg(NODE1)', 'grant_msg(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~grant_msg(NODE1) | ~grant_msg(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 9
num_suborbits: 2
21 (*) : --11---------
21     : ['grant_msg(node2)', 'holds_lock(node0)']
22     : -1-1---------
22     : ['grant_msg(node1)', 'holds_lock(node0)']
23     : --1-1--------
23     : ['grant_msg(node2)', 'holds_lock(node1)']
24     : 1---1--------
24     : ['grant_msg(node0)', 'holds_lock(node1)']
25     : -1---1-------
25     : ['grant_msg(node1)', 'holds_lock(node2)']
26     : 1----1-------
26     : ['grant_msg(node0)', 'holds_lock(node2)']
33 (*) : 1--1---------
33     : ['grant_msg(node0)', 'holds_lock(node0)']
34     : -1--1--------
34     : ['grant_msg(node1)', 'holds_lock(node1)']
35     : --1--1-------
35     : ['grant_msg(node2)', 'holds_lock(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node2)', 'holds_lock(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['grant_msg(node0)', 'holds_lock(node0)']

sign_func_name2args: {'0$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sig2const: {'node$0$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0; node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0; node$0$holds_lock$0$0}

part_sig: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)


---------- SigGenerator ----------

terms:  ['grant_msg(node2)', 'holds_lock(node0)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$grant_msg': 1, '0$holds_lock': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$grant_msg$0$0, node$0$holds_lock$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$grant_msg$0$0 | node$0$holds_lock$0$0}

	sort: node

	identical_classes: {'node$0$grant_msg$0': [node$0$grant_msg$0$0], 'node$0$holds_lock$0': [node$0$holds_lock$0$0]}

	identical_single_classes: {'node$0$grant_msg$0': node$0$grant_msg$0$0, 'node$0$holds_lock$0': node$0$holds_lock$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$holds_lock': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE1)', 'grant_msg(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)[]

sort partition signature: node$0$grant_msg$0$0 | node$0$holds_lock$0$0

class signature: node$0$grant_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)[]

sort partition signature: node$0$grant_msg$0$0; node$0$holds_lock$0$0

class signature: node$0$grant_msg$0$0; node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0 | node$0$holds_lock$0$0',)[]

sort partition signature: node$0$grant_msg$0$0 | node$0$holds_lock$0$0

class signature: node$0$grant_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$grant_msg$0$0; node$0$holds_lock$0$0',)[]

sort partition signature: node$0$grant_msg$0$0; node$0$holds_lock$0$0

class signature: node$0$grant_msg$0$0; node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~holds_lock(NODE1) | ~grant_msg(NODE0)


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 9
num_suborbits: 2
27 (*) : ---1-------1-
27     : ['holds_lock(node0)', 'unlock_msg(node1)']
28     : ---1--------1
28     : ['holds_lock(node0)', 'unlock_msg(node2)']
29     : ----1-----1--
29     : ['holds_lock(node1)', 'unlock_msg(node0)']
30     : ----1-------1
30     : ['holds_lock(node1)', 'unlock_msg(node2)']
31     : -----1----1--
31     : ['holds_lock(node2)', 'unlock_msg(node0)']
32     : -----1-----1-
32     : ['holds_lock(node2)', 'unlock_msg(node1)']
39 (*) : ----1------1-
39     : ['holds_lock(node1)', 'unlock_msg(node1)']
40     : -----1------1
40     : ['holds_lock(node2)', 'unlock_msg(node2)']
41     : ---1------1--
41     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node1)', 'unlock_msg(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$unlock_msg': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sig2const: {'node$0$holds_lock$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0; node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0; node$0$unlock_msg$0$0}

part_sig: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$holds_lock': 1, '0$unlock_msg': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$unlock_msg$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$unlock_msg$0$0}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0], 'node$0$unlock_msg$0': [node$0$unlock_msg$0$0]}

	identical_single_classes: {'node$0$holds_lock$0': node$0$holds_lock$0$0, 'node$0$unlock_msg$0': node$0$unlock_msg$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$unlock_msg': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE0)', 'unlock_msg(NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$holds_lock$0$0 | node$0$unlock_msg$0$0

class signature: node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$holds_lock$0$0; node$0$unlock_msg$0$0

class signature: node$0$holds_lock$0$0; node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$holds_lock$0$0 | node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$holds_lock$0$0 | node$0$unlock_msg$0$0

class signature: node$0$holds_lock$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$holds_lock$0$0; node$0$unlock_msg$0$0',)[]

sort partition signature: node$0$holds_lock$0$0; node$0$unlock_msg$0$0

class signature: node$0$holds_lock$0$0; node$0$unlock_msg$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~holds_lock(NODE0) | ~unlock_msg(NODE1)


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
36 (*) : ---11--------
36     : ['holds_lock(node0)', 'holds_lock(node1)']
37     : ---1-1-------
37     : ['holds_lock(node0)', 'holds_lock(node2)']
38     : ----11-------
38     : ['holds_lock(node1)', 'holds_lock(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['holds_lock(node0)', 'holds_lock(node1)']

sign_func_name2args: {'0$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$holds_lock$0$1]}

sig2const: {'node$0$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

part_sig: ('node$0$holds_lock$0$0 | node$0$holds_lock$0$1',)


---------- SigGenerator ----------

terms:  ['holds_lock(node0)', 'holds_lock(node1)']

func_name2symbol:  {'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$holds_lock': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$holds_lock$0$0 | node$0$holds_lock$0$1}

	sort: node

	identical_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$holds_lock$0': [node$0$holds_lock$0$0, node$0$holds_lock$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['holds_lock(NODE1)', 'holds_lock(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~holds_lock(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 7 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
42 (*) : ----------11-
42     : ['unlock_msg(node0)', 'unlock_msg(node1)']
43     : ----------1-1
43     : ['unlock_msg(node0)', 'unlock_msg(node2)']
44     : -----------11
44     : ['unlock_msg(node1)', 'unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['unlock_msg(node0)', 'unlock_msg(node1)']

sign_func_name2args: {'0$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$unlock_msg$0$1]}

sig2const: {'node$0$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

part_sig: ('node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1',)


---------- SigGenerator ----------

terms:  ['unlock_msg(node0)', 'unlock_msg(node1)']

func_name2symbol:  {'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$unlock_msg': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$unlock_msg$0$0 | node$0$unlock_msg$0$1}

	sort: node

	identical_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$unlock_msg$0': [node$0$unlock_msg$0$0, node$0$unlock_msg$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['unlock_msg(NODE0)', 'unlock_msg(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~unlock_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1


---------- Quantifier Inference: orbit 8 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
45 (*) : 000000---0000
45     : ['~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~server_holds_lock()', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~server_holds_lock', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']

sign_func_name2args: {'1$grant_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$holds_lock': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$server_holds_lock': [[]], '1$unlock_msg': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$grant_msg$0$2, node$1$holds_lock$0$2, node$1$unlock_msg$0$2]}

sig2const: {'node$1$grant_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$grant_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$grant_msg$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$holds_lock$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$holds_lock$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$holds_lock$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$unlock_msg$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$unlock_msg$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$unlock_msg$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1, node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1 | node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2}

part_sig: ('node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1 | node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2',)


---------- SigGenerator ----------

terms:  ['~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~server_holds_lock', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']

func_name2symbol:  {'grant_msg': Const('grant_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'holds_lock': Const('holds_lock', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'server_holds_lock': Const('server_holds_lock', BooleanSort()), 'unlock_msg': Const('unlock_msg', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'grant_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'holds_lock': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'server_holds_lock': [], 'unlock_msg': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$grant_msg': 3, '1$holds_lock': 3, '1$server_holds_lock': 1, '1$unlock_msg': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1, node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0 | node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1 | node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2}

	sort: node

	identical_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0; node$1$holds_lock$0$0; node$1$unlock_msg$0$0, node$1$grant_msg$0$1; node$1$holds_lock$0$1; node$1$unlock_msg$0$1, node$1$grant_msg$0$2; node$1$holds_lock$0$2; node$1$unlock_msg$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$grant_msg$0; node$1$holds_lock$0; node$1$unlock_msg$0': [node$1$grant_msg$0$0, node$1$holds_lock$0$0, node$1$unlock_msg$0$0, node$1$grant_msg$0$1, node$1$holds_lock$0$1, node$1$unlock_msg$0$1, node$1$grant_msg$0$2, node$1$holds_lock$0$2, node$1$unlock_msg$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$grant_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$holds_lock': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$server_holds_lock': [[]], '1$unlock_msg': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~unlock_msg(NODE0)', '~holds_lock(NODE0)', '~grant_msg(NODE0)', '~server_holds_lock']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. unlock_msg(NODE0) | holds_lock(NODE0) | grant_msg(NODE0) | server_holds_lock


---------- Quantifier Inference: orbit 9 ----------

[QI_CHECK RESULT]: PASS


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lockserv: node=3]

==========================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : -1-------1---
0     : ['grant_msg(node1)', 'server_holds_lock()']
1     : --1------1---
1     : ['grant_msg(node2)', 'server_holds_lock()']
2     : 1--------1---
2     : ['grant_msg(node0)', 'server_holds_lock()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~server_holds_lock | ~grant_msg(NODE0)
qcost : 3




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : ---------1-1-
3     : ['server_holds_lock()', 'unlock_msg(node1)']
4     : ---------1--1
4     : ['server_holds_lock()', 'unlock_msg(node2)']
5     : ---------11--
5     : ['server_holds_lock()', 'unlock_msg(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~unlock_msg(NODE0) | ~server_holds_lock
qcost : 3




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
6 (*) : ---1-----1---
6     : ['holds_lock(node0)', 'server_holds_lock()']
7     : ----1----1---
7     : ['holds_lock(node1)', 'server_holds_lock()']
8     : -----1---1---
8     : ['holds_lock(node2)', 'server_holds_lock()']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~server_holds_lock | ~holds_lock(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 9
num_suborbits: 2
9 (*) : -1---------1-
9     : ['grant_msg(node1)', 'unlock_msg(node1)']
10     : --1---------1
10     : ['grant_msg(node2)', 'unlock_msg(node2)']
11     : 1---------1--
11     : ['grant_msg(node0)', 'unlock_msg(node0)']
15 (*) : 1----------1-
15     : ['grant_msg(node0)', 'unlock_msg(node1)']
16     : 1-----------1
16     : ['grant_msg(node0)', 'unlock_msg(node2)']
17     : -1--------1--
17     : ['grant_msg(node1)', 'unlock_msg(node0)']
18     : -1----------1
18     : ['grant_msg(node1)', 'unlock_msg(node2)']
19     : --1-------1--
19     : ['grant_msg(node2)', 'unlock_msg(node0)']
20     : --1--------1-
20     : ['grant_msg(node2)', 'unlock_msg(node1)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,NODE1. ~unlock_msg(NODE1) | ~grant_msg(NODE0)
qcost : 4




=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
12 (*) : 11-----------
12     : ['grant_msg(node0)', 'grant_msg(node1)']
13     : 1-1----------
13     : ['grant_msg(node0)', 'grant_msg(node2)']
14     : -11----------
14     : ['grant_msg(node1)', 'grant_msg(node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~grant_msg(NODE1) | ~grant_msg(NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 5 =====================
size : 9
num_suborbits: 2
21 (*) : --11---------
21     : ['grant_msg(node2)', 'holds_lock(node0)']
22     : -1-1---------
22     : ['grant_msg(node1)', 'holds_lock(node0)']
23     : --1-1--------
23     : ['grant_msg(node2)', 'holds_lock(node1)']
24     : 1---1--------
24     : ['grant_msg(node0)', 'holds_lock(node1)']
25     : -1---1-------
25     : ['grant_msg(node1)', 'holds_lock(node2)']
26     : 1----1-------
26     : ['grant_msg(node0)', 'holds_lock(node2)']
33 (*) : 1--1---------
33     : ['grant_msg(node0)', 'holds_lock(node0)']
34     : -1--1--------
34     : ['grant_msg(node1)', 'holds_lock(node1)']
35     : --1--1-------
35     : ['grant_msg(node2)', 'holds_lock(node2)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,NODE1. ~holds_lock(NODE1) | ~grant_msg(NODE0)
qcost : 4




=== Prime Orbit 6 =====================
size : 9
num_suborbits: 2
27 (*) : ---1-------1-
27     : ['holds_lock(node0)', 'unlock_msg(node1)']
28     : ---1--------1
28     : ['holds_lock(node0)', 'unlock_msg(node2)']
29     : ----1-----1--
29     : ['holds_lock(node1)', 'unlock_msg(node0)']
30     : ----1-------1
30     : ['holds_lock(node1)', 'unlock_msg(node2)']
31     : -----1----1--
31     : ['holds_lock(node2)', 'unlock_msg(node0)']
32     : -----1-----1-
32     : ['holds_lock(node2)', 'unlock_msg(node1)']
39 (*) : ----1------1-
39     : ['holds_lock(node1)', 'unlock_msg(node1)']
40     : -----1------1
40     : ['holds_lock(node2)', 'unlock_msg(node2)']
41     : ---1------1--
41     : ['holds_lock(node0)', 'unlock_msg(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,NODE1. ~holds_lock(NODE0) | ~unlock_msg(NODE1)
qcost : 4




=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
36 (*) : ---11--------
36     : ['holds_lock(node0)', 'holds_lock(node1)']
37     : ---1-1-------
37     : ['holds_lock(node0)', 'holds_lock(node2)']
38     : ----11-------
38     : ['holds_lock(node1)', 'holds_lock(node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~holds_lock(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
42 (*) : ----------11-
42     : ['unlock_msg(node0)', 'unlock_msg(node1)']
43     : ----------1-1
43     : ['unlock_msg(node0)', 'unlock_msg(node2)']
44     : -----------11
44     : ['unlock_msg(node1)', 'unlock_msg(node2)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~unlock_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
45 (*) : 000000---0000
45     : ['~grant_msg(node0)', '~grant_msg(node1)', '~grant_msg(node2)', '~holds_lock(node0)', '~holds_lock(node1)', '~holds_lock(node2)', '~server_holds_lock()', '~unlock_msg(node0)', '~unlock_msg(node1)', '~unlock_msg(node2)']
num_forall :   0
num_exists :   1
num_literals : 4
quantified form : exists NODE0. unlock_msg(NODE0) | holds_lock(NODE0) | grant_msg(NODE0) | server_holds_lock
qcost : 5



[QRM NOTE]: Time elapsed since start: 0.310 seconds

[QRM NOTE]: Time elapsed since last: 0.259 seconds

[QRM NOTE]: Peak memory: 1836375 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lockserv: node=3]

=========================================================================


New level: 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


Solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] has cost 41.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lockserv: node=3]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 41

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] (length = 10)

invariant [invar_0] forall NODE0. ~server_holds_lock | ~grant_msg(NODE0) # qcost: 3

invariant [invar_1] forall NODE0. ~unlock_msg(NODE0) | ~server_holds_lock # qcost: 3

invariant [invar_2] forall NODE0. ~server_holds_lock | ~holds_lock(NODE0) # qcost: 3

invariant [invar_3] forall NODE0,NODE1. ~unlock_msg(NODE1) | ~grant_msg(NODE0) # qcost: 4

invariant [invar_4] forall NODE0,NODE1. ~grant_msg(NODE1) | ~grant_msg(NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_5] forall NODE0,NODE1. ~holds_lock(NODE1) | ~grant_msg(NODE0) # qcost: 4

invariant [invar_6] forall NODE0,NODE1. ~holds_lock(NODE0) | ~unlock_msg(NODE1) # qcost: 4

invariant [invar_7] forall NODE0,NODE1. ~holds_lock(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_8] forall NODE0,NODE1. ~unlock_msg(NODE0) | ~unlock_msg(NODE1) | NODE0 = NODE1 # qcost: 5

invariant [invar_9] exists NODE0. unlock_msg(NODE0) | holds_lock(NODE0) | grant_msg(NODE0) | server_holds_lock # qcost: 5




[QRM NOTE]: Time elapsed since start: 0.360 seconds

[QRM NOTE]: Time elapsed since last: 0.050 seconds

[QRM NOTE]: Peak memory: 1812592 bytes


===========================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/lockserv: node=3]

===========================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.438 seconds

[QRM NOTE]: Time elapsed since last: 0.078 seconds

[QRM NOTE]: Peak memory: 804869 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/lockserv: node=3]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/lockserv.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9

    The following action implementations are present:
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 32: implementation of recv_grant
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 23: implementation of recv_lock
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 46: implementation of recv_unlock
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 20: implementation of send_lock
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 39: implementation of unlock

    The following initializers are present:
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 11: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:recv_grant
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:recv_lock
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:recv_unlock
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:send_lock
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:unlock
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS

    The following program assertions are treated as assumptions:
        in action recv_lock when called from the environment:
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 25: assumption
        in action recv_grant when called from the environment:
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 33: assumption
        in action unlock when called from the environment:
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 40: assumption
        in action recv_unlock when called from the environment:
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 47: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall NODE0,NODE1. ~holds_lock(NODE1) | ~holds_lock(NODE0) | NODE0 = NODE1))

[QRM NOTE]: Time elapsed since start: 2.751 seconds

[QRM NOTE]: Time elapsed since last: 2.313 seconds

[QRM NOTE]: Peak memory: 855704 bytes


***************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/lockserv: node=3

***************************************************************************************

python3 qrm.py ivybench/sym/ivy/lockserv.node_3.0.ivy -s node=4 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lockserv.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lockserv: node=4]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lockserv.node_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lockserv.node_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lockserv.node_4.finite.cpp lockserv.node_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lockserv.node_4.finite.o lockserv.node_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 20

[FW NOTE]: symmetric group order: 24

[QRM NOTE]: Time elapsed since start: 6.429 seconds

[QRM NOTE]: Time elapsed since last: 6.429 seconds

[QRM NOTE]: Peak memory: 1181423 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 8

[FW NOTE]: number of total reachable states:        208

[FW NOTE]: number of dfs representative states:     29

[FW NOTE]: number of dfs non-representative states: 179


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lockserv: node=4]

=======================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
predicate: server_holds_lock()
predicate: grant_msg('node',)
predicate: lock_msg('node',)
predicate: holds_lock('node',)
predicate: unlock_msg('node',)
interpreted atoms: {}
state atoms: ['grant_msg(node0)', 'grant_msg(node1)', 'grant_msg(node2)', 'grant_msg(node3)', 'holds_lock(node0)', 'holds_lock(node1)', 'holds_lock(node2)', 'holds_lock(node3)', 'lock_msg(node0)', 'lock_msg(node1)', 'lock_msg(node2)', 'lock_msg(node3)', 'server_holds_lock()', 'unlock_msg(node0)', 'unlock_msg(node1)', 'unlock_msg(node2)', 'unlock_msg(node3)']
representative states : 16, 48, 112, 240, 496, 8640, 8672, 992, 481, 960, 232, 8384, 8416, 736, 225, 704, 100, 8256, 8288, 608, 97, 576, 34, 8192, 8224, 544, 33, 512, 1


=== State Orbit 0 =====================
size : 1
repr state: 00000000000010000
lex min decimal: 16
states:
00000000000010000




=== State Orbit 1 =====================
size : 4
repr state: 00000000100010000
lex min decimal: 48
states:
00000000100010000
00000000001010000
00000000000110000
00000000010010000




=== State Orbit 2 =====================
size : 6
repr state: 00000000110010000
lex min decimal: 112
states:
00000000100110000
00000000101010000
00000000011010000
00000000001110000
00000000010110000
00000000110010000




=== State Orbit 3 =====================
size : 4
repr state: 00000000111010000
lex min decimal: 240
states:
00000000011110000
00000000101110000
00000000110110000
00000000111010000




=== State Orbit 4 =====================
size : 1
repr state: 00000000111110000
lex min decimal: 496
states:
00000000111110000




=== State Orbit 5 =====================
size : 4
repr state: 10000000011100000
lex min decimal: 8640
states:
00010000111000000
01000000101100000
00100000110100000
10000000011100000




=== State Orbit 6 =====================
size : 4
repr state: 10000000111100000
lex min decimal: 8672
states:
01000000111100000
00100000111100000
00010000111100000
10000000111100000




=== State Orbit 7 =====================
size : 4
repr state: 00001000111100000
lex min decimal: 992
states:
00000100111100000
00000010111100000
00001000111100000
00000001111100000




=== State Orbit 8 =====================
size : 4
repr state: 00000000111101000
lex min decimal: 481
states:
00000000111101000
00000000111100100
00000000111100010
00000000111100001




=== State Orbit 9 =====================
size : 4
repr state: 00001000011100000
lex min decimal: 960
states:
00000100101100000
00000001111000000
00001000011100000
00000010110100000




=== State Orbit 10 =====================
size : 4
repr state: 00000000011101000
lex min decimal: 232
states:
00000000111000001
00000000011101000
00000000110100010
00000000101100100




=== State Orbit 11 =====================
size : 12
repr state: 10000000011000000
lex min decimal: 8384
states:
00100000100100000
00010000011000000
00100000110000000
01000000100100000
01000000101000000
10000000011000000
00100000010100000
00010000101000000
00010000110000000
10000000001100000
10000000010100000
01000000001100000




=== State Orbit 12 =====================
size : 12
repr state: 10000000111000000
lex min decimal: 8416
states:
01000000111000000
10000000110100000
00100000111000000
00010000011100000
10000000101100000
00010000101100000
00100000011100000
00010000110100000
01000000110100000
00100000101100000
10000000111000000
01000000011100000




=== State Orbit 13 =====================
size : 12
repr state: 00001000111000000
lex min decimal: 736
states:
00000001101100000
00000010111000000
00001000101100000
00000001110100000
00000100011100000
00000100110100000
00000001011100000
00000100111000000
00001000110100000
00001000111000000
00000010011100000
00000010101100000




=== State Orbit 14 =====================
size : 12
repr state: 00000000111001000
lex min decimal: 225
states:
00000000011100010
00000000011100100
00000000101100010
00000000110100001
00000000111000100
00000000011100001
00000000110101000
00000000110100100
00000000101100001
00000000101101000
00000000111001000
00000000111000010




=== State Orbit 15 =====================
size : 12
repr state: 00001000011000000
lex min decimal: 704
states:
00000100101000000
00000010110000000
00000010010100000
00000001110000000
00000001101000000
00001000010100000
00000001011000000
00000100100100000
00000100001100000
00001000011000000
00001000001100000
00000010100100000




=== State Orbit 16 =====================
size : 12
repr state: 00000000011001000
lex min decimal: 100
states:
00000000001100100
00000000110000010
00000000001101000
00000000110000001
00000000101000001
00000000101000100
00000000011001000
00000000011000001
00000000100100100
00000000010101000
00000000010100010
00000000100100010




=== State Orbit 17 =====================
size : 12
repr state: 10000000010000000
lex min decimal: 8256
states:
00100000100000000
01000000001000000
00100000010000000
01000000100000000
00100000000100000
10000000010000000
00010000100000000
10000000001000000
01000000000100000
00010000001000000
10000000000100000
00010000010000000




=== State Orbit 18 =====================
size : 12
repr state: 10000000110000000
lex min decimal: 8288
states:
00010000100100000
00010000010100000
00100000011000000
01000000110000000
10000000110000000
01000000011000000
01000000010100000
00100000001100000
00010000001100000
10000000101000000
10000000100100000
00100000101000000




=== State Orbit 19 =====================
size : 12
repr state: 00001000110000000
lex min decimal: 608
states:
00000100010100000
00000100110000000
00000001100100000
00000100011000000
00001000110000000
00000010101000000
00000010001100000
00000001010100000
00000010011000000
00001000101000000
00001000100100000
00000001001100000




=== State Orbit 20 =====================
size : 12
repr state: 00000000110001000
lex min decimal: 97
states:
00000000110000100
00000000100100001
00000000001100010
00000000001100001
00000000011000010
00000000010100001
00000000100101000
00000000110001000
00000000011000100
00000000101000010
00000000101001000
00000000010100100




=== State Orbit 21 =====================
size : 12
repr state: 00001000010000000
lex min decimal: 576
states:
00001000001000000
00000100100000000
00000001100000000
00001000010000000
00001000000100000
00000100001000000
00000010000100000
00000010100000000
00000001010000000
00000010010000000
00000001001000000
00000100000100000




=== State Orbit 22 =====================
size : 12
repr state: 00000000010001000
lex min decimal: 34
states:
00000000000100010
00000000100000001
00000000100000010
00000000100000100
00000000010000010
00000000001000100
00000000010000001
00000000010001000
00000000001000001
00000000001001000
00000000000100100
00000000000101000




=== State Orbit 23 =====================
size : 4
repr state: 10000000000000000
lex min decimal: 8192
states:
00100000000000000
00010000000000000
10000000000000000
01000000000000000




=== State Orbit 24 =====================
size : 4
repr state: 10000000100000000
lex min decimal: 8224
states:
01000000010000000
00100000001000000
00010000000100000
10000000100000000




=== State Orbit 25 =====================
size : 4
repr state: 00001000100000000
lex min decimal: 544
states:
00000001000100000
00000100010000000
00001000100000000
00000010001000000




=== State Orbit 26 =====================
size : 4
repr state: 00000000100001000
lex min decimal: 33
states:
00000000001000010
00000000000100001
00000000010000100
00000000100001000




=== State Orbit 27 =====================
size : 4
repr state: 00001000000000000
lex min decimal: 512
states:
00000100000000000
00001000000000000
00000010000000000
00000001000000000




=== State Orbit 28 =====================
size : 4
repr state: 00000000000001000
lex min decimal: 1
states:
00000000000000001
00000000000000010
00000000000001000
00000000000000100



[QRM NOTE]: Time elapsed since start: 6.632 seconds

[QRM NOTE]: Time elapsed since last: 0.202 seconds

[QRM NOTE]: Peak memory: 1270963 bytes


============================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lockserv: node=4]

============================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.826 seconds

[QRM NOTE]: Time elapsed since last: 0.194 seconds

[QRM NOTE]: Peak memory: 293467 bytes

ivy_check complete=fo ivybench/sym/ivy/lockserv.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9

    The following action implementations are present:
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 32: implementation of recv_grant
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 23: implementation of recv_lock
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 46: implementation of recv_unlock
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 20: implementation of send_lock
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 39: implementation of unlock

    The following initializers are present:
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 11: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
        ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:recv_grant
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:recv_lock
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:recv_unlock
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:send_lock
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS
        (internal) ext:unlock
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 70: invar_0 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 71: invar_1 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 72: invar_2 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 73: invar_3 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 74: invar_4 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 75: invar_5 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 76: invar_6 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 77: invar_7 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 78: invar_8 ... PASS
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 79: invar_9 ... PASS

    The following program assertions are treated as assumptions:
        in action recv_lock when called from the environment:
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 25: assumption
        in action recv_grant when called from the environment:
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 33: assumption
        in action unlock when called from the environment:
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 40: assumption
        in action recv_unlock when called from the environment:
            ivybench/sym/ivy/lockserv.node_3.0.ivy: line 47: assumption

OK
[IVY_CHECK RESULT]: PASS


********************************************************

	[QRM]: ivybench/sym/ivy/lockserv.ivy

********************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/lockserv.node_3.0.ivy']

[CUTOFF]: node=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 51.335 seconds

[QRM NOTE]: Time elapsed since last: 51.335 seconds

