
************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.ivy

************************************************************************


************************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1

************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=1,value=1 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus_epr.node_1_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_1_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_1_value_1.finite.cpp toy_consensus_epr.node_1_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_1_value_1.finite.o toy_consensus_epr.node_1_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 4

[FW NOTE]: number of interpreted atoms (e.g. member,le): 1

[FW NOTE]: number of branching actions: 2

[FW NOTE]: symmetric group order: 1

[QRM NOTE]: Time elapsed since start: 6.244 seconds

[QRM NOTE]: Time elapsed since last: 6.244 seconds

[QRM NOTE]: Peak memory: 1175479 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        3

[FW NOTE]: number of dfs representative states:     3

[FW NOTE]: number of dfs non-representative states: 0


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

===============================================================================================================

sort: node=['node0']
sort: value=['value0']
sort: quorum=['quorum__node0']
predicate: chosenAt('quorum', 'value')
predicate: decided('value',)
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0)': '1'}
state atoms: ['chosenAt(quorum__node0,value0)', 'decided(value0)', 'vote(node0,value0)', 'voted(node0)']
representative states : 1, 23, 31


=== State Orbit 0 =====================
size : 1
repr state: 0000
lex min decimal: 1
states:
0000




=== State Orbit 1 =====================
size : 1
repr state: 1011
lex min decimal: 23
states:
1011




=== State Orbit 2 =====================
size : 1
repr state: 1111
lex min decimal: 31
states:
1111



[QRM NOTE]: Time elapsed since start: 6.319 seconds

[QRM NOTE]: Time elapsed since last: 0.075 seconds

[QRM NOTE]: Peak memory: 1201274 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.322 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 150885 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1--0
0     : ['chosenAt(quorum__node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : --10
1     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -1-0
2     : ['decided(value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 01--
3     : ['decided(value0)', '~chosenAt(quorum__node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : 0-1-
4     : ['vote(node0,value0)', '~chosenAt(quorum__node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 0--1
5     : ['voted(node0)', '~chosenAt(quorum__node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : --01
6     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
7 (*) : 1-0-
7     : ['chosenAt(quorum__node0,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : -10-
8     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 9

[PRIME NOTE]: number of orbits before merging: 9

[PRIME NOTE]: number of primes: 9

[QRM NOTE]: Time elapsed since start: 6.333 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1218646 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

====================================================================================================

definition primes: {4, 7}


New level: 0
 pending : [0, 1, 2, 3, 5, 6, 8]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 5, 6, 8]
 solution : []

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, 4), (1, 4), (2, 8), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Covered at level 0 : set()

After reduction : 
 pending  : [0, 1, 2, 3, 5, 6, 8]
 solution : []

[QRM NOTE]: Time elapsed since start: 6.337 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 171578 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1--0
0     : ['chosenAt(quorum__node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node0,value0)', '~voted(node0)', 'member(node0,quorum__node0)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))), Const('value0', EnumeratedSort('value', ('value0',))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))))]}

const2sigs: {Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))): [quorum$0$chosenAt$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$chosenAt$1$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$1$voted$0$0, node$0$member$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'quorum$0$member$1$0': Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0',)): [quorum$0$chosenAt$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0',)): [value$0$chosenAt$1$0], EnumeratedSort('node', ('node0',)): [node$0$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0',)): quorum$0$chosenAt$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0',)): value$0$chosenAt$1$0, EnumeratedSort('node', ('node0',)): node$0$member$0$0; node$1$voted$0$0}

part_sig: ('node$0$member$0$0; node$1$voted$0$0', 'quorum$0$chosenAt$0$0; quorum$0$member$1$0', 'value$0$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node0,value0)', '~voted(node0)', 'member(node0,quorum__node0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('quorum', ('quorum__node0',)), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0',)), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0',)),), 'member': (EnumeratedSort('node', ('node0',)), EnumeratedSort('quorum', ('quorum__node0',)))}

sign_func_name2count:  {'0$chosenAt': 1, '1$voted': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0',)): [quorum$0$chosenAt$0$0; quorum$0$member$1$0], EnumeratedSort('value', ('value0',)): [value$0$chosenAt$1$0], EnumeratedSort('node', ('node0',)): [node$0$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0',)): quorum$0$chosenAt$0$0; quorum$0$member$1$0, EnumeratedSort('value', ('value0',)): value$0$chosenAt$1$0, EnumeratedSort('node', ('node0',)): node$0$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0; quorum$0$member$1': [quorum$0$chosenAt$0$0; quorum$0$member$1$0]}

	identical_single_classes: {'quorum$0$chosenAt$0; quorum$0$member$1': quorum$0$chosenAt$0$0; quorum$0$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$1$voted$0': [node$0$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$member$0; node$1$voted$0': node$0$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['chosenAt(QUORUM0,VALUE0)', '~voted(NODE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. ~chosenAt(QUORUM0,VALUE0) | voted(NODE0) | ~member(NODE0,QUORUM0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : --10
1     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value0)', '~voted(node0)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('value0', EnumeratedSort('value', ('value0',))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node0,value0)', '~voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0',)), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0',)): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0',)): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -1-0
2     : ['decided(value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~voted(node0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0',)): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0',)): node$1$voted$0$0}

part_sig: ('node$1$voted$0$0', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~voted(node0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'voted': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0], EnumeratedSort('node', ('node0',)): [node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0, EnumeratedSort('node', ('node0',)): node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. voted(NODE0) | ~decided(VALUE0)


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 01--
3     : ['decided(value0)', '~chosenAt(quorum__node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0,value0)', 'decided(value0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)]}

const2sigs: {Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))): [quorum$1$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$chosenAt$1$0, value$0$decided$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$chosenAt$1$0}

part_sig: ('quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0,value0)', 'decided(value0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0',)), EnumeratedSort('value', ('value0',))), 'decided': (EnumeratedSort('value', ('value0',)),)}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0',)): [quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$chosenAt$1$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0',)): quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$chosenAt$1$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0]}

	identical_single_classes: {'quorum$1$chosenAt$0': quorum$1$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 0--1
5     : ['voted(node0)', '~chosenAt(quorum__node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0,value0)', 'voted(node0)', 'member(node0,quorum__node0)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0',))),)], '0$member': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))))]}

const2sigs: {Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$chosenAt$1$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$0$voted$0$0, node$0$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$member$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'quorum$0$member$1$0': Const('quorum__node0', EnumeratedSort('quorum', ('quorum__node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0',)): [quorum$0$member$1$0; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$1$chosenAt$1$0], EnumeratedSort('node', ('node0',)): [node$0$member$0$0; node$0$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0',)): quorum$0$member$1$0; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$1$chosenAt$1$0, EnumeratedSort('node', ('node0',)): node$0$member$0$0; node$0$voted$0$0}

part_sig: ('node$0$member$0$0; node$0$voted$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0', 'value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0,value0)', 'voted(node0)', 'member(node0,quorum__node0)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('quorum', ('quorum__node0',)), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0',)), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0',)),), 'member': (EnumeratedSort('node', ('node0',)), EnumeratedSort('quorum', ('quorum__node0',)))}

sign_func_name2count:  {'1$chosenAt': 1, '0$voted': 1, '0$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0',)): [quorum$0$member$1$0; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0',)): [value$1$chosenAt$1$0], EnumeratedSort('node', ('node0',)): [node$0$member$0$0; node$0$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0',)): quorum$0$member$1$0; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0',)): value$1$chosenAt$1$0, EnumeratedSort('node', ('node0',)): node$0$member$0$0; node$0$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': quorum$0$member$1$0; quorum$1$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$chosenAt$1': [value$1$chosenAt$1$0]}

	identical_single_classes: {'value$1$chosenAt$1': value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$voted$0': [node$0$member$0$0; node$0$voted$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$voted$0': node$0$member$0$0; node$0$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', '~chosenAt(QUORUM0,VALUE0)', 'member(NODE0,QUORUM0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,QUORUM0. ~voted(NODE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0)


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : --01
6     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node0,value0)', 'voted(node0)']

sign_func_name2args: {'1$vote': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('value0', EnumeratedSort('value', ('value0',))))], '0$voted': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$vote$0$0, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0',))): [value$1$vote$1$0]}

sig2const: {'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$0$voted$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0', 'value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~vote(node0,value0)', 'voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('value', ('value0',)), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0',)), EnumeratedSort('value', ('value0',))), 'voted': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'1$vote': 1, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$voted$0$0; node$1$vote$0$0], EnumeratedSort('value', ('value0',)): [value$1$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$voted$0$0; node$1$vote$0$0, EnumeratedSort('value', ('value0',)): value$1$vote$1$0}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. ~voted(NODE0) | vote(NODE0,VALUE0)


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : -10-
8     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0',))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('value0', EnumeratedSort('value', ('value0',))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0',))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0',))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0',)): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0',)): node$1$vote$0$0}

part_sig: ('node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0',)), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('value', ('value0',)), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0',)),), 'vote': (EnumeratedSort('node', ('node0',)), EnumeratedSort('value', ('value0',)))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0',)): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0',)): [node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0',)): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0',)): node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0',)))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('VALUE0', EnumeratedSort('value', ('value0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0)


---------- Quantifier Inference: orbit 8 ----------

[QI_CHECK RESULT]: PASS


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 1--0
0     : ['chosenAt(quorum__node0,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,NODE0,QUORUM0. ~chosenAt(QUORUM0,VALUE0) | voted(NODE0) | ~member(NODE0,QUORUM0)
qcost : 6




=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : --10
1     : ['vote(node0,value0)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -1-0
2     : ['decided(value0)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. voted(NODE0) | ~decided(VALUE0)
qcost : 4




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : 01--
3     : ['decided(value0)', '~chosenAt(quorum__node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)
qcost : 4




=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 0--1
5     : ['voted(node0)', '~chosenAt(quorum__node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,NODE0,QUORUM0. ~voted(NODE0) | chosenAt(QUORUM0,VALUE0) | ~member(NODE0,QUORUM0)
qcost : 6




=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : --01
6     : ['voted(node0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. ~voted(NODE0) | vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : -10-
8     : ['decided(value0)', '~vote(node0,value0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 6.432 seconds

[QRM NOTE]: Time elapsed since last: 0.095 seconds

[QRM NOTE]: Peak memory: 1843190 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

=================================================================================================


New level: 1
 pending : [0, 1, 2, 3, 5, 6, 8]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 5, 6, 8]
 solution : []

Essensial at level 1 : set()

Before removed
 coverage : [(0, 4), (1, 4), (2, 8), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

After removed
 coverage : [(0, 4), (1, 4), (2, 8), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Covered at level 1 : set()

After reduction : 
 pending  : [0, 1, 2, 3, 5, 6, 8]
 solution : []


Solution : [] has cost 0.


Decide in level 1 among pending : [0, 1, 2, 3, 5, 6, 8]

Coverage : [(0, 4), (1, 4), (2, 8), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Decide 2 with phase True at level 1

After decision at level 1
 pending : [0, 1, 3, 5, 6, 8]
 solution : [2]


New level: 2
 pending : [0, 1, 3, 5, 6, 8]
 solution : [2]


Before reduction : 
 pending  : [0, 1, 3, 5, 6, 8]
 solution : [2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, 4), (1, 4), (2, 8), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

After removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, 2), (4, -1), (5, 4), (6, 4), (7, -1), (8, 2)]

Covered at level 2 : set()

After reduction : 
 pending  : [0, 1, 3, 5, 6, 8]
 solution : [2]


Solution : [2] has cost 4.


Decide in level 2 among pending : [0, 1, 3, 5, 6, 8]

Coverage : [(0, 2), (1, 2), (2, -1), (3, 2), (4, -1), (5, 4), (6, 4), (7, -1), (8, 2)]

Decide 5 with phase True at level 2

After decision at level 2
 pending : [0, 1, 3, 6, 8]
 solution : [2, 5]


New level: 3
 pending : [0, 1, 3, 6, 8]
 solution : [2, 5]


Before reduction : 
 pending  : [0, 1, 3, 6, 8]
 solution : [2, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, 2), (4, -1), (5, 4), (6, 4), (7, -1), (8, 2)]

After removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0)]

Covered at level 3 : {8, 3, 6}

After reduction : 
 pending  : [0, 1]
 solution : [2, 5]


Before reduction : 
 pending  : [0, 1]
 solution : [2, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0)]

After removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [0, 1]
 solution : [2, 5]


Solution : [2, 5] has cost 10.


Decide in level 3 among pending : [0, 1]

Coverage : [(0, 2), (1, 2), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Decide 0 with phase True at level 3

After decision at level 3
 pending : [1]
 solution : [2, 5, 0]


New level: 4
 pending : [1]
 solution : [2, 5, 0]


Before reduction : 
 pending  : [1]
 solution : [2, 5, 0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 4 : {1}

After reduction : 
 pending  : []
 solution : [2, 5, 0]


Before reduction : 
 pending  : []
 solution : [2, 5, 0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [2, 5, 0]


Solution : [2, 5, 0] has cost 16.


Before backtrack at level 4
 pending : []
 solution : [2, 5, 0]

After backtrack at level 4
 pending : [1]
 solution : [2, 5, 0]


Invert decision for 0 at level 3


New level: 4
 pending : [1]
 solution : [2, 5]


Before reduction : 
 pending  : [1]
 solution : [2, 5]

Essensial at level 4 : {1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [2, 5, 1]


Before reduction : 
 pending  : []
 solution : [2, 5, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [2, 5, 1]


Solution : [2, 5, 1] has cost 14.


Before backtrack at level 4
 pending : []
 solution : [2, 5, 1]

After backtrack at level 4
 pending : [1]
 solution : [2, 5]


Before backtrack at level 3
 pending : [1]
 solution : [2, 5]

After backtrack at level 3
 pending : [1, 3, 6, 8, 0]
 solution : [2, 5]


Invert decision for 5 at level 2


New level: 3
 pending : [1, 3, 6, 8, 0]
 solution : [2]


Before reduction : 
 pending  : [1, 3, 6, 8, 0]
 solution : [2]

Essensial at level 3 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0)]

Covered at level 3 : {8, 3}

After reduction : 
 pending  : [1, 0]
 solution : [2, 6]


Before reduction : 
 pending  : [1, 0]
 solution : [2, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0)]

After removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [1, 0]
 solution : [2, 6]


Solution : [2, 6] has cost 8.


Decide in level 3 among pending : [1, 0]

Coverage : [(0, 2), (1, 2), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Decide 1 with phase True at level 3

After decision at level 3
 pending : [0]
 solution : [2, 6, 1]


New level: 4
 pending : [0]
 solution : [2, 6, 1]


Before reduction : 
 pending  : [0]
 solution : [2, 6, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, 2), (1, 2), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, 0), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 4 : {0}

After reduction : 
 pending  : []
 solution : [2, 6, 1]


Before reduction : 
 pending  : []
 solution : [2, 6, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, 0), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [2, 6, 1]


Solution : [2, 6, 1] has cost 12.


Before backtrack at level 4
 pending : []
 solution : [2, 6, 1]

After backtrack at level 4
 pending : [0]
 solution : [2, 6, 1]


Invert decision for 1 at level 3


New level: 4
 pending : [0]
 solution : [2, 6]


Before reduction : 
 pending  : [0]
 solution : [2, 6]

Essensial at level 4 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [2, 6, 0]


Before reduction : 
 pending  : []
 solution : [2, 6, 0]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [2, 6, 0]


Solution : [2, 6, 0] has cost 14.


Before backtrack at level 4
 pending : []
 solution : [2, 6, 0]

After backtrack at level 4
 pending : [0]
 solution : [2, 6]


Before backtrack at level 3
 pending : [0]
 solution : [2, 6]

After backtrack at level 3
 pending : [0, 6, 3, 8, 1]
 solution : [2]


Before backtrack at level 2
 pending : [0, 6, 3, 8, 1]
 solution : [2]

After backtrack at level 2
 pending : [0, 6, 3, 8, 1, 5]
 solution : [2]


Invert decision for 2 at level 1


New level: 2
 pending : [0, 6, 3, 8, 1, 5]
 solution : []


Before reduction : 
 pending  : [0, 6, 3, 8, 1, 5]
 solution : []

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, 4), (1, 4), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Covered at level 2 : set()

After reduction : 
 pending  : [0, 6, 3, 8, 1, 5]
 solution : []


Solution : [] has cost 0.


Decide in level 2 among pending : [0, 6, 3, 8, 1, 5]

Coverage : [(0, 4), (1, 4), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Decide 0 with phase True at level 2

After decision at level 2
 pending : [6, 3, 8, 1, 5]
 solution : [0]


New level: 3
 pending : [6, 3, 8, 1, 5]
 solution : [0]


Before reduction : 
 pending  : [6, 3, 8, 1, 5]
 solution : [0]

Essensial at level 3 : set()

Before removed
 coverage : [(0, 4), (1, 4), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Covered at level 3 : {1}

After reduction : 
 pending  : [6, 3, 8, 5]
 solution : [0]


Before reduction : 
 pending  : [6, 3, 8, 5]
 solution : [0]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Covered at level 3 : set()

After reduction : 
 pending  : [6, 3, 8, 5]
 solution : [0]


Solution : [0] has cost 6.


Decide in level 3 among pending : [6, 3, 8, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Decide 6 with phase True at level 3

After decision at level 3
 pending : [3, 8, 5]
 solution : [0, 6]


New level: 4
 pending : [3, 8, 5]
 solution : [0, 6]


Before reduction : 
 pending  : [3, 8, 5]
 solution : [0, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 0), (6, -1), (7, -1), (8, 2)]

Covered at level 4 : {5}

After reduction : 
 pending  : [3, 8]
 solution : [0, 6]


Before reduction : 
 pending  : [3, 8]
 solution : [0, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 0), (6, -1), (7, -1), (8, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 8]
 solution : [0, 6]


Solution : [0, 6] has cost 10.


Decide in level 4 among pending : [3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2)]

Decide 3 with phase True at level 4

After decision at level 4
 pending : [8]
 solution : [0, 6, 3]


New level: 5
 pending : [8]
 solution : [0, 6, 3]


Before reduction : 
 pending  : [8]
 solution : [0, 6, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0)]

Covered at level 5 : {8}

After reduction : 
 pending  : []
 solution : [0, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 6, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 3]


Solution : [0, 6, 3] has cost 14.


Before backtrack at level 5
 pending : []
 solution : [0, 6, 3]

After backtrack at level 5
 pending : [8]
 solution : [0, 6, 3]


Invert decision for 3 at level 4


New level: 5
 pending : [8]
 solution : [0, 6]


Before reduction : 
 pending  : [8]
 solution : [0, 6]

Essensial at level 5 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 6, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 6, 8]


Solution : [0, 6, 8] has cost 14.


Before backtrack at level 5
 pending : []
 solution : [0, 6, 8]

After backtrack at level 5
 pending : [8]
 solution : [0, 6]


Before backtrack at level 4
 pending : [8]
 solution : [0, 6]

After backtrack at level 4
 pending : [8, 5, 3]
 solution : [0, 6]


Invert decision for 6 at level 3


New level: 4
 pending : [8, 5, 3]
 solution : [0]


Before reduction : 
 pending  : [8, 5, 3]
 solution : [0]

Essensial at level 4 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [8, 3]
 solution : [0, 5]


Before reduction : 
 pending  : [8, 3]
 solution : [0, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [8, 3]
 solution : [0, 5]


Solution : [0, 5] has cost 12.


Decide in level 4 among pending : [8, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2)]

Decide 8 with phase True at level 4

After decision at level 4
 pending : [3]
 solution : [0, 5, 8]


New level: 5
 pending : [3]
 solution : [0, 5, 8]


Before reduction : 
 pending  : [3]
 solution : [0, 5, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : {3}

After reduction : 
 pending  : []
 solution : [0, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 8]


Solution : [0, 5, 8] has cost 16.


Before backtrack at level 5
 pending : []
 solution : [0, 5, 8]

After backtrack at level 5
 pending : [3]
 solution : [0, 5, 8]


Invert decision for 8 at level 4


New level: 5
 pending : [3]
 solution : [0, 5]


Before reduction : 
 pending  : [3]
 solution : [0, 5]

Essensial at level 5 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 3]


Before reduction : 
 pending  : []
 solution : [0, 5, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 3]


Solution : [0, 5, 3] has cost 16.


Before backtrack at level 5
 pending : []
 solution : [0, 5, 3]

After backtrack at level 5
 pending : [3]
 solution : [0, 5]


Before backtrack at level 4
 pending : [3]
 solution : [0, 5]

After backtrack at level 4
 pending : [3, 5, 8]
 solution : [0]


Before backtrack at level 3
 pending : [3, 5, 8]
 solution : [0]

After backtrack at level 3
 pending : [3, 5, 8, 1, 6]
 solution : [0]


Invert decision for 0 at level 2


New level: 3
 pending : [3, 5, 8, 1, 6]
 solution : []


Before reduction : 
 pending  : [3, 5, 8, 1, 6]
 solution : []

Essensial at level 3 : {1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 5, 8, 6]
 solution : [1]


Before reduction : 
 pending  : [3, 5, 8, 6]
 solution : [1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 5, 8, 6]
 solution : [1]


Solution : [1] has cost 4.


Decide in level 3 among pending : [3, 5, 8, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

Decide 3 with phase True at level 3

After decision at level 3
 pending : [5, 8, 6]
 solution : [1, 3]


New level: 4
 pending : [5, 8, 6]
 solution : [1, 3]


Before reduction : 
 pending  : [5, 8, 6]
 solution : [1, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 4), (4, -1), (5, 4), (6, 4), (7, -1), (8, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, 0)]

Covered at level 4 : {8}

After reduction : 
 pending  : [5, 6]
 solution : [1, 3]


Before reduction : 
 pending  : [5, 6]
 solution : [1, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [5, 6]
 solution : [1, 3]


Solution : [1, 3] has cost 8.


Decide in level 4 among pending : [5, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, -1)]

Decide 5 with phase True at level 4

After decision at level 4
 pending : [6]
 solution : [1, 3, 5]


New level: 5
 pending : [6]
 solution : [1, 3, 5]


Before reduction : 
 pending  : [6]
 solution : [1, 3, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1)]

Covered at level 5 : {6}

After reduction : 
 pending  : []
 solution : [1, 3, 5]


Before reduction : 
 pending  : []
 solution : [1, 3, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 5]


Solution : [1, 3, 5] has cost 14.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 5]

After backtrack at level 5
 pending : [6]
 solution : [1, 3, 5]


Invert decision for 5 at level 4


New level: 5
 pending : [6]
 solution : [1, 3]


Before reduction : 
 pending  : [6]
 solution : [1, 3]

Essensial at level 5 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 6]


Before reduction : 
 pending  : []
 solution : [1, 3, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 3, 6]


Solution : [1, 3, 6] has cost 12.


Before backtrack at level 5
 pending : []
 solution : [1, 3, 6]

After backtrack at level 5
 pending : [6]
 solution : [1, 3]


Before backtrack at level 4
 pending : [6]
 solution : [1, 3]

After backtrack at level 4
 pending : [6, 8, 5]
 solution : [1, 3]


Invert decision for 3 at level 3


New level: 4
 pending : [6, 8, 5]
 solution : [1]


Before reduction : 
 pending  : [6, 8, 5]
 solution : [1]

Essensial at level 4 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 5]
 solution : [1, 8]


Before reduction : 
 pending  : [6, 5]
 solution : [1, 8]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 5]
 solution : [1, 8]


Solution : [1, 8] has cost 8.


Decide in level 4 among pending : [6, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, -1)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [5]
 solution : [1, 8, 6]


New level: 5
 pending : [5]
 solution : [1, 8, 6]


Before reduction : 
 pending  : [5]
 solution : [1, 8, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, 2), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : {5}

After reduction : 
 pending  : []
 solution : [1, 8, 6]


Before reduction : 
 pending  : []
 solution : [1, 8, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 8, 6]


Solution : [1, 8, 6] has cost 12.


Before backtrack at level 5
 pending : []
 solution : [1, 8, 6]

After backtrack at level 5
 pending : [5]
 solution : [1, 8, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [5]
 solution : [1, 8]


Before reduction : 
 pending  : [5]
 solution : [1, 8]

Essensial at level 5 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 8, 5]


Before reduction : 
 pending  : []
 solution : [1, 8, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 8, 5]


Solution : [1, 8, 5] has cost 14.


Before backtrack at level 5
 pending : []
 solution : [1, 8, 5]

After backtrack at level 5
 pending : [5]
 solution : [1, 8]


Before backtrack at level 4
 pending : [5]
 solution : [1, 8]

After backtrack at level 4
 pending : [5, 8, 6]
 solution : [1]


Before backtrack at level 3
 pending : [5, 8, 6]
 solution : [1]

After backtrack at level 3
 pending : [5, 8, 6, 1, 3]
 solution : []


Before backtrack at level 2
 pending : [5, 8, 6, 1, 3]
 solution : []

After backtrack at level 2
 pending : [5, 8, 6, 1, 3, 0]
 solution : []


Before backtrack at level 1
 pending : [5, 8, 6, 1, 3, 0]
 solution : []

After backtrack at level 1
 pending : [5, 8, 6, 1, 3, 0, 2]
 solution : []


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 3

[MIN NOTE]: total qcost: 12

[MIN NOTE]: maximum branch and bound depth: 5

Definitions (length=1)

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [2, 6, 1] (length = 3)

invariant [invar_2] forall VALUE0,NODE0. voted(NODE0) | ~decided(VALUE0) # qcost: 4

invariant [invar_6] forall VALUE0,NODE0. ~voted(NODE0) | vote(NODE0,VALUE0) # qcost: 4

invariant [invar_1] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4




Solution 1 : [1, 3, 6] (length = 3)

invariant [invar_1] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_3] forall VALUE0,QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0) # qcost: 4

invariant [invar_6] forall VALUE0,NODE0. ~voted(NODE0) | vote(NODE0,VALUE0) # qcost: 4




Solution 2 : [1, 8, 6] (length = 3)

invariant [invar_1] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_8] forall VALUE0,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0) # qcost: 4

invariant [invar_6] forall VALUE0,NODE0. ~voted(NODE0) | vote(NODE0,VALUE0) # qcost: 4




[QRM NOTE]: Time elapsed since start: 6.532 seconds

[QRM NOTE]: Time elapsed since last: 0.100 seconds

[QRM NOTE]: Peak memory: 1833223 bytes


===================================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

===================================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

Minimization check for Solution 1

[MIN_CHECK RESULT]: PASS

Minimization check for Solution 2

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.541 seconds

[QRM NOTE]: Time elapsed since last: 0.009 seconds

[QRM NOTE]: Peak memory: 786609 bytes


====================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1]

====================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 45: invar_2
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 46: invar_6
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 47: invar_1

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 45: invar_2 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 46: invar_6 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 47: invar_1 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 45: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 46: invar_6 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 47: invar_1 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 45: invar_2 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 46: invar_6 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 47: invar_1 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy: line 30: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 45: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 46: invar_3
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 47: invar_6

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 45: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 46: invar_3 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 47: invar_6 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 46: invar_3 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 47: invar_6 ... FAIL
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 46: invar_3 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 47: invar_6 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy: line 30: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 45: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 46: invar_8
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 47: invar_6

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 45: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 46: invar_8 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 47: invar_6 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 46: invar_8 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 47: invar_6 ... FAIL
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 46: invar_8 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 47: invar_6 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy: line 30: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 12.190 seconds

[QRM NOTE]: Time elapsed since last: 5.649 seconds

[QRM NOTE]: Peak memory: 837157 bytes


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy -s node=3,value=1 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_1.finite.cpp toy_consensus_epr.node_3_value_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_1.finite.o toy_consensus_epr.node_3_value_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 10

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 6

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 6.126 seconds

[QRM NOTE]: Time elapsed since last: 6.126 seconds

[QRM NOTE]: Peak memory: 1178376 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        12

[FW NOTE]: number of dfs representative states:     6

[FW NOTE]: number of dfs non-representative states: 6


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
predicate: voted('node',)
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', 'decided(value0)', 'vote(node0,value0)', 'vote(node1,value0)', 'vote(node2,value0)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 79787, 491435, 524203, 112555


=== State Orbit 0 =====================
size : 1
repr state: 0000000000
lex min decimal: 427
states:
0000000000




=== State Orbit 1 =====================
size : 3
repr state: 0000100100
lex min decimal: 5035
states:
0000010010
0000001001
0000100100




=== State Orbit 2 =====================
size : 3
repr state: 1000110110
lex min decimal: 79787
states:
0100101101
1000110110
0010011011




=== State Orbit 3 =====================
size : 1
repr state: 1110111111
lex min decimal: 491435
states:
1110111111




=== State Orbit 4 =====================
size : 1
repr state: 1111111111
lex min decimal: 524203
states:
1111111111




=== State Orbit 5 =====================
size : 3
repr state: 1001110110
lex min decimal: 112555
states:
1001110110
0011011011
0101101101



[QRM NOTE]: Time elapsed since start: 6.200 seconds

[QRM NOTE]: Time elapsed since last: 0.074 seconds

[QRM NOTE]: Peak memory: 1210470 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

====================================================================================================================================

Representatitive states in reachability not in Rmin

{112555}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.273 seconds

[QRM NOTE]: Time elapsed since last: 0.072 seconds

[QRM NOTE]: Peak memory: 202998 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.0.ivy -s node=1,value=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=2]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus_epr.node_1_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_1_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_1_value_2.finite.cpp toy_consensus_epr.node_1_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_1_value_2.finite.o toy_consensus_epr.node_1_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 7

[FW NOTE]: number of interpreted atoms (e.g. member,le): 1

[FW NOTE]: number of branching actions: 4

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.179 seconds

[QRM NOTE]: Time elapsed since last: 6.179 seconds

[QRM NOTE]: Peak memory: 1176939 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        5

[FW NOTE]: number of dfs representative states:     3

[FW NOTE]: number of dfs non-representative states: 2


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=2]

===============================================================================================================

sort: node=['node0']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0']
predicate: member('node', 'quorum')
predicate: decided('value',)
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0)': '1'}
state atoms: ['chosenAt(quorum__node0,value0)', 'chosenAt(quorum__node0,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'voted(node0)']
representative states : 1, 71, 87


=== State Orbit 0 =====================
size : 1
repr state: 0000000
lex min decimal: 1
states:
0000000




=== State Orbit 1 =====================
size : 2
repr state: 1000101
lex min decimal: 71
states:
1000101
0100011




=== State Orbit 2 =====================
size : 2
repr state: 1010101
lex min decimal: 87
states:
1010101
0101011



[QRM NOTE]: Time elapsed since start: 6.258 seconds

[QRM NOTE]: Time elapsed since last: 0.080 seconds

[QRM NOTE]: Peak memory: 1203846 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=2]

====================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 255, binary: 1111111

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.278 seconds

[QRM NOTE]: Time elapsed since last: 0.020 seconds

[QRM NOTE]: Peak memory: 165649 bytes

next size: node=3,value=2


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy -s node=3,value=1 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

====================================================================================================================================

Representatitive states in reachability not in Rmin

{112555}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.097 seconds

[QRM NOTE]: Time elapsed since last: 0.097 seconds

[QRM NOTE]: Peak memory: 46579 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.1.ivy -s node=1,value=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=2]

====================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 255, binary: 1111111

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.037 seconds

[QRM NOTE]: Time elapsed since last: 0.037 seconds

[QRM NOTE]: Peak memory: 15172 bytes

next size: node=3,value=2


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=1

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy -s node=3,value=1 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=1]

====================================================================================================================================

Representatitive states in reachability not in Rmin

{112555}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.089 seconds

[QRM NOTE]: Time elapsed since last: 0.089 seconds

[QRM NOTE]: Peak memory: 46643 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_1_value_1.2.ivy -s node=1,value=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=1,value=2]

====================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 255, binary: 1111111

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 0.035 seconds

[QRM NOTE]: Time elapsed since last: 0.035 seconds

[QRM NOTE]: Peak memory: 15204 bytes

next size: node=3,value=2


************************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2

************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=3,value=2 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_2.finite.cpp toy_consensus_epr.node_3_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_2.finite.o toy_consensus_epr.node_3_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 17

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 12

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 6.609 seconds

[QRM NOTE]: Time elapsed since last: 6.609 seconds

[QRM NOTE]: Peak memory: 1182809 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        41

[FW NOTE]: number of dfs representative states:     9

[FW NOTE]: number of dfs non-representative states: 32


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: decided('value',)
predicate: member('node', 'quorum')
predicate: chosenAt('quorum', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 1071019, 22110123, 22372267, 1204139, 1466283, 1333163, 26539


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000000
lex min decimal: 427
states:
00000000000000000




=== State Orbit 1 =====================
size : 6
repr state: 00000000100000100
lex min decimal: 5035
states:
00000000000100010
00000000000001001
00000000000010001
00000000010000100
00000000100000100
00000000001000010




=== State Orbit 2 =====================
size : 6
repr state: 10000000101000110
lex min decimal: 1071019
states:
00000100000101011
00010000010001101
10000000101000110
00100000100010101
01000000010100110
00001000001010011




=== State Orbit 3 =====================
size : 2
repr state: 10101000101010111
lex min decimal: 22110123
states:
01010100010101111
10101000101010111




=== State Orbit 4 =====================
size : 2
repr state: 10101010101010111
lex min decimal: 22372267
states:
10101010101010111
01010101010101111




=== State Orbit 5 =====================
size : 6
repr state: 10000000101001111
lex min decimal: 1204139
states:
00001000011010111
00000100100101111
00010000011001111
00100000100110111
10000000101001111
01000000010110111




=== State Orbit 6 =====================
size : 6
repr state: 10000010101001111
lex min decimal: 1466283
states:
00001010011010111
00000101100101111
01000001010110111
10000010101001111
00010001011001111
00100010100110111




=== State Orbit 7 =====================
size : 6
repr state: 10000010101000110
lex min decimal: 1333163
states:
10000010101000110
01000001010100110
00010001010001101
00000101000101011
00001010001010011
00100010100010101




=== State Orbit 8 =====================
size : 6
repr state: 00000000100100110
lex min decimal: 26539
states:
00000000001001011
00000000100100110
00000000010010101
00000000011000110
00000000100001101
00000000000110011



[QRM NOTE]: Time elapsed since start: 6.711 seconds

[QRM NOTE]: Time elapsed since last: 0.102 seconds

[QRM NOTE]: Peak memory: 1226990 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.712 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 183839 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 12
num_suborbits: 1
0 (*) : ----1-----------0
0     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node2)']
1     : -----1----------0
1     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node2)']
2     : ----1----------0-
2     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node1)']
3     : -----1---------0-
3     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node1)']
4     : --1-------------0
4     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node2)']
5     : ---1------------0
5     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node2)']
6     : --1-----------0--
6     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node0)']
7     : ---1----------0--
7     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node0)']
8     : 1--------------0-
8     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
9     : -1-------------0-
9     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node1)']
10     : 1-------------0--
10     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
11     : -1------------0--
11     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : ----1--1---------
18     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
19     : -----11----------
19     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
22     : 1------1---------
22     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
23     : -1----1----------
23     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
24 (*) : ------11---------
24     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 1
25 (*) : --1-----0--------
25     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
26     : ---1-----0-------
26     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
27     : 1-------0--------
27     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
28     : -1-------0-------
28     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
29     : ----1-----0------
29     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
30     : -----1-----0-----
30     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
31     : 1---------0------
31     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
32     : -1---------0-----
32     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
33     : ----1-------0----
33     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
34     : -----1-------0---
34     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
35     : --1---------0----
35     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
36     : ---1---------0---
36     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 1
37 (*) : --1------1-------
37     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
38     : ---1----1--------
38     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
39     : 1--------1-------
39     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
40     : -1------1--------
40     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
41     : ----1------1-----
41     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
42     : -----1----1------
42     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
43     : 1----------1-----
43     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
44     : -1--------1------
44     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
45     : ----1--------1---
45     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
46     : -----1------1----
46     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
47     : --1----------1---
47     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
48     : ---1--------1----
48     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 9
num_suborbits: 2
49 (*) : -11--------------
49     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
50     : 1--1-------------
50     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
51     : -1--1------------
51     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
52     : 1----1-----------
52     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
53     : ---11------------
53     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
54     : --1--1-----------
54     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
55 (*) : --11-------------
55     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
56     : 11---------------
56     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
57     : ----11-----------
57     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
58 (*) : ------------11---
58     : ['vote(node2,value0)', 'vote(node2,value1)']
59     : ----------11-----
59     : ['vote(node1,value0)', 'vote(node1,value1)']
60     : --------11-------
60     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 12
num_suborbits: 1
61 (*) : --0-1---1--------
61     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
62     : ---0-1---1-------
62     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
63     : 0---1---1--------
63     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
64     : -0---1---1-------
64     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
65     : --1-0-----1------
65     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
66     : ---1-0-----1-----
66     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
67     : 0-1-------1------
67     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
68     : -0-1-------1-----
68     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
69     : 1---0-------1----
69     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
70     : -1---0-------1---
70     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
71     : 1-0---------1----
71     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
72     : -1-0---------1---
72     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
73 (*) : 1-0-1------------
73     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
74     : -1-0-1-----------
74     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
75     : 0-1-1------------
75     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
76     : -0-1-1-----------
76     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
77     : 1-1-0------------
77     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
78     : -1-1-0-----------
78     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
79 (*) : --0-----1---1----
79     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
80     : ---0-----1---1---
80     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
81     : 0-------1-1------
81     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
82     : -0-------1-1-----
82     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
83     : ----0-----1-1----
83     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
84     : -----0-----1-1---
84     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
85 (*) : -------11---1----
85     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
86     : ------1--1---1---
86     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
87     : -------11-1------
87     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
88     : ------1--1-1-----
88     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
89     : -------1--1-1----
89     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
90     : ------1----1-1---
90     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 12
num_suborbits: 1
91 (*) : -------11----0---
91     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
92     : ------1--1--0----
92     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
93     : -------11--0-----
93     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
94     : ------1--10------
94     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
95     : -------1--1--0---
95     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
96     : ------1----10----
96     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
97     : -------1-01------
97     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
98     : ------1-0--1-----
98     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
99     : -------1---01----
99     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
100     : ------1---0--1---
100     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
101     : -------1-0--1----
101     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
102     : ------1-0----1---
102     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
103 (*) : -----0-11--------
103     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
104     : ----0-1--1-------
104     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
105     : ---0---1--1------
105     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
106     : --0---1----1-----
106     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
107     : -0-----1----1----
107     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
108     : 0-----1------1---
108     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 12
num_suborbits: 1
109 (*) : -------11------0-
109     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
110     : ------1--1-----0-
110     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
111     : -------11-------0
111     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
112     : ------1--1------0
112     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
113     : -------1--1---0--
113     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
114     : ------1----1--0--
114     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
115     : -------1--1-----0
115     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
116     : ------1----1----0
116     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
117     : -------1----1-0--
117     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
118     : ------1------10--
118     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
119     : -------1----1--0-
119     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
120     : ------1------1-0-
120     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
121 (*) : -0-----1-----0---
121     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
122     : 0-----1-----0----
122     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
123     : ---0---1---0-----
123     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
124     : --0---1---0------
124     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
125     : -----0-1-0-------
125     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
126     : ----0-1-0--------
126     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : -------1-0---0---
127     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
128     : ------1-0---0----
128     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
129     : -------1-0-0-----
129     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
130     : ------1-0-0------
130     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
131     : -------1---0-0---
131     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
132     : ------1---0-0----
132     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
133 (*) : ---0---1-------0-
133     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
134     : --0---1--------0-
134     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
135     : -0-----1--------0
135     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
136     : 0-----1---------0
136     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
137     : -----0-1------0--
137     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
138     : ----0-1-------0--
138     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
139 (*) : -------1-----0-0-
139     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
140     : ------1-----0--0-
140     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
141     : -------1---0----0
141     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
142     : ------1---0-----0
142     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
143     : -------1-----00--
143     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
144     : ------1-----0-0--
144     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
145     : -------1-0------0
145     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
146     : ------1-0-------0
146     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
147     : -------1---0--0--
147     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
148     : ------1---0---0--
148     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
149     : -------1-0-----0-
149     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
150     : ------1-0------0-
150     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
151 (*) : -------1-------00
151     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
152     : ------1--------00
152     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
153     : -------1------0-0
153     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
154     : ------1-------0-0
154     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
155     : -------1------00-
155     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
156     : ------1-------00-
156     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
157 (*) : ------------00--1
157     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
158     : ----------00---1-
158     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
159     : --------00----1--
159     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
160 (*) : -0---0-1---1-----
160     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
161     : 0---0-1---1------
161     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
162     : ---0-0-1-----1---
162     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
163     : --0-0-1-----1----
163     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
164     : -0-0---1-1-------
164     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
165     : 0-0---1-1--------
165     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 2
num_suborbits: 1
166 (*) : -0-0-0-1---------
166     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
167     : 0-0-0-1----------
167     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 12
num_suborbits: 1
168 (*) : --0-----1----0--1
168     : ['vote(node0,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
169     : ---0-----1--0---1
169     : ['vote(node0,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
170     : 0-------1--0---1-
170     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)']
171     : -0-------10----1-
171     : ['vote(node0,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)']
172     : ----0-----1--0--1
172     : ['vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
173     : -----0-----10---1
173     : ['vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
174     : 0--------01---1--
174     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)']
175     : -0------0--1--1--
175     : ['vote(node1,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)']
176     : ----0------01--1-
176     : ['vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
177     : -----0----0--1-1-
177     : ['vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
178     : --0------0--1-1--
178     : ['vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
179     : ---0----0----11--
179     : ['vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 12
num_suborbits: 1
180 (*) : -1-0--------0---1
180     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
181     : 1-0----------0--1
181     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
182     : -0-1------0----1-
182     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)']
183     : 0-1--------0---1-
183     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)']
184     : -1---0------0---1
184     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
185     : 1---0--------0--1
185     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
186     : -0---1--0-----1--
186     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)']
187     : 0---1----0----1--
187     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)']
188     : ---1-0----0----1-
188     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
189     : --1-0------0---1-
189     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
190     : ---0-1--0-----1--
190     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
191     : --0-1----0----1--
191     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
192 (*) : -0--0----1--1--1-
192     : ['vote(node0,value1)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)']
193     : 0----0--1----1-1-
193     : ['vote(node0,value0)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)']
194     : ---00----11-----1
194     : ['vote(node0,value1)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
195     : --0--0--1--1----1
195     : ['vote(node0,value0)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
196     : -00--------11-1--
196     : ['vote(node1,value1)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
197     : 0--0------1--11--
197     : ['vote(node1,value0)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
198 (*) : 0---0-1----0---1-
198     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
199     : -0---0-1--0----1-
199     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
200     : --0-0-1------0--1
200     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
201     : ---0-0-1----0---1
201     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
202     : 0-0---1--0----1--
202     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
203     : -0-0---10-----1--
203     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
204 (*) : -----0----0-0--11
204     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
205     : ----0------0-0-11
205     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
206     : ---0----0---0-1-1
206     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)']
207     : --0------0---01-1
207     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
208     : -0------0-0---11-
208     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node1,value0)']
209     : 0--------0-0--11-
209     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
210 (*) : 0--00-----1---1-1
210     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
211     : -00--0-----1--1-1
211     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
212     : -00-0-------1-11-
212     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
213     : 0--0-0-------111-
213     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
214     : 0-0--0--1------11
214     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
215     : -0-00----1-----11
215     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 1
216 (*) : ---00---0-1---1-1
216     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
217     : --0--0---0-1--1-1
217     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
218     : -0--0---0---1-11-
218     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
219     : 0----0---0---111-
219     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
220     : --0--0--1-0----11
220     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
221     : ---00----1-0---11
221     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
222     : -00-------0-1-11-
222     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
223     : 0--0-------0-111-
223     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
224     : 0----0--1---0--11
224     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
225     : -0--0----1---0-11
225     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
226     : 0--0------1-0-1-1
226     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)']
227     : -00--------1-01-1
227     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
228 (*) : -00-0--------0111
228     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
229     : 0--0-0------0-111
229     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
230     : 0--00------0--111
230     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
231     : -00--0----0---111
231     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
232     : 0-0--0---0----111
232     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
233     : -0-00---0-----111
233     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
234 (*) : 0--0-------00-111
234     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)', '~vote(node2,value0)']
235     : -00-------0--0111
235     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)', '~vote(node2,value1)']
236     : 0----0---0--0-111
236     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node2,value0)']
237     : -0--0---0----0111
237     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node2,value1)']
238     : --0--0---00---111
238     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node1,value0)']
239     : ---00---0--0--111
239     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 1
num_suborbits: 1
240 (*) : 000000--------111
240     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 34

[PRIME NOTE]: number of primes: 241

[QRM NOTE]: Time elapsed since start: 6.788 seconds

[QRM NOTE]: Time elapsed since last: 0.075 seconds

[QRM NOTE]: Peak memory: 1518655 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

====================================================================================================

definition primes: {8, 9, 10, 4}


New level: 0
 pending : [0, 1, 2, 3, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []

Essensial at level 0 : {1, 20, 7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, 0), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, 0), (24, 0), (25, 0), (26, 32768), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

Covered at level 0 : {0, 32, 5, 6, 23, 24, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7]

Essensial at level 0 : set()

Before removed
 coverage : [(0, 0), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, 0), (24, 0), (25, 0), (26, 32768), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7]

[QRM NOTE]: Time elapsed since start: 6.849 seconds

[QRM NOTE]: Time elapsed since last: 0.062 seconds

[QRM NOTE]: Peak memory: 483057 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', '~voted(node2)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', '~voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
157 (*) : ------------00--1
157     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
158     : ----------00---1-
158     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
159     : --------00----1--
159     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node2,value0)', '~vote(node2,value1)', 'voted(node2)']

sign_func_name2args: {'1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$1]}

sig2const: {'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~vote(node2,value0)', '~vote(node2,value1)', 'voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 2, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$1$vote$1$0, value$1$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$1$vote$1$0 | value$1$vote$1$1}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))


---------- Quantifier Inference: orbit 20 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
58 (*) : ------------11---
58     : ['vote(node2,value0)', 'vote(node2,value1)']
59     : ----------11-----
59     : ['vote(node1,value0)', 'vote(node1,value1)']
60     : --------11-------
60     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node2,value0)', 'vote(node2,value1)']

sign_func_name2args: {'0$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node2,value0)', 'vote(node2,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))


---------- Quantifier Inference: orbit 7 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : ----1--1---------
18     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
19     : -----11----------
19     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
22     : 1------1---------
22     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
23     : -1----1----------
23     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$chosenAt$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decided$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$chosenAt$1$0 | value$0$decided$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['chosenAt(QUORUM0,VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,VALUE1. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
24 (*) : ------11---------
24     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', 'decided(value1)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),), (Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value0)', 'decided(value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: exists VALUE0. ~decided(VALUE0)


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
85 (*) : -------11---1----
85     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
86     : ------1--1---1---
86     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
87     : -------11-1------
87     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
88     : ------1--1-1-----
88     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
89     : -------1--1-1----
89     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
90     : ------1----1-1---
90     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1; value$0$vote$1': [value$0$vote$1$0; value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1; value$0$vote$1': value$0$vote$1$0; value$0$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE1,VALUE1)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0,VALUE1. ~decided(VALUE0) | ~vote(NODE1,VALUE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


---------- Quantifier Inference: orbit 11 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 12 =====================
size : 12
num_suborbits: 1
91 (*) : -------11----0---
91     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
92     : ------1--1--0----
92     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
93     : -------11--0-----
93     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
94     : ------1--10------
94     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
95     : -------1--1--0---
95     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
96     : ------1----10----
96     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
97     : -------1-01------
97     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
98     : ------1-0--1-----
98     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
99     : -------1---01----
99     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
100     : ------1---0--1---
100     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
101     : -------1-0--1----
101     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
102     : ------1-0----1---
102     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)


---------- Quantifier Inference: orbit 12 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
103 (*) : -----0-11--------
103     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
104     : ----0-1--1-------
104     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
105     : ---0---1--1------
105     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
106     : --0---1----1-----
106     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
107     : -0-----1----1----
107     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
108     : 0-----1------1---
108     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', 'vote(node0,value0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', 'vote(node0,value0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~member(NODE0,QUORUM0)', 'vote(NODE0,VALUE1)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0,VALUE1. ~decided(VALUE0) | member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 13 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 14 =====================
size : 12
num_suborbits: 1
109 (*) : -------11------0-
109     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
110     : ------1--1-----0-
110     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
111     : -------11-------0
111     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
112     : ------1--1------0
112     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
113     : -------1--1---0--
113     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
114     : ------1----1--0--
114     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
115     : -------1--1-----0
115     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
116     : ------1----1----0
116     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
117     : -------1----1-0--
117     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
118     : ------1------10--
118     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
119     : -------1----1--0-
119     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
120     : ------1------1-0-
120     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$0$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0,VALUE1. ~decided(VALUE0) | voted(NODE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)


---------- Quantifier Inference: orbit 14 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
121 (*) : -0-----1-----0---
121     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
122     : 0-----1-----0----
122     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
123     : ---0---1---0-----
123     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
124     : --0---1---0------
124     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
125     : -----0-1-0-------
125     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
126     : ----0-1-0--------
126     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', 'decided(value1)', '~vote(node2,value1)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~member(NODE0,QUORUM0)', '~vote(NODE0,VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0)


---------- Quantifier Inference: orbit 15 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : -------1-0---0---
127     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
128     : ------1-0---0----
128     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
129     : -------1-0-0-----
129     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
130     : ------1-0-0------
130     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
131     : -------1---0-0---
131     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
132     : ------1---0-0----
132     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 16 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
133 (*) : ---0---1-------0-
133     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
134     : --0---1--------0-
134     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
135     : -0-----1--------0
135     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
136     : 0-----1---------0
136     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
137     : -----0-1------0--
137     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
138     : ----0-1-------0--
138     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decided(value1)', '~voted(node1)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decided(value1)', '~voted(node1)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~member(NODE0,QUORUM0)', '~voted(NODE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | member(NODE0,QUORUM0) | voted(NODE0) | chosenAt(QUORUM0,VALUE0)


---------- Quantifier Inference: orbit 17 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
139 (*) : -------1-----0-0-
139     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
140     : ------1-----0--0-
140     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
141     : -------1---0----0
141     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
142     : ------1---0-----0
142     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
143     : -------1-----00--
143     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
144     : ------1-----0-0--
144     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
145     : -------1-0------0
145     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
146     : ------1-0-------0
146     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
147     : -------1---0--0--
147     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
148     : ------1---0---0--
148     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
149     : -------1-0-----0-
149     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
150     : ------1-0------0-
150     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | voted(NODE1) | vote(NODE0,VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 18 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
151 (*) : -------1-------00
151     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
152     : ------1--------00
152     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
153     : -------1------0-0
153     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
154     : ------1-------0-0
154     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
155     : -------1------00-
155     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
156     : ------1-------00-
156     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', '~voted(node1)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '1$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', '~voted(node1)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~voted(NODE1)', '~voted(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | voted(NODE1) | voted(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 19 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
160 (*) : -0---0-1---1-----
160     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
161     : 0---0-1---1------
161     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
162     : ---0-0-1-----1---
162     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
163     : --0-0-1-----1----
163     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
164     : -0-0---1-1-------
164     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
165     : 0-0---1-1--------
165     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', 'vote(node1,value1)', 'member(node1,quorum__node0_node1)', 'member(node1,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)', 'vote(node1,value1)', 'member(node1,quorum__node0_node1)', 'member(node1,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE0)', 'member(NODE0,QUORUM0)', 'member(NODE0,QUORUM1)', '~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE0,QUORUM0,QUORUM1. ~decided(VALUE0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | QUORUM0 = QUORUM1


---------- Quantifier Inference: orbit 21 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 22 =====================
size : 2
num_suborbits: 1
166 (*) : -0-0-0-1---------
166     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
167     : 0-0-0-1----------
167     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))


---------- Quantifier Inference: orbit 22 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
198 (*) : 0---0-1----0---1-
198     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
199     : -0---0-1--0----1-
199     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
200     : --0-0-1------0--1
200     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
201     : ---0-0-1----0---1
201     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
202     : 0-0---1--0----1--
202     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
203     : -0-0---10-----1--
203     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node1,value1)', 'voted(node1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1'))),)], '1$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1'))))], '0$voted': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$0$voted$0$0, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1'))): [value$1$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1'))), 'node$1$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1'))), 'node$0$voted$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node1,value1)', 'voted(node1)', 'member(node1,quorum__node1_node2)', 'member(node1,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1'))), 'decided': (EnumeratedSort('value', ('value0', 'value1')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '1$vote': 1, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, 'value$1$vote$1': value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'member(NODE0,QUORUM0)', 'voted(NODE0)', 'member(NODE0,QUORUM1)', '~vote(NODE0,VALUE1)', '~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE1,VALUE0,QUORUM0,QUORUM1. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | ~voted(NODE0) | ~member(NODE0,QUORUM1) | vote(NODE0,VALUE1) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)


---------- Quantifier Inference: orbit 26 ----------

[QI_CHECK RESULT]: PASS


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

==================================================================================================================


=== Prime Orbit 1 =====================
size : 6
num_suborbits: 1
12 (*) : ------------1---0
12     : ['vote(node2,value0)', '~voted(node2)']
13     : -------------1--0
13     : ['vote(node2,value1)', '~voted(node2)']
14     : ----------1----0-
14     : ['vote(node1,value0)', '~voted(node1)']
15     : -----------1---0-
15     : ['vote(node1,value1)', '~voted(node1)']
16     : --------1-----0--
16     : ['vote(node0,value0)', '~voted(node0)']
17     : ---------1----0--
17     : ['vote(node0,value1)', '~voted(node0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 20 =====================
size : 3
num_suborbits: 1
157 (*) : ------------00--1
157     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)']
158     : ----------00---1-
158     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)']
159     : --------00----1--
159     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))
qcost : 4




=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
58 (*) : ------------11---
58     : ['vote(node2,value0)', 'vote(node2,value1)']
59     : ----------11-----
59     : ['vote(node1,value0)', 'vote(node1,value1)']
60     : --------11-------
60     : ['vote(node0,value0)', 'vote(node0,value1)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0))
qcost : 3




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
18 (*) : ----1--1---------
18     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
19     : -----11----------
19     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
20     : --1----1---------
20     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
21     : ---1--1----------
21     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
22     : 1------1---------
22     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
23     : -1----1----------
23     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,QUORUM0,VALUE1. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
24 (*) : ------11---------
24     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists VALUE0. ~decided(VALUE0)
qcost : 2




=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
85 (*) : -------11---1----
85     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
86     : ------1--1---1---
86     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
87     : -------11-1------
87     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
88     : ------1--1-1-----
88     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
89     : -------1--1-1----
89     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
90     : ------1----1-1---
90     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,NODE1,VALUE0,VALUE1. ~decided(VALUE0) | ~vote(NODE1,VALUE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 12
num_suborbits: 1
91 (*) : -------11----0---
91     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
92     : ------1--1--0----
92     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
93     : -------11--0-----
93     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
94     : ------1--10------
94     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
95     : -------1--1--0---
95     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
96     : ------1----10----
96     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
97     : -------1-01------
97     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
98     : ------1-0--1-----
98     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
99     : -------1---01----
99     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
100     : ------1---0--1---
100     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
101     : -------1-0--1----
101     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
102     : ------1-0----1---
102     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,NODE1,VALUE0,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
103 (*) : -----0-11--------
103     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
104     : ----0-1--1-------
104     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
105     : ---0---1--1------
105     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
106     : --0---1----1-----
106     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
107     : -0-----1----1----
107     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
108     : 0-----1------1---
108     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,VALUE0,QUORUM0,VALUE1. ~decided(VALUE0) | member(NODE0,QUORUM0) | ~vote(NODE0,VALUE1) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 14 =====================
size : 12
num_suborbits: 1
109 (*) : -------11------0-
109     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
110     : ------1--1-----0-
110     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
111     : -------11-------0
111     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
112     : ------1--1------0
112     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
113     : -------1--1---0--
113     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
114     : ------1----1--0--
114     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
115     : -------1--1-----0
115     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
116     : ------1----1----0
116     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
117     : -------1----1-0--
117     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
118     : ------1------10--
118     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
119     : -------1----1--0-
119     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
120     : ------1------1-0-
120     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall NODE0,NODE1,VALUE0,VALUE1. ~decided(VALUE0) | voted(NODE1) | ~vote(NODE0,VALUE1) | (NODE0 = NODE1 | VALUE0 = VALUE1)
qcost : 9




=== Prime Orbit 15 =====================
size : 6
num_suborbits: 1
121 (*) : -0-----1-----0---
121     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
122     : 0-----1-----0----
122     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
123     : ---0---1---0-----
123     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
124     : --0---1---0------
124     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
125     : -----0-1-0-------
125     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
126     : ----0-1-0--------
126     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | member(NODE0,QUORUM0) | vote(NODE0,VALUE0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
127 (*) : -------1-0---0---
127     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
128     : ------1-0---0----
128     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
129     : -------1-0-0-----
129     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
130     : ------1-0-0------
130     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
131     : -------1---0-0---
131     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
132     : ------1---0-0----
132     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
133 (*) : ---0---1-------0-
133     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
134     : --0---1--------0-
134     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
135     : -0-----1--------0
135     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
136     : 0-----1---------0
136     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
137     : -----0-1------0--
137     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
138     : ----0-1-------0--
138     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,VALUE0,QUORUM0. ~decided(VALUE0) | member(NODE0,QUORUM0) | voted(NODE0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 18 =====================
size : 12
num_suborbits: 1
139 (*) : -------1-----0-0-
139     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
140     : ------1-----0--0-
140     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
141     : -------1---0----0
141     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
142     : ------1---0-----0
142     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
143     : -------1-----00--
143     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
144     : ------1-----0-0--
144     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
145     : -------1-0------0
145     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
146     : ------1-0-------0
146     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
147     : -------1---0--0--
147     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
148     : ------1---0---0--
148     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
149     : -------1-0-----0-
149     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
150     : ------1-0------0-
150     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | voted(NODE1) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
151 (*) : -------1-------00
151     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
152     : ------1--------00
152     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
153     : -------1------0-0
153     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
154     : ------1-------0-0
154     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
155     : -------1------00-
155     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
156     : ------1-------00-
156     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1,VALUE0. ~decided(VALUE0) | voted(NODE1) | voted(NODE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
160 (*) : -0---0-1---1-----
160     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
161     : 0---0-1---1------
161     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
162     : ---0-0-1-----1---
162     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
163     : --0-0-1-----1----
163     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
164     : -0-0---1-1-------
164     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
165     : 0-0---1-1--------
165     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall NODE0,VALUE0,QUORUM0,QUORUM1. ~decided(VALUE0) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~member(NODE0,QUORUM1) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 22 =====================
size : 2
num_suborbits: 1
166 (*) : -0-0-0-1---------
166     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
167     : 0-0-0-1----------
167     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
198 (*) : 0---0-1----0---1-
198     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
199     : -0---0-1--0----1-
199     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
200     : --0-0-1------0--1
200     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
201     : ---0-0-1----0---1
201     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
202     : 0-0---1--0----1--
202     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
203     : -0-0---10-----1--
203     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
num_forall :   5
num_exists :   0
num_literals : 9
quantified form : forall NODE0,VALUE1,VALUE0,QUORUM0,QUORUM1. ~decided(VALUE0) | ~member(NODE0,QUORUM0) | ~voted(NODE0) | ~member(NODE0,QUORUM1) | vote(NODE0,VALUE1) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | (VALUE0 = VALUE1 | QUORUM0 = QUORUM1)
qcost : 14



[QRM NOTE]: Time elapsed since start: 7.962 seconds

[QRM NOTE]: Time elapsed since last: 1.112 seconds

[QRM NOTE]: Peak memory: 2490198 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

=================================================================================================


New level: 1
 pending : [2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7]


Solution : [1, 20, 7] has cost 11.


Decide in level 1 among pending : [2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 3 with phase True at level 1

After decision at level 1
 pending : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7, 3]


New level: 2
 pending : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7, 3]


Before reduction : 
 pending  : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7, 3]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, 16777216), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, 2097152), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]
 solution : [1, 20, 7, 3]


Solution : [1, 20, 7, 3] has cost 13.


Decide in level 2 among pending : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, 2097152), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 22]


New level: 3
 pending : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 22]


Before reduction : 
 pending  : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, 2097152), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [1, 20, 7, 3, 22]


Before reduction : 
 pending  : []
 solution : [1, 20, 7, 3, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 20, 7, 3, 22]


Solution : [1, 20, 7, 3, 22] has cost 17.


Before backtrack at level 3
 pending : []
 solution : [1, 20, 7, 3, 22]

After backtrack at level 3
 pending : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3]


Before reduction : 
 pending  : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3]


Solution : [1, 20, 7, 3] has cost 13.


Decide in level 3 among pending : [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 15]


New level: 4
 pending : [2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 15]


Before reduction : 
 pending  : [2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, 1048576), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [1, 20, 7, 3, 15]


Before reduction : 
 pending  : []
 solution : [1, 20, 7, 3, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 20, 7, 3, 15]


Solution : [1, 20, 7, 3, 15] has cost 20.


Before backtrack at level 4
 pending : []
 solution : [1, 20, 7, 3, 15]

After backtrack at level 4
 pending : [2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3]


Before reduction : 
 pending  : [2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, -1), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3]


Solution : [1, 20, 7, 3] has cost 13.


Decide in level 4 among pending : [2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, -1), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 4

After decision at level 4
 pending : [2, 11, 12, 13, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 16]


New level: 5
 pending : [2, 11, 12, 13, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 16]


Before reduction : 
 pending  : [2, 11, 12, 13, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, -1), (16, 524288), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {2, 11, 12, 13, 14, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [1, 20, 7, 3, 16]


Before reduction : 
 pending  : []
 solution : [1, 20, 7, 3, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 20, 7, 3, 16]


Solution : [1, 20, 7, 3, 16] has cost 20.


Before backtrack at level 5
 pending : []
 solution : [1, 20, 7, 3, 16]

After backtrack at level 5
 pending : [2, 11, 12, 13, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 16]


Invert decision for 16 at level 4


New level: 5
 pending : [2, 11, 12, 13, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3]


Before reduction : 
 pending  : [2, 11, 12, 13, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 11, 12, 13, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3]


Solution : [1, 20, 7, 3] has cost 13.


Decide in level 5 among pending : [2, 11, 12, 13, 14, 17, 18, 19, 21, 26]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 5

After decision at level 5
 pending : [2, 11, 12, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 13]


New level: 6
 pending : [2, 11, 12, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 13]


Before reduction : 
 pending  : [2, 11, 12, 14, 17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, 262144), (14, 8192), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {2, 11, 12, 14}

After reduction : 
 pending  : [17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 13]


Before reduction : 
 pending  : [17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 13]


Solution : [1, 20, 7, 3, 13] has cost 22.


Before backtrack at level 6
 pending : [17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 13]

After backtrack at level 6
 pending : [17, 18, 19, 21, 26, 2, 11, 12, 14]
 solution : [1, 20, 7, 3, 13]


Invert decision for 13 at level 5


New level: 6
 pending : [17, 18, 19, 21, 26, 2, 11, 12, 14]
 solution : [1, 20, 7, 3]


Before reduction : 
 pending  : [17, 18, 19, 21, 26, 2, 11, 12, 14]
 solution : [1, 20, 7, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, -1), (14, 8192), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 18, 19, 21, 26, 2, 11, 12, 14]
 solution : [1, 20, 7, 3]


Solution : [1, 20, 7, 3] has cost 13.


Decide in level 6 among pending : [17, 18, 19, 21, 26, 2, 11, 12, 14]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, -1), (14, 8192), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 6

After decision at level 6
 pending : [17, 18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 12]


New level: 7
 pending : [17, 18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 12]


Before reduction : 
 pending  : [17, 18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, 131072), (13, -1), (14, 8192), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {2, 11, 14}

After reduction : 
 pending  : [17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 12]


Before reduction : 
 pending  : [17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 12]


Solution : [1, 20, 7, 3, 12] has cost 22.


Before backtrack at level 7
 pending : [17, 18, 19, 21, 26]
 solution : [1, 20, 7, 3, 12]

After backtrack at level 7
 pending : [17, 18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 12]


Invert decision for 12 at level 6


New level: 7
 pending : [17, 18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3]


Before reduction : 
 pending  : [17, 18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8192), (18, 2048), (19, 2048), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3]


Solution : [1, 20, 7, 3] has cost 13.


Decide in level 7 among pending : [17, 18, 19, 21, 26, 2, 11, 14]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 7

After decision at level 7
 pending : [18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 17]


New level: 8
 pending : [18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 17]


Before reduction : 
 pending  : [18, 19, 21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, 65536), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {18, 19, 14}

After reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 3, 17]


Before reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 3, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 3, 17]


Solution : [1, 20, 7, 3, 17] has cost 20.


Before backtrack at level 8
 pending : [21, 26, 2, 11]
 solution : [1, 20, 7, 3, 17]

After backtrack at level 8
 pending : [21, 26, 2, 11, 18, 19, 14]
 solution : [1, 20, 7, 3, 17]


Invert decision for 17 at level 7


New level: 8
 pending : [21, 26, 2, 11, 18, 19, 14]
 solution : [1, 20, 7, 3]


Before reduction : 
 pending  : [21, 26, 2, 11, 18, 19, 14]
 solution : [1, 20, 7, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 18, 19, 14]
 solution : [1, 20, 7, 3]


Solution : [1, 20, 7, 3] has cost 13.


Decide in level 8 among pending : [21, 26, 2, 11, 18, 19, 14]

Coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 3, 18]


New level: 9
 pending : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 3, 18]


Before reduction : 
 pending  : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 3, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, 32768), (19, 4096), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {19, 14}

After reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 3, 18]


Before reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 3, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 3, 18]


Solution : [1, 20, 7, 3, 18] has cost 20.


Before backtrack at level 9
 pending : [21, 26, 2, 11]
 solution : [1, 20, 7, 3, 18]

After backtrack at level 9
 pending : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 3, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 3]


Before reduction : 
 pending  : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 3]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, 8192), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8192), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 19]


Before reduction : 
 pending  : [21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 19]


Solution : [1, 20, 7, 3, 19] has cost 20.


Before backtrack at level 9
 pending : [21, 26, 2, 11, 14]
 solution : [1, 20, 7, 3, 19]

After backtrack at level 9
 pending : [21, 26, 2, 11, 14, 19]
 solution : [1, 20, 7, 3]


Before backtrack at level 8
 pending : [21, 26, 2, 11, 14, 19]
 solution : [1, 20, 7, 3]

After backtrack at level 8
 pending : [21, 26, 2, 11, 14, 19, 18]
 solution : [1, 20, 7, 3]


Before backtrack at level 7
 pending : [21, 26, 2, 11, 14, 19, 18]
 solution : [1, 20, 7, 3]

After backtrack at level 7
 pending : [21, 26, 2, 11, 14, 19, 18, 17]
 solution : [1, 20, 7, 3]


Before backtrack at level 6
 pending : [21, 26, 2, 11, 14, 19, 18, 17]
 solution : [1, 20, 7, 3]

After backtrack at level 6
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12]
 solution : [1, 20, 7, 3]


Before backtrack at level 5
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12]
 solution : [1, 20, 7, 3]

After backtrack at level 5
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7, 3]


Before backtrack at level 4
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7, 3]

After backtrack at level 4
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7, 3]


Before backtrack at level 3
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7, 3]

After backtrack at level 3
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7, 3]


Before backtrack at level 2
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7, 3]

After backtrack at level 2
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15, 22]
 solution : [1, 20, 7, 3]


Invert decision for 3 at level 1


New level: 2
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15, 22]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15, 22]
 solution : [1, 20, 7]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 4096), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 16384), (22, -1), (23, -1), (24, -1), (25, -1), (26, 16384), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15, 22]
 solution : [1, 20, 7]


Solution : [1, 20, 7] has cost 11.


Decide in level 2 among pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15, 22]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 22 with phase True at level 2

After decision at level 2
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7, 22]


New level: 3
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7, 22]


Before reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, 4194304), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [1, 20, 7, 22]


Before reduction : 
 pending  : []
 solution : [1, 20, 7, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [1, 20, 7, 22]


Solution : [1, 20, 7, 22] has cost 15.


Before backtrack at level 3
 pending : []
 solution : [1, 20, 7, 22]

After backtrack at level 3
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7, 22]


Invert decision for 22 at level 2


New level: 3
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7]


Solution : [1, 20, 7] has cost 11.


Decide in level 3 among pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7, 15]


New level: 4
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7, 15]


Before reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, 2097152), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {2, 11, 12, 13, 14, 16, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [1, 20, 7, 15]


Before reduction : 
 pending  : []
 solution : [1, 20, 7, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [1, 20, 7, 15]


Solution : [1, 20, 7, 15] has cost 18.


Before backtrack at level 4
 pending : []
 solution : [1, 20, 7, 15]

After backtrack at level 4
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, -1), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7]


Solution : [1, 20, 7] has cost 11.


Decide in level 4 among pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, -1), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 4

After decision at level 4
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7, 16]


New level: 5
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7, 16]


Before reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, -1), (16, 1048576), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {2, 11, 12, 13, 14, 17, 18, 19, 21, 26}

After reduction : 
 pending  : []
 solution : [1, 20, 7, 16]


Before reduction : 
 pending  : []
 solution : [1, 20, 7, 16]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [1, 20, 7, 16]


Solution : [1, 20, 7, 16] has cost 18.


Before backtrack at level 5
 pending : []
 solution : [1, 20, 7, 16]

After backtrack at level 5
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7, 16]


Invert decision for 16 at level 4


New level: 5
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7]


Solution : [1, 20, 7] has cost 11.


Decide in level 5 among pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 13 with phase True at level 5

After decision at level 5
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12]
 solution : [1, 20, 7, 13]


New level: 6
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12]
 solution : [1, 20, 7, 13]


Before reduction : 
 pending  : [21, 26, 2, 11, 14, 19, 18, 17, 12]
 solution : [1, 20, 7, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, 524288), (14, 16384), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {2, 11, 12, 14}

After reduction : 
 pending  : [21, 26, 19, 18, 17]
 solution : [1, 20, 7, 13]


Before reduction : 
 pending  : [21, 26, 19, 18, 17]
 solution : [1, 20, 7, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, -1), (14, 0), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 26, 19, 18, 17]
 solution : [1, 20, 7, 13]


Solution : [1, 20, 7, 13] has cost 20.


Before backtrack at level 6
 pending : [21, 26, 19, 18, 17]
 solution : [1, 20, 7, 13]

After backtrack at level 6
 pending : [21, 26, 19, 18, 17, 2, 11, 14, 12]
 solution : [1, 20, 7, 13]


Invert decision for 13 at level 5


New level: 6
 pending : [21, 26, 19, 18, 17, 2, 11, 14, 12]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [21, 26, 19, 18, 17, 2, 11, 14, 12]
 solution : [1, 20, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 26, 19, 18, 17, 2, 11, 14, 12]
 solution : [1, 20, 7]


Solution : [1, 20, 7] has cost 11.


Decide in level 6 among pending : [21, 26, 19, 18, 17, 2, 11, 14, 12]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 12 with phase True at level 6

After decision at level 6
 pending : [21, 26, 19, 18, 17, 2, 11, 14]
 solution : [1, 20, 7, 12]


New level: 7
 pending : [21, 26, 19, 18, 17, 2, 11, 14]
 solution : [1, 20, 7, 12]


Before reduction : 
 pending  : [21, 26, 19, 18, 17, 2, 11, 14]
 solution : [1, 20, 7, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, 262144), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {2, 11, 14}

After reduction : 
 pending  : [21, 26, 19, 18, 17]
 solution : [1, 20, 7, 12]


Before reduction : 
 pending  : [21, 26, 19, 18, 17]
 solution : [1, 20, 7, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 26, 19, 18, 17]
 solution : [1, 20, 7, 12]


Solution : [1, 20, 7, 12] has cost 20.


Before backtrack at level 7
 pending : [21, 26, 19, 18, 17]
 solution : [1, 20, 7, 12]

After backtrack at level 7
 pending : [21, 26, 19, 18, 17, 2, 11, 14]
 solution : [1, 20, 7, 12]


Invert decision for 12 at level 6


New level: 7
 pending : [21, 26, 19, 18, 17, 2, 11, 14]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [21, 26, 19, 18, 17, 2, 11, 14]
 solution : [1, 20, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16384), (18, 4096), (19, 4096), (20, -1), (21, 512), (22, -1), (23, -1), (24, -1), (25, -1), (26, 512), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [21, 26, 19, 18, 17, 2, 11, 14]
 solution : [1, 20, 7]


Solution : [1, 20, 7] has cost 11.


Decide in level 7 among pending : [21, 26, 19, 18, 17, 2, 11, 14]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 7

After decision at level 7
 pending : [21, 26, 19, 18, 2, 11, 14]
 solution : [1, 20, 7, 17]


New level: 8
 pending : [21, 26, 19, 18, 2, 11, 14]
 solution : [1, 20, 7, 17]


Before reduction : 
 pending  : [21, 26, 19, 18, 2, 11, 14]
 solution : [1, 20, 7, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, 131072), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, 1024), (22, -1), (23, -1), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {18, 19, 14}

After reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 17]


Before reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, -1), (21, 1024), (22, -1), (23, -1), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 1024), (22, -1), (23, -1), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 17]


Solution : [1, 20, 7, 17] has cost 18.


Before backtrack at level 8
 pending : [21, 26, 2, 11]
 solution : [1, 20, 7, 17]

After backtrack at level 8
 pending : [21, 26, 2, 11, 19, 18, 14]
 solution : [1, 20, 7, 17]


Invert decision for 17 at level 7


New level: 8
 pending : [21, 26, 2, 11, 19, 18, 14]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [21, 26, 2, 11, 19, 18, 14]
 solution : [1, 20, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 1024), (22, -1), (23, -1), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 19, 18, 14]
 solution : [1, 20, 7]


Solution : [1, 20, 7] has cost 11.


Decide in level 8 among pending : [21, 26, 2, 11, 19, 18, 14]

Coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 18]


New level: 9
 pending : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 18]


Before reduction : 
 pending  : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, 16384), (15, -1), (16, -1), (17, -1), (18, 65536), (19, 8192), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 1024), (22, -1), (23, -1), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {19, 14}

After reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 18]


Before reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 1024), (22, -1), (23, -1), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 1024), (22, -1), (23, -1), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 2, 11]
 solution : [1, 20, 7, 18]


Solution : [1, 20, 7, 18] has cost 18.


Before backtrack at level 9
 pending : [21, 26, 2, 11]
 solution : [1, 20, 7, 18]

After backtrack at level 9
 pending : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7]


Before reduction : 
 pending  : [21, 26, 2, 11, 19, 14]
 solution : [1, 20, 7]

Essensial at level 9 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, 16384), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 16384), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 1024), (22, -1), (23, -1), (24, -1), (25, -1), (26, 1024), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 14]
 solution : [1, 20, 7, 19]


Before reduction : 
 pending  : [21, 26, 2, 11, 14]
 solution : [1, 20, 7, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 32768), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32768), (12, -1), (13, -1), (14, 8192), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 32768), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32768), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [21, 26, 2, 11, 14]
 solution : [1, 20, 7, 19]


Solution : [1, 20, 7, 19] has cost 18.


Before backtrack at level 9
 pending : [21, 26, 2, 11, 14]
 solution : [1, 20, 7, 19]

After backtrack at level 9
 pending : [21, 26, 2, 11, 14, 19]
 solution : [1, 20, 7]


Before backtrack at level 8
 pending : [21, 26, 2, 11, 14, 19]
 solution : [1, 20, 7]

After backtrack at level 8
 pending : [21, 26, 2, 11, 14, 19, 18]
 solution : [1, 20, 7]


Before backtrack at level 7
 pending : [21, 26, 2, 11, 14, 19, 18]
 solution : [1, 20, 7]

After backtrack at level 7
 pending : [21, 26, 2, 11, 14, 19, 18, 17]
 solution : [1, 20, 7]


Before backtrack at level 6
 pending : [21, 26, 2, 11, 14, 19, 18, 17]
 solution : [1, 20, 7]

After backtrack at level 6
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12]
 solution : [1, 20, 7]


Before backtrack at level 5
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12]
 solution : [1, 20, 7]

After backtrack at level 5
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7]


Before backtrack at level 4
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13]
 solution : [1, 20, 7]

After backtrack at level 4
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7]


Before backtrack at level 3
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16]
 solution : [1, 20, 7]

After backtrack at level 3
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7]


Before backtrack at level 2
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15]
 solution : [1, 20, 7]

After backtrack at level 2
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15, 22]
 solution : [1, 20, 7]


Before backtrack at level 1
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15, 22]
 solution : [1, 20, 7]

After backtrack at level 1
 pending : [21, 26, 2, 11, 14, 19, 18, 17, 12, 13, 16, 15, 22, 3]
 solution : [1, 20, 7]


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 15

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=1)

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [1, 20, 7, 22] (length = 4)

invariant [invar_1] forall NODE0,VALUE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_20] forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)) # qcost: 4

invariant [invar_7] forall NODE0. (exists VALUE0. ~vote(NODE0,VALUE0)) # qcost: 3

invariant [invar_22] forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 8.083 seconds

[QRM NOTE]: Time elapsed since last: 0.121 seconds

[QRM NOTE]: Peak memory: 2456873 bytes


===================================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

===================================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.136 seconds

[QRM NOTE]: Time elapsed since last: 0.054 seconds

[QRM NOTE]: Peak memory: 1406781 bytes


====================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2]

====================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 45: invar_1
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 46: invar_20
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 47: invar_7
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 48: invar_22

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 45: invar_1 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 46: invar_20 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 47: invar_7 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 48: invar_22 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 46: invar_20 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 47: invar_7 ... FAIL
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 48: invar_22 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 45: invar_1 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 46: invar_20 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 47: invar_7 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 48: invar_22 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy: line 30: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 9.921 seconds

[QRM NOTE]: Time elapsed since last: 1.785 seconds

[QRM NOTE]: Peak memory: 1428977 bytes


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=2

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy -s node=5,value=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=5,value=2]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus_epr.node_5_value_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_5_value_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_5_value_2.finite.cpp toy_consensus_epr.node_5_value_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_5_value_2.finite.o toy_consensus_epr.node_5_value_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 37

[FW NOTE]: number of interpreted atoms (e.g. member,le): 50

[FW NOTE]: number of branching actions: 30

[FW NOTE]: symmetric group order: 240

[QRM NOTE]: Time elapsed since start: 6.712 seconds

[QRM NOTE]: Time elapsed since last: 6.712 seconds

[QRM NOTE]: Peak memory: 1230336 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 6

[FW NOTE]: number of total reachable states:        345

[FW NOTE]: number of dfs representative states:     18

[FW NOTE]: number of dfs non-representative states: 327


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=5,value=2]

===============================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3', 'node4']
sort: value=['value0', 'value1']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node1_node4', 'quorum__node0_node2_node3', 'quorum__node0_node2_node4', 'quorum__node0_node3_node4', 'quorum__node1_node2_node3', 'quorum__node1_node2_node4', 'quorum__node1_node3_node4', 'quorum__node2_node3_node4']
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
predicate: voted('node',)
predicate: chosenAt('quorum', 'value')
predicate: decided('value',)
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node1_node4)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node0_node2_node4)': '1', 'member(node0,quorum__node0_node3_node4)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node0,quorum__node1_node2_node4)': '0', 'member(node0,quorum__node1_node3_node4)': '0', 'member(node0,quorum__node2_node3_node4)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node1_node4)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node0_node2_node4)': '0', 'member(node1,quorum__node0_node3_node4)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node1,quorum__node1_node2_node4)': '1', 'member(node1,quorum__node1_node3_node4)': '1', 'member(node1,quorum__node2_node3_node4)': '0', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node1_node4)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node0_node2_node4)': '1', 'member(node2,quorum__node0_node3_node4)': '0', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node1_node2_node4)': '1', 'member(node2,quorum__node1_node3_node4)': '0', 'member(node2,quorum__node2_node3_node4)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node1_node4)': '0', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node0_node2_node4)': '0', 'member(node3,quorum__node0_node3_node4)': '1', 'member(node3,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node1_node2_node4)': '0', 'member(node3,quorum__node1_node3_node4)': '1', 'member(node3,quorum__node2_node3_node4)': '1', 'member(node4,quorum__node0_node1_node2)': '0', 'member(node4,quorum__node0_node1_node3)': '0', 'member(node4,quorum__node0_node1_node4)': '1', 'member(node4,quorum__node0_node2_node3)': '0', 'member(node4,quorum__node0_node2_node4)': '1', 'member(node4,quorum__node0_node3_node4)': '1', 'member(node4,quorum__node1_node2_node3)': '0', 'member(node4,quorum__node1_node2_node4)': '1', 'member(node4,quorum__node1_node3_node4)': '1', 'member(node4,quorum__node2_node3_node4)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node1_node4,value0)', 'chosenAt(quorum__node0_node1_node4,value1)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node0_node2_node4,value0)', 'chosenAt(quorum__node0_node2_node4,value1)', 'chosenAt(quorum__node0_node3_node4,value0)', 'chosenAt(quorum__node0_node3_node4,value1)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node4,value0)', 'chosenAt(quorum__node1_node2_node4,value1)', 'chosenAt(quorum__node1_node3_node4,value0)', 'chosenAt(quorum__node1_node3_node4,value1)', 'chosenAt(quorum__node2_node3_node4,value0)', 'chosenAt(quorum__node2_node3_node4,value1)', 'decided(value0)', 'decided(value1)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node4,value0)', 'vote(node4,value1)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)', 'voted(node4)']
representative states : 1109285477379255, 38263982403185847, 184630970292726967, 148339547911899933879, 12546866415653187054775, 51580798100738614284872887, 51580834994226761703976119, 12565331174125406088375, 12602224662272825191607, 12583759903800606158007, 152960241129582062775, 171424999601801096375, 208318487749220199607, 189853729277001166007, 185233036059319037111, 801624119242484919, 3260589515786775735, 220659767311690935


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000000000000000000
lex min decimal: 1109285477379255
states:
0000000000000000000000000000000000000




=== State Orbit 1 =====================
size : 10
repr state: 0000000000000000000000100000000010000
lex min decimal: 38263982403185847
states:
0000000000000000000000000010000000100
0000000000000000000000000000000100001
0000000000000000000000000000001000001
0000000000000000000000000100000001000
0000000000000000000000000000100000010
0000000000000000000000001000000001000
0000000000000000000000000001000000100
0000000000000000000000100000000010000
0000000000000000000000010000000010000
0000000000000000000000000000010000010




=== State Orbit 2 =====================
size : 20
repr state: 0000000000000000000000101000000011000
lex min decimal: 184630970292726967
states:
0000000000000000000000100000100010010
0000000000000000000000000100000101001
0000000000000000000000010100000011000
0000000000000000000000001010000001100
0000000000000000000000100000001010001
0000000000000000000000001000100001010
0000000000000000000000010000010010010
0000000000000000000000001000001001001
0000000000000000000000000000101000011
0000000000000000000000010001000010100
0000000000000000000000000000010100011
0000000000000000000000000010001000101
0000000000000000000000010000000110001
0000000000000000000000000101000001100
0000000000000000000000000100010001010
0000000000000000000000100010000010100
0000000000000000000000000001000100101
0000000000000000000000000010100000110
0000000000000000000000000001010000110
0000000000000000000000101000000011000




=== State Orbit 3 =====================
size : 20
repr state: 1000000000000000000000101010000011100
lex min decimal: 148339547911899933879
states:
0000000000000000001000000010101000111
0000000000100000000000100000101010011
0000000000000000010000000100010101011
0000000100000000000000010001010010110
0000000000000000000100000001010100111
0000000000000100000000000101010001110
0000100000000000000000101000001011001
0010000000000000000000101000100011010
0000000000010000000000010000010110011
0000000000000000100000001000101001011
0000010000000000000000010100000111001
0000000000001000000000001010100001110
0000001000000000000000100010100010110
0000000001000000000000010001000110101
0000000000000001000000000101000101101
0001000000000000000000010100010011010
1000000000000000000000101010000011100
0100000000000000000000010101000011100
0000000000000010000000001010001001101
0000000010000000000000100010001010101




=== State Orbit 4 =====================
size : 10
repr state: 1010001000001000000000101010100011110
lex min decimal: 12546866415653187054775
states:
0000001010100000001000100010101010111
0101000100000100000000010101010011110
0100010001000001000000010101000111101
0001010000010000010000010100010111011
1000100010000010000000101010001011101
0000000000001010101000001010101001111
0010100000100000100000101000101011011
0000000101010000000100010001010110111
1010001000001000000000101010100011110
0000000000000101010100000101010101111




=== State Orbit 5 =====================
size : 2
repr state: 1010101010101010101000101010101011111
lex min decimal: 51580798100738614284872887
states:
0101010101010101010100010101010111111
1010101010101010101000101010101011111




=== State Orbit 6 =====================
size : 2
repr state: 1010101010101010101010101010101011111
lex min decimal: 51580834994226761703976119
states:
1010101010101010101010101010101011111
0101010101010101010101010101010111111




=== State Orbit 7 =====================
size : 10
repr state: 1010001000001000000000101010100111111
lex min decimal: 12565331174125406088375
states:
0010100000100000100000101001101011111
0000000000000101010100100101010111111
0000000101010000000100011001010111111
0101000100000100000000010101011011111
0000001010100000001000100110101011111
1010001000001000000000101010100111111
0001010000010000010000010110010111111
0000000000001010101000011010101011111
1000100010000010000000101010011011111
0100010001000001000000010101100111111




=== State Orbit 8 =====================
size : 10
repr state: 1010001000001000000010101010100111111
lex min decimal: 12602224662272825191607
states:
0000000000000101010101100101010111111
0000001010100000001010100110101011111
1010001000001000000010101010100111111
0000000101010000000101011001010111111
1000100010000010000010101010011011111
0101000100000100000001010101011011111
0010100000100000100010101001101011111
0100010001000001000001010101100111111
0001010000010000010001010110010111111
0000000000001010101010011010101011111




=== State Orbit 9 =====================
size : 10
repr state: 1010001000001000000010101010100011110
lex min decimal: 12583759903800606158007
states:
0000000101010000000101010001010110111
0000001010100000001010100010101010111
1010001000001000000010101010100011110
0100010001000001000001010101000111101
0000000000001010101010001010101001111
0010100000100000100010101000101011011
0001010000010000010001010100010111011
0101000100000100000001010101010011110
0000000000000101010101000101010101111
1000100010000010000010101010001011101




=== State Orbit 10 =====================
size : 40
repr state: 1000000000000000000000101010010011110
lex min decimal: 152960241129582062775
states:
0000001000000000000000100010100110111
0000000001000000000000011001000111101
0000000000000000001000010010101010111
0000000000000001000000000101100101111
0000000000000000010000100100010111011
0000000100000000000000010001011010111
0000000000000100000000000101011001111
0000000000000000000100100001010110111
0000010000000000000000010100100111011
0000001000000000000000100110100011110
0000000000001000000000001010100101111
0000000010000000000000100110001011101
0000000000100000000000100001101010111
1000000000000000000000101010010011110
0000000100000000000000011001010011110
0000000000100000000000100100101011011
0000000000000000000100001001010101111
0000000001000000000000010001100110111
0000000000001000000000011010100011110
0000100000000000000000101001001011101
0010000000000000000000101000100111011
0000000000000000010000000110010101111
0001000000000000000000010110010011110
0000100000000000000000101000011011011
0000000000000010000000001010011001111
0000000000000100000000100101010011110
1000000000000000000000101010000111101
0000000000000000100000011000101011011
0100000000000000000000010101001011101
0001000000000000000000010100011011011
0000010000000000000000010110000111101
0100000000000000000000010101100011110
0000000000000000001000000110101001111
0000000000000001000000100101000111101
0000000010000000000000100010011010111
0000000000010000000000010010010110111
0000000000000010000000011010001011101
0000000000010000000000011000010111011
0010000000000000000000101001100011110
0000000000000000100000001001101001111




=== State Orbit 11 =====================
size : 20
repr state: 1000000000000000000000101010010111111
lex min decimal: 171424999601801096375
states:
0000000000000000000100101001010111111
0000000000001000000000011010100111111
0100000000000000000000010101101011111
0000000001000000000000011001100111111
1000000000000000000000101010010111111
0000000100000000000000011001011011111
0000000010000000000000100110011011111
0000000000000000010000100110010111111
0000000000000000100000011001101011111
0000100000000000000000101001011011111
0000000000000001000000100101100111111
0000010000000000000000010110100111111
0001000000000000000000010110011011111
0010000000000000000000101001100111111
0000000000010000000000011010010111111
0000001000000000000000100110100111111
0000000000000000001000010110101011111
0000000000100000000000100101101011111
0000000000000100000000100101011011111
0000000000000010000000011010011011111




=== State Orbit 12 =====================
size : 20
repr state: 1000000000000000000010101010010111111
lex min decimal: 208318487749220199607
states:
0000000000000001000001100101100111111
0000000000000000010001100110010111111
0010000000000000000010101001100111111
0000000010000000000010100110011011111
0000000000000010000010011010011011111
1000000000000000000010101010010111111
0000000000000000001010010110101011111
0000000000001000000010011010100111111
0000000000000100000001100101011011111
0000001000000000000010100110100111111
0000000000000000000101101001010111111
0000000000010000000001011010010111111
0000000100000000000001011001011011111
0000000000000000100010011001101011111
0100000000000000000001010101101011111
0000100000000000000010101001011011111
0000000001000000000001011001100111111
0000010000000000000001010110100111111
0000000000100000000010100101101011111
0001000000000000000001010110011011111




=== State Orbit 13 =====================
size : 40
repr state: 1000000000000000000010101010010011110
lex min decimal: 189853729277001166007
states:
0000000000000001000001000101100101111
0000000000000000001010010010101010111
0000001000000000000010100110100011110
0000000100000000000001011001010011110
0000000001000000000001010001100110111
0000000000100000000010100100101011011
0000000000000100000001100101010011110
0000000000000000001010000110101001111
0000100000000000000010101000011011011
0000000000000000100010011000101011011
0000000001000000000001011001000111101
0000000000000000000101100001010110111
0010000000000000000010101001100011110
0001000000000000000001010100011011011
0001000000000000000001010110010011110
0000000000000100000001000101011001111
0000000010000000000010100010011010111
0000000000000000000101001001010101111
0000000000010000000001011000010111011
0010000000000000000010101000100111011
0000000000010000000001010010010110111
0000000000001000000010011010100011110
1000000000000000000010101010000111101
0000001000000000000010100010100110111
0100000000000000000001010101100011110
1000000000000000000010101010010011110
0000000000001000000010001010100101111
0100000000000000000001010101001011101
0000100000000000000010101001001011101
0000000000000000010001000110010101111
0000000000000010000010001010011001111
0000000000100000000010100001101010111
0000000000000000100010001001101001111
0000000000000010000010011010001011101
0000000000000001000001100101000111101
0000000100000000000001010001011010111
0000000000000000010001100100010111011
0000010000000000000001010100100111011
0000000010000000000010100110001011101
0000010000000000000001010110000111101




=== State Orbit 14 =====================
size : 20
repr state: 1000000000000000000010101010000011100
lex min decimal: 185233036059319037111
states:
0100000000000000000001010101000011100
0000000000000010000010001010001001101
0000010000000000000001010100000111001
0000000100000000000001010001010010110
0000001000000000000010100010100010110
1000000000000000000010101010000011100
0001000000000000000001010100010011010
0000000000001000000010001010100001110
0000000000100000000010100000101010011
0010000000000000000010101000100011010
0000000001000000000001010001000110101
0000000000000100000001000101010001110
0000100000000000000010101000001011001
0000000000000000000101000001010100111
0000000000000000001010000010101000111
0000000000000000010001000100010101011
0000000000000001000001000101000101101
0000000000000000100010001000101001011
0000000010000000000010100010001010101
0000000000010000000001010000010110011




=== State Orbit 15 =====================
size : 60
repr state: 0000000000000000000000101001000011100
lex min decimal: 801624119242484919
states:
0000000000000000000000000101001001101
0000000000000000000000010010001010101
0000000000000000000000001000100101011
0000000000000000000000100101000011100
0000000000000000000000001001001001101
0000000000000000000000000110100001110
0000000000000000000000000110001001101
0000000000000000000000001001010001110
0000000000000000000000100010000110101
0000000000000000000000001001000101101
0000000000000000000000101000000111001
0000000000000000000000001010010001110
0000000000000000000000101000010011010
0000000000000000000000010110000011100
0000000000000000000000011000100011010
0000000000000000000000000010011000111
0000000000000000000000011000000111001
0000000000000000000000010100001011001
0000000000000000000000100100100011010
0000000000000000000000010001001010101
0000000000000000000000010000011010011
0000000000000000000000000110010001110
0000000000000000000000011000010011010
0000000000000000000000100100000111001
0000000000000000000000001010000101101
0000000000000000000000101001000011100
0000000000000000000000010010010010110
0000000000000000000000010010100010110
0000000000000000000000000100100101011
0000000000000000000000000001100100111
0000000000000000000000010000100110011
0000000000000000000000000001101000111
0000000000000000000000010100100011010
0000000000000000000000100001100010110
0000000000000000000000000001011000111
0000000000000000000000100010010010110
0000000000000000000000100001001010101
0000000000000000000000000100011001011
0000000000000000000000100100001011001
0000000000000000000000100100010011010
0000000000000000000000100000010110011
0000000000000000000000100001000110101
0000000000000000000000000101100001110
0000000000000000000000001000011001011
0000000000000000000000100001010010110
0000000000000000000000000110000101101
0000000000000000000000010000101010011
0000000000000000000000100110000011100
0000000000000000000000010010000110101
0000000000000000000000000100101001011
0000000000000000000000011000001011001
0000000000000000000000000010100100111
0000000000000000000000000010010100111
0000000000000000000000001001100001110
0000000000000000000000100000011010011
0000000000000000000000001000010101011
0000000000000000000000010001100010110
0000000000000000000000100000100110011
0000000000000000000000011010000011100
0000000000000000000000011001000011100




=== State Orbit 16 =====================
size : 30
repr state: 0000000000000000000000101001010011110
lex min decimal: 3260589515786775735
states:
0000000000000000000000011000100111011
0000000000000000000000010110100011110
0000000000000000000000100001100110111
0000000000000000000000100101001011101
0000000000000000000000100110000111101
0000000000000000000000010001101010111
0000000000000000000000100110010011110
0000000000000000000000010010100110111
0000000000000000000000011001001011101
0000000000000000000000100001011010111
0000000000000000000000011010000111101
0000000000000000000000011010010011110
0000000000000000000000001001100101111
0000000000000000000000010100101011011
0000000000000000000000100010010110111
0000000000000000000000101000010111011
0000000000000000000000001001011001111
0000000000000000000000011000011011011
0000000000000000000000001010010101111
0000000000000000000000010110001011101
0000000000000000000000011001100011110
0000000000000000000000100101100011110
0000000000000000000000100100100111011
0000000000000000000000000110100101111
0000000000000000000000100100011011011
0000000000000000000000010010011010111
0000000000000000000000000101101001111
0000000000000000000000101001000111101
0000000000000000000000000110011001111
0000000000000000000000101001010011110




=== State Orbit 17 =====================
size : 20
repr state: 0000000000000000000000100100000011000
lex min decimal: 220659767311690935
states:
0000000000000000000000000100001001001
0000000000000000000000100100000011000
0000000000000000000000000010000100101
0000000000000000000000010010000010100
0000000000000000000000000001100000110
0000000000000000000000001001000001100
0000000000000000000000001000000101001
0000000000000000000000010000100010010
0000000000000000000000000110000001100
0000000000000000000000100000010010010
0000000000000000000000000000011000011
0000000000000000000000100001000010100
0000000000000000000000000010010000110
0000000000000000000000100000000110001
0000000000000000000000011000000011000
0000000000000000000000010000001010001
0000000000000000000000000000100100011
0000000000000000000000001000010001010
0000000000000000000000000100100001010
0000000000000000000000000001001000101



[QRM NOTE]: Time elapsed since start: 8.852 seconds

[QRM NOTE]: Time elapsed since last: 2.140 seconds

[QRM NOTE]: Peak memory: 1384654 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=5,value=2]

====================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 11.699 seconds

[QRM NOTE]: Time elapsed since last: 2.847 seconds

[QRM NOTE]: Peak memory: 934178 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_2.0.ivy -s node=3,value=3 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_3.finite.cpp toy_consensus_epr.node_3_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_3.finite.o toy_consensus_epr.node_3_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 18

[FW NOTE]: symmetric group order: 36

[QRM NOTE]: Time elapsed since start: 6.447 seconds

[QRM NOTE]: Time elapsed since last: 6.447 seconds

[QRM NOTE]: Peak memory: 1187895 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        94

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 84


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: decided('value',)
predicate: vote('node', 'value')
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
predicate: voted('node',)
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 16816043, 1225039787, 1227136939, 17342379, 19439531, 18913195, 42923, 348075


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000
lex min decimal: 427
states:
000000000000000000000000




=== State Orbit 1 =====================
size : 9
repr state: 000000000000100000000100
lex min decimal: 5035
states:
000000000000001000000100
000000000000000010000010
000000000000000100000010
000000000000000000001001
000000000000000000010001
000000000000010000000100
000000000000100000000100
000000000000000000100001
000000000000000001000010




=== State Orbit 2 =====================
size : 9
repr state: 100000000000100100000110
lex min decimal: 16816043
states:
010000000000010010000110
100000000000100100000110
000001000000001000001101
001000000000001001000110
000000010000000010010011
000000001000000001001011
000100000000100000100101
000010000000010000010101
000000100000000100100011




=== State Orbit 3 =====================
size : 3
repr state: 100100100000100100100111
lex min decimal: 1225039787
states:
010010010000010010010111
001001001000001001001111
100100100000100100100111




=== State Orbit 4 =====================
size : 3
repr state: 100100100100100100100111
lex min decimal: 1227136939
states:
010010010010010010010111
001001001001001001001111
100100100100100100100111




=== State Orbit 5 =====================
size : 18
repr state: 100000000000100100010111
lex min decimal: 17342379
states:
100000000000100100010111
000000010000100010010111
010000000000010010001111
000000100000010100100111
000100000000100010100111
000000001000010001001111
000000001000100001001111
000001000000001100001111
001000000000001001100111
000000100000001100100111
000010000000010001010111
000001000000001010001111
000010000000010100010111
000000010000001010010111
010000000000010010100111
100000000000100100001111
001000000000001001010111
000100000000100001100111




=== State Orbit 6 =====================
size : 18
repr state: 100000000100100100010111
lex min decimal: 19439531
states:
000000001001010001001111
000000100100001100100111
000010000010010100010111
000000010010100010010111
000001000001001010001111
000010000010010001010111
000001000001001100001111
010000000010010010001111
000000001001100001001111
000100000100100010100111
000000100100010100100111
100000000100100100010111
001000000001001001100111
000000010010001010010111
000100000100100001100111
001000000001001001010111
010000000010010010100111
100000000100100100001111




=== State Orbit 7 =====================
size : 9
repr state: 100000000100100100000110
lex min decimal: 18913195
states:
000000001001000001001011
010000000010010010000110
000100000100100000100101
000001000001001000001101
000000100100000100100011
000010000010010000010101
000000010010000010010011
100000000100100100000110
001000000001001001000110




=== State Orbit 8 =====================
size : 18
repr state: 000000000000100010000110
lex min decimal: 42923
states:
000000000000010000100101
000000000000000010001011
000000000000010001000110
000000000000001000100101
000000000000000010100011
000000000000100000001101
000000000000000100010011
000000000000000100001011
000000000000000001100011
000000000000000001010011
000000000000100001000110
000000000000100000010101
000000000000100010000110
000000000000001100000110
000000000000001000010101
000000000000001010000110
000000000000010100000110
000000000000010000001101




=== State Orbit 9 =====================
size : 6
repr state: 000000000000100010001111
lex min decimal: 348075
states:
000000000000001010100111
000000000000100001010111
000000000000001100010111
000000000000010001100111
000000000000100010001111
000000000000010100001111



[QRM NOTE]: Time elapsed since start: 6.633 seconds

[QRM NOTE]: Time elapsed since last: 0.186 seconds

[QRM NOTE]: Peak memory: 1250579 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

====================================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 13227, binary: 000000000000000000011001

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.809 seconds

[QRM NOTE]: Time elapsed since last: 0.177 seconds

[QRM NOTE]: Peak memory: 291192 bytes

next size: node=3,value=3


************************************************************************************************

	[Synthesize Rmin]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3

************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.ivy -s node=3,value=3 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.025 seconds

[QRM NOTE]: Time elapsed since last: 0.025 seconds

[QRM NOTE]: Peak memory: 36492 bytes


===============================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

===============================================================================================================


==========================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

==========================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 36
num_suborbits: 1
9 (*) : --------1------1--------
9     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value0)']
10     : -------1-------1--------
10     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value0)']
11     : --------1-------1-------
11     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node1,value1)']
12     : ------1---------1-------
12     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value1)']
13     : -------1---------1------
13     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node1,value2)']
14     : ------1----------1------
14     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node1,value2)']
15     : --------1---------1-----
15     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value0)']
16     : -------1----------1-----
16     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value0)']
17     : --------1----------1----
17     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node2,value1)']
18     : ------1------------1----
18     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value1)']
19     : -------1------------1---
19     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node2,value2)']
20     : ------1-------------1---
20     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node2,value2)']
21     : -----1------1-----------
21     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value0)']
22     : ----1-------1-----------
22     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value0)']
23     : -----1-------1----------
23     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node0,value1)']
24     : ---1---------1----------
24     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value1)']
25     : ----1---------1---------
25     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node0,value2)']
26     : ---1----------1---------
26     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node0,value2)']
27     : -----1------------1-----
27     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value0)']
28     : ----1-------------1-----
28     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value0)']
29     : -----1-------------1----
29     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node2,value1)']
30     : ---1---------------1----
30     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value1)']
31     : ----1---------------1---
31     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node2,value2)']
32     : ---1----------------1---
32     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node2,value2)']
33     : --1---------1-----------
33     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value0)']
34     : -1----------1-----------
34     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value0)']
35     : --1----------1----------
35     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node0,value1)']
36     : 1------------1----------
36     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value1)']
37     : -1------------1---------
37     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node0,value2)']
38     : 1-------------1---------
38     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node0,value2)']
39     : --1------------1--------
39     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value0)']
40     : -1-------------1--------
40     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value0)']
41     : --1-------------1-------
41     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node1,value1)']
42     : 1---------------1-------
42     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value1)']
43     : -1---------------1------
43     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node1,value2)']
44     : 1----------------1------
44     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : -------------1-------0--
45     : ['vote(node0,value1)', '~voted(node0)']
46     : --------------1------0--
46     : ['vote(node0,value2)', '~voted(node0)']
47     : ------------1--------0--
47     : ['vote(node0,value0)', '~voted(node0)']
48     : ----------------1-----0-
48     : ['vote(node1,value1)', '~voted(node1)']
49     : -----------------1----0-
49     : ['vote(node1,value2)', '~voted(node1)']
50     : ---------------1------0-
50     : ['vote(node1,value0)', '~voted(node1)']
51     : -------------------1---0
51     : ['vote(node2,value1)', '~voted(node2)']
52     : --------------------1--0
52     : ['vote(node2,value2)', '~voted(node2)']
53     : ------------------1----0
53     : ['vote(node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
54 (*) : ----------11------------
54     : ['decided(value1)', 'decided(value2)']
55     : ---------1-1------------
55     : ['decided(value0)', 'decided(value2)']
56     : ---------11-------------
56     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
57 (*) : -------1---1------------
57     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
58     : --------1-1-------------
58     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
59     : ------1----1------------
59     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
60     : --------11--------------
60     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
61     : ------1---1-------------
61     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
62     : -------1-1--------------
62     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
63     : ----1------1------------
63     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
64     : -----1----1-------------
64     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
65     : ---1-------1------------
65     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
66     : -----1---1--------------
66     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
67     : ---1------1-------------
67     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
68     : ----1----1--------------
68     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
69     : -1---------1------------
69     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
70     : --1-------1-------------
70     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
71     : 1----------1------------
71     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
72     : --1------1--------------
72     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
73     : 1---------1-------------
73     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
74     : -1-------1--------------
74     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 18
num_suborbits: 1
75 (*) : --1--------------0------
75     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node1,value2)']
76     : -1--------------0-------
76     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node1,value1)']
77     : 1--------------0--------
77     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node1,value0)']
78     : -----1--------------0---
78     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node2,value2)']
79     : ----1--------------0----
79     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node2,value1)']
80     : ---1--------------0-----
80     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node2,value0)']
81     : --1-----------0---------
81     : ['chosenAt(quorum__node0_node1,value2)', '~vote(node0,value2)']
82     : -1-----------0----------
82     : ['chosenAt(quorum__node0_node1,value1)', '~vote(node0,value1)']
83     : 1-----------0-----------
83     : ['chosenAt(quorum__node0_node1,value0)', '~vote(node0,value0)']
84     : --------1-----------0---
84     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node2,value2)']
85     : -------1-----------0----
85     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node2,value1)']
86     : ------1-----------0-----
86     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node2,value0)']
87     : -----1--------0---------
87     : ['chosenAt(quorum__node0_node2,value2)', '~vote(node0,value2)']
88     : ----1--------0----------
88     : ['chosenAt(quorum__node0_node2,value1)', '~vote(node0,value1)']
89     : ---1--------0-----------
89     : ['chosenAt(quorum__node0_node2,value0)', '~vote(node0,value0)']
90     : --------1--------0------
90     : ['chosenAt(quorum__node1_node2,value2)', '~vote(node1,value2)']
91     : -------1--------0-------
91     : ['chosenAt(quorum__node1_node2,value1)', '~vote(node1,value1)']
92     : ------1--------0--------
92     : ['chosenAt(quorum__node1_node2,value0)', '~vote(node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 27
num_suborbits: 2
93 (*) : --1----1----------------
93     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value1)']
94     : -1------1---------------
94     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value2)']
95     : --1---1-----------------
95     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value0)']
96     : 1-------1---------------
96     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value2)']
97     : -1----1-----------------
97     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value0)']
98     : 1------1----------------
98     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value1)']
99     : -----1-1----------------
99     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value1)']
100     : ----1---1---------------
100     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
101     : -----11-----------------
101     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value0)']
102     : ---1----1---------------
102     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
103     : ----1-1-----------------
103     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value0)']
104     : ---1---1----------------
104     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
105     : --1-1-------------------
105     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value1)']
106     : -1---1------------------
106     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value2)']
107     : --11--------------------
107     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value0)']
108     : 1----1------------------
108     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value2)']
109     : -1-1--------------------
109     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value0)']
110     : 1---1-------------------
110     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value1)']
111 (*) : 1-1---------------------
111     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value2)']
112     : 11----------------------
112     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)']
113     : -11---------------------
113     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)']
114     : ---1-1------------------
114     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value2)']
115     : ---11-------------------
115     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)']
116     : ----11------------------
116     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)']
117     : ------1-1---------------
117     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value2)']
118     : ------11----------------
118     : ['chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)']
119     : -------11---------------
119     : ['chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 18
num_suborbits: 1
120 (*) : ----1----------------0--
120     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node0)']
121     : -----1---------------0--
121     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node0)']
122     : ---1-----------------0--
122     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node0)']
123     : -1-------------------0--
123     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node0)']
124     : --1------------------0--
124     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node0)']
125     : 1--------------------0--
125     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node0)']
126     : -------1--------------0-
126     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node1)']
127     : --------1-------------0-
127     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node1)']
128     : ------1---------------0-
128     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node1)']
129     : -1--------------------0-
129     : ['chosenAt(quorum__node0_node1,value1)', '~voted(node1)']
130     : --1-------------------0-
130     : ['chosenAt(quorum__node0_node1,value2)', '~voted(node1)']
131     : 1---------------------0-
131     : ['chosenAt(quorum__node0_node1,value0)', '~voted(node1)']
132     : -------1---------------0
132     : ['chosenAt(quorum__node1_node2,value1)', '~voted(node2)']
133     : --------1--------------0
133     : ['chosenAt(quorum__node1_node2,value2)', '~voted(node2)']
134     : ------1----------------0
134     : ['chosenAt(quorum__node1_node2,value0)', '~voted(node2)']
135     : ----1------------------0
135     : ['chosenAt(quorum__node0_node2,value1)', '~voted(node2)']
136     : -----1-----------------0
136     : ['chosenAt(quorum__node0_node2,value2)', '~voted(node2)']
137     : ---1-------------------0
137     : ['chosenAt(quorum__node0_node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 9
num_suborbits: 1
138 (*) : --0-----------1--1------
138     : ['vote(node0,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
139     : -0-----------1--1-------
139     : ['vote(node0,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
140     : 0-----------1--1--------
140     : ['vote(node0,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
141     : -----0--------1-----1---
141     : ['vote(node0,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
142     : ----0--------1-----1----
142     : ['vote(node0,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
143     : ---0--------1-----1-----
143     : ['vote(node0,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
144     : --------0--------1--1---
144     : ['vote(node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
145     : -------0--------1--1----
145     : ['vote(node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
146     : ------0--------1--1-----
146     : ['vote(node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 18
num_suborbits: 1
147 (*) : -----1--0--------1------
147     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
148     : ----1--0--------1-------
148     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
149     : ---1--0--------1--------
149     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
150     : --1-----0-----------1---
150     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
151     : -1-----0-----------1----
151     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
152     : 1-----0-----------1-----
152     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
153     : -----0--1-----1---------
153     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node2,value2)']
154     : ----0--1-----1----------
154     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node2,value1)']
155     : ---0--1-----1-----------
155     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node2,value0)']
156     : --1--0--------------1---
156     : ['chosenAt(quorum__node0_node1,value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
157     : -1--0--------------1----
157     : ['chosenAt(quorum__node0_node1,value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
158     : 1--0--------------1-----
158     : ['chosenAt(quorum__node0_node1,value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
159     : --0-----1-----1---------
159     : ['chosenAt(quorum__node1_node2,value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)']
160     : -0-----1-----1----------
160     : ['chosenAt(quorum__node1_node2,value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)']
161     : 0-----1-----1-----------
161     : ['chosenAt(quorum__node1_node2,value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)']
162     : --0--1-----------1------
162     : ['chosenAt(quorum__node0_node2,value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)']
163     : -0--1-----------1-------
163     : ['chosenAt(quorum__node0_node2,value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)']
164     : 0--1-----------1--------
164     : ['chosenAt(quorum__node0_node2,value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
165 (*) : ----0-----1------1------
165     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
166     : -----0-----1----1-------
166     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
167     : ---0-----1-------1------
167     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
168     : -----0-----1---1--------
168     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
169     : ---0-----1------1-------
169     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
170     : ----0-----1----1--------
170     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
171     : -0--------1---------1---
171     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
172     : --0--------1-------1----
172     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
173     : 0--------1----------1---
173     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
174     : --0--------1------1-----
174     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
175     : 0--------1---------1----
175     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
176     : -0--------1-------1-----
176     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
177     : -------0--1---1---------
177     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
178     : --------0--1-1----------
178     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
179     : ------0--1----1---------
179     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
180     : --------0--11-----------
180     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
181     : ------0--1---1----------
181     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
182     : -------0--1-1-----------
182     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
183 (*) : ----------1------1-0----
183     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
184     : -----------1----1---0---
184     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
185     : ---------1-------10-----
185     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
186     : -----------1---1----0---
186     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
187     : ---------1------1-0-----
187     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
188     : ----------1----1---0----
188     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
189     : ----------1-----0---1---
189     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
190     : -----------1-----0-1----
190     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
191     : ---------1-----0----1---
191     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
192     : -----------1-----01-----
192     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
193     : ---------1-----0---1----
193     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
194     : ----------1-----0-1-----
194     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
195     : ----------1---1----0----
195     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
196     : -----------1-1------0---
196     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
197     : ---------1----1---0-----
197     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
198     : -----------11-------0---
198     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
199     : ---------1---1----0-----
199     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
200     : ----------1-1------0----
200     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
201     : ----------1--0------1---
201     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
202     : -----------1--0----1----
202     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
203     : ---------1--0-------1---
203     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
204     : -----------1--0---1-----
204     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
205     : ---------1--0------1----
205     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
206     : ----------1--0----1-----
206     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
207     : ----------1---1-0-------
207     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
208     : -----------1-1---0------
208     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
209     : ---------1----10--------
209     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
210     : -----------11----0------
210     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
211     : ---------1---1-0--------
211     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
212     : ----------1-1---0-------
212     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
213     : ----------1--0---1------
213     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
214     : -----------1--0-1-------
214     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
215     : ---------1--0----1------
215     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
216     : -----------1--01--------
216     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
217     : ---------1--0---1-------
217     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
218     : ----------1--0-1--------
218     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 2
219 (*) : ----------1------1--1---
219     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
220     : -----------1----1--1----
220     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
221     : ---------1-------1--1---
221     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
222     : -----------1---1--1-----
222     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
223     : ---------1------1--1----
223     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
224     : ----------1----1--1-----
224     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
225     : ----------1---1-----1---
225     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
226     : -----------1-1-----1----
226     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
227     : ---------1----1-----1---
227     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
228     : -----------11-----1-----
228     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
229     : ---------1---1-----1----
229     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
230     : ----------1-1-----1-----
230     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
231     : ----------1---1--1------
231     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
232     : -----------1-1--1-------
232     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
233     : ---------1----1--1------
233     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
234     : -----------11--1--------
234     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
235     : ---------1---1--1-------
235     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
236     : ----------1-1--1--------
236     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
237 (*) : ----------1------11-----
237     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
238     : -----------1----1-1-----
238     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
239     : ---------1-------1-1----
239     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
240     : -----------1---1---1----
240     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
241     : ---------1------1---1---
241     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
242     : ----------1----1----1---
242     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
243     : ----------1---1---1-----
243     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
244     : -----------1-1----1-----
244     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
245     : ---------1----1----1----
245     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
246     : -----------11------1----
246     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
247     : ---------1---1------1---
247     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
248     : ----------1-1-------1---
248     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
249     : ----------1---11--------
249     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
250     : -----------1-1-1--------
250     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
251     : ---------1----1-1-------
251     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
252     : -----------11---1-------
252     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
253     : ---------1---1---1------
253     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
254     : ----------1-1----1------
254     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
255 (*) : ----------1------1-----0
255     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
256     : -----------1----1------0
256     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
257     : ---------1-------1-----0
257     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
258     : -----------1---1-------0
258     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
259     : ---------1------1------0
259     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
260     : ----------1----1-------0
260     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
261     : ----------1---------1-0-
261     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
262     : -----------1-------1--0-
262     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
263     : ---------1----------1-0-
263     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
264     : -----------1------1---0-
264     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
265     : ---------1---------1--0-
265     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
266     : ----------1-------1---0-
266     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
267     : ----------1---1--------0
267     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
268     : -----------1-1---------0
268     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
269     : ---------1----1--------0
269     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
270     : -----------11----------0
270     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
271     : ---------1---1---------0
271     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
272     : ----------1-1----------0
272     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
273     : ----------1---------10--
273     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
274     : -----------1-------1-0--
274     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
275     : ---------1----------10--
275     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
276     : -----------1------1--0--
276     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
277     : ---------1---------1-0--
277     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
278     : ----------1-------1--0--
278     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
279     : ----------1---1-------0-
279     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
280     : -----------1-1--------0-
280     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
281     : ---------1----1-------0-
281     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
282     : -----------11---------0-
282     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
283     : ---------1---1--------0-
283     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
284     : ----------1-1---------0-
284     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
285     : ----------1------1---0--
285     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
286     : -----------1----1----0--
286     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
287     : ---------1-------1---0--
287     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
288     : -----------1---1-----0--
288     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
289     : ---------1------1----0--
289     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
290     : ----------1----1-----0--
290     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
291 (*) : -----------1---------0-0
291     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
292     : ----------1----------0-0
292     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
293     : ---------1-----------0-0
293     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
294     : -----------1---------00-
294     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
295     : ----------1----------00-
295     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
296     : ---------1-----------00-
296     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
297     : -----------1----------00
297     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
298     : ----------1-----------00
298     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
299     : ---------1------------00
299     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : --0--------1-----------0
300     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
301     : -0--------1------------0
301     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
302     : 0--------1-------------0
302     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
303     : -----0-----1----------0-
303     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
304     : ----0-----1-----------0-
304     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
305     : ---0-----1------------0-
305     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
306     : --------0--1---------0--
306     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
307     : -------0--1----------0--
307     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
308     : ------0--1-----------0--
308     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 1
309 (*) : -----------1--0--------0
309     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
310     : ----------1--0---------0
310     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
311     : ---------1--0----------0
311     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
312     : -----------1--0-------0-
312     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
313     : ----------1--0--------0-
313     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
314     : ---------1--0---------0-
314     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
315     : -----------1-----0-----0
315     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
316     : ----------1-----0------0
316     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
317     : ---------1-----0-------0
317     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
318     : -----------1-----0---0--
318     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
319     : ----------1-----0----0--
319     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
320     : ---------1-----0-----0--
320     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
321     : -----------1--------0-0-
321     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
322     : ----------1--------0--0-
322     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
323     : ---------1--------0---0-
323     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
324     : -----------1--------00--
324     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
325     : ----------1--------0-0--
325     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
326     : ---------1--------0--0--
326     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
327 (*) : ------0--1--0-----------
327     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
328     : -------0--1--0----------
328     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
329     : --------0--1--0---------
329     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
330     : ---0-----1-----0--------
330     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
331     : ----0-----1-----0-------
331     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
332     : -----0-----1-----0------
332     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
333     : 0--------1--------0-----
333     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
334     : -0--------1--------0----
334     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
335     : --0--------1--------0---
335     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : ---------1--0-----0-----
336     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
337     : ----------1--0-----0----
337     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
338     : -----------1--0-----0---
338     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
339     : ---------1--0--0--------
339     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
340     : ----------1--0--0-------
340     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
341     : -----------1--0--0------
341     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
342     : ---------1-----0--0-----
342     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
343     : ----------1-----0--0----
343     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
344     : -----------1-----0--0---
344     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 9
num_suborbits: 1
345 (*) : -1--0--1----------------
345     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node2,value1)']
346     : --1--0--1---------------
346     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node2,value2)']
347     : 1--0--1-----------------
347     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node2,value0)']
348     : -0--1--1----------------
348     : ['chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node0_node1,value1)']
349     : --0--1--1---------------
349     : ['chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node1_node2,value2)', '~chosenAt(quorum__node0_node1,value2)']
350     : 0--1--1-----------------
350     : ['chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node0_node1,value0)']
351     : -1--1--0----------------
351     : ['chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
352     : --1--1--0---------------
352     : ['chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
353     : 1--1--0-----------------
353     : ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 9
num_suborbits: 1
354 (*) : --0-----0--1-----1------
354     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
355     : -0-----0--1-----1-------
355     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : 0-----0--1-----1--------
356     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
357     : -----0--0--1--------1---
357     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : ----0--0--1--------1----
358     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : ---0--0--1--------1-----
359     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : --0--0-----1--1---------
360     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
361     : -0--0-----1--1----------
361     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
362     : 0--0-----1--1-----------
362     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
363 (*) : -0--0--0--1-------------
363     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
364     : --0--0--0--1------------
364     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
365     : 0--0--0--1--------------
365     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : ------------------000--1
366     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
367     : ---------------000----1-
367     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : ------------000------1--
368     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 1
369 (*) : 0------------001-----1--
369     : ['vote(node1,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
370     : -0----------0-0-1----1--
370     : ['vote(node1,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
371     : --0---------00---1---1--
371     : ['vote(node1,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
372     : ---0---------00---1--1--
372     : ['vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
373     : ----0-------0-0----1-1--
373     : ['vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
374     : -----0------00------11--
374     : ['vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
375     : 0-----------1---00----1-
375     : ['vote(node0,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
376     : -0-----------1-0-0----1-
376     : ['vote(node0,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
377     : --0-----------100-----1-
377     : ['vote(node0,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
378     : ------0---------001---1-
378     : ['vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
379     : -------0-------0-0-1--1-
379     : ['vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
380     : --------0------00---1-1-
380     : ['vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
381     : ---0--------1------00--1
381     : ['vote(node0,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
382     : ----0--------1----0-0--1
382     : ['vote(node0,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
383     : -----0--------1---00---1
383     : ['vote(node0,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
384     : ------0--------1---00--1
384     : ['vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
385     : -------0--------1-0-0--1
385     : ['vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
386     : --------0--------100---1
386     : ['vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 1
387 (*) : ----1--0-------0-0----1-
387     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
388     : -----1--0------00-----1-
388     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
389     : ---1--0---------00----1-
389     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
390     : -1-----0----------0-0--1
390     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
391     : --1-----0---------00---1
391     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
392     : 1-----0------------00--1
392     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
393     : ----0--1----0-0------1--
393     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
394     : -----0--1---00-------1--
394     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
395     : ---0--1------00------1--
395     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
396     : -1--0-------------0-0--1
396     : ['chosenAt(quorum__node0_node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
397     : --1--0------------00---1
397     : ['chosenAt(quorum__node0_node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
398     : 1--0---------------00--1
398     : ['chosenAt(quorum__node0_node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
399     : -0-----1----0-0------1--
399     : ['chosenAt(quorum__node1_node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
400     : --0-----1---00-------1--
400     : ['chosenAt(quorum__node1_node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
401     : 0-----1------00------1--
401     : ['chosenAt(quorum__node1_node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
402     : -0--1----------0-0----1-
402     : ['chosenAt(quorum__node0_node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
403     : --0--1---------00-----1-
403     : ['chosenAt(quorum__node0_node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
404     : 0--1------------00----1-
404     : ['chosenAt(quorum__node0_node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 9
num_suborbits: 1
405 (*) : ---0--0--1---------00--1
405     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
406     : ----0--0--1-------0-0--1
406     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
407     : -----0--0--1------00---1
407     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
408     : 0-----0--1------00----1-
408     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
409     : -0-----0--1----0-0----1-
409     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : --0-----0--1---00-----1-
410     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
411     : 0--0-----1---00------1--
411     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
412     : -0--0-----1-0-0------1--
412     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
413     : --0--0-----100-------1--
413     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 18
num_suborbits: 1
414 (*) : -0----0------1---01---1-
414     : ['vote(node0,value1)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)']
415     : --0---0-------1-0-1---1-
415     : ['vote(node0,value2)', 'vote(node2,value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)']
416     : 0------0----1----0-1--1-
416     : ['vote(node0,value0)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)']
417     : --0----0------10---1--1-
417     : ['vote(node0,value2)', 'vote(node2,value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)']
418     : 0-------0---1---0---1-1-
418     : ['vote(node0,value0)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)']
419     : -0------0----1-0----1-1-
419     : ['vote(node0,value1)', 'vote(node2,value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)']
420     : ----0-0------1-1----0--1
420     : ['vote(node0,value1)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value2)']
421     : -----00-------11---0---1
421     : ['vote(node0,value2)', 'vote(node1,value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)']
422     : ---0---0----1---1---0--1
422     : ['vote(node0,value0)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value2)']
423     : -----0-0------1-1-0----1
423     : ['vote(node0,value2)', 'vote(node1,value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)']
424     : ---0----0---1----1-0---1
424     : ['vote(node0,value0)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value1)']
425     : ----0---0----1---10----1
425     : ['vote(node0,value1)', 'vote(node1,value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)']
426     : -0-0----------0-1-1--1--
426     : ['vote(node1,value1)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)']
427     : --00---------0---11--1--
427     : ['vote(node1,value2)', 'vote(node2,value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)']
428     : 0---0---------01---1-1--
428     : ['vote(node1,value0)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)']
429     : --0-0-------0----1-1-1--
429     : ['vote(node1,value2)', 'vote(node2,value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)']
430     : 0----0-------0-1----11--
430     : ['vote(node1,value0)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)']
431     : -0---0------0---1---11--
431     : ['vote(node1,value1)', 'vote(node2,value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 9
num_suborbits: 1
432 (*) : -------0-------0-00-0-11
432     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
433     : --------0------00-00--11
433     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
434     : ------0---------00-00-11
434     : ['voted(node1)', 'voted(node2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
435     : ----0-------0-0---0-01-1
435     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
436     : -----0------00----00-1-1
436     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
437     : ---0---------00----001-1
437     : ['voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
438     : -0----------0-00-0---11-
438     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
439     : --0---------00-00----11-
439     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
440     : 0------------00-00---11-
440     : ['voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 36
num_suborbits: 1
441 (*) : ---0----0---1--00--0--11
441     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
442     : ---0---0----1--0-0--0-11
442     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
443     : ----0---0----1-00-0---11
443     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
444     : ----0-0------1--00--0-11
444     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
445     : -----0-0------10-00---11
445     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
446     : -----00-------1-00-0--11
446     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
447     : 0-------0---1---0-00--11
447     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
448     : 0------0----1----00-0-11
448     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
449     : -0------0----1-0--00--11
449     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
450     : -0----0------1---0-00-11
450     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
451     : --0----0------10--0-0-11
451     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
452     : --0---0-------1-0--00-11
452     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
453     : -----00-----00-1---0-1-1
453     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
454     : ----0-0-----0-01----01-1
454     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
455     : -----0-0----00--1-0--1-1
455     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node2,value0)']
456     : ---0---0-----00-1---01-1
456     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
457     : ----0---0---0-0--10--1-1
457     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node2,value0)']
458     : ---0----0----00--1-0-1-1
458     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node2,value1)']
459     : 0----0-------0-1--00-1-1
459     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
460     : 0---0---------01--0-01-1
460     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
461     : -0---0------0---1-00-1-1
461     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
462     : -0-0----------0-1--001-1
462     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
463     : --0-0-------0----10-01-1
463     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
464     : --00---------0---1-001-1
464     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
465     : --0---0-----00--0-1--11-
465     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
466     : -0----0-----0-0--01--11-
466     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
467     : --0----0----00-0---1-11-
467     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)']
468     : 0------0-----00--0-1-11-
468     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
469     : -0------0---0-00----111-
469     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)']
470     : 0-------0----00-0---111-
470     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)']
471     : --00---------0-00-1--11-
471     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)']
472     : -0-0----------00-01--11-
472     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)']
473     : --0-0-------0--00--1-11-
473     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)']
474     : 0---0---------0-00-1-11-
474     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)']
475     : -0---0------0--0-0--111-
475     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)']
476     : 0----0-------0--00--111-
476     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 18
num_suborbits: 1
477 (*) : 0--0----0---1---0--0--11
477     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
478     : 0--0---0----1----0--0-11
478     : ['vote(node0,value0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
479     : -0--0---0----1-0--0---11
479     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
480     : -0--0-0------1---0--0-11
480     : ['vote(node0,value1)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
481     : --0--0-0------10--0---11
481     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
482     : --0--00-------1-0--0--11
482     : ['vote(node0,value2)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
483     : 0----00------0-1---0-1-1
483     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node2,value1)']
484     : 0---0-0-------01----01-1
484     : ['vote(node1,value0)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node2,value2)']
485     : -0---0-0----0---1-0--1-1
485     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node2,value0)']
486     : -0-0---0------0-1---01-1
486     : ['vote(node1,value1)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node2,value2)']
487     : --0-0---0---0----10--1-1
487     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node2,value0)']
488     : --00----0----0---1-0-1-1
488     : ['vote(node1,value2)', 'voted(node0)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node2,value1)']
489     : --00--0------0--0-1--11-
489     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)']
490     : -0-0--0-------0--01--11-
490     : ['vote(node2,value0)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)']
491     : --0-0--0----0--0---1-11-
491     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)']
492     : 0---0--0------0--0-1-11-
492     : ['vote(node2,value1)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)']
493     : -0---0--0---0--0----111-
493     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)']
494     : 0----0--0----0--0---111-
494     : ['vote(node2,value2)', 'voted(node0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 1
495 (*) : --00----0----0-00--0-111
495     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
496     : -0-0---0------00-0--0111
496     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
497     : --0-0---0---0--00-0--111
497     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
498     : 0---0-0-------0-00--0111
498     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
499     : -0---0-0----0--0-00--111
499     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
500     : 0----00------0--00-0-111
500     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
501     : 0----0--0----0--0-00-111
501     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
502     : 0---0--0------0--00-0111
502     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
503     : -0---0--0---0--0--00-111
503     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
504     : -0-0--0-------0--0-00111
504     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
505     : --0-0--0----0--0--0-0111
505     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
506     : --00--0------0--0--00111
506     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
507     : --0--00-----00--0--0-111
507     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
508     : -0--0-0-----0-0--0--0111
508     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
509     : --0--0-0----00-0--0--111
509     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)']
510     : 0--0---0-----00--0--0111
510     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
511     : -0--0---0---0-00--0--111
511     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)']
512     : 0--0----0----00-0--0-111
512     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 1
513 (*) : 0----0-------0--0000-111
513     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
514     : 0---0---------0-000-0111
514     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
515     : -0---0------0--0-000-111
515     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
516     : -0-0----------00-0-00111
516     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
517     : --0-0-------0--00-0-0111
517     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
518     : --00---------0-00--00111
518     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
519     : 0-------0----00-0-00-111
519     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node2,value0)', '~vote(node2,value1)']
520     : 0------0-----00--00-0111
520     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value0)', '~vote(node2,value2)']
521     : -0------0---0-00--00-111
521     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value1)']
522     : -0----0-----0-0--0-00111
522     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value1)', '~vote(node2,value2)']
523     : --0----0----00-0--0-0111
523     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node2,value0)', '~vote(node2,value2)']
524     : --0---0-----00--0--00111
524     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)', '~vote(node2,value2)']
525     : ---0----0----0000--0-111
525     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value1)']
526     : ---0---0-----000-0--0111
526     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value2)']
527     : ----0---0---0-000-0--111
527     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node2,value0)']
528     : ----0-0-----0-0-00--0111
528     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value2)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value2)']
529     : -----0-0----00-0-00--111
529     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value0)', '~vote(node1,value2)', '~vote(node2,value0)']
530     : -----00-----00--00-0-111
530     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node1,value2)', '~vote(node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 3
num_suborbits: 1
531 (*) : -00-00-00---0--0--0--111
531     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value1)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value0)', '~vote(node1,value0)', '~vote(node2,value0)']
532     : 0-00-00-0----0--0--0-111
532     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value1)', '~vote(node1,value1)', '~vote(node2,value1)']
533     : 00-00-00------0--0--0111
533     : ['voted(node0)', 'voted(node1)', 'voted(node2)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value0)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 33

[PRIME NOTE]: number of orbits before merging: 35

[PRIME NOTE]: number of primes: 534

[QRM NOTE]: Time elapsed since start: 0.234 seconds

[QRM NOTE]: Time elapsed since last: 0.209 seconds

[QRM NOTE]: Peak memory: 1736564 bytes


====================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

====================================================================================================

definition primes: {8, 9, 19, 5}


New level: 0
 pending : [0, 1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
 solution : []

Essensial at level 0 : {0, 2, 22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 2147483648), (4, 131072), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, 0), (24, 0), (25, 524288), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

Covered at level 0 : {32, 1, 6, 7, 23, 24, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, 2147483648), (4, 131072), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, 0), (24, 0), (25, 524288), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2147483648), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22]

[QRM NOTE]: Time elapsed since start: 0.302 seconds

[QRM NOTE]: Time elapsed since last: 0.068 seconds

[QRM NOTE]: Peak memory: 672724 bytes


========================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

========================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node1,value0)', 'vote(node1,value1)']

sign_func_name2args: {'0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

part_sig: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['vote(node1,value0)', 'vote(node1,value1)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$0$vote$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0, value$0$vote$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$0$vote$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0 | value$0$vote$1$1}

	sort: node

	identical_classes: {'node$0$vote$0; node$0$vote$0': [node$0$vote$0$0; node$0$vote$0$1]}

	identical_single_classes: {'node$0$vote$0; node$0$vote$0': node$0$vote$0$0; node$0$vote$0$1}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['vote(NODE0,VALUE1)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : -------------1-------0--
45     : ['vote(node0,value1)', '~voted(node0)']
46     : --------------1------0--
46     : ['vote(node0,value2)', '~voted(node0)']
47     : ------------1--------0--
47     : ['vote(node0,value0)', '~voted(node0)']
48     : ----------------1-----0-
48     : ['vote(node1,value1)', '~voted(node1)']
49     : -----------------1----0-
49     : ['vote(node1,value2)', '~voted(node1)']
50     : ---------------1------0-
50     : ['vote(node1,value0)', '~voted(node1)']
51     : -------------------1---0
51     : ['vote(node2,value1)', '~voted(node2)']
52     : --------------------1--0
52     : ['vote(node2,value2)', '~voted(node2)']
53     : ------------------1----0
53     : ['vote(node2,value0)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['vote(node0,value1)', '~voted(node0)']

sign_func_name2args: {'0$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$voted$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'node$0$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

part_sig: ('node$0$vote$0$0; node$1$voted$0$0', 'value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['vote(node0,value1)', '~voted(node0)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$voted$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$vote$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$voted$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$vote$1$0}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$voted$0': [node$0$vote$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$voted$0': node$0$vote$0$0; node$1$voted$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : ------------------000--1
366     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
367     : ---------------000----1-
367     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : ------------000------1--
368     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)']

sign_func_name2args: {'1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$1$vote$0$2, node$0$voted$0$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$2]}

sig2const: {'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$2': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

part_sig: ('node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2', 'value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2')


---------- SigGenerator ----------

terms:  ['~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)']

func_name2symbol:  {'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'1$vote': 3, '0$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$1$vote$1$0 | value$1$vote$1$1 | value$1$vote$1$2}

	sort: node

	identical_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': [node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2]}

	identical_single_classes: {'node$0$voted$0; node$1$vote$0; node$1$vote$0; node$1$vote$0': node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1; node$1$vote$0$2}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1, value$1$vote$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: value: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['voted(NODE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))


---------- Quantifier Inference: orbit 22 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
54 (*) : ----------11------------
54     : ['decided(value1)', 'decided(value2)']
55     : ---------1-1------------
55     : ['decided(value0)', 'decided(value2)']
56     : ---------11-------------
56     : ['decided(value0)', 'decided(value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'decided(value2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),), (Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

part_sig: ('value$0$decided$0$0 | value$0$decided$0$1',)


---------- SigGenerator ----------

terms:  ['decided(value1)', 'decided(value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$decided': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$decided$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$decided$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'value$0$decided$0': [value$0$decided$0$0, value$0$decided$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,VALUE1. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
57 (*) : -------1---1------------
57     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
58     : --------1-1-------------
58     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
59     : ------1----1------------
59     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
60     : --------11--------------
60     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
61     : ------1---1-------------
61     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
62     : -------1-1--------------
62     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
63     : ----1------1------------
63     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
64     : -----1----1-------------
64     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
65     : ---1-------1------------
65     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
66     : -----1---1--------------
66     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
67     : ---1------1-------------
67     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
68     : ----1----1--------------
68     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
69     : -1---------1------------
69     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
70     : --1-------1-------------
70     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
71     : 1----------1------------
71     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
72     : --1------1--------------
72     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
73     : 1---------1-------------
73     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
74     : -1-------1--------------
74     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']

sign_func_name2args: {'0$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$0$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$chosenAt$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0]}

sig2const: {'quorum$0$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$0$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

part_sig: ('quorum$0$chosenAt$0$0', 'value$0$chosenAt$1$0 | value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'0$chosenAt': 1, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$chosenAt$1$0, value$0$decided$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$chosenAt$1$0 | value$0$decided$0$0}

	sort: quorum

	identical_classes: {'quorum$0$chosenAt$0': [quorum$0$chosenAt$0$0]}

	identical_single_classes: {'quorum$0$chosenAt$0': quorum$0$chosenAt$0$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$chosenAt$1': [value$0$chosenAt$1$0], 'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$chosenAt$1': value$0$chosenAt$1$0, 'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['chosenAt(QUORUM0,VALUE0)', 'decided(VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,VALUE1. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
165 (*) : ----0-----1------1------
165     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
166     : -----0-----1----1-------
166     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
167     : ---0-----1-------1------
167     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
168     : -----0-----1---1--------
168     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
169     : ---0-----1------1-------
169     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
170     : ----0-----1----1--------
170     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
171     : -0--------1---------1---
171     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
172     : --0--------1-------1----
172     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
173     : 0--------1----------1---
173     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
174     : --0--------1------1-----
174     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
175     : 0--------1---------1----
175     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
176     : -0--------1-------1-----
176     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
177     : -------0--1---1---------
177     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
178     : --------0--1-1----------
178     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
179     : ------0--1----1---------
179     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
180     : --------0--11-----------
180     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
181     : ------0--1---1----------
181     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
182     : -------0--1-1-----------
182     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value1)', 'decided(value1)', 'vote(node1,value2)', '~member(node1,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$1$member$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

part_sig: ('node$0$vote$0$0; node$1$member$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value1)', 'decided(value1)', 'vote(node1,value2)', '~member(node1,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '0$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0; node$1$member$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0; node$1$member$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0; node$1$member$0': [node$0$vote$0$0; node$1$member$0$0]}

	identical_single_classes: {'node$0$vote$0; node$1$member$0': node$0$vote$0$0; node$1$member$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', '~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1


---------- Quantifier Inference: orbit 10 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
183 (*) : ----------1------1-0----
183     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
184     : -----------1----1---0---
184     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
185     : ---------1-------10-----
185     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
186     : -----------1---1----0---
186     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
187     : ---------1------1-0-----
187     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
188     : ----------1----1---0----
188     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
189     : ----------1-----0---1---
189     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
190     : -----------1-----0-1----
190     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
191     : ---------1-----0----1---
191     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
192     : -----------1-----01-----
192     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
193     : ---------1-----0---1----
193     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
194     : ----------1-----0-1-----
194     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
195     : ----------1---1----0----
195     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
196     : -----------1-1------0---
196     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
197     : ---------1----1---0-----
197     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
198     : -----------11-------0---
198     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
199     : ---------1---1----0-----
199     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
200     : ----------1-1------0----
200     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
201     : ----------1--0------1---
201     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
202     : -----------1--0----1----
202     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
203     : ---------1--0-------1---
203     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
204     : -----------1--0---1-----
204     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
205     : ---------1--0------1----
205     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
206     : ----------1--0----1-----
206     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
207     : ----------1---1-0-------
207     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
208     : -----------1-1---0------
208     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
209     : ---------1----10--------
209     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
210     : -----------11----0------
210     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
211     : ---------1---1-0--------
211     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
212     : ----------1-1---0-------
212     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
213     : ----------1--0---1------
213     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
214     : -----------1--0-1-------
214     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
215     : ---------1--0----1------
215     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
216     : -----------1--01--------
216     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
217     : ---------1--0---1-------
217     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
218     : ----------1--0-1--------
218     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

part_sig: ('node$0$vote$0$0 | node$1$vote$0$0', 'value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$vote': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$vote$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$vote$0': [node$1$vote$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$vote$0': node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 11 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 12 =====================
size : 36
num_suborbits: 2
219 (*) : ----------1------1--1---
219     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
220     : -----------1----1--1----
220     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
221     : ---------1-------1--1---
221     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
222     : -----------1---1--1-----
222     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
223     : ---------1------1--1----
223     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
224     : ----------1----1--1-----
224     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
225     : ----------1---1-----1---
225     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
226     : -----------1-1-----1----
226     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
227     : ---------1----1-----1---
227     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
228     : -----------11-----1-----
228     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
229     : ---------1---1-----1----
229     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
230     : ----------1-1-----1-----
230     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
231     : ----------1---1--1------
231     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
232     : -----------1-1--1-------
232     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
233     : ---------1----1--1------
233     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
234     : -----------11--1--------
234     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
235     : ---------1---1--1-------
235     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
236     : ----------1-1--1--------
236     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
237 (*) : ----------1------11-----
237     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
238     : -----------1----1-1-----
238     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
239     : ---------1-------1-1----
239     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
240     : -----------1---1---1----
240     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
241     : ---------1------1---1---
241     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
242     : ----------1----1----1---
242     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
243     : ----------1---1---1-----
243     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
244     : -----------1-1----1-----
244     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
245     : ---------1----1----1----
245     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
246     : -----------11------1----
246     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
247     : ---------1---1------1---
247     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
248     : ----------1-1-------1---
248     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
249     : ----------1---11--------
249     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
250     : -----------1-1-1--------
250     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
251     : ---------1----1-1-------
251     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
252     : -----------11---1-------
252     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
253     : ---------1---1---1------
253     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
254     : ----------1-1----1------
254     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0, value$0$vote$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0; value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$1]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

part_sig: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '0$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0, value$0$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$0$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$0$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {'value$0$vote$1': [value$0$vote$1$0, value$0$vote$1$1]}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$vote$0': [node$0$vote$0$0, node$0$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE2', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', 'vote(NODE0,VALUE1)', 'vote(NODE1,VALUE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node ~= NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0 | node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0 | node$0$vote$0$1

class signature: node$0$vote$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2']

constraint: ['NODE0:node ~= NODE1', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0 | value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value']

eq_terms: []

class signature: value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE2:value']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value', 'VALUE2:value']

eq_terms: ['VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2']

constraint: ['NODE0:node = NODE1', 'VALUE0:value ~= VALUE2', 'VALUE0:value ~= VALUE1', 'VALUE1:value ~= VALUE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$vote$0$0; node$0$vote$0$1', 'value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1')[]

sort partition signature: node$0$vote$0$0; node$0$vote$0$1

class signature: node$0$vote$0$0; node$0$vote$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

sort partition signature: value$0$decided$0$0 | value$0$vote$1$0; value$0$vote$1$1

class signature: value$0$decided$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE0:value']

eq_terms: []

class signature: value$0$vote$1$0; value$0$vote$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE2:value']

eq_terms: ['VALUE1:value = VALUE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['VALUE1:value', 'VALUE0:value']

eq_terms: ['VALUE0:value ~= VALUE1']

constraint: ['NODE0:node = NODE1', 'VALUE1:value = VALUE2', 'VALUE0:value ~= VALUE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,VALUE1,VALUE2,VALUE0,NODE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE0 = VALUE2 | VALUE0 = VALUE1 | VALUE1 = VALUE2))


---------- Quantifier Inference: orbit 12 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
255 (*) : ----------1------1-----0
255     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
256     : -----------1----1------0
256     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
257     : ---------1-------1-----0
257     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
258     : -----------1---1-------0
258     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
259     : ---------1------1------0
259     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
260     : ----------1----1-------0
260     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
261     : ----------1---------1-0-
261     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
262     : -----------1-------1--0-
262     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
263     : ---------1----------1-0-
263     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
264     : -----------1------1---0-
264     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
265     : ---------1---------1--0-
265     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
266     : ----------1-------1---0-
266     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
267     : ----------1---1--------0
267     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
268     : -----------1-1---------0
268     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
269     : ---------1----1--------0
269     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
270     : -----------11----------0
270     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
271     : ---------1---1---------0
271     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
272     : ----------1-1----------0
272     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
273     : ----------1---------10--
273     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
274     : -----------1-------1-0--
274     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
275     : ---------1----------10--
275     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
276     : -----------1------1--0--
276     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
277     : ---------1---------1-0--
277     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
278     : ----------1-------1--0--
278     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
279     : ----------1---1-------0-
279     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
280     : -----------1-1--------0-
280     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
281     : ---------1----1-------0-
281     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
282     : -----------11---------0-
282     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
283     : ---------1---1--------0-
283     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
284     : ----------1-1---------0-
284     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
285     : ----------1------1---0--
285     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
286     : -----------1----1----0--
286     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
287     : ---------1-------1---0--
287     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
288     : -----------1---1-----0--
288     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
289     : ---------1------1----0--
289     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
290     : ----------1----1-----0--
290     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$vote$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$0$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0 | value$0$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '0$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0, value$0$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0 | value$0$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0], 'value$0$vote$1': [value$0$vote$1$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0, 'value$0$vote$1': value$0$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$vote$0': [node$0$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$0$vote$0': node$0$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'decided(VALUE0)', 'vote(NODE0,VALUE1)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1,VALUE1. voted(NODE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 13 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
291 (*) : -----------1---------0-0
291     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
292     : ----------1----------0-0
292     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
293     : ---------1-----------0-0
293     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
294     : -----------1---------00-
294     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
295     : ----------1----------00-
295     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
296     : ---------1-----------00-
296     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
297     : -----------1----------00
297     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
298     : ----------1-----------00
298     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
299     : ---------1------------00
299     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~voted(node0)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$1]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$voted$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

part_sig: ('node$1$voted$0$0 | node$1$voted$0$1', 'value$0$decided$0$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~voted(node0)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$voted': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$voted$0$0, node$1$voted$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$voted$0$0 | node$1$voted$0$1}

	sort: value

	identical_classes: {'value$0$decided$0': [value$0$decided$0$0]}

	identical_single_classes: {'value$0$decided$0': value$0$decided$0$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$voted$0': [node$1$voted$0$0, node$1$voted$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', '~voted(NODE1)', 'decided(VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. voted(NODE0) | voted(NODE1) | ~decided(VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 14 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : --0--------1-----------0
300     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
301     : -0--------1------------0
301     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
302     : 0--------1-------------0
302     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
303     : -----0-----1----------0-
303     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
304     : ----0-----1-----------0-
304     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
305     : ---0-----1------------0-
305     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
306     : --------0--1---------0--
306     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
307     : -------0--1----------0--
307     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
308     : ------0--1-----------0--
308     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', 'decided(value2)', '~voted(node2)', '~member(node2,quorum__node0_node1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

part_sig: ('node$1$member$0$0; node$1$voted$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', 'decided(value2)', '~voted(node2)', '~member(node2,quorum__node0_node1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$voted': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$voted$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$voted$0': [node$1$member$0$0; node$1$voted$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$voted$0': node$1$member$0$0; node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE0)', 'decided(VALUE0)', '~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. voted(NODE0) | ~decided(VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0)


---------- Quantifier Inference: orbit 15 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 1
309 (*) : -----------1--0--------0
309     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
310     : ----------1--0---------0
310     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
311     : ---------1--0----------0
311     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
312     : -----------1--0-------0-
312     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
313     : ----------1--0--------0-
313     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
314     : ---------1--0---------0-
314     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
315     : -----------1-----0-----0
315     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
316     : ----------1-----0------0
316     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
317     : ---------1-----0-------0
317     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
318     : -----------1-----0---0--
318     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
319     : ----------1-----0----0--
319     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
320     : ---------1-----0-----0--
320     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
321     : -----------1--------0-0-
321     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
322     : ----------1--------0--0-
322     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
323     : ---------1--------0---0-
323     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
324     : -----------1--------00--
324     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
325     : ----------1--------0-0--
325     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
326     : ---------1--------0--0--
326     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']

sign_func_name2args: {'0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$voted$0$0]}

sig2const: {'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

part_sig: ('node$1$vote$0$0 | node$1$voted$0$0', 'value$0$decided$0$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$decided': 1, '1$vote': 1, '1$voted': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$voted$0$0]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$voted$0$0}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0], 'node$1$voted$0': [node$1$voted$0$0]}

	identical_single_classes: {'node$1$vote$0': node$1$vote$0$0, 'node$1$voted$0': node$1$voted$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$voted': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~voted(NODE1)', 'decided(VALUE0)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. voted(NODE1) | ~decided(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 16 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
327 (*) : ------0--1--0-----------
327     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
328     : -------0--1--0----------
328     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
329     : --------0--1--0---------
329     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
330     : ---0-----1-----0--------
330     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
331     : ----0-----1-----0-------
331     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
332     : -----0-----1-----0------
332     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
333     : 0--------1--------0-----
333     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
334     : -0--------1--------0----
334     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
335     : --0--------1--------0---
335     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node0,value0)', '~member(node0,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '1$member': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$1$member$1$0], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$0$decided$0$0, value$1$vote$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$member$0$0]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$member$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$1$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

part_sig: ('node$1$member$0$0; node$1$vote$0$0', 'quorum$1$chosenAt$0$0; quorum$1$member$1$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node0,value0)', '~member(node0,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 1, '0$decided': 1, '1$vote': 1, '1$member': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0; quorum$1$member$1$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$member$0$0; node$1$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0; quorum$1$member$1$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$member$0$0; node$1$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': [quorum$1$chosenAt$0$0; quorum$1$member$1$0]}

	identical_single_classes: {'quorum$1$chosenAt$0; quorum$1$member$1': quorum$1$chosenAt$0$0; quorum$1$member$1$0}

	identical_multi_classes: {}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$vote$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$vote$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$member$0; node$1$vote$0': [node$1$member$0$0; node$1$vote$0$0]}

	identical_single_classes: {'node$1$member$0; node$1$vote$0': node$1$member$0$0; node$1$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', '~member(NODE0,QUORUM0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0)


---------- Quantifier Inference: orbit 17 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : ---------1--0-----0-----
336     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
337     : ----------1--0-----0----
337     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
338     : -----------1--0-----0---
338     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
339     : ---------1--0--0--------
339     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
340     : ----------1--0--0-------
340     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
341     : -----------1--0--0------
341     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
342     : ---------1-----0--0-----
342     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
343     : ----------1-----0--0----
343     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
344     : -----------1-----0--0---
344     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']

sign_func_name2args: {'0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))]}

const2sigs: {Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$0$decided$0$0, value$1$vote$1$0, value$1$vote$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$1]}

sig2const: {'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

part_sig: ('node$1$vote$0$0 | node$1$vote$0$1', 'value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']

func_name2symbol:  {'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')))}

sign_func_name2count:  {'0$decided': 1, '1$vote': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$1$vote$0$0, node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$1$vote$0$0 | node$1$vote$0$1}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': [value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$vote$1; value$1$vote$1': value$0$decided$0$0; value$1$vote$1$0; value$1$vote$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$1$vote$0': [node$1$vote$0$0, node$1$vote$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~vote(NODE0,VALUE0)', '~vote(NODE1,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 18 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 20 =====================
size : 9
num_suborbits: 1
354 (*) : --0-----0--1-----1------
354     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
355     : -0-----0--1-----1-------
355     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : 0-----0--1-----1--------
356     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
357     : -----0--0--1--------1---
357     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : ----0--0--1--------1----
358     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : ---0--0--1--------1-----
359     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : --0--0-----1--1---------
360     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
361     : -0--0-----1--1----------
361     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
362     : 0--0-----1--1-----------
362     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', 'vote(node1,value2)', 'member(node1,quorum__node0_node1)', 'member(node1,quorum__node1_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '0$vote': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$member': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0, value$0$vote$1$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$vote$0$0, node$0$member$0$0, node$0$member$0$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$vote$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$0$vote$1$0': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$member$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0', 'quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1', 'value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', 'decided(value2)', 'vote(node1,value2)', 'member(node1,quorum__node0_node1)', 'member(node1,quorum__node1_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '0$vote': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$0 | quorum$0$member$1$1; quorum$1$chosenAt$0$1, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$0, quorum$0$member$1$1; quorum$1$chosenAt$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$0, quorum$0$member$1$1, quorum$1$chosenAt$0$1]}

	sort: value

	identical_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1]}

	identical_single_classes: {'value$0$decided$0; value$0$vote$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$0$vote$1$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$vote$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM1)', 'vote(NODE0,VALUE0)', 'member(NODE0,QUORUM0)', 'decided(VALUE0)', '~chosenAt(QUORUM1,VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0,QUORUM0,NODE0,QUORUM1. ~member(NODE0,QUORUM1) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | QUORUM0 = QUORUM1


---------- Quantifier Inference: orbit 20 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
363 (*) : -0--0--0--1-------------
363     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
364     : --0--0--0--1------------
364     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
365     : 0--0--0--1--------------
365     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)]}

const2sigs: {Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$1$chosenAt$1$2, value$0$decided$0$0], Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$2]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$2': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$2': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

part_sig: ('quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', 'decided(value1)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),)}

sign_func_name2count:  {'1$chosenAt': 3, '0$decided': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$1$chosenAt$0$0 | quorum$1$chosenAt$0$1 | quorum$1$chosenAt$0$2, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	sort: quorum

	identical_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$1$chosenAt$0': [quorum$1$chosenAt$0$0, quorum$1$chosenAt$0$1, quorum$1$chosenAt$0$2]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1; value$1$chosenAt$1$2}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.exists

quantifier mode: value: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['decided(VALUE0)', '~chosenAt(QUORUM0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))


---------- Quantifier Inference: orbit 21 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 25 =====================
size : 9
num_suborbits: 1
405 (*) : ---0--0--1---------00--1
405     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
406     : ----0--0--1-------0-0--1
406     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
407     : -----0--0--1------00---1
407     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
408     : 0-----0--1------00----1-
408     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
409     : -0-----0--1----0-0----1-
409     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : --0-----0--1---00-----1-
410     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
411     : 0--0-----1---00------1--
411     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
412     : -0--0-----1-0-0------1--
412     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
413     : --0--0-----100-------1--
413     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

sign_func_name2args: {'1$chosenAt': [(Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$decided': [(Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))),)], '1$vote': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))))], '0$voted': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$member': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))))]}

const2sigs: {Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$0, quorum$0$member$1$1], Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$chosenAt$1$0, value$1$chosenAt$1$1, value$0$decided$0$0], Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))): [quorum$1$chosenAt$0$1, quorum$0$member$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$vote$0$0, node$1$vote$0$1, node$0$voted$0$0, node$0$member$0$0, node$0$member$0$1], Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$0], Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))): [value$1$vote$1$1]}

sig2const: {'quorum$1$chosenAt$0$0': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'quorum$1$chosenAt$0$1': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'value$1$chosenAt$1$1': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'value$0$decided$0$0': Const('value0', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$0': Const('value1', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$1$vote$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'value$1$vote$1$1': Const('value2', EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'node$0$voted$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$member$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$0': Const('quorum__node1_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), 'node$0$member$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'quorum$0$member$1$1': Const('quorum__node0_node2', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

part_sig: ('node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1', 'quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0', 'value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1')


---------- SigGenerator ----------

terms:  ['~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', 'decided(value0)', '~vote(node2,value1)', '~vote(node2,value2)', 'voted(node2)', 'member(node2,quorum__node1_node2)', 'member(node2,quorum__node0_node2)']

func_name2symbol:  {'chosenAt': Const('chosenAt', FunctionSort(EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'decided': Const('decided', FunctionSort(EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'vote': Const('vote', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2')), BooleanSort())), 'voted': Const('voted', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'member': Const('member', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), BooleanSort()))}

func_name2args_sort:  {'chosenAt': (EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'decided': (EnumeratedSort('value', ('value0', 'value1', 'value2')),), 'vote': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('value', ('value0', 'value1', 'value2'))), 'voted': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'member': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))}

sign_func_name2count:  {'1$chosenAt': 2, '0$decided': 1, '1$vote': 2, '0$voted': 1, '0$member': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0], EnumeratedSort('value', ('value0', 'value1', 'value2')): [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1, value$1$vote$1$0, value$1$vote$1$1], EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

sort2part_sig: {EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')): quorum$0$member$1$0; quorum$1$chosenAt$0$1 | quorum$0$member$1$1; quorum$1$chosenAt$0$0, EnumeratedSort('value', ('value0', 'value1', 'value2')): value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1 | value$1$vote$1$0 | value$1$vote$1$1, EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	sort: quorum

	identical_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0; quorum$1$chosenAt$0$1, quorum$0$member$1$1; quorum$1$chosenAt$0$0]}

	identical_single_classes: {}

	identical_multi_classes: {'quorum$0$member$1; quorum$1$chosenAt$0': [quorum$0$member$1$0, quorum$1$chosenAt$0$1, quorum$0$member$1$1, quorum$1$chosenAt$0$0]}

	sort: value

	identical_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': [value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1], 'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	identical_single_classes: {'value$0$decided$0; value$1$chosenAt$1; value$1$chosenAt$1': value$0$decided$0$0; value$1$chosenAt$1$0; value$1$chosenAt$1$1}

	identical_multi_classes: {'value$1$vote$1': [value$1$vote$1$0, value$1$vote$1$1]}

	sort: node

	identical_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': [node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1]}

	identical_single_classes: {'node$0$member$0; node$0$member$0; node$0$voted$0; node$1$vote$0; node$1$vote$0': node$0$member$0$0; node$0$member$0$1; node$0$voted$0$0; node$1$vote$0$0; node$1$vote$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: quorum: QuantifierMode.forall

quantifier mode: value: QuantifierMode.forall_exists

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))}

exists_qvars: {Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$chosenAt': [[Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2'))), Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$decided': [[Var('VALUE1', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '1$vote': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('VALUE0', EnumeratedSort('value', ('value0', 'value1', 'value2')))]], '0$voted': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$member': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM0', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('QUORUM1', EnumeratedSort('quorum', ('quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['member(NODE0,QUORUM1)', '~chosenAt(QUORUM0,VALUE1)', 'voted(NODE0)', 'member(NODE0,QUORUM0)', '~chosenAt(QUORUM1,VALUE1)', 'decided(VALUE1)', '~vote(NODE0,VALUE0)']


---------- QFormula: get_qclause ----------

qclause: forall QUORUM0,NODE0,QUORUM1,VALUE1. ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE1) | ~voted(NODE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE1) | ~decided(VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1


---------- Quantifier Inference: orbit 25 ----------

[QI_CHECK RESULT]: PASS


==================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

==================================================================================================================


=== Prime Orbit 0 =====================
size : 9
num_suborbits: 1
0 (*) : ---------------11-------
0     : ['vote(node1,value0)', 'vote(node1,value1)']
1     : ---------------1-1------
1     : ['vote(node1,value0)', 'vote(node1,value2)']
2     : ----------------11------
2     : ['vote(node1,value1)', 'vote(node1,value2)']
3     : ------------------11----
3     : ['vote(node2,value0)', 'vote(node2,value1)']
4     : ------------------1-1---
4     : ['vote(node2,value0)', 'vote(node2,value2)']
5     : -------------------11---
5     : ['vote(node2,value1)', 'vote(node2,value2)']
6     : ------------11----------
6     : ['vote(node0,value0)', 'vote(node0,value1)']
7     : ------------1-1---------
7     : ['vote(node0,value0)', 'vote(node0,value2)']
8     : -------------11---------
8     : ['vote(node0,value1)', 'vote(node0,value2)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 2 =====================
size : 9
num_suborbits: 1
45 (*) : -------------1-------0--
45     : ['vote(node0,value1)', '~voted(node0)']
46     : --------------1------0--
46     : ['vote(node0,value2)', '~voted(node0)']
47     : ------------1--------0--
47     : ['vote(node0,value0)', '~voted(node0)']
48     : ----------------1-----0-
48     : ['vote(node1,value1)', '~voted(node1)']
49     : -----------------1----0-
49     : ['vote(node1,value2)', '~voted(node1)']
50     : ---------------1------0-
50     : ['vote(node1,value0)', '~voted(node1)']
51     : -------------------1---0
51     : ['vote(node2,value1)', '~voted(node2)']
52     : --------------------1--0
52     : ['vote(node2,value2)', '~voted(node2)']
53     : ------------------1----0
53     : ['vote(node2,value0)', '~voted(node2)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0)
qcost : 4




=== Prime Orbit 22 =====================
size : 3
num_suborbits: 1
366 (*) : ------------------000--1
366     : ['voted(node2)', '~vote(node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
367     : ---------------000----1-
367     : ['voted(node1)', '~vote(node1,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
368     : ------------000------1--
368     : ['voted(node0)', '~vote(node0,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0))
qcost : 4




=== Prime Orbit 3 =====================
size : 3
num_suborbits: 1
54 (*) : ----------11------------
54     : ['decided(value1)', 'decided(value2)']
55     : ---------1-1------------
55     : ['decided(value0)', 'decided(value2)']
56     : ---------11-------------
56     : ['decided(value0)', 'decided(value1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,VALUE1. ~decided(VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 5




=== Prime Orbit 4 =====================
size : 18
num_suborbits: 1
57 (*) : -------1---1------------
57     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value2)']
58     : --------1-1-------------
58     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value1)']
59     : ------1----1------------
59     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value2)']
60     : --------11--------------
60     : ['chosenAt(quorum__node1_node2,value2)', 'decided(value0)']
61     : ------1---1-------------
61     : ['chosenAt(quorum__node1_node2,value0)', 'decided(value1)']
62     : -------1-1--------------
62     : ['chosenAt(quorum__node1_node2,value1)', 'decided(value0)']
63     : ----1------1------------
63     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value2)']
64     : -----1----1-------------
64     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value1)']
65     : ---1-------1------------
65     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value2)']
66     : -----1---1--------------
66     : ['chosenAt(quorum__node0_node2,value2)', 'decided(value0)']
67     : ---1------1-------------
67     : ['chosenAt(quorum__node0_node2,value0)', 'decided(value1)']
68     : ----1----1--------------
68     : ['chosenAt(quorum__node0_node2,value1)', 'decided(value0)']
69     : -1---------1------------
69     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value2)']
70     : --1-------1-------------
70     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value1)']
71     : 1----------1------------
71     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value2)']
72     : --1------1--------------
72     : ['chosenAt(quorum__node0_node1,value2)', 'decided(value0)']
73     : 1---------1-------------
73     : ['chosenAt(quorum__node0_node1,value0)', 'decided(value1)']
74     : -1-------1--------------
74     : ['chosenAt(quorum__node0_node1,value1)', 'decided(value0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall VALUE0,QUORUM0,VALUE1. ~chosenAt(QUORUM0,VALUE0) | ~decided(VALUE1) | VALUE0 = VALUE1
qcost : 6




=== Prime Orbit 10 =====================
size : 18
num_suborbits: 1
165 (*) : ----0-----1------1------
165     : ['decided(value1)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value1)']
166     : -----0-----1----1-------
166     : ['decided(value2)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value2)']
167     : ---0-----1-------1------
167     : ['decided(value0)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node2,value0)']
168     : -----0-----1---1--------
168     : ['decided(value2)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value2)']
169     : ---0-----1------1-------
169     : ['decided(value0)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node2,value0)']
170     : ----0-----1----1--------
170     : ['decided(value1)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node2,value1)']
171     : -0--------1---------1---
171     : ['decided(value1)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value1)']
172     : --0--------1-------1----
172     : ['decided(value2)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value2)']
173     : 0--------1----------1---
173     : ['decided(value0)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node1,value0)']
174     : --0--------1------1-----
174     : ['decided(value2)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value2)']
175     : 0--------1---------1----
175     : ['decided(value0)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node1,value0)']
176     : -0--------1-------1-----
176     : ['decided(value1)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node1,value1)']
177     : -------0--1---1---------
177     : ['decided(value1)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value1)']
178     : --------0--1-1----------
178     : ['decided(value2)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value2)']
179     : ------0--1----1---------
179     : ['decided(value0)', 'vote(node0,value2)', '~chosenAt(quorum__node1_node2,value0)']
180     : --------0--11-----------
180     : ['decided(value2)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value2)']
181     : ------0--1---1----------
181     : ['decided(value0)', 'vote(node0,value1)', '~chosenAt(quorum__node1_node2,value0)']
182     : -------0--1-1-----------
182     : ['decided(value1)', 'vote(node0,value0)', '~chosenAt(quorum__node1_node2,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,QUORUM0,NODE0,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0) | VALUE0 = VALUE1
qcost : 9




=== Prime Orbit 11 =====================
size : 36
num_suborbits: 1
183 (*) : ----------1------1-0----
183     : ['decided(value1)', 'vote(node1,value2)', '~vote(node2,value1)']
184     : -----------1----1---0---
184     : ['decided(value2)', 'vote(node1,value1)', '~vote(node2,value2)']
185     : ---------1-------10-----
185     : ['decided(value0)', 'vote(node1,value2)', '~vote(node2,value0)']
186     : -----------1---1----0---
186     : ['decided(value2)', 'vote(node1,value0)', '~vote(node2,value2)']
187     : ---------1------1-0-----
187     : ['decided(value0)', 'vote(node1,value1)', '~vote(node2,value0)']
188     : ----------1----1---0----
188     : ['decided(value1)', 'vote(node1,value0)', '~vote(node2,value1)']
189     : ----------1-----0---1---
189     : ['decided(value1)', 'vote(node2,value2)', '~vote(node1,value1)']
190     : -----------1-----0-1----
190     : ['decided(value2)', 'vote(node2,value1)', '~vote(node1,value2)']
191     : ---------1-----0----1---
191     : ['decided(value0)', 'vote(node2,value2)', '~vote(node1,value0)']
192     : -----------1-----01-----
192     : ['decided(value2)', 'vote(node2,value0)', '~vote(node1,value2)']
193     : ---------1-----0---1----
193     : ['decided(value0)', 'vote(node2,value1)', '~vote(node1,value0)']
194     : ----------1-----0-1-----
194     : ['decided(value1)', 'vote(node2,value0)', '~vote(node1,value1)']
195     : ----------1---1----0----
195     : ['decided(value1)', 'vote(node0,value2)', '~vote(node2,value1)']
196     : -----------1-1------0---
196     : ['decided(value2)', 'vote(node0,value1)', '~vote(node2,value2)']
197     : ---------1----1---0-----
197     : ['decided(value0)', 'vote(node0,value2)', '~vote(node2,value0)']
198     : -----------11-------0---
198     : ['decided(value2)', 'vote(node0,value0)', '~vote(node2,value2)']
199     : ---------1---1----0-----
199     : ['decided(value0)', 'vote(node0,value1)', '~vote(node2,value0)']
200     : ----------1-1------0----
200     : ['decided(value1)', 'vote(node0,value0)', '~vote(node2,value1)']
201     : ----------1--0------1---
201     : ['decided(value1)', 'vote(node2,value2)', '~vote(node0,value1)']
202     : -----------1--0----1----
202     : ['decided(value2)', 'vote(node2,value1)', '~vote(node0,value2)']
203     : ---------1--0-------1---
203     : ['decided(value0)', 'vote(node2,value2)', '~vote(node0,value0)']
204     : -----------1--0---1-----
204     : ['decided(value2)', 'vote(node2,value0)', '~vote(node0,value2)']
205     : ---------1--0------1----
205     : ['decided(value0)', 'vote(node2,value1)', '~vote(node0,value0)']
206     : ----------1--0----1-----
206     : ['decided(value1)', 'vote(node2,value0)', '~vote(node0,value1)']
207     : ----------1---1-0-------
207     : ['decided(value1)', 'vote(node0,value2)', '~vote(node1,value1)']
208     : -----------1-1---0------
208     : ['decided(value2)', 'vote(node0,value1)', '~vote(node1,value2)']
209     : ---------1----10--------
209     : ['decided(value0)', 'vote(node0,value2)', '~vote(node1,value0)']
210     : -----------11----0------
210     : ['decided(value2)', 'vote(node0,value0)', '~vote(node1,value2)']
211     : ---------1---1-0--------
211     : ['decided(value0)', 'vote(node0,value1)', '~vote(node1,value0)']
212     : ----------1-1---0-------
212     : ['decided(value1)', 'vote(node0,value0)', '~vote(node1,value1)']
213     : ----------1--0---1------
213     : ['decided(value1)', 'vote(node1,value2)', '~vote(node0,value1)']
214     : -----------1--0-1-------
214     : ['decided(value2)', 'vote(node1,value1)', '~vote(node0,value2)']
215     : ---------1--0----1------
215     : ['decided(value0)', 'vote(node1,value2)', '~vote(node0,value0)']
216     : -----------1--01--------
216     : ['decided(value2)', 'vote(node1,value0)', '~vote(node0,value2)']
217     : ---------1--0---1-------
217     : ['decided(value0)', 'vote(node1,value1)', '~vote(node0,value0)']
218     : ----------1--0-1--------
218     : ['decided(value1)', 'vote(node1,value0)', '~vote(node0,value1)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1,VALUE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | vote(NODE1,VALUE0) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 12 =====================
size : 36
num_suborbits: 2
219 (*) : ----------1------1--1---
219     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value2)']
220     : -----------1----1--1----
220     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value1)']
221     : ---------1-------1--1---
221     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value2)']
222     : -----------1---1--1-----
222     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value0)']
223     : ---------1------1--1----
223     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value1)']
224     : ----------1----1--1-----
224     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value0)']
225     : ----------1---1-----1---
225     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value2)']
226     : -----------1-1-----1----
226     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value1)']
227     : ---------1----1-----1---
227     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value2)']
228     : -----------11-----1-----
228     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value0)']
229     : ---------1---1-----1----
229     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value1)']
230     : ----------1-1-----1-----
230     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value0)']
231     : ----------1---1--1------
231     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value2)']
232     : -----------1-1--1-------
232     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value1)']
233     : ---------1----1--1------
233     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value2)']
234     : -----------11--1--------
234     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value0)']
235     : ---------1---1--1-------
235     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value1)']
236     : ----------1-1--1--------
236     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value0)']
237 (*) : ----------1------11-----
237     : ['decided(value1)', 'vote(node1,value2)', 'vote(node2,value0)']
238     : -----------1----1-1-----
238     : ['decided(value2)', 'vote(node1,value1)', 'vote(node2,value0)']
239     : ---------1-------1-1----
239     : ['decided(value0)', 'vote(node1,value2)', 'vote(node2,value1)']
240     : -----------1---1---1----
240     : ['decided(value2)', 'vote(node1,value0)', 'vote(node2,value1)']
241     : ---------1------1---1---
241     : ['decided(value0)', 'vote(node1,value1)', 'vote(node2,value2)']
242     : ----------1----1----1---
242     : ['decided(value1)', 'vote(node1,value0)', 'vote(node2,value2)']
243     : ----------1---1---1-----
243     : ['decided(value1)', 'vote(node0,value2)', 'vote(node2,value0)']
244     : -----------1-1----1-----
244     : ['decided(value2)', 'vote(node0,value1)', 'vote(node2,value0)']
245     : ---------1----1----1----
245     : ['decided(value0)', 'vote(node0,value2)', 'vote(node2,value1)']
246     : -----------11------1----
246     : ['decided(value2)', 'vote(node0,value0)', 'vote(node2,value1)']
247     : ---------1---1------1---
247     : ['decided(value0)', 'vote(node0,value1)', 'vote(node2,value2)']
248     : ----------1-1-------1---
248     : ['decided(value1)', 'vote(node0,value0)', 'vote(node2,value2)']
249     : ----------1---11--------
249     : ['decided(value1)', 'vote(node0,value2)', 'vote(node1,value0)']
250     : -----------1-1-1--------
250     : ['decided(value2)', 'vote(node0,value1)', 'vote(node1,value0)']
251     : ---------1----1-1-------
251     : ['decided(value0)', 'vote(node0,value2)', 'vote(node1,value1)']
252     : -----------11---1-------
252     : ['decided(value2)', 'vote(node0,value0)', 'vote(node1,value1)']
253     : ---------1---1---1------
253     : ['decided(value0)', 'vote(node0,value1)', 'vote(node1,value2)']
254     : ----------1-1----1------
254     : ['decided(value1)', 'vote(node0,value0)', 'vote(node1,value2)']
num_forall :   5
num_exists :   0
num_literals : 10
quantified form : forall NODE0,VALUE1,VALUE2,VALUE0,NODE1. ~decided(VALUE0) | ~vote(NODE0,VALUE1) | ~vote(NODE1,VALUE2) | ((NODE0 = NODE1 | VALUE1 ~= VALUE2 | VALUE0 = VALUE1) & (NODE0 = NODE1 | VALUE0 = VALUE2 | VALUE0 = VALUE1 | VALUE1 = VALUE2))
qcost : 15




=== Prime Orbit 13 =====================
size : 36
num_suborbits: 1
255 (*) : ----------1------1-----0
255     : ['decided(value1)', 'vote(node1,value2)', '~voted(node2)']
256     : -----------1----1------0
256     : ['decided(value2)', 'vote(node1,value1)', '~voted(node2)']
257     : ---------1-------1-----0
257     : ['decided(value0)', 'vote(node1,value2)', '~voted(node2)']
258     : -----------1---1-------0
258     : ['decided(value2)', 'vote(node1,value0)', '~voted(node2)']
259     : ---------1------1------0
259     : ['decided(value0)', 'vote(node1,value1)', '~voted(node2)']
260     : ----------1----1-------0
260     : ['decided(value1)', 'vote(node1,value0)', '~voted(node2)']
261     : ----------1---------1-0-
261     : ['decided(value1)', 'vote(node2,value2)', '~voted(node1)']
262     : -----------1-------1--0-
262     : ['decided(value2)', 'vote(node2,value1)', '~voted(node1)']
263     : ---------1----------1-0-
263     : ['decided(value0)', 'vote(node2,value2)', '~voted(node1)']
264     : -----------1------1---0-
264     : ['decided(value2)', 'vote(node2,value0)', '~voted(node1)']
265     : ---------1---------1--0-
265     : ['decided(value0)', 'vote(node2,value1)', '~voted(node1)']
266     : ----------1-------1---0-
266     : ['decided(value1)', 'vote(node2,value0)', '~voted(node1)']
267     : ----------1---1--------0
267     : ['decided(value1)', 'vote(node0,value2)', '~voted(node2)']
268     : -----------1-1---------0
268     : ['decided(value2)', 'vote(node0,value1)', '~voted(node2)']
269     : ---------1----1--------0
269     : ['decided(value0)', 'vote(node0,value2)', '~voted(node2)']
270     : -----------11----------0
270     : ['decided(value2)', 'vote(node0,value0)', '~voted(node2)']
271     : ---------1---1---------0
271     : ['decided(value0)', 'vote(node0,value1)', '~voted(node2)']
272     : ----------1-1----------0
272     : ['decided(value1)', 'vote(node0,value0)', '~voted(node2)']
273     : ----------1---------10--
273     : ['decided(value1)', 'vote(node2,value2)', '~voted(node0)']
274     : -----------1-------1-0--
274     : ['decided(value2)', 'vote(node2,value1)', '~voted(node0)']
275     : ---------1----------10--
275     : ['decided(value0)', 'vote(node2,value2)', '~voted(node0)']
276     : -----------1------1--0--
276     : ['decided(value2)', 'vote(node2,value0)', '~voted(node0)']
277     : ---------1---------1-0--
277     : ['decided(value0)', 'vote(node2,value1)', '~voted(node0)']
278     : ----------1-------1--0--
278     : ['decided(value1)', 'vote(node2,value0)', '~voted(node0)']
279     : ----------1---1-------0-
279     : ['decided(value1)', 'vote(node0,value2)', '~voted(node1)']
280     : -----------1-1--------0-
280     : ['decided(value2)', 'vote(node0,value1)', '~voted(node1)']
281     : ---------1----1-------0-
281     : ['decided(value0)', 'vote(node0,value2)', '~voted(node1)']
282     : -----------11---------0-
282     : ['decided(value2)', 'vote(node0,value0)', '~voted(node1)']
283     : ---------1---1--------0-
283     : ['decided(value0)', 'vote(node0,value1)', '~voted(node1)']
284     : ----------1-1---------0-
284     : ['decided(value1)', 'vote(node0,value0)', '~voted(node1)']
285     : ----------1------1---0--
285     : ['decided(value1)', 'vote(node1,value2)', '~voted(node0)']
286     : -----------1----1----0--
286     : ['decided(value2)', 'vote(node1,value1)', '~voted(node0)']
287     : ---------1-------1---0--
287     : ['decided(value0)', 'vote(node1,value2)', '~voted(node0)']
288     : -----------1---1-----0--
288     : ['decided(value2)', 'vote(node1,value0)', '~voted(node0)']
289     : ---------1------1----0--
289     : ['decided(value0)', 'vote(node1,value1)', '~voted(node0)']
290     : ----------1----1-----0--
290     : ['decided(value1)', 'vote(node1,value0)', '~voted(node0)']
num_forall :   4
num_exists :   0
num_literals : 5
quantified form : forall VALUE0,NODE0,NODE1,VALUE1. voted(NODE1) | ~decided(VALUE0) | ~vote(NODE0,VALUE1) | (VALUE0 = VALUE1 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 14 =====================
size : 9
num_suborbits: 1
291 (*) : -----------1---------0-0
291     : ['decided(value2)', '~voted(node0)', '~voted(node2)']
292     : ----------1----------0-0
292     : ['decided(value1)', '~voted(node0)', '~voted(node2)']
293     : ---------1-----------0-0
293     : ['decided(value0)', '~voted(node0)', '~voted(node2)']
294     : -----------1---------00-
294     : ['decided(value2)', '~voted(node0)', '~voted(node1)']
295     : ----------1----------00-
295     : ['decided(value1)', '~voted(node0)', '~voted(node1)']
296     : ---------1-----------00-
296     : ['decided(value0)', '~voted(node0)', '~voted(node1)']
297     : -----------1----------00
297     : ['decided(value2)', '~voted(node1)', '~voted(node2)']
298     : ----------1-----------00
298     : ['decided(value1)', '~voted(node1)', '~voted(node2)']
299     : ---------1------------00
299     : ['decided(value0)', '~voted(node1)', '~voted(node2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. voted(NODE0) | voted(NODE1) | ~decided(VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 15 =====================
size : 9
num_suborbits: 1
300 (*) : --0--------1-----------0
300     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~voted(node2)']
301     : -0--------1------------0
301     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~voted(node2)']
302     : 0--------1-------------0
302     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~voted(node2)']
303     : -----0-----1----------0-
303     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~voted(node1)']
304     : ----0-----1-----------0-
304     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~voted(node1)']
305     : ---0-----1------------0-
305     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~voted(node1)']
306     : --------0--1---------0--
306     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~voted(node0)']
307     : -------0--1----------0--
307     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~voted(node0)']
308     : ------0--1-----------0--
308     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. voted(NODE0) | ~decided(VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 16 =====================
size : 18
num_suborbits: 1
309 (*) : -----------1--0--------0
309     : ['decided(value2)', '~vote(node0,value2)', '~voted(node2)']
310     : ----------1--0---------0
310     : ['decided(value1)', '~vote(node0,value1)', '~voted(node2)']
311     : ---------1--0----------0
311     : ['decided(value0)', '~vote(node0,value0)', '~voted(node2)']
312     : -----------1--0-------0-
312     : ['decided(value2)', '~vote(node0,value2)', '~voted(node1)']
313     : ----------1--0--------0-
313     : ['decided(value1)', '~vote(node0,value1)', '~voted(node1)']
314     : ---------1--0---------0-
314     : ['decided(value0)', '~vote(node0,value0)', '~voted(node1)']
315     : -----------1-----0-----0
315     : ['decided(value2)', '~vote(node1,value2)', '~voted(node2)']
316     : ----------1-----0------0
316     : ['decided(value1)', '~vote(node1,value1)', '~voted(node2)']
317     : ---------1-----0-------0
317     : ['decided(value0)', '~vote(node1,value0)', '~voted(node2)']
318     : -----------1-----0---0--
318     : ['decided(value2)', '~vote(node1,value2)', '~voted(node0)']
319     : ----------1-----0----0--
319     : ['decided(value1)', '~vote(node1,value1)', '~voted(node0)']
320     : ---------1-----0-----0--
320     : ['decided(value0)', '~vote(node1,value0)', '~voted(node0)']
321     : -----------1--------0-0-
321     : ['decided(value2)', '~vote(node2,value2)', '~voted(node1)']
322     : ----------1--------0--0-
322     : ['decided(value1)', '~vote(node2,value1)', '~voted(node1)']
323     : ---------1--------0---0-
323     : ['decided(value0)', '~vote(node2,value0)', '~voted(node1)']
324     : -----------1--------00--
324     : ['decided(value2)', '~vote(node2,value2)', '~voted(node0)']
325     : ----------1--------0-0--
325     : ['decided(value1)', '~vote(node2,value1)', '~voted(node0)']
326     : ---------1--------0--0--
326     : ['decided(value0)', '~vote(node2,value0)', '~voted(node0)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. voted(NODE1) | ~decided(VALUE0) | vote(NODE0,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 17 =====================
size : 9
num_suborbits: 1
327 (*) : ------0--1--0-----------
327     : ['decided(value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node0,value0)']
328     : -------0--1--0----------
328     : ['decided(value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node0,value1)']
329     : --------0--1--0---------
329     : ['decided(value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node0,value2)']
330     : ---0-----1-----0--------
330     : ['decided(value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node1,value0)']
331     : ----0-----1-----0-------
331     : ['decided(value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node1,value1)']
332     : -----0-----1-----0------
332     : ['decided(value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node1,value2)']
333     : 0--------1--------0-----
333     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~vote(node2,value0)']
334     : -0--------1--------0----
334     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~vote(node2,value1)']
335     : --0--------1--------0---
335     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,QUORUM0,NODE0. ~decided(VALUE0) | vote(NODE0,VALUE0) | member(NODE0,QUORUM0) | chosenAt(QUORUM0,VALUE0)
qcost : 7




=== Prime Orbit 18 =====================
size : 9
num_suborbits: 1
336 (*) : ---------1--0-----0-----
336     : ['decided(value0)', '~vote(node0,value0)', '~vote(node2,value0)']
337     : ----------1--0-----0----
337     : ['decided(value1)', '~vote(node0,value1)', '~vote(node2,value1)']
338     : -----------1--0-----0---
338     : ['decided(value2)', '~vote(node0,value2)', '~vote(node2,value2)']
339     : ---------1--0--0--------
339     : ['decided(value0)', '~vote(node0,value0)', '~vote(node1,value0)']
340     : ----------1--0--0-------
340     : ['decided(value1)', '~vote(node0,value1)', '~vote(node1,value1)']
341     : -----------1--0--0------
341     : ['decided(value2)', '~vote(node0,value2)', '~vote(node1,value2)']
342     : ---------1-----0--0-----
342     : ['decided(value0)', '~vote(node1,value0)', '~vote(node2,value0)']
343     : ----------1-----0--0----
343     : ['decided(value1)', '~vote(node1,value1)', '~vote(node2,value1)']
344     : -----------1-----0--0---
344     : ['decided(value2)', '~vote(node1,value2)', '~vote(node2,value2)']
num_forall :   3
num_exists :   0
num_literals : 4
quantified form : forall VALUE0,NODE0,NODE1. ~decided(VALUE0) | vote(NODE0,VALUE0) | vote(NODE1,VALUE0) | NODE0 = NODE1
qcost : 7




=== Prime Orbit 20 =====================
size : 9
num_suborbits: 1
354 (*) : --0-----0--1-----1------
354     : ['decided(value2)', 'vote(node1,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)']
355     : -0-----0--1-----1-------
355     : ['decided(value1)', 'vote(node1,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)']
356     : 0-----0--1-----1--------
356     : ['decided(value0)', 'vote(node1,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)']
357     : -----0--0--1--------1---
357     : ['decided(value2)', 'vote(node2,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
358     : ----0--0--1--------1----
358     : ['decided(value1)', 'vote(node2,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
359     : ---0--0--1--------1-----
359     : ['decided(value0)', 'vote(node2,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
360     : --0--0-----1--1---------
360     : ['decided(value2)', 'vote(node0,value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)']
361     : -0--0-----1--1----------
361     : ['decided(value1)', 'vote(node0,value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)']
362     : 0--0-----1--1-----------
362     : ['decided(value0)', 'vote(node0,value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)']
num_forall :   4
num_exists :   0
num_literals : 7
quantified form : forall VALUE0,QUORUM0,NODE0,QUORUM1. ~member(NODE0,QUORUM1) | ~vote(NODE0,VALUE0) | ~member(NODE0,QUORUM0) | ~decided(VALUE0) | chosenAt(QUORUM1,VALUE0) | chosenAt(QUORUM0,VALUE0) | QUORUM0 = QUORUM1
qcost : 11




=== Prime Orbit 21 =====================
size : 3
num_suborbits: 1
363 (*) : -0--0--0--1-------------
363     : ['decided(value1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)']
364     : --0--0--0--1------------
364     : ['decided(value2)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)']
365     : 0--0--0--1--------------
365     : ['decided(value0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))
qcost : 4




=== Prime Orbit 25 =====================
size : 9
num_suborbits: 1
405 (*) : ---0--0--1---------00--1
405     : ['decided(value0)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node2,value1)', '~vote(node2,value2)']
406     : ----0--0--1-------0-0--1
406     : ['decided(value1)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node2,value0)', '~vote(node2,value2)']
407     : -----0--0--1------00---1
407     : ['decided(value2)', 'voted(node2)', '~chosenAt(quorum__node0_node2,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node2,value0)', '~vote(node2,value1)']
408     : 0-----0--1------00----1-
408     : ['decided(value0)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node1_node2,value0)', '~vote(node1,value1)', '~vote(node1,value2)']
409     : -0-----0--1----0-0----1-
409     : ['decided(value1)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node1_node2,value1)', '~vote(node1,value0)', '~vote(node1,value2)']
410     : --0-----0--1---00-----1-
410     : ['decided(value2)', 'voted(node1)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node1_node2,value2)', '~vote(node1,value0)', '~vote(node1,value1)']
411     : 0--0-----1---00------1--
411     : ['decided(value0)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value0)', '~chosenAt(quorum__node0_node2,value0)', '~vote(node0,value1)', '~vote(node0,value2)']
412     : -0--0-----1-0-0------1--
412     : ['decided(value1)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value1)', '~chosenAt(quorum__node0_node2,value1)', '~vote(node0,value0)', '~vote(node0,value2)']
413     : --0--0-----100-------1--
413     : ['decided(value2)', 'voted(node0)', '~chosenAt(quorum__node0_node1,value2)', '~chosenAt(quorum__node0_node2,value2)', '~vote(node0,value0)', '~vote(node0,value1)']
num_forall :   4
num_exists :   1
num_literals : 9
quantified form : forall QUORUM0,NODE0,QUORUM1,VALUE1. ~member(NODE0,QUORUM1) | chosenAt(QUORUM0,VALUE1) | ~voted(NODE0) | ~member(NODE0,QUORUM0) | chosenAt(QUORUM1,VALUE1) | ~decided(VALUE1) | (exists VALUE0. (vote(NODE0,VALUE0) & VALUE0 ~= VALUE1)) | QUORUM0 = QUORUM1
qcost : 14



[QRM NOTE]: Time elapsed since start: 2.438 seconds

[QRM NOTE]: Time elapsed since last: 2.137 seconds

[QRM NOTE]: Peak memory: 2945826 bytes


=================================================================================================

	[MIN]: Minimization on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

=================================================================================================


New level: 1
 pending : [3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2147483648), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2147483648), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 1 among pending : [3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2147483648), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 3 with phase True at level 1

After decision at level 1
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22, 3]


New level: 2
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22, 3]


Before reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22, 3]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2147483648), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, 67108864), (18, 33554432), (19, -1), (20, 131072), (21, 134217728), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]
 solution : [0, 2, 22, 3]


Solution : [0, 2, 22, 3] has cost 19.


Decide in level 2 among pending : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, 67108864), (18, 33554432), (19, -1), (20, 131072), (21, 134217728), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 21 with phase True at level 2

After decision at level 2
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25]
 solution : [0, 2, 22, 3, 21]


New level: 3
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25]
 solution : [0, 2, 22, 3, 21]


Before reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25]
 solution : [0, 2, 22, 3, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, 67108864), (18, 33554432), (19, -1), (20, 131072), (21, 134217728), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 3, 21]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 3, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 3, 21]


Solution : [0, 2, 22, 3, 21] has cost 23.


Before backtrack at level 3
 pending : []
 solution : [0, 2, 22, 3, 21]

After backtrack at level 3
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25]
 solution : [0, 2, 22, 3, 21]


Invert decision for 21 at level 2


New level: 3
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25]
 solution : [0, 2, 22, 3]


Before reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25]
 solution : [0, 2, 22, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, 67108864), (18, 33554432), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25]
 solution : [0, 2, 22, 3]


Solution : [0, 2, 22, 3] has cost 19.


Decide in level 3 among pending : [4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, 67108864), (18, 33554432), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 3

After decision at level 3
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25]
 solution : [0, 2, 22, 3, 17]


New level: 4
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25]
 solution : [0, 2, 22, 3, 17]


Before reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25]
 solution : [0, 2, 22, 3, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, 67108864), (18, 33554432), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 3, 17]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 3, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 3, 17]


Solution : [0, 2, 22, 3, 17] has cost 26.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 22, 3, 17]

After backtrack at level 4
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25]
 solution : [0, 2, 22, 3, 17]


Invert decision for 17 at level 3


New level: 4
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25]
 solution : [0, 2, 22, 3]


Before reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25]
 solution : [0, 2, 22, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, 33554432), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25]
 solution : [0, 2, 22, 3]


Solution : [0, 2, 22, 3] has cost 19.


Decide in level 4 among pending : [4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, 33554432), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 4

After decision at level 4
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 18]


New level: 5
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 18]


Before reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 18]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, 33554432), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {4, 10, 11, 12, 13, 14, 15, 16, 20, 25}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 3, 18]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 3, 18]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 3, 18]


Solution : [0, 2, 22, 3, 18] has cost 26.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 22, 3, 18]

After backtrack at level 5
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 18]


Invert decision for 18 at level 4


New level: 5
 pending : [4, 10, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3]


Before reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 10, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3]


Solution : [0, 2, 22, 3] has cost 19.


Decide in level 5 among pending : [4, 10, 11, 12, 13, 14, 15, 16, 20, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [4, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 10]


New level: 6
 pending : [4, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 10]


Before reduction : 
 pending  : [4, 11, 12, 13, 14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2097152), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 2048), (15, 8192), (16, 2048), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {13, 11, 4, 12}

After reduction : 
 pending  : [14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 10]


Before reduction : 
 pending  : [14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 2048), (15, 8192), (16, 2048), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 2048), (15, 8192), (16, 2048), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 10]


Solution : [0, 2, 22, 3, 10] has cost 28.


Before backtrack at level 6
 pending : [14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 10]

After backtrack at level 6
 pending : [14, 15, 16, 20, 25, 4, 11, 12, 13]
 solution : [0, 2, 22, 3, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [14, 15, 16, 20, 25, 4, 11, 12, 13]
 solution : [0, 2, 22, 3]


Before reduction : 
 pending  : [14, 15, 16, 20, 25, 4, 11, 12, 13]
 solution : [0, 2, 22, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 2048), (15, 8192), (16, 2048), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [14, 15, 16, 20, 25, 4, 11, 12, 13]
 solution : [0, 2, 22, 3]


Solution : [0, 2, 22, 3] has cost 19.


Decide in level 6 among pending : [14, 15, 16, 20, 25, 4, 11, 12, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [14, 15, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 11]


New level: 7
 pending : [14, 15, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 11]


Before reduction : 
 pending  : [14, 15, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1048576), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 2048), (15, 8192), (16, 2048), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {13, 4, 12}

After reduction : 
 pending  : [14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 11]


Before reduction : 
 pending  : [14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 2048), (15, 8192), (16, 2048), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 2048), (15, 8192), (16, 2048), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 11]


Solution : [0, 2, 22, 3, 11] has cost 28.


Before backtrack at level 7
 pending : [14, 15, 16, 20, 25]
 solution : [0, 2, 22, 3, 11]

After backtrack at level 7
 pending : [14, 15, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [14, 15, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3]


Before reduction : 
 pending  : [14, 15, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 2048), (15, 8192), (16, 2048), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [14, 15, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3]


Solution : [0, 2, 22, 3] has cost 19.


Decide in level 7 among pending : [14, 15, 16, 20, 25, 4, 12, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 7

After decision at level 7
 pending : [14, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 15]


New level: 8
 pending : [14, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 15]


Before reduction : 
 pending  : [14, 16, 20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 16384), (14, 8192), (15, 524288), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {16, 13, 14}

After reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 3, 15]


Before reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 3, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 3, 15]


Solution : [0, 2, 22, 3, 15] has cost 26.


Before backtrack at level 8
 pending : [20, 25, 4, 12]
 solution : [0, 2, 22, 3, 15]

After backtrack at level 8
 pending : [20, 25, 4, 12, 14, 16, 13]
 solution : [0, 2, 22, 3, 15]


Invert decision for 15 at level 7


New level: 8
 pending : [20, 25, 4, 12, 14, 16, 13]
 solution : [0, 2, 22, 3]


Before reduction : 
 pending  : [20, 25, 4, 12, 14, 16, 13]
 solution : [0, 2, 22, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 16384), (14, 8192), (15, -1), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 14, 16, 13]
 solution : [0, 2, 22, 3]


Solution : [0, 2, 22, 3] has cost 19.


Decide in level 8 among pending : [20, 25, 4, 12, 14, 16, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 16384), (14, 8192), (15, -1), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 8

After decision at level 8
 pending : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 3, 16]


New level: 9
 pending : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 3, 16]


Before reduction : 
 pending  : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 3, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 16384), (14, 8192), (15, -1), (16, 262144), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {13, 14}

After reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 3, 16]


Before reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 3, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 3, 16]


Solution : [0, 2, 22, 3, 16] has cost 26.


Before backtrack at level 9
 pending : [20, 25, 4, 12]
 solution : [0, 2, 22, 3, 16]

After backtrack at level 9
 pending : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 3, 16]


Invert decision for 16 at level 8


New level: 9
 pending : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 3]


Before reduction : 
 pending  : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 3]

Essensial at level 9 : {14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 16384), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 16896), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 32768), (21, -1), (22, -1), (23, -1), (24, -1), (25, 32768), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 14]


Before reduction : 
 pending  : [20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 14]


Solution : [0, 2, 22, 3, 14] has cost 26.


Before backtrack at level 9
 pending : [20, 25, 4, 12, 13]
 solution : [0, 2, 22, 3, 14]

After backtrack at level 9
 pending : [20, 25, 4, 12, 13, 14]
 solution : [0, 2, 22, 3]


Before backtrack at level 8
 pending : [20, 25, 4, 12, 13, 14]
 solution : [0, 2, 22, 3]

After backtrack at level 8
 pending : [20, 25, 4, 12, 13, 14, 16]
 solution : [0, 2, 22, 3]


Before backtrack at level 7
 pending : [20, 25, 4, 12, 13, 14, 16]
 solution : [0, 2, 22, 3]

After backtrack at level 7
 pending : [20, 25, 4, 12, 13, 14, 16, 15]
 solution : [0, 2, 22, 3]


Before backtrack at level 6
 pending : [20, 25, 4, 12, 13, 14, 16, 15]
 solution : [0, 2, 22, 3]

After backtrack at level 6
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11]
 solution : [0, 2, 22, 3]


Before backtrack at level 5
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11]
 solution : [0, 2, 22, 3]

After backtrack at level 5
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22, 3]


Before backtrack at level 4
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22, 3]

After backtrack at level 4
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22, 3]


Before backtrack at level 3
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22, 3]

After backtrack at level 3
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22, 3]


Before backtrack at level 2
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22, 3]

After backtrack at level 2
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17, 21]
 solution : [0, 2, 22, 3]


Invert decision for 3 at level 1


New level: 2
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17, 21]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17, 21]
 solution : [0, 2, 22]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32768), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 34816), (13, 8192), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17, 21]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 2 among pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 21 with phase True at level 2

After decision at level 2
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22, 21]


New level: 3
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22, 21]


Before reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, 536870912), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : {4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 21]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 21]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 21]


Solution : [0, 2, 22, 21] has cost 18.


Before backtrack at level 3
 pending : []
 solution : [0, 2, 22, 21]

After backtrack at level 3
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22, 21]


Invert decision for 21 at level 2


New level: 3
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 3 among pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 17 with phase True at level 3

After decision at level 3
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22, 17]


New level: 4
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22, 17]


Before reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, 268435456), (18, 134217728), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : {4, 10, 11, 12, 13, 14, 15, 16, 18, 20, 25}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 17]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 17]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 17]


Solution : [0, 2, 22, 17] has cost 21.


Before backtrack at level 4
 pending : []
 solution : [0, 2, 22, 17]

After backtrack at level 4
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22, 17]


Invert decision for 17 at level 3


New level: 4
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, 134217728), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 4 among pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, 134217728), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 18 with phase True at level 4

After decision at level 4
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22, 18]


New level: 5
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22, 18]


Before reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22, 18]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, 134217728), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : {4, 10, 11, 12, 13, 14, 15, 16, 20, 25}

After reduction : 
 pending  : []
 solution : [0, 2, 22, 18]


Before reduction : 
 pending  : []
 solution : [0, 2, 22, 18]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 22, 18]


Solution : [0, 2, 22, 18] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 22, 18]

After backtrack at level 5
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22, 18]


Invert decision for 18 at level 4


New level: 5
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 5 among pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11]
 solution : [0, 2, 22, 10]


New level: 6
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11]
 solution : [0, 2, 22, 10]


Before reduction : 
 pending  : [20, 25, 4, 12, 13, 14, 16, 15, 11]
 solution : [0, 2, 22, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8388608), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 8192), (15, 32768), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : {13, 11, 4, 12}

After reduction : 
 pending  : [20, 25, 14, 16, 15]
 solution : [0, 2, 22, 10]


Before reduction : 
 pending  : [20, 25, 14, 16, 15]
 solution : [0, 2, 22, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 8192), (15, 32768), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 32768), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [20, 25, 14, 16, 15]
 solution : [0, 2, 22, 10]


Solution : [0, 2, 22, 10] has cost 23.


Before backtrack at level 6
 pending : [20, 25, 14, 16, 15]
 solution : [0, 2, 22, 10]

After backtrack at level 6
 pending : [20, 25, 14, 16, 15, 4, 12, 13, 11]
 solution : [0, 2, 22, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [20, 25, 14, 16, 15, 4, 12, 13, 11]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [20, 25, 14, 16, 15, 4, 12, 13, 11]
 solution : [0, 2, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 32768), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [20, 25, 14, 16, 15, 4, 12, 13, 11]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 6 among pending : [20, 25, 14, 16, 15, 4, 12, 13, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [20, 25, 14, 16, 15, 4, 12, 13]
 solution : [0, 2, 22, 11]


New level: 7
 pending : [20, 25, 14, 16, 15, 4, 12, 13]
 solution : [0, 2, 22, 11]


Before reduction : 
 pending  : [20, 25, 14, 16, 15, 4, 12, 13]
 solution : [0, 2, 22, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 4194304), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 8192), (15, 32768), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : {13, 4, 12}

After reduction : 
 pending  : [20, 25, 14, 16, 15]
 solution : [0, 2, 22, 11]


Before reduction : 
 pending  : [20, 25, 14, 16, 15]
 solution : [0, 2, 22, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, 8192), (15, 32768), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 32768), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [20, 25, 14, 16, 15]
 solution : [0, 2, 22, 11]


Solution : [0, 2, 22, 11] has cost 23.


Before backtrack at level 7
 pending : [20, 25, 14, 16, 15]
 solution : [0, 2, 22, 11]

After backtrack at level 7
 pending : [20, 25, 14, 16, 15, 4, 12, 13]
 solution : [0, 2, 22, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [20, 25, 14, 16, 15, 4, 12, 13]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [20, 25, 14, 16, 15, 4, 12, 13]
 solution : [0, 2, 22]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 8192), (15, 32768), (16, 8192), (17, -1), (18, -1), (19, -1), (20, 512), (21, -1), (22, -1), (23, -1), (24, -1), (25, 512), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [20, 25, 14, 16, 15, 4, 12, 13]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 7 among pending : [20, 25, 14, 16, 15, 4, 12, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 15 with phase True at level 7

After decision at level 7
 pending : [20, 25, 14, 16, 4, 12, 13]
 solution : [0, 2, 22, 15]


New level: 8
 pending : [20, 25, 14, 16, 4, 12, 13]
 solution : [0, 2, 22, 15]


Before reduction : 
 pending  : [20, 25, 14, 16, 4, 12, 13]
 solution : [0, 2, 22, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, 65536), (14, 32768), (15, 2097152), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : {16, 13, 14}

After reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 15]


Before reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 15]


Solution : [0, 2, 22, 15] has cost 21.


Before backtrack at level 8
 pending : [20, 25, 4, 12]
 solution : [0, 2, 22, 15]

After backtrack at level 8
 pending : [20, 25, 4, 12, 14, 16, 13]
 solution : [0, 2, 22, 15]


Invert decision for 15 at level 7


New level: 8
 pending : [20, 25, 4, 12, 14, 16, 13]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [20, 25, 4, 12, 14, 16, 13]
 solution : [0, 2, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, 65536), (14, 32768), (15, -1), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 14, 16, 13]
 solution : [0, 2, 22]


Solution : [0, 2, 22] has cost 14.


Decide in level 8 among pending : [20, 25, 4, 12, 14, 16, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, 65536), (14, 32768), (15, -1), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Decide 16 with phase True at level 8

After decision at level 8
 pending : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 16]


New level: 9
 pending : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 16]


Before reduction : 
 pending  : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, 65536), (14, 32768), (15, -1), (16, 1048576), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : {13, 14}

After reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 16]


Before reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 25, 4, 12]
 solution : [0, 2, 22, 16]


Solution : [0, 2, 22, 16] has cost 21.


Before backtrack at level 9
 pending : [20, 25, 4, 12]
 solution : [0, 2, 22, 16]

After backtrack at level 9
 pending : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22, 16]


Invert decision for 16 at level 8


New level: 9
 pending : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22]


Before reduction : 
 pending  : [20, 25, 4, 12, 14, 13]
 solution : [0, 2, 22]

Essensial at level 9 : {14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 65536), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 67584), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 131072), (21, -1), (22, -1), (23, -1), (24, -1), (25, 131072), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, 32768), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 13]
 solution : [0, 2, 22, 14]


Before reduction : 
 pending  : [20, 25, 4, 12, 13]
 solution : [0, 2, 22, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, 32768), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 131072), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 139264), (13, 32768), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 524288), (21, -1), (22, -1), (23, -1), (24, -1), (25, 524288), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 25, 4, 12, 13]
 solution : [0, 2, 22, 14]


Solution : [0, 2, 22, 14] has cost 21.


Before backtrack at level 9
 pending : [20, 25, 4, 12, 13]
 solution : [0, 2, 22, 14]

After backtrack at level 9
 pending : [20, 25, 4, 12, 13, 14]
 solution : [0, 2, 22]


Before backtrack at level 8
 pending : [20, 25, 4, 12, 13, 14]
 solution : [0, 2, 22]

After backtrack at level 8
 pending : [20, 25, 4, 12, 13, 14, 16]
 solution : [0, 2, 22]


Before backtrack at level 7
 pending : [20, 25, 4, 12, 13, 14, 16]
 solution : [0, 2, 22]

After backtrack at level 7
 pending : [20, 25, 4, 12, 13, 14, 16, 15]
 solution : [0, 2, 22]


Before backtrack at level 6
 pending : [20, 25, 4, 12, 13, 14, 16, 15]
 solution : [0, 2, 22]

After backtrack at level 6
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11]
 solution : [0, 2, 22]


Before backtrack at level 5
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11]
 solution : [0, 2, 22]

After backtrack at level 5
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22]


Before backtrack at level 4
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10]
 solution : [0, 2, 22]

After backtrack at level 4
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22]


Before backtrack at level 3
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18]
 solution : [0, 2, 22]

After backtrack at level 3
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22]


Before backtrack at level 2
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17]
 solution : [0, 2, 22]

After backtrack at level 2
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17, 21]
 solution : [0, 2, 22]


Before backtrack at level 1
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17, 21]
 solution : [0, 2, 22]

After backtrack at level 1
 pending : [20, 25, 4, 12, 13, 14, 16, 15, 11, 10, 18, 17, 21, 3]
 solution : [0, 2, 22]


================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 18

[MIN NOTE]: maximum branch and bound depth: 9

Definitions (length=1)

invariant [def_chosenAt] chosenAt(Q,V) = forall N. member(N,Q) -> vote(N,V) # definition

Equality Relations (length=0)

Solution 0 : [0, 2, 22, 21] (length = 4)

invariant [invar_0] forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1 # qcost: 6

invariant [invar_2] forall VALUE0,NODE0. voted(NODE0) | ~vote(NODE0,VALUE0) # qcost: 4

invariant [invar_22] forall NODE0. (exists VALUE0. ~voted(NODE0) | vote(NODE0,VALUE0)) # qcost: 4

invariant [invar_21] forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 2.562 seconds

[QRM NOTE]: Time elapsed since last: 0.124 seconds

[QRM NOTE]: Peak memory: 2905289 bytes


===================================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

===================================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 2.730 seconds

[QRM NOTE]: Time elapsed since last: 0.167 seconds

[QRM NOTE]: Peak memory: 1855091 bytes


====================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3]

====================================================================================================

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_21

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_21 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_21 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_21 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 30: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall V,Q. chosenAt(Q,V) <-> (forall N. member(N,Q) -> vote(N,V))) & (forall Q1,Q2. (exists N. (member(N,Q1) & member(N,Q2)))) & (forall VALUE0,NODE0,VALUE1. ~vote(NODE0,VALUE1) | ~vote(NODE0,VALUE0) | VALUE0 = VALUE1) & (forall VALUE0. (exists QUORUM0. ~decided(VALUE0) | chosenAt(QUORUM0,VALUE0))))

[QRM NOTE]: Time elapsed since start: 4.771 seconds

[QRM NOTE]: Time elapsed since last: 2.042 seconds

[QRM NOTE]: Peak memory: 1840462 bytes


***************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=3

***************************************************************************************************************

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy -s node=5,value=3 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=5,value=3]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus_epr.node_5_value_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_5_value_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_5_value_3.finite.cpp toy_consensus_epr.node_5_value_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_5_value_3.finite.o toy_consensus_epr.node_5_value_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 53

[FW NOTE]: number of interpreted atoms (e.g. member,le): 50

[FW NOTE]: number of branching actions: 45

[FW NOTE]: symmetric group order: 720

[QRM NOTE]: Time elapsed since start: 6.640 seconds

[QRM NOTE]: Time elapsed since last: 6.640 seconds

[QRM NOTE]: Peak memory: 1271109 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 6

[FW NOTE]: number of total reachable states:        1342

[FW NOTE]: number of dfs representative states:     23

[FW NOTE]: number of dfs non-representative states: 1319


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=5,value=3]

===============================================================================================================

sort: node=['node0', 'node1', 'node2', 'node3', 'node4']
sort: value=['value0', 'value1', 'value2']
sort: quorum=['quorum__node0_node1_node2', 'quorum__node0_node1_node3', 'quorum__node0_node1_node4', 'quorum__node0_node2_node3', 'quorum__node0_node2_node4', 'quorum__node0_node3_node4', 'quorum__node1_node2_node3', 'quorum__node1_node2_node4', 'quorum__node1_node3_node4', 'quorum__node2_node3_node4']
predicate: chosenAt('quorum', 'value')
predicate: decided('value',)
predicate: voted('node',)
predicate: vote('node', 'value')
predicate: member('node', 'quorum')
interpreted atoms: {'member(node0,quorum__node0_node1_node2)': '1', 'member(node0,quorum__node0_node1_node3)': '1', 'member(node0,quorum__node0_node1_node4)': '1', 'member(node0,quorum__node0_node2_node3)': '1', 'member(node0,quorum__node0_node2_node4)': '1', 'member(node0,quorum__node0_node3_node4)': '1', 'member(node0,quorum__node1_node2_node3)': '0', 'member(node0,quorum__node1_node2_node4)': '0', 'member(node0,quorum__node1_node3_node4)': '0', 'member(node0,quorum__node2_node3_node4)': '0', 'member(node1,quorum__node0_node1_node2)': '1', 'member(node1,quorum__node0_node1_node3)': '1', 'member(node1,quorum__node0_node1_node4)': '1', 'member(node1,quorum__node0_node2_node3)': '0', 'member(node1,quorum__node0_node2_node4)': '0', 'member(node1,quorum__node0_node3_node4)': '0', 'member(node1,quorum__node1_node2_node3)': '1', 'member(node1,quorum__node1_node2_node4)': '1', 'member(node1,quorum__node1_node3_node4)': '1', 'member(node1,quorum__node2_node3_node4)': '0', 'member(node2,quorum__node0_node1_node2)': '1', 'member(node2,quorum__node0_node1_node3)': '0', 'member(node2,quorum__node0_node1_node4)': '0', 'member(node2,quorum__node0_node2_node3)': '1', 'member(node2,quorum__node0_node2_node4)': '1', 'member(node2,quorum__node0_node3_node4)': '0', 'member(node2,quorum__node1_node2_node3)': '1', 'member(node2,quorum__node1_node2_node4)': '1', 'member(node2,quorum__node1_node3_node4)': '0', 'member(node2,quorum__node2_node3_node4)': '1', 'member(node3,quorum__node0_node1_node2)': '0', 'member(node3,quorum__node0_node1_node3)': '1', 'member(node3,quorum__node0_node1_node4)': '0', 'member(node3,quorum__node0_node2_node3)': '1', 'member(node3,quorum__node0_node2_node4)': '0', 'member(node3,quorum__node0_node3_node4)': '1', 'member(node3,quorum__node1_node2_node3)': '1', 'member(node3,quorum__node1_node2_node4)': '0', 'member(node3,quorum__node1_node3_node4)': '1', 'member(node3,quorum__node2_node3_node4)': '1', 'member(node4,quorum__node0_node1_node2)': '0', 'member(node4,quorum__node0_node1_node3)': '0', 'member(node4,quorum__node0_node1_node4)': '1', 'member(node4,quorum__node0_node2_node3)': '0', 'member(node4,quorum__node0_node2_node4)': '1', 'member(node4,quorum__node0_node3_node4)': '1', 'member(node4,quorum__node1_node2_node3)': '0', 'member(node4,quorum__node1_node2_node4)': '1', 'member(node4,quorum__node1_node3_node4)': '1', 'member(node4,quorum__node2_node3_node4)': '1'}
state atoms: ['chosenAt(quorum__node0_node1_node2,value0)', 'chosenAt(quorum__node0_node1_node2,value1)', 'chosenAt(quorum__node0_node1_node2,value2)', 'chosenAt(quorum__node0_node1_node3,value0)', 'chosenAt(quorum__node0_node1_node3,value1)', 'chosenAt(quorum__node0_node1_node3,value2)', 'chosenAt(quorum__node0_node1_node4,value0)', 'chosenAt(quorum__node0_node1_node4,value1)', 'chosenAt(quorum__node0_node1_node4,value2)', 'chosenAt(quorum__node0_node2_node3,value0)', 'chosenAt(quorum__node0_node2_node3,value1)', 'chosenAt(quorum__node0_node2_node3,value2)', 'chosenAt(quorum__node0_node2_node4,value0)', 'chosenAt(quorum__node0_node2_node4,value1)', 'chosenAt(quorum__node0_node2_node4,value2)', 'chosenAt(quorum__node0_node3_node4,value0)', 'chosenAt(quorum__node0_node3_node4,value1)', 'chosenAt(quorum__node0_node3_node4,value2)', 'chosenAt(quorum__node1_node2_node3,value0)', 'chosenAt(quorum__node1_node2_node3,value1)', 'chosenAt(quorum__node1_node2_node3,value2)', 'chosenAt(quorum__node1_node2_node4,value0)', 'chosenAt(quorum__node1_node2_node4,value1)', 'chosenAt(quorum__node1_node2_node4,value2)', 'chosenAt(quorum__node1_node3_node4,value0)', 'chosenAt(quorum__node1_node3_node4,value1)', 'chosenAt(quorum__node1_node3_node4,value2)', 'chosenAt(quorum__node2_node3_node4,value0)', 'chosenAt(quorum__node2_node3_node4,value1)', 'chosenAt(quorum__node2_node3_node4,value2)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node3,value0)', 'vote(node3,value1)', 'vote(node3,value2)', 'vote(node4,value0)', 'vote(node4,value1)', 'vote(node4,value2)', 'voted(node0)', 'voted(node1)', 'voted(node2)', 'voted(node3)', 'voted(node4)']
representative states : 1109285477379255, 38263982403185847, 328746158368582839, 9447372058506500074679, 5525189879801525073964215, 1448743541937415703347550579895, 1448743543118007324064961883319, 5525485045721102936272055, 5526665637341820347575479, 5526370471422242485267639, 9484274553853173918903, 9779440473431036226743, 10960032094148447530167, 9816333961578455329975, 10996925582295866633399, 10664866174570585222327, 10627963679223911378103, 2675121564228611255, 21419103213344615607, 171388970804782132407, 21491160807382543543, 364774955387546807, 3035409534418250935


=== State Orbit 0 =====================
size : 1
repr state: 00000000000000000000000000000000000000000000000000000
lex min decimal: 1109285477379255
states:
00000000000000000000000000000000000000000000000000000




=== State Orbit 1 =====================
size : 15
repr state: 00000000000000000000000000000000010000000000000010000
lex min decimal: 38263982403185847
states:
00000000000000000000000000000000000100000000000010000
00000000000000000000000000000000000000000000000100001
00000000000000000000000000000000000000000010000000010
00000000000000000000000000000000001000000000000010000
00000000000000000000000000000000000000000100000000100
00000000000000000000000000000000000000000000010000001
00000000000000000000000000000000000000010000000000100
00000000000000000000000000000000000001000000000001000
00000000000000000000000000000000000000100000000001000
00000000000000000000000000000000000000000001000000010
00000000000000000000000000000000000000001000000000100
00000000000000000000000000000000000000000000100000010
00000000000000000000000000000000010000000000000010000
00000000000000000000000000000000000000000000001000001
00000000000000000000000000000000000010000000000001000




=== State Orbit 2 =====================
size : 30
repr state: 00000000000000000000000000000000010010000000000011000
lex min decimal: 328746158368582839
states:
00000000000000000000000000000000000000100100000001100
00000000000000000000000000000000000001000000001001001
00000000000000000000000000000000010000000000010010001
00000000000000000000000000000000000000010010000000110
00000000000000000000000000000000010000000010000010010
00000000000000000000000000000000000000010000010000101
00000000000000000000000000000000000000100000000101001
00000000000000000000000000000000000001001000000001100
00000000000000000000000000000000000100100000000011000
00000000000000000000000000000000000000001001000000110
00000000000000000000000000000000001000001000000010100
00000000000000000000000000000000000010000010000001010
00000000000000000000000000000000000000000100000100101
00000000000000000000000000000000010000010000000010100
00000000000000000000000000000000000000000100100000110
00000000000000000000000000000000000100000100000010100
00000000000000000000000000000000000000000000100100011
00000000000000000000000000000000000100000000100010010
00000000000000000000000000000000000100000000000110001
00000000000000000000000000000000000001000001000001010
00000000000000000000000000000000001001000000000011000
00000000000000000000000000000000001000000001000010010
00000000000000000000000000000000010010000000000011000
00000000000000000000000000000000001000000000001010001
00000000000000000000000000000000000010000000010001001
00000000000000000000000000000000000000000001001000011
00000000000000000000000000000000000000001000001000101
00000000000000000000000000000000000010010000000001100
00000000000000000000000000000000000000000010010000011
00000000000000000000000000000000000000100000100001010




=== State Orbit 3 =====================
size : 30
repr state: 10000000000000000000000000000000010010010000000011100
lex min decimal: 9447372058506500074679
states:
00000000000000000000000000001000000000001001001000111
00000000000000000000000000000100000000000100100100111
00000000000000000100000000000000000100000000100110011
00000000000000000001000000000000000001001001000001110
00000000000000000000000000010000000000010010010000111
00000000000010000000000000000000010000010000010010101
00000000001000000000000000000000001000001001000010110
00000100000000000000000000000000000100100000100011010
00000000100000000000000000000000000100100000000111001
00000000000001000000000000000000001000001000001010101
00000000000000010000000000000000010000000010010010011
00000001000000000000000000000000001001000000001011001
00000000000000000000000000100000000000100000100101011
00000000000000000010000000000000000010010010000001110
10000000000000000000000000000000010010010000000011100
00000000010000000000000000000000010000010010000010110
00000000000000000000100000000000000000100100100001110
01000000000000000000000000000000001001001000000011100
00010000000000000000000000000000010010000010000011010
00000000000000000000001000000000000001001000001001101
00001000000000000000000000000000001001000001000011010
00000000000000000000010000000000000010010000010001101
00100000000000000000000000000000000100100100000011100
00000000000000000000000100000000000000100100000101101
00000000000000001000000000000000001000000001001010011
00000010000000000000000000000000010010000000010011001
00000000000000000000000010000000000010000010010001011
00000000000000100000000000000000000100000100000110101
00000000000000000000000001000000000001000001001001011
00000000000100000000000000000000000100000100100010110




=== State Orbit 4 =====================
size : 15
repr state: 10010000010000000010000000000000010010010010000011110
lex min decimal: 5525189879801525073964215
states:
00000000001001001000000000001000001000001001001010111
10000010000010000000010000000000010010010000010011101
00000000000000000010010010010000000010010010010001111
00000000000000000001001001001000000001001001001001111
00000000010010010000000000010000010000010010010010111
00000000000100100100000000000100000100000100100110111
00000000000000000000100100100100000000100100100101111
00100000100000100000000100000000000100100100000111101
00010010000000010000000010000000010010000010010011011
00100100000100000000100000000000000100100100100011110
10010000010000000010000000000000010010010010000011110
01000001000001000000001000000000001001001000001011101
00000100100000000100000000100000000100100000100111011
00001001000000001000000001000000001001000001001011011
01001000001000000001000000000000001001001001000011110




=== State Orbit 5 =====================
size : 3
repr state: 10010010010010010010010010010000010010010010010011111
lex min decimal: 1448743541937415703347550579895
states:
10010010010010010010010010010000010010010010010011111
01001001001001001001001001001000001001001001001011111
00100100100100100100100100100100000100100100100111111




=== State Orbit 6 =====================
size : 3
repr state: 10010010010010010010010010010010010010010010010011111
lex min decimal: 1448743543118007324064961883319
states:
01001001001001001001001001001001001001001001001011111
00100100100100100100100100100100100100100100100111111
10010010010010010010010010010010010010010010010011111




=== State Orbit 7 =====================
size : 30
repr state: 10010000010000000010000000000000010010010010001011111
lex min decimal: 5525485045721102936272055
states:
00000000000000000001001001001000010001001001001011111
01000001000001000000001000000000001001001000101011111
00010010000000010000000010000000010010000110010011111
00001001000000001000000001000000001001010001001011111
00000000000100100100000000000100000110000100100111111
01001000001000000001000000000000001001001001010011111
01000001000001000000001000000000001001001010001011111
00000100100000000100000000100000000100110000100111111
00000100100000000100000000100000000100101000100111111
00000000000000000000100100100100001000100100100111111
10000010000010000000010000000000010010010001010011111
00000000000100100100000000000100000101000100100111111
00000000010010010000000000010000010000110010010011111
00000000010010010000000000010000010001010010010011111
10010000010000000010000000000000010010010010000111111
00100000100000100000000100000000000100100101000111111
00000000000000000010010010010000000110010010010011111
10000010000010000000010000000000010010010000110011111
00100100000100000000100000000000000100100100101011111
10010000010000000010000000000000010010010010001011111
01001000001000000001000000000000001001001001000111111
00010010000000010000000010000000010010001010010011111
00000000000000000010010010010000001010010010010011111
00000000001001001000000000001000001000101001001011111
00000000001001001000000000001000001010001001001011111
00001001000000001000000001000000001001000101001011111
00100100000100000000100000000000000100100100110011111
00000000000000000000100100100100010000100100100111111
00100000100000100000000100000000000100100110000111111
00000000000000000001001001001000000101001001001011111




=== State Orbit 8 =====================
size : 30
repr state: 10010000010000000010000000000010010010010010001011111
lex min decimal: 5526665637341820347575479
states:
10010000010000000010000000000010010010010010001011111
10000010000010000000010000000010010010010000110011111
10010000010000000010000000000010010010010010000111111
00000000000100100100000000000100100101000100100111111
00000000001001001000000000001001001010001001001011111
01001000001000000001000000000001001001001001000111111
01000001000001000000001000000001001001001010001011111
00000000000000000001001001001001000101001001001011111
00100100000100000000100000000000100100100100101011111
00000000000000000001001001001001010001001001001011111
00100000100000100000000100000000100100100101000111111
00000000000000000010010010010010001010010010010011111
00000000000000000000100100100100101000100100100111111
00000100100000000100000000100000100100101000100111111
00100000100000100000000100000000100100100110000111111
00000000000000000010010010010010000110010010010011111
00000000010010010000000000010010010001010010010011111
00000000000100100100000000000100100110000100100111111
00010010000000010000000010000010010010000110010011111
00010010000000010000000010000010010010001010010011111
00001001000000001000000001000001001001010001001011111
00000000000000000000100100100100110000100100100111111
00000100100000000100000000100000100100110000100111111
00100100000100000000100000000000100100100100110011111
01000001000001000000001000000001001001001000101011111
00000000001001001000000000001001001000101001001011111
00000000010010010000000000010010010000110010010011111
10000010000010000000010000000010010010010001010011111
00001001000000001000000001000001001001000101001011111
01001000001000000001000000000001001001001001010011111




=== State Orbit 9 =====================
size : 15
repr state: 10010000010000000010000000000010010010010010000011110
lex min decimal: 5526370471422242485267639
states:
00100000100000100000000100000000100100100100000111101
00000000000000000010010010010010000010010010010001111
00010010000000010000000010000010010010000010010011011
01001000001000000001000000000001001001001001000011110
10000010000010000000010000000010010010010000010011101
00000100100000000100000000100000100100100000100111011
00001001000000001000000001000001001001000001001011011
00000000000100100100000000000100100100000100100110111
00100100000100000000100000000000100100100100100011110
00000000000000000000100100100100100000100100100101111
00000000000000000001001001001001000001001001001001111
10010000010000000010000000000010010010010010000011110
00000000001001001000000000001001001000001001001010111
00000000010010010000000000010010010000010010010010111
01000001000001000000001000000001001001001000001011101




=== State Orbit 10 =====================
size : 120
repr state: 10000000000000000000000000000000010010010001000011110
lex min decimal: 9484274553853173918903
states:
00000000000000100000000000000000000100000101000110111
00000000000000100000000000000000000101000100000111101
00000000000000000000000010000000000110000010010011011
00000000000000000000000000000100000010000100100101111
00000000000000000001000000000000010001001001000011110
00000000000010000000000000000000010000010001010010111
00000000010000000000000000000000010000010010000110111
00000000000000000000000000010000000000110010010001111
00010000000000000000000000000000010010000010000111011
00000000000000000010000000000000000010010010001001111
00000000000000000000000000001000000100001001001010111
10000000000000000000000000000000010010010001000011110
00000000000000000000000000000100010000000100100110111
00000000000000000000000000100000000000110000100101111
10000000000000000000000000000000010010010000100011110
00000000000000010000000000000000010000100010010011011
00000010000000000000000000000000010010000000110011011
00000000000000000000001000000000000001001010001001111
00000000000001000000000000000000001000101000001011101
00000000000100000000000000000000000101000100100011110
00000000000010000000000000000000010000110000010011101
00000000000000001000000000000000001010000001001011011
00000000000000010000000000000000010001000010010011011
00000000000000000000000000100000001000100000100111011
00000000001000000000000000000000001000001001000110111
00000000010000000000000000000000010000010010001010111
00000000000000000100000000000000000110000000100111011
00000000000000001000000000000000001000000101001010111
00000000000000000000001000000000000001001000101001111
00001000000000000000000000000000001001000101000011110
01000000000000000000000000000000001001001000010011101
00000001000000000000000000000000001001000000101011011
10000000000000000000000000000000010010010000000111101
00000000000000000000000000000100000001000100100101111
00000000000000000000000100000000010000100100000111101
00000000000000000000000001000000010001000001001011011
00000000000010000000000000000000010001010000010011101
00000000000000000000000010000000000010000110010001111
00000000000100000000000000000000000100000100101010111
00000000000000000000000100000000000000100101000101111
00000000000000000000000000001000000000101001001001111
00000000001000000000000000000000001000001001010010111
00000000000001000000000000000000001010001000001011101
01000000000000000000000000000000001001001010000011110
00000000100000000000000000000000000100100010000111011
00000000000000000000010000000000000110010000010011101
00000000000000000000000000000100001000000100100110111
00010000000000000000000000000000010010000010001011011
00000000000000000000100000000000000000100100110001111
00000000000000000000000000001000010000001001001010111
00000010000000000000000000000000010010001000010011101
00000000000000000100000000000000000100010000100110111
00000000000000000000000000010000000100010010010010111
00000010000000000000000000000000010010000100010011101
00000000000000000010000000000000001010010010000011110
00000001000000000000000000000000001001010000001011101
00000000000000100000000000000000000110000100000111101
00000000000000000010000000000000000110010010000011110
00000000000000000100000000000000000100001000100110111
00001000000000000000000000000000001001000001000111011
00000000000000000000000001000000000001000101001001111
00000000000001000000000000000000001000001000101010111
00000000000000000000001000000000010001001000001011101
00000000000000000000001000000000000101001000001011101
00000000000000010000000000000000010000000110010010111
00000010000000000000000000000000010010000001010011011
00100000000000000000000000000000000100100101000011110
00001000000000000000000000000000001001010001000011110
00000000000001000000000000000000001000001010001010111
00000001000000000000000000000000001001000010001011011
00000000000000000000000100000000001000100100000111101
01000000000000000000000000000000001001001000100011110
00000000000000000100000000000000000101000000100111011
00000000000000000000010000000000001010010000010011101
00000000000100000000000000000000000100000100110010111
00000000000000000000000000100000010000100000100111011
00000000000000000000000001000000000101000001001011011
01000000000000000000000000000000001001001000000111101
00000000001000000000000000000000001010001001000011110
00000000000000100000000000000000000100000110000110111
00000100000000000000000000000000000100101000100011110
00000000100000000000000000000000000100110000000111101
00000000000000001000000000000000001000100001001011011
00000000001000000000000000000000001000101001000011110
00000000000000000000000000010000001000010010010010111
00000100000000000000000000000000000100100000110011011
00001000000000000000000000000000001001000001010011011
00000000000000000000000001000000000001010001001001111
00000000000000000000100000000000000000100100101001111
00000000000000000001000000000000000001001001010001111
00000000000000001000000000000000001000010001001010111
00000000000000010000000000000000010000001010010010111
00000000000100000000000000000000000110000100100011110
00000000000000000000000100000000000000100110000101111
00000000000000000000100000000000001000100100100011110
00010000000000000000000000000000010010000110000011110
00000000100000000000000000000000000100101000000111101
00000000100000000000000000000000000100100001000111011
00000100000000000000000000000000000100100000101011011
00000000000000000000000010000000000010001010010001111
00000000000000000000000000001000000010001001001001111
00000001000000000000000000000000001001000100001011101
00000000000000000000100000000000010000100100100011110
00000000000000000000010000000000000010010000110001111
10000000000000000000000000000000010010010000001011101
00000100000000000000000000000000000100110000100011110
00000000000000000001000000000000000101001001000011110
00000000000000000001000000000000000001001001000101111
00000000010000000000000000000000010001010010000011110
00100000000000000000000000000000000100100100010011101
00000000000000000000010000000000000010010001010001111
00100000000000000000000000000000000100100100001011101
00000000010000000000000000000000010000110010000011110
00000000000000000000000000010000000001010010010001111
00000000000000000000000000100000000000101000100101111
00100000000000000000000000000000000100100110000011110
00000000000000000010000000000000000010010010000101111
00010000000000000000000000000000010010001010000011110
00000000000010000000000000000000010000010000110010111
00000000000000000000000010000000001010000010010011011




=== State Orbit 11 =====================
size : 60
repr state: 10000000000000000000000000000000010010010001001011111
lex min decimal: 9779440473431036226743
states:
00000000000000000010000000000000000110010010000111111
00000000000000000010000000000000001010010010001011111
00000000010000000000000000000000010000110010000111111
00000000000000000100000000000000000101001000100111111
00000000010000000000000000000000010001010010001011111
00000000000000000000000000000100010010000100100111111
00000000100000000000000000000000000100101001000111111
00000000000000000001000000000000010001001001010011111
00000000000000000000000001000000000101000101001011111
00000000000000000001000000000000000101001001000111111
00000000000000000100000000000000000110010000100111111
00010000000000000000000000000000010010001010001011111
00000000000000000000000000010000000100110010010011111
00000000000000000000100000000000010000100100110011111
00000000000000000000001000000000010001001010001011111
00000000000000010000000000000000010001001010010011111
00000000000000000000000100000000010000100110000111111
00100000000000000000000000000000000100100110010011111
00000000000000000000000000001000010010001001001011111
00000000000000000000010000000000000110010000110011111
00000100000000000000000000000000000100101000101011111
00000000000000000000000000010000001001010010010011111
00000000000000010000000000000000010000100110010011111
01000000000000000000000000000000001001001000100111111
00000000000000100000000000000000000110000110000111111
00000000000010000000000000000000010000110000110011111
00001000000000000000000000000000001001000101000111111
00000100000000000000000000000000000100110000110011111
00001000000000000000000000000000001001010001010011111
00000000000010000000000000000000010001010001010011111
00000000000000000000000010000000001010001010010011111
00000000000000000000001000000000000101001000101011111
00000000000000000000000010000000000110000110010011111
00000000000000000000000000001000000100101001001011111
00100000000000000000000000000000000100100101001011111
00000010000000000000000000000000010010000100110011111
00000000000000000000000000100000010000110000100111111
10000000000000000000000000000000010010010001001011111
00000000000000000000100000000000001000100100101011111
00000000000000000000000000100000001000101000100111111
00000000001000000000000000000000001000101001000111111
00000000000001000000000000000000001010001010001011111
00000000000000001000000000000000001000100101001011111
00000000000100000000000000000000000101000100101011111
00010000000000000000000000000000010010000110000111111
00000000000000001000000000000000001010010001001011111
00000000000000000000000000000100001001000100100111111
00000001000000000000000000000000001001000100101011111
00000000000001000000000000000000001000101000101011111
00000000000000000000000001000000010001010001001011111
00000000000000000000010000000000001010010001010011111
10000000000000000000000000000000010010010000100111111
01000000000000000000000000000000001001001010010011111
00000010000000000000000000000000010010001001010011111
00000001000000000000000000000000001001010010001011111
00000000000100000000000000000000000110000100110011111
00000000100000000000000000000000000100110010000111111
00000000000000000000000100000000001000100101000111111
00000000000000100000000000000000000101000101000111111
00000000001000000000000000000000001010001001010011111




=== State Orbit 12 =====================
size : 60
repr state: 10000000000000000000000000000010010010010001001011111
lex min decimal: 10960032094148447530167
states:
00000100000000000000000000000000100100110000110011111
00000000000000000000000000010010001001010010010011111
10000000000000000000000000000010010010010000100111111
00000000010000000000000000000010010000110010000111111
00000000000001000000000000000001001000101000101011111
00000000010000000000000000000010010001010010001011111
00000000000000000010000000000010000110010010000111111
00000000000000000000000100000000101000100101000111111
00000000000000000000100000000000101000100100101011111
00000000000000000000010000000010000110010000110011111
00000000000000000000000001000001010001010001001011111
00000000000000000000000000010010000100110010010011111
00000000000010000000000000000010010000110000110011111
00000000000000000000000100000000110000100110000111111
00000100000000000000000000000000100100101000101011111
00000000000000001000000000000001001010010001001011111
00010000000000000000000000000010010010001010001011111
00000001000000000000000000000001001001000100101011111
00000000000100000000000000000000100101000100101011111
00010000000000000000000000000010010010000110000111111
00000000000000100000000000000000100101000101000111111
00000000000001000000000000000001001010001010001011111
00001000000000000000000000000001001001000101000111111
00000000000000000001000000000001010001001001010011111
00000000000000100000000000000000100110000110000111111
00000000000000000000000010000010000110000110010011111
00000000000000000000001000000001010001001010001011111
00000000000000000001000000000001000101001001000111111
00000000000000000000000010000010001010001010010011111
00000000000010000000000000000010010001010001010011111
00000000000000000000001000000001000101001000101011111
00000000100000000000000000000000100100110010000111111
00001000000000000000000000000001001001010001010011111
00000000100000000000000000000000100100101001000111111
00000000000000001000000000000001001000100101001011111
00000000001000000000000000000001001000101001000111111
00000000000000000000000000100000101000101000100111111
00000000000000000000000000001001000100101001001011111
00000000000000000000010000000010001010010001010011111
00000000000000000100000000000000100101001000100111111
00000000000000000000000000000100110010000100100111111
01000000000000000000000000000001001001001000100111111
00000000000000000000000000100000110000110000100111111
00000000000100000000000000000000100110000100110011111
10000000000000000000000000000010010010010001001011111
00000000000000010000000000000010010000100110010011111
00000000000000010000000000000010010001001010010011111
00000010000000000000000000000010010010000100110011111
00000010000000000000000000000010010010001001010011111
00000000000000000000100000000000110000100100110011111
01000000000000000000000000000001001001001010010011111
00000000000000000000000000001001010010001001001011111
00000000000000000000000001000001000101000101001011111
00100000000000000000000000000000100100100110010011111
00000000001000000000000000000001001010001001010011111
00000000000000000000000000000100101001000100100111111
00000000000000000010000000000010001010010010001011111
00000000000000000100000000000000100110010000100111111
00100000000000000000000000000000100100100101001011111
00000001000000000000000000000001001001010010001011111




=== State Orbit 13 =====================
size : 60
repr state: 10000000000000000000000000000000010010010001000111111
lex min decimal: 9816333961578455329975
states:
00000000000010000000000000000000010000110001010011111
00000000000000000100000000000000000110001000100111111
01000000000000000000000000000000001001001000110011111
00000001000000000000000000000000001001000110001011111
00000000010000000000000000000000010000110010001011111
00000000000100000000000000000000000101000100110011111
01000000000000000000000000000000001001001010000111111
00000000000000001000000000000000001010000101001011111
00000000000000000000100000000000001000100100110011111
00000000000000000000000000100000001000110000100111111
00000000000000000000100000000000010000100100101011111
00000000000000000000000000010000001000110010010011111
00000000000000100000000000000000000110000101000111111
00010000000000000000000000000000010010000110001011111
00000000000100000000000000000000000110000100101011111
00000000000001000000000000000000001010001000101011111
00000000000000010000000000000000010000101010010011111
00000000000000000001000000000000010001001001000111111
00000000000000000000000010000000000110001010010011111
00000000000000000000000000001000000110001001001011111
00000000010000000000000000000000010001010010000111111
00000000000000000000000000000100001010000100100111111
00100000000000000000000000000000000100100110001011111
00000000000000000000000000010000000101010010010011111
00000000100000000000000000000000000100101010000111111
00000000000000000000000000100000010000101000100111111
00000000000000000001000000000000000101001001010011111
00000000000000000000001000000000000101001010001011111
00000001000000000000000000000000001001010000101011111
00000000001000000000000000000000001010001001000111111
00000010000000000000000000000000010010001000110011111
00000000000000000000000000000100010001000100100111111
00000000000000000000000100000000001000100110000111111
00000000100000000000000000000000000100110001000111111
00000000000000000000000001000000000101010001001011111
00010000000000000000000000000000010010001010000111111
00100000000000000000000000000000000100100101010011111
00000000000000000000001000000000010001001000101011111
00000000000000000000000100000000010000100101000111111
00001000000000000000000000000000001001010001000111111
00000000000010000000000000000000010001010000110011111
00000000000000000000010000000000001010010000110011111
00000000000000000000000000001000010000101001001011111
00000000000000000000000010000000001010000110010011111
00000000000001000000000000000000001000101010001011111
10000000000000000000000000000000010010010000101011111
00000100000000000000000000000000000100110000101011111
00000000000000100000000000000000000101000110000111111
00000000000000001000000000000000001000110001001011111
00000000000000000000010000000000000110010001010011111
10000000000000000000000000000000010010010001000111111
00000010000000000000000000000000010010000101010011111
00000000000000000010000000000000001010010010000111111
00001000000000000000000000000000001001000101010011111
00000000000000000000000001000000010001000101001011111
00000000000000000100000000000000000101010000100111111
00000000001000000000000000000000001000101001010011111
00000100000000000000000000000000000100101000110011111
00000000000000000010000000000000000110010010001011111
00000000000000010000000000000000010001000110010011111




=== State Orbit 14 =====================
size : 60
repr state: 10000000000000000000000000000010010010010001000111111
lex min decimal: 10996925582295866633399
states:
00000000010000000000000000000010010000110010001011111
00000000000000000000000100000000101000100110000111111
00000000000000000000000000000100101010000100100111111
00000000000000000000010000000010001010010000110011111
00100000000000000000000000000000100100100101010011111
00000000100000000000000000000000100100110001000111111
00000000000000000000000001000001000101010001001011111
00000010000000000000000000000010010010000101010011111
00000000000000010000000000000010010000101010010011111
00000000001000000000000000000001001010001001000111111
00000000000100000000000000000000100110000100101011111
00000000000000000100000000000000100110001000100111111
00000000000000000000000000001001000110001001001011111
00000000000000000000001000000001010001001000101011111
00000000000000000000000001000001010001000101001011111
00000000000010000000000000000010010000110001010011111
00000010000000000000000000000010010010001000110011111
01000000000000000000000000000001001001001010000111111
00100000000000000000000000000000100100100110001011111
00001000000000000000000000000001001001000101010011111
00000001000000000000000000000001001001010000101011111
10000000000000000000000000000010010010010001000111111
00000000000000000000000000100000101000110000100111111
00000000000000000000000000001001010000101001001011111
01000000000000000000000000000001001001001000110011111
00000000000000000000000100000000110000100101000111111
00000000000000000000000000010010001000110010010011111
00000000000000010000000000000010010001000110010011111
00000000000000100000000000000000100110000101000111111
00000000000100000000000000000000100101000100110011111
00000000000010000000000000000010010001010000110011111
00000000001000000000000000000001001000101001010011111
00000000000000000000000000010010000101010010010011111
10000000000000000000000000000010010010010000101011111
00000001000000000000000000000001001001000110001011111
00000000000000001000000000000001001010000101001011111
00000000000000000001000000000001010001001001000111111
00000000000000000000000010000010000110001010010011111
00000000000001000000000000000001001000101010001011111
00000000000000001000000000000001001000110001001011111
00000000010000000000000000000010010001010010000111111
00001000000000000000000000000001001001010001000111111
00000000000000000001000000000001000101001001010011111
00000000000000000010000000000010001010010010000111111
00010000000000000000000000000010010010001010000111111
00000000000000000000100000000000110000100100101011111
00000000000000000010000000000010000110010010001011111
00000000000000100000000000000000100101000110000111111
00000000000000000000100000000000101000100100110011111
00000000000000000000000000100000110000101000100111111
00000000100000000000000000000000100100101010000111111
00000100000000000000000000000000100100110000101011111
00000000000000000000000000000100110001000100100111111
00000000000000000100000000000000100101010000100111111
00010000000000000000000000000010010010000110001011111
00000000000000000000000010000010001010000110010011111
00000100000000000000000000000000100100101000110011111
00000000000001000000000000000001001010001000101011111
00000000000000000000001000000001000101001010001011111
00000000000000000000010000000010000110010001010011111




=== State Orbit 15 =====================
size : 120
repr state: 10000000000000000000000000000010010010010001000011110
lex min decimal: 10664866174570585222327
states:
00000000000000000000100000000000101000100100100011110
00000000000000000000000000000100100001000100100101111
00000000000000000010000000000010001010010010000011110
00000000000001000000000000000001001000001010001010111
00001000000000000000000000000001001001000101000011110
00000000000000000000001000000001000101001000001011101
00000000000000000000000000100000101000100000100111011
00000000000000000000000000010010000001010010010001111
00000000010000000000000000000010010001010010000011110
00000000100000000000000000000000100100110000000111101
00000000010000000000000000000010010000010010000110111
00000000000100000000000000000000100100000100101010111
00100000000000000000000000000000100100100100010011101
00000000000000000010000000000010000010010010001001111
00000000000000010000000000000010010000100010010011011
10000000000000000000000000000010010010010001000011110
00000000000000001000000000000001001000010001001010111
00000000000000010000000000000010010000000110010010111
00000000000000000000000100000000101000100100000111101
00000000001000000000000000000001001000001001000110111
00000001000000000000000000000001001001000010001011011
00100000000000000000000000000000100100100101000011110
00001000000000000000000000000001001001000001000111011
00000000000000000000000001000001010001000001001011011
00000000000000000000000000010010000000110010010001111
10000000000000000000000000000010010010010000100011110
00000000000010000000000000000010010001010000010011101
00000000000010000000000000000010010000010000110010111
00000000000000000001000000000001000001001001010001111
00000000000000000000010000000010000010010001010001111
00000010000000000000000000000010010010001000010011101
00000000000000000000000001000001000001000101001001111
01000000000000000000000000000001001001001000100011110
00000000100000000000000000000000100100101000000111101
00000000100000000000000000000000100100100010000111011
00010000000000000000000000000010010010000010000111011
00000000001000000000000000000001001000101001000011110
00000000000000000000010000000010000110010000010011101
00000000000000000001000000000001000101001001000011110
00000000000001000000000000000001001000001000101010111
00000000000000000100000000000000100101000000100111011
00000010000000000000000000000010010010000000110011011
00000000000000000100000000000000100110000000100111011
00000000000000000000100000000000100000100100110001111
00100000000000000000000000000000100100100100001011101
01000000000000000000000000000001001001001010000011110
00001000000000000000000000000001001001000001010011011
00000000000000100000000000000000100101000100000111101
00000000000000001000000000000001001000100001001011011
00000000000000000000000000010010001000010010010010111
00000000001000000000000000000001001010001001000011110
00000000000000000000000100000000100000100110000101111
00000000000100000000000000000000100100000100110010111
00000000000000000000000000100000100000101000100101111
00000000000000000000000100000000100000100101000101111
00000000000000000000001000000001010001001000001011101
00000000000000000000100000000000100000100100101001111
00000000000000000000000000001001010000001001001010111
00000000000000000000000000000100100010000100100101111
00000000000000010000000000000010010000001010010010111
00000000000000000100000000000000100100010000100110111
01000000000000000000000000000001001001001000000111101
00000100000000000000000000000000100100101000100011110
00000000000000000000001000000001000001001010001001111
00000000000000000001000000000001000001001001000101111
00000000000000000000000000100000100000110000100101111
00000001000000000000000000000001001001000000101011011
10000000000000000000000000000010010010010000000111101
01000000000000000000000000000001001001001000010011101
00000000000000000000000000001001000100001001001010111
00000000010000000000000000000010010000110010000011110
00000000000000000000000001000001000001010001001001111
00000000000000000000100000000000110000100100100011110
00000000000000000010000000000010000010010010000101111
00000100000000000000000000000000100100100000101011011
00000000000000000000000000000100101000000100100110111
00000000000000000000010000000010001010010000010011101
00000000000000000000000000001001000010001001001001111
00000100000000000000000000000000100100110000100011110
00000000000000000000000100000000110000100100000111101
00000000000000001000000000000001001000000101001010111
00000000000000000000000010000010000010000110010001111
00000000000100000000000000000000100110000100100011110
00000000000000000100000000000000100100001000100110111
00001000000000000000000000000001001001010001000011110
00000010000000000000000000000010010010000001010011011
00000000000001000000000000000001001010001000001011101
00000000000001000000000000000001001000101000001011101
00000001000000000000000000000001001001000100001011101
00000000001000000000000000000001001000001001010010111
00000000000000000000000000000100110000000100100110111
00010000000000000000000000000010010010000110000011110
00000001000000000000000000000001001001010000001011101
00000000000000100000000000000000100100000110000110111
00000000000000000000000010000010000010001010010001111
00000000000000000010000000000010000110010010000011110
00000000000000100000000000000000100110000100000111101
00000000000100000000000000000000100101000100100011110
00000000000000000000001000000001000001001000101001111
00000000000000000000000000010010000100010010010010111
00000000000000000000000000100000110000100000100111011
00100000000000000000000000000000100100100110000011110
00000000000000000001000000000001010001001001000011110
00000000010000000000000000000010010000010010001010111
00000000000000000000000010000010001010000010010011011
00010000000000000000000000000010010010000010001011011
00010000000000000000000000000010010010001010000011110
00000000000000010000000000000010010001000010010011011
00000100000000000000000000000000100100100000110011011
00000000100000000000000000000000100100100001000111011
00000000000010000000000000000010010000010001010010111
00000000000000000000000000001001000000101001001001111
10000000000000000000000000000010010010010000001011101
00000000000000001000000000000001001010000001001011011
00000000000000000000010000000010000010010000110001111
00000000000010000000000000000010010000110000010011101
00000000000000100000000000000000100100000101000110111
00000000000000000000000010000010000110000010010011011
00000010000000000000000000000010010010000100010011101
00000000000000000000000001000001000101000001001011011




=== State Orbit 16 =====================
size : 30
repr state: 10000000000000000000000000000010010010010000000011100
lex min decimal: 10627963679223911378103
states:
00000000000000010000000000000010010000000010010010011
00000000000000000100000000000000100100000000100110011
00000000000000000000000100000000100000100100000101101
00000010000000000000000000000010010010000000010011001
00000000000000001000000000000001001000000001001010011
00001000000000000000000000000001001001000001000011010
00000100000000000000000000000000100100100000100011010
00000000000000000000000010000010000010000010010001011
00000000100000000000000000000000100100100000000111001
00000000010000000000000000000010010000010010000010110
00000000000001000000000000000001001000001000001010101
00000000000000000000000000001001000000001001001000111
00100000000000000000000000000000100100100100000011100
00000000000000000000001000000001000001001000001001101
00000000000010000000000000000010010000010000010010101
00000000000000000000000000010010000000010010010000111
00010000000000000000000000000010010010000010000011010
10000000000000000000000000000010010010010000000011100
00000000000000000000000000000100100000000100100100111
00000000001000000000000000000001001000001001000010110
00000000000000100000000000000000100100000100000110101
00000000000000000000010000000010000010010000010001101
00000000000000000001000000000001000001001001000001110
00000000000000000010000000000010000010010010000001110
01000000000000000000000000000001001001001000000011100
00000000000000000000000001000001000001000001001001011
00000000000000000000100000000000100000100100100001110
00000000000100000000000000000000100100000100100010110
00000001000000000000000000000001001001000000001011001
00000000000000000000000000100000100000100000100101011




=== State Orbit 17 =====================
size : 180
repr state: 00000000000000000000000000000000010010001000000011100
lex min decimal: 2675121564228611255
states:
00000000000000000000000000000000000100001000100010110
00000000000000000000000000000000001000000100001010101
00000000000000000000000000000000000010000100000101101
00000000000000000000000000000000000001000000101001011
00000000000000000000000000000000010000000010000110011
00000000000000000000000000000000000000101000000101101
00000000000000000000000000000000000100000100010010101
00000000000000000000000000000000000001010010000001110
00000000000000000000000000000000000001010000001001101
00000000000000000000000000000000000000010000110000111
00000000000000000000000000000000000010001000010001101
00000000000000000000000000000000000000100110000001110
00000000000000000000000000000000000000000101001000111
00000000000000000000000000000000010010000000100011010
00000000000000000000000000000000000010001001000001110
00000000000000000000000000000000000100100010000011010
00000000000000000000000000000000000010000100010001101
00000000000000000000000000000000000000010000100100111
00000000000000000000000000000000000001000001000101011
00000000000000000000000000000000001000001000100010110
00000000000000000000000000000000000000100000101001011
00000000000000000000000000000000000001010001000001110
00000000000000000000000000000000000100001000001010101
00000000000000000000000000000000001010000000010011001
00000000000000000000000000000000010010001000000011100
00000000000000000000000000000000000110000100000011100
00000000000000000000000000000000001000010001000010110
00000000000000000000000000000000010000000100010010101
00000000000000000000000000000000000010010000000101101
00000000000000000000000000000000001000000010010010011
00000000000000000000000000000000000100001001000010110
00000000000000000000000000000000000010010001000001110
00000000000000000000000000000000000000001010001000111
00000000000000000000000000000000010001000000001011001
00000000000000000000000000000000001000000001010010011
00000000000000000000000000000000000001001000010001101
00000000000000000000000000000000001000100000100011010
00000000000000000000000000000000001001000000000111001
00000000000000000000000000000000000100000000101010011
00000000000000000000000000000000000001001000000101101
00000000000000000000000000000000010000100000100011010
00000000000000000000000000000000010000001001000010110
00000000000000000000000000000000000100100000010011001
00000000000000000000000000000000001010000000001011001
00000000000000000000000000000000001000001010000010110
00000000000000000000000000000000000101000000001011001
00000000000000000000000000000000000010001010000001110
00000000000000000000000000000000000110000000010011001
00000000000000000000000000000000000001001000100001110
00000000000000000000000000000000000000110000010001101
00000000000000000000000000000000001000000001000110011
00000000000000000000000000000000010000010000100010110
00000000000000000000000000000000000000110010000001110
00000000000000000000000000000000000000000101000100111
00000000000000000000000000000000010000000100100010110
00000000000000000000000000000000000000100001000101011
00000000000000000000000000000000000010000000110001011
00000000000000000000000000000000010000000000110010011
00000000000000000000000000000000010000100000010011001
00000000000000000000000000000000000100000110000010110
00000000000000000000000000000000001010000010000011010
00000000000000000000000000000000010010000000000111001
00000000000000000000000000000000001001010000000011100
00000000000000000000000000000000001000000101000010110
00000000000000000000000000000000000000100101000001110
00000000000000000000000000000000001000000100100010110
00000000000000000000000000000000000100000010010010011
00000000000000000000000000000000000101000000100011010
00000000000000000000000000000000001000100100000011100
00000000000000000000000000000000010000000000100110011
00000000000000000000000000000000010000000110000010110
00000000000000000000000000000000010001001000000011100
00000000000000000000000000000000001001000010000011010
00000000000000000000000000000000000000000100110000111
00000000000000000000000000000000000010010000100001110
00000000000000000000000000000000000001000100100001110
00000000000000000000000000000000000001010000010001101
00000000000000000000000000000000000010000001001001011
00000000000000000000000000000000000100010000000110101
00000000000000000000000000000000000110000010000011010
00000000000000000000000000000000001010000001000011010
00000000000000000000000000000000000110000000000111001
00000000000000000000000000000000001001000100000011100
00000000000000000000000000000000010000000100000110101
00000000000000000000000000000000000000101000100001110
00000000000000000000000000000000000010000010001001011
00000000000000000000000000000000001001000000010011001
00000000000000000000000000000000000101001000000011100
00000000000000000000000000000000000010000100100001110
00000000000000000000000000000000000000001010010000111
00000000000000000000000000000000000000100100001001101
00000000000000000000000000000000000001000010010001011
00000000000000000000000000000000000100110000000011100
00000000000000000000000000000000000100001000000110101
00000000000000000000000000000000000000010010001000111
00000000000000000000000000000000000000000110000100111
00000000000000000000000000000000000000010001001000111
00000000000000000000000000000000000101000000000111001
00000000000000000000000000000000000000100100010001101
00000000000000000000000000000000000000101001000001110
00000000000000000000000000000000010000100000000111001
00000000000000000000000000000000001000010000010010101
00000000000000000000000000000000000000101000001001101
00000000000000000000000000000000001000101000000011100
00000000000000000000000000000000000000000110010000111
00000000000000000000000000000000010000001010000010110
00000000000000000000000000000000000000010010000100111
00000000000000000000000000000000010000001000001010101
00000000000000000000000000000000000001000000100101011
00000000000000000000000000000000001000000000100110011
00000000000000000000000000000000001000001000010010101
00000000000000000000000000000000001000010010000010110
00000000000000000000000000000000000000001000100100111
00000000000000000000000000000000000010000110000001110
00000000000000000000000000000000000001000100000101101
00000000000000000000000000000000000000100010000101011
00000000000000000000000000000000010000010001000010110
00000000000000000000000000000000000001000001010001011
00000000000000000000000000000000000010000001010001011
00000000000000000000000000000000000110000000100011010
00000000000000000000000000000000001000010000001010101
00000000000000000000000000000000010010000000001011001
00000000000000000000000000000000000010010000001001101
00000000000000000000000000000000001000000100000110101
00000000000000000000000000000000000010000010000101011
00000000000000000000000000000000010000110000000011100
00000000000000000000000000000000010001000001000011010
00000000000000000000000000000000000001000101000001110
00000000000000000000000000000000010010000001000011010
00000000000000000000000000000000000000001001000100111
00000000000000000000000000000000010001000000010011001
00000000000000000000000000000000001000000000101010011
00000000000000000000000000000000000000000100101000111
00000000000000000000000000000000001000100000000111001
00000000000000000000000000000000010000010000001010101
00000000000000000000000000000000000100000100001010101
00000000000000000000000000000000010000000010001010011
00000000000000000000000000000000010000100010000011010
00000000000000000000000000000000000001000100001001101
00000000000000000000000000000000000001001010000001110
00000000000000000000000000000000000000010001010000111
00000000000000000000000000000000000100000101000010110
00000000000000000000000000000000000110010000000011100
00000000000000000000000000000000000000100001001001011
00000000000000000000000000000000000100000010000110011
00000000000000000000000000000000000100100001000011010
00000000000000000000000000000000000101000001000011010
00000000000000000000000000000000001010001000000011100
00000000000000000000000000000000010000001000010010101
00000000000000000000000000000000000100010000100010110
00000000000000000000000000000000000100101000000011100
00000000000000000000000000000000010000100100000011100
00000000000000000000000000000000000000110000100001110
00000000000000000000000000000000010000010000000110101
00000000000000000000000000000000001000001000000110101
00000000000000000000000000000000010000000001010010011
00000000000000000000000000000000000000100000110001011
00000000000000000000000000000000000100000000110010011
00000000000000000000000000000000010000000001001010011
00000000000000000000000000000000010010000100000011100
00000000000000000000000000000000000000001001010000111
00000000000000000000000000000000000100010000010010101
00000000000000000000000000000000000000001000101000111
00000000000000000000000000000000000100000001001010011
00000000000000000000000000000000001010010000000011100
00000000000000000000000000000000000100010010000010110
00000000000000000000000000000000010001010000000011100
00000000000000000000000000000000000100100000001011001
00000000000000000000000000000000000100000001000110011
00000000000000000000000000000000000010001000001001101
00000000000000000000000000000000000101000100000011100
00000000000000000000000000000000000000110000000101101
00000000000000000000000000000000010001000010000011010
00000000000000000000000000000000001000100000001011001
00000000000000000000000000000000000001000010001001011
00000000000000000000000000000000000010000000100101011
00000000000000000000000000000000001000000010001010011
00000000000000000000000000000000001001000000100011010
00000000000000000000000000000000001000100001000011010
00000000000000000000000000000000000000100010010001011




=== State Orbit 18 =====================
size : 90
repr state: 00000000000000000000000000000000010010001001000011110
lex min decimal: 21419103213344615607
states:
00000000000000000000000000000000000010010001001001111
00000000000000000000000000000000001000001000100110111
00000000000000000000000000000000010001000010001011011
00000000000000000000000000000000000100001001000110111
00000000000000000000000000000000010001010000001011101
00000000000000000000000000000000010000000100110010111
00000000000000000000000000000000000110000110000011110
00000000000000000000000000000000000000100101001001111
00000000000000000000000000000000001010010001000011110
00000000000000000000000000000000000100100010010011011
00000000000000000000000000000000000010010000100101111
00000000000000000000000000000000001000101000100011110
00000000000000000000000000000000000100001000101010111
00000000000000000000000000000000000110010000100011110
00000000000000000000000000000000000100100001001011011
00000000000000000000000000000000000110000100010011101
00000000000000000000000000000000001010000001010011011
00000000000000000000000000000000001000000101000110111
00000000000000000000000000000000000000101000101001111
00000000000000000000000000000000010001001000010011101
00000000000000000000000000000000000100110000010011101
00000000000000000000000000000000000001001000100101111
00000000000000000000000000000000000001010001010001111
00000000000000000000000000000000000100010000110010111
00000000000000000000000000000000010000001010001010111
00000000000000000000000000000000010010000100000111101
00000000000000000000000000000000000100110010000011110
00000000000000000000000000000000010010001001000011110
00000000000000000000000000000000000100010010000110111
00000000000000000000000000000000000000101001000101111
00000000000000000000000000000000001010010000001011101
00000000000000000000000000000000000100101001000011110
00000000000000000000000000000000000000100110010001111
00000000000000000000000000000000000100000110010010111
00000000000000000000000000000000010010000100100011110
00000000000000000000000000000000010010000001001011011
00000000000000000000000000000000000001000100101001111
00000000000000000000000000000000010000100010000111011
00000000000000000000000000000000000100000101001010111
00000000000000000000000000000000000101000100001011101
00000000000000000000000000000000001000101000000111101
00000000000000000000000000000000000101000001000111011
00000000000000000000000000000000000010001001010001111
00000000000000000000000000000000001001000100000111101
00000000000000000000000000000000001010000010001011011
00000000000000000000000000000000000110000010000111011
00000000000000000000000000000000000100101000001011101
00000000000000000000000000000000010000100100010011101
00000000000000000000000000000000010001000001010011011
00000000000000000000000000000000001001000010010011011
00000000000000000000000000000000001001000000100111011
00000000000000000000000000000000001000001010010010111
00000000000000000000000000000000001001000100100011110
00000000000000000000000000000000001000000100101010111
00000000000000000000000000000000010000010001001010111
00000000000000000000000000000000010010001000001011101
00000000000000000000000000000000010000100110000011110
00000000000000000000000000000000001000100001000111011
00000000000000000000000000000000010000110000100011110
00000000000000000000000000000000001000100101000011110
00000000000000000000000000000000010001001010000011110
00000000000000000000000000000000000101000101000011110
00000000000000000000000000000000000101000000101011011
00000000000000000000000000000000001000100000101011011
00000000000000000000000000000000000101001000100011110
00000000000000000000000000000000000001001010010001111
00000000000000000000000000000000010001010001000011110
00000000000000000000000000000000000001010010001001111
00000000000000000000000000000000010010000000100111011
00000000000000000000000000000000001010001010000011110
00000000000000000000000000000000010000001001010010111
00000000000000000000000000000000000101001000000111101
00000000000000000000000000000000000001000101000101111
00000000000000000000000000000000000110000000110011011
00000000000000000000000000000000000010000110000101111
00000000000000000000000000000000000010000100110001111
00000000000000000000000000000000001001010010000011110
00000000000000000000000000000000000000110010000101111
00000000000000000000000000000000001001010000010011101
00000000000000000000000000000000010000000110000110111
00000000000000000000000000000000001000010001010010111
00000000000000000000000000000000001000010010001010111
00000000000000000000000000000000010000010000100110111
00000000000000000000000000000000001000100100001011101
00000000000000000000000000000000010000110000000111101
00000000000000000000000000000000001010001000010011101
00000000000000000000000000000000000010001010001001111
00000000000000000000000000000000010000100000110011011
00000000000000000000000000000000000000110000110001111
00000000000000000000000000000000000110010000000111101




=== State Orbit 19 =====================
size : 90
repr state: 00000000000000000000000000000000010010001001000111111
lex min decimal: 171388970804782132407
states:
00000000000000000000000000000000000100110001001011111
00000000000000000000000000000000010000110000101011111
00000000000000000000000000000000010001000100101011111
00000000000000000000000000000000010010000101000111111
00000000000000000000000000000000000100101010010011111
00000000000000000000000000000000001010000110001011111
00000000000000000000000000000000001010000100110011111
00000000000000000000000000000000010001001000100111111
00000000000000000000000000000000001001010010000111111
00000000000000000000000000000000010010001001000111111
00000000000000000000000000000000001000110001000111111
00000000000000000000000000000000001000110001010011111
00000000000000000000000000000000000101001010000111111
00000000000000000000000000000000010001001000110011111
00000000000000000000000000000000001000100110010011111
00000000000000000000000000000000010000110001001011111
00000000000000000000000000000000000110000110001011111
00000000000000000000000000000000001010010000101011111
00000000000000000000000000000000000101000101010011111
00000000000000000000000000000000001000110010000111111
00000000000000000000000000000000000101010000110011111
00000000000000000000000000000000001010001010000111111
00000000000000000000000000000000001010000101010011111
00000000000000000000000000000000000101010001000111111
00000000000000000000000000000000010010001000100111111
00000000000000000000000000000000000110001000101011111
00000000000000000000000000000000001000110010001011111
00000000000000000000000000000000001001010000110011111
00000000000000000000000000000000000101010010000111111
00000000000000000000000000000000010001010000100111111
00000000000000000000000000000000010010000101001011111
00000000000000000000000000000000000100110001010011111
00000000000000000000000000000000010001000101010011111
00000000000000000000000000000000000101010001010011111
00000000000000000000000000000000010010001000101011111
00000000000000000000000000000000010000100101001011111
00000000000000000000000000000000010000101001000111111
00000000000000000000000000000000000101001010010011111
00000000000000000000000000000000001010000100101011111
00000000000000000000000000000000000101000110010011111
00000000000000000000000000000000001010001000110011111
00000000000000000000000000000000000110001000110011111
00000000000000000000000000000000010001000101000111111
00000000000000000000000000000000001000101010010011111
00000000000000000000000000000000001010010000100111111
00000000000000000000000000000000000110010001001011111
00000000000000000000000000000000000101001000110011111
00000000000000000000000000000000000101000110001011111
00000000000000000000000000000000000101010010001011111
00000000000000000000000000000000010001000110000111111
00000000000000000000000000000000010000101000110011111
00000000000000000000000000000000000110001001010011111
00000000000000000000000000000000001010010001000111111
00000000000000000000000000000000010001000110001011111
00000000000000000000000000000000001001000110010011111
00000000000000000000000000000000001000101000110011111
00000000000000000000000000000000000110001010000111111
00000000000000000000000000000000000110010001000111111
00000000000000000000000000000000001001000100110011111
00000000000000000000000000000000001010000110000111111
00000000000000000000000000000000001001000110000111111
00000000000000000000000000000000010000101010001011111
00000000000000000000000000000000000110000101001011111
00000000000000000000000000000000010001010000101011111
00000000000000000000000000000000010000100110001011111
00000000000000000000000000000000010001001010000111111
00000000000000000000000000000000010010000100101011111
00000000000000000000000000000000010000110001000111111
00000000000000000000000000000000001000100110001011111
00000000000000000000000000000000001000101010000111111
00000000000000000000000000000000000101010000101011111
00000000000000000000000000000000010000101010000111111
00000000000000000000000000000000010001010001000111111
00000000000000000000000000000000001000100101010011111
00000000000000000000000000000000000110001001000111111
00000000000000000000000000000000010000101000101011111
00000000000000000000000000000000000110000101010011111
00000000000000000000000000000000010000101001010011111
00000000000000000000000000000000001010000101000111111
00000000000000000000000000000000001001010000100111111
00000000000000000000000000000000000100101001010011111
00000000000000000000000000000000000110001010001011111
00000000000000000000000000000000000100101010001011111
00000000000000000000000000000000001010001000100111111
00000000000000000000000000000000010000100101010011111
00000000000000000000000000000000001000110000110011111
00000000000000000000000000000000000100110010001011111
00000000000000000000000000000000010001000100110011111
00000000000000000000000000000000000110010000101011111
00000000000000000000000000000000001000110000101011111




=== State Orbit 20 =====================
size : 180
repr state: 00000000000000000000000000000000010010001000100011110
lex min decimal: 21491160807382543543
states:
00000000000000000000000000000000001000000101010010111
00000000000000000000000000000000000110010000001011101
00000000000000000000000000000000000101000110000011110
00000000000000000000000000000000000110001001000011110
00000000000000000000000000000000000100001010010010111
00000000000000000000000000000000000001010010000101111
00000000000000000000000000000000010000100000101011011
00000000000000000000000000000000001000110010000011110
00000000000000000000000000000000010000000101010010111
00000000000000000000000000000000010001000100100011110
00000000000000000000000000000000001000001000110010111
00000000000000000000000000000000000110001000100011110
00000000000000000000000000000000010001000000100111011
00000000000000000000000000000000000101001010000011110
00000000000000000000000000000000001000100110000011110
00000000000000000000000000000000000010010000101001111
00000000000000000000000000000000000010001000110001111
00000000000000000000000000000000001000000100110010111
00000000000000000000000000000000001010010000100011110
00000000000000000000000000000000000110010001000011110
00000000000000000000000000000000000110001000010011101
00000000000000000000000000000000000101000010001011011
00000000000000000000000000000000000110000100001011101
00000000000000000000000000000000001010010000000111101
00000000000000000000000000000000000110001000001011101
00000000000000000000000000000000000001000110010001111
00000000000000000000000000000000010000000101001010111
00000000000000000000000000000000000010001001000101111
00000000000000000000000000000000000010000101010001111
00000000000000000000000000000000010000000100101010111
00000000000000000000000000000000000101000000110011011
00000000000000000000000000000000010000001001000110111
00000000000000000000000000000000000101000010010011011
00000000000000000000000000000000000101000001010011011
00000000000000000000000000000000001000100010001011011
00000000000000000000000000000000000010001000101001111
00000000000000000000000000000000010000100001001011011
00000000000000000000000000000000000110000101000011110
00000000000000000000000000000000001010000110000011110
00000000000000000000000000000000000101010000000111101
00000000000000000000000000000000001001010000100011110
00000000000000000000000000000000001010000100000111101
00000000000000000000000000000000010001000101000011110
00000000000000000000000000000000001010001000100011110
00000000000000000000000000000000000110000001001011011
00000000000000000000000000000000000000100101010001111
00000000000000000000000000000000000101010000010011101
00000000000000000000000000000000000100010010001010111
00000000000000000000000000000000000000110001000101111
00000000000000000000000000000000000010001000100101111
00000000000000000000000000000000000000110001001001111
00000000000000000000000000000000001001010000000111101
00000000000000000000000000000000000100110001000011110
00000000000000000000000000000000010001000100010011101
00000000000000000000000000000000010010000100001011101
00000000000000000000000000000000000100110000001011101
00000000000000000000000000000000000100101010000011110
00000000000000000000000000000000001000000110010010111
00000000000000000000000000000000000001010000100101111
00000000000000000000000000000000000100010001000110111
00000000000000000000000000000000000000101010000101111
00000000000000000000000000000000010000001000101010111
00000000000000000000000000000000000101000010000111011
00000000000000000000000000000000010000110000001011101
00000000000000000000000000000000010000101010000011110
00000000000000000000000000000000000101010010000011110
00000000000000000000000000000000010010001000000111101
00000000000000000000000000000000000001010000101001111
00000000000000000000000000000000010000000101000110111
00000000000000000000000000000000000001000110000101111
00000000000000000000000000000000001000010010000110111
00000000000000000000000000000000010000101001000011110
00000000000000000000000000000000000010000101000101111
00000000000000000000000000000000010000000110001010111
00000000000000000000000000000000010010001000100011110
00000000000000000000000000000000001010000001000111011
00000000000000000000000000000000000000101001010001111
00000000000000000000000000000000000001010001000101111
00000000000000000000000000000000000100000110001010111
00000000000000000000000000000000010000001000110010111
00000000000000000000000000000000001001000000110011011
00000000000000000000000000000000010001000110000011110
00000000000000000000000000000000001010000100001011101
00000000000000000000000000000000010010000000101011011
00000000000000000000000000000000010000100001000111011
00000000000000000000000000000000000100001001010010111
00000000000000000000000000000000010001010000100011110
00000000000000000000000000000000000110001010000011110
00000000000000000000000000000000010000101000001011101
00000000000000000000000000000000000000100110001001111
00000000000000000000000000000000001000010000101010111
00000000000000000000000000000000010010000101000011110
00000000000000000000000000000000001000101010000011110
00000000000000000000000000000000000000110000101001111
00000000000000000000000000000000000001001000110001111
00000000000000000000000000000000001000100000110011011
00000000000000000000000000000000010001000000101011011
00000000000000000000000000000000010000001010000110111
00000000000000000000000000000000001000010000100110111
00000000000000000000000000000000010001000001000111011
00000000000000000000000000000000000001000100110001111
00000000000000000000000000000000000100000101010010111
00000000000000000000000000000000001010000000101011011
00000000000000000000000000000000000100010000101010111
00000000000000000000000000000000000001000110001001111
00000000000000000000000000000000001000100001010011011
00000000000000000000000000000000000001010000110001111
00000000000000000000000000000000000010001010000101111
00000000000000000000000000000000001010000101000011110
00000000000000000000000000000000000100001000110010111
00000000000000000000000000000000001010000000110011011
00000000000000000000000000000000000010000110001001111
00000000000000000000000000000000001001000010000111011
00000000000000000000000000000000001000010001000110111
00000000000000000000000000000000000000110010001001111
00000000000000000000000000000000001000101000010011101
00000000000000000000000000000000000100100010001011011
00000000000000000000000000000000001000001010000110111
00000000000000000000000000000000000001001010000101111
00000000000000000000000000000000000100001010001010111
00000000000000000000000000000000001000000110001010111
00000000000000000000000000000000000101000100010011101
00000000000000000000000000000000010000010000101010111
00000000000000000000000000000000000000101010010001111
00000000000000000000000000000000000000110001010001111
00000000000000000000000000000000000100010001010010111
00000000000000000000000000000000001000110000001011101
00000000000000000000000000000000000000101010001001111
00000000000000000000000000000000010000101000010011101
00000000000000000000000000000000010001000100000111101
00000000000000000000000000000000010001001000100011110
00000000000000000000000000000000001000110001000011110
00000000000000000000000000000000010000101000000111101
00000000000000000000000000000000010010000001000111011
00000000000000000000000000000000000101001000010011101
00000000000000000000000000000000000101010001000011110
00000000000000000000000000000000000000101000110001111
00000000000000000000000000000000000010000100101001111
00000000000000000000000000000000000110000001010011011
00000000000000000000000000000000001000100100010011101
00000000000000000000000000000000010000100001010011011
00000000000000000000000000000000001001000110000011110
00000000000000000000000000000000000100001010000110111
00000000000000000000000000000000001000110000010011101
00000000000000000000000000000000000110000001000111011
00000000000000000000000000000000001000110000100011110
00000000000000000000000000000000001010001000000111101
00000000000000000000000000000000001010000100010011101
00000000000000000000000000000000010000100100001011101
00000000000000000000000000000000000101010000001011101
00000000000000000000000000000000010000110001000011110
00000000000000000000000000000000010000001000100110111
00000000000000000000000000000000001010000100100011110
00000000000000000000000000000000001001000100010011101
00000000000000000000000000000000001000000110000110111
00000000000000000000000000000000001000010000110010111
00000000000000000000000000000000010000101000100011110
00000000000000000000000000000000010000010001000110111
00000000000000000000000000000000001010000010000111011
00000000000000000000000000000000000100101000010011101
00000000000000000000000000000000010000100010001011011
00000000000000000000000000000000001000110000000111101
00000000000000000000000000000000000110000000101011011
00000000000000000000000000000000000001000101010001111
00000000000000000000000000000000000110000010001011011
00000000000000000000000000000000010001000100001011101
00000000000000000000000000000000010001000000110011011
00000000000000000000000000000000000100010001001010111
00000000000000000000000000000000010001010000000111101
00000000000000000000000000000000001010000000100111011
00000000000000000000000000000000000100100001010011011
00000000000000000000000000000000000101010000100011110
00000000000000000000000000000000010001001000000111101
00000000000000000000000000000000000010000101001001111
00000000000000000000000000000000010001000010000111011
00000000000000000000000000000000010000100101000011110
00000000000000000000000000000000001000100010010011011
00000000000000000000000000000000000110001000000111101
00000000000000000000000000000000001000100010000111011
00000000000000000000000000000000000010010001000101111




=== State Orbit 21 =====================
size : 60
repr state: 00000000000000000000000000000000010001000000000011000
lex min decimal: 364774955387546807
states:
00000000000000000000000000000000000001010000000001100
00000000000000000000000000000000010000000001000010010
00000000000000000000000000000000000000000001000100011
00000000000000000000000000000000000000000100001000101
00000000000000000000000000000000010000001000000010100
00000000000000000000000000000000001010000000000011000
00000000000000000000000000000000000100010000000010100
00000000000000000000000000000000000010000000000101001
00000000000000000000000000000000000001000000010001001
00000000000000000000000000000000000000010001000000110
00000000000000000000000000000000000000010000000100101
00000000000000000000000000000000000000100001000001010
00000000000000000000000000000000000010001000000001100
00000000000000000000000000000000000100000010000010010
00000000000000000000000000000000000100000000001010001
00000000000000000000000000000000000001000100000001100
00000000000000000000000000000000000000000100010000101
00000000000000000000000000000000000000110000000001100
00000000000000000000000000000000010000000000001010001
00000000000000000000000000000000000110000000000011000
00000000000000000000000000000000010000000100000010100
00000000000000000000000000000000000000001010000000110
00000000000000000000000000000000000000001000010000101
00000000000000000000000000000000000000001000000100101
00000000000000000000000000000000000000100010000001010
00000000000000000000000000000000000000001000100000110
00000000000000000000000000000000000100000001000010010
00000000000000000000000000000000010001000000000011000
00000000000000000000000000000000010000000000100010010
00000000000000000000000000000000001000000000000110001
00000000000000000000000000000000000100001000000010100
00000000000000000000000000000000001000000000100010010
00000000000000000000000000000000000000000000110000011
00000000000000000000000000000000000000100000010001001
00000000000000000000000000000000000000000001010000011
00000000000000000000000000000000000000000010000100011
00000000000000000000000000000000000100000000010010001
00000000000000000000000000000000000000100000001001001
00000000000000000000000000000000000000010000001000101
00000000000000000000000000000000000010000000100001010
00000000000000000000000000000000000000000101000000110
00000000000000000000000000000000000010000100000001100
00000000000000000000000000000000000000010000100000110
00000000000000000000000000000000010000100000000011000
00000000000000000000000000000000001000000100000010100
00000000000000000000000000000000000001000010000001010
00000000000000000000000000000000000000000110000000110
00000000000000000000000000000000001000010000000010100
00000000000000000000000000000000001000000000010010001
00000000000000000000000000000000000101000000000011000
00000000000000000000000000000000000010000001000001010
00000000000000000000000000000000000001000000000101001
00000000000000000000000000000000000000000010001000011
00000000000000000000000000000000010000000000000110001
00000000000000000000000000000000000001000000100001010
00000000000000000000000000000000000000000000101000011
00000000000000000000000000000000000000101000000001100
00000000000000000000000000000000000010000000001001001
00000000000000000000000000000000001000000010000010010
00000000000000000000000000000000001000100000000011000




=== State Orbit 22 =====================
size : 60
repr state: 00000000000000000000000000000000010001000100000011100
lex min decimal: 3035409534418250935
states:
00000000000000000000000000000000001000110000000011100
00000000000000000000000000000000010001000100000011100
00000000000000000000000000000000001000000110000010110
00000000000000000000000000000000010000100000001011001
00000000000000000000000000000000000001010000100001110
00000000000000000000000000000000000100001000010010101
00000000000000000000000000000000000100010001000010110
00000000000000000000000000000000010000000100001010101
00000000000000000000000000000000000010000101000001110
00000000000000000000000000000000000000100010001001011
00000000000000000000000000000000000001000000110001011
00000000000000000000000000000000001000010000100010110
00000000000000000000000000000000000100010000001010101
00000000000000000000000000000000000010001000000101101
00000000000000000000000000000000001000100010000011010
00000000000000000000000000000000000001000010000101011
00000000000000000000000000000000010000101000000011100
00000000000000000000000000000000001000010000000110101
00000000000000000000000000000000001010000000000111001
00000000000000000000000000000000001000000100010010101
00000000000000000000000000000000010000000101000010110
00000000000000000000000000000000000100000001010010011
00000000000000000000000000000000000110000000001011001
00000000000000000000000000000000000100000010001010011
00000000000000000000000000000000001010000000100011010
00000000000000000000000000000000010000001000000110101
00000000000000000000000000000000000110001000000011100
00000000000000000000000000000000001000000000110010011
00000000000000000000000000000000000010001000100001110
00000000000000000000000000000000000100001010000010110
00000000000000000000000000000000010000001000100010110
00000000000000000000000000000000000101010000000011100
00000000000000000000000000000000000000001010000100111
00000000000000000000000000000000000000010001000100111
00000000000000000000000000000000000000110000001001101
00000000000000000000000000000000000010000001000101011
00000000000000000000000000000000000101000000010011001
00000000000000000000000000000000000101000010000011010
00000000000000000000000000000000000000001000110000111
00000000000000000000000000000000010000000001000110011
00000000000000000000000000000000000001010000000101101
00000000000000000000000000000000000001000110000001110
00000000000000000000000000000000000001000100010001101
00000000000000000000000000000000000000110001000001110
00000000000000000000000000000000001010000100000011100
00000000000000000000000000000000000000000101010000111
00000000000000000000000000000000000000101010000001110
00000000000000000000000000000000000000101000010001101
00000000000000000000000000000000010000000000101010011
00000000000000000000000000000000001000000010000110011
00000000000000000000000000000000010001000000100011010
00000000000000000000000000000000001000100000010011001
00000000000000000000000000000000000000100001010001011
00000000000000000000000000000000000010000100001001101
00000000000000000000000000000000000000010000101000111
00000000000000000000000000000000000000000110001000111
00000000000000000000000000000000010001000000000111001
00000000000000000000000000000000010000100001000011010
00000000000000000000000000000000000110000001000011010
00000000000000000000000000000000000010000000101001011



[QRM NOTE]: Time elapsed since start: 17.820 seconds

[QRM NOTE]: Time elapsed since last: 11.179 seconds

[QRM NOTE]: Peak memory: 1691973 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=5,value=3]

====================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 30.102 seconds

[QRM NOTE]: Time elapsed since last: 12.282 seconds

[QRM NOTE]: Peak memory: 1481641 bytes

python3 qrm.py ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy -s node=3,value=4 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym_quorum/ivy/toy_consensus_epr.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


========================================================================================================

	[FW]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=4]

========================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm toy_consensus_epr.node_3_value_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o toy_consensus_epr.node_3_value_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 toy_consensus_epr.node_3_value_4.finite.cpp toy_consensus_epr.node_3_value_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared toy_consensus_epr.node_3_value_4.finite.o toy_consensus_epr.node_3_value_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 31

[FW NOTE]: number of interpreted atoms (e.g. member,le): 9

[FW NOTE]: number of branching actions: 24

[FW NOTE]: symmetric group order: 144

[QRM NOTE]: Time elapsed since start: 6.629 seconds

[QRM NOTE]: Time elapsed since last: 6.629 seconds

[QRM NOTE]: Peak memory: 1199513 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        177

[FW NOTE]: number of dfs representative states:     10

[FW NOTE]: number of dfs non-representative states: 167


===============================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=4]

===============================================================================================================

sort: node=['node0', 'node1', 'node2']
sort: value=['value0', 'value1', 'value2', 'value3']
sort: quorum=['quorum__node0_node1', 'quorum__node0_node2', 'quorum__node1_node2']
predicate: voted('node',)
predicate: decided('value',)
predicate: chosenAt('quorum', 'value')
predicate: member('node', 'quorum')
predicate: vote('node', 'value')
interpreted atoms: {'member(node0,quorum__node0_node1)': '1', 'member(node0,quorum__node0_node2)': '1', 'member(node0,quorum__node1_node2)': '0', 'member(node1,quorum__node0_node1)': '1', 'member(node1,quorum__node0_node2)': '0', 'member(node1,quorum__node1_node2)': '1', 'member(node2,quorum__node0_node1)': '0', 'member(node2,quorum__node0_node2)': '1', 'member(node2,quorum__node1_node2)': '1'}
state atoms: ['chosenAt(quorum__node0_node1,value0)', 'chosenAt(quorum__node0_node1,value1)', 'chosenAt(quorum__node0_node1,value2)', 'chosenAt(quorum__node0_node1,value3)', 'chosenAt(quorum__node0_node2,value0)', 'chosenAt(quorum__node0_node2,value1)', 'chosenAt(quorum__node0_node2,value2)', 'chosenAt(quorum__node0_node2,value3)', 'chosenAt(quorum__node1_node2,value0)', 'chosenAt(quorum__node1_node2,value1)', 'chosenAt(quorum__node1_node2,value2)', 'chosenAt(quorum__node1_node2,value3)', 'decided(value0)', 'decided(value1)', 'decided(value2)', 'decided(value3)', 'vote(node0,value0)', 'vote(node0,value1)', 'vote(node0,value2)', 'vote(node0,value3)', 'vote(node1,value0)', 'vote(node1,value1)', 'vote(node1,value2)', 'vote(node1,value3)', 'vote(node2,value0)', 'vote(node2,value1)', 'vote(node2,value2)', 'vote(node2,value3)', 'voted(node0)', 'voted(node1)', 'voted(node2)']
representative states : 427, 5035, 268507051, 73284001707, 73300778923, 270606251, 287383467, 285284267, 75691, 1200043


=== State Orbit 0 =====================
size : 1
repr state: 0000000000000000000000000000000
lex min decimal: 427
states:
0000000000000000000000000000000




=== State Orbit 1 =====================
size : 12
repr state: 0000000000000000100000000000100
lex min decimal: 5035
states:
0000000000000000000001000000010
0000000000000000001000000000100
0000000000000000000000000010001
0000000000000000010000000000100
0000000000000000000000000001001
0000000000000000000000001000001
0000000000000000000010000000010
0000000000000000000000010000010
0000000000000000000100000000100
0000000000000000100000000000100
0000000000000000000000000100001
0000000000000000000000100000010




=== State Orbit 2 =====================
size : 12
repr state: 1000000000000000100010000000110
lex min decimal: 268507051
states:
0000000001000000000001000100011
0000000000010000000000010001011
0000010000000000010000000100101
0000000010000000000010001000011
1000000000000000100010000000110
0000000100000000000100000001101
0000001000000000001000000010101
0010000000000000001000100000110
0000000000100000000000100010011
0001000000000000000100010000110
0100000000000000010001000000110
0000100000000000100000001000101




=== State Orbit 3 =====================
size : 4
repr state: 1000100010000000100010001000111
lex min decimal: 73284001707
states:
0100010001000000010001000100111
0010001000100000001000100010111
1000100010000000100010001000111
0001000100010000000100010001111




=== State Orbit 4 =====================
size : 4
repr state: 1000100010001000100010001000111
lex min decimal: 73300778923
states:
1000100010001000100010001000111
0001000100010001000100010001111
0010001000100010001000100010111
0100010001000100010001000100111




=== State Orbit 5 =====================
size : 36
repr state: 1000000000000000100010000100111
lex min decimal: 270606251
states:
0000100000000000100000101000111
0000000100000000000100100001111
0000001000000000001000010010111
0010000000000000001000100001111
0000000100000000000101000001111
0000000010000000010010001000111
0000000001000000001001000100111
0000000001000000000101000100111
0000000000010000001000010001111
0000000000100000010000100010111
0000000010000000000110001000111
1000000000000000100010000001111
0000000100000000000110000001111
0010000000000000001000100100111
0000001000000000001001000010111
0000100000000000100000011000111
0001000000000000000100010010111
0000010000000000010000100100111
1000000000000000100010000100111
0000000000010000100000010001111
0000010000000000010000010100111
0001000000000000000100010100111
0000000000100000100000100010111
0000000001000000100001000100111
0001000000000000000100011000111
0000000000100000000100100010111
0100000000000000010001001000111
0010000000000000001000101000111
0000000000010000010000010001111
0100000000000000010001000010111
0000010000000000010010000100111
0000001000000000001010000010111
1000000000000000100010000010111
0100000000000000010001000001111
0000000010000000001010001000111
0000100000000000100001001000111




=== State Orbit 6 =====================
size : 36
repr state: 1000000000001000100010000100111
lex min decimal: 287383467
states:
0000000000010001001000010001111
0000000000100010010000100010111
0010000000000010001000100100111
0000001000000010001000010010111
0000000001000100000101000100111
0001000000000001000100010010111
0010000000000010001000101000111
0000000100000001000110000001111
0001000000000001000100011000111
0000100000001000100000101000111
0000010000000100010010000100111
1000000000001000100010000100111
0000000010001000010010001000111
0000000010001000000110001000111
0001000000000001000100010100111
0000000001000100100001000100111
0000100000001000100000011000111
0100000000000100010001001000111
0000001000000010001010000010111
0000010000000100010000100100111
0000001000000010001001000010111
0010000000000010001000100001111
0100000000000100010001000010111
1000000000001000100010000001111
0000000000100010000100100010111
0100000000000100010001000001111
0000000010001000001010001000111
0000000001000100001001000100111
0000100000001000100001001000111
0000000000100010100000100010111
0000010000000100010000010100111
0000000000010001100000010001111
1000000000001000100010000010111
0000000000010001010000010001111
0000000100000001000101000001111
0000000100000001000100100001111




=== State Orbit 7 =====================
size : 12
repr state: 1000000000001000100010000000110
lex min decimal: 285284267
states:
0000100000001000100000001000101
0001000000000001000100010000110
0000010000000100010000000100101
0000000000010001000000010001011
0000000001000100000001000100011
0000001000000010001000000010101
0010000000000010001000100000110
0000000000100010000000100010011
1000000000001000100010000000110
0000000010001000000010001000011
0100000000000100010001000000110
0000000100000001000100000001101




=== State Orbit 8 =====================
size : 36
repr state: 0000000000000000100001000000110
lex min decimal: 75691
states:
0000000000000000100000000100101
0000000000000000000001000010011
0000000000000000010000100000110
0000000000000000000010000010011
0000000000000000000001001000011
0000000000000000000100001000101
0000000000000000000000010010011
0000000000000000100001000000110
0000000000000000000000010100011
0000000000000000000100000100101
0000000000000000100000000010101
0000000000000000001000000100101
0000000000000000000100000010101
0000000000000000000000101000011
0000000000000000001000000001101
0000000000000000001000001000101
0000000000000000000010000100011
0000000000000000001000010000110
0000000000000000000001000001011
0000000000000000000000100001011
0000000000000000010000000010101
0000000000000000000100100000110
0000000000000000010000010000110
0000000000000000001010000000110
0000000000000000010010000000110
0000000000000000010000000001101
0000000000000000000101000000110
0000000000000000000000100100011
0000000000000000000000011000011
0000000000000000100000010000110
0000000000000000010000001000101
0000000000000000001001000000110
0000000000000000000010000001011
0000000000000000000110000000110
0000000000000000100000000001101
0000000000000000100000100000110




=== State Orbit 9 =====================
size : 24
repr state: 0000000000000000100001000010111
lex min decimal: 1200043
states:
0000000000000000000101001000111
0000000000000000001010000100111
0000000000000000001000011000111
0000000000000000000110000100111
0000000000000000010000100001111
0000000000000000010000010010111
0000000000000000100000010100111
0000000000000000100001000010111
0000000000000000010000011000111
0000000000000000001001000001111
0000000000000000001001001000111
0000000000000000001010000001111
0000000000000000010010000001111
0000000000000000000100100100111
0000000000000000010010000010111
0000000000000000100000100001111
0000000000000000100000010010111
0000000000000000100001000001111
0000000000000000100000100100111
0000000000000000000100101000111
0000000000000000001000010100111
0000000000000000000110000010111
0000000000000000000101000010111
0000000000000000010000101000111



[QRM NOTE]: Time elapsed since start: 7.239 seconds

[QRM NOTE]: Time elapsed since last: 0.610 seconds

[QRM NOTE]: Peak memory: 1287940 bytes


====================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym_quorum/ivy/toy_consensus_epr: node=3,value=4]

====================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.986 seconds

[QRM NOTE]: Time elapsed since last: 0.747 seconds

[QRM NOTE]: Peak memory: 386609 bytes

ivy_check complete=fo ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy


Isolate this:

    The following properties are assumed as axioms:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 8: axiom1

    The following definitions are used:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 14: def2

    The inductive invariant consists of the following conjectures:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_21

    The following action implementations are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 22: implementation of cast_vote
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 29: implementation of decide

    The following initializers are present:
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 16: init[after3]

    Initialization must establish the invariant
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
        ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_21 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:cast_vote
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_21 ... PASS
        (internal) ext:decide
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 44: def_chosenAt ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 45: invar_0 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 46: invar_2 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 47: invar_22 ... PASS
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 48: invar_21 ... PASS

    The following program assertions are treated as assumptions:
        in action cast_vote when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 23: assumption
        in action decide when called from the environment:
            ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy: line 30: assumption

OK
[IVY_CHECK RESULT]: PASS


************************************************************************

	[QRM]: ivybench/sym_quorum/ivy/toy_consensus_epr.ivy

************************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym_quorum/ivy/toy_consensus_epr.node_3_value_3.0.ivy']

[CUTOFF]: node=3,value=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 135.876 seconds

[QRM NOTE]: Time elapsed since last: 135.876 seconds

