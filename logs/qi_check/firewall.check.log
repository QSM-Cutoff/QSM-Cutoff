
********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************


************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/firewall: node=1

************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.ivy -s node=1 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/firewall.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=1]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm firewall.node_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_1.finite.cpp firewall.node_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_1.finite.o firewall.node_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 3

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 2

[FW NOTE]: symmetric group order: 1

[QRM NOTE]: Time elapsed since start: 6.560 seconds

[QRM NOTE]: Time elapsed since last: 6.560 seconds

[QRM NOTE]: Peak memory: 1171541 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 0

[FW NOTE]: number of total reachable states:        2

[FW NOTE]: number of dfs representative states:     2

[FW NOTE]: number of dfs non-representative states: 0


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=1]

=======================================================================================

sort: node=['node0']
predicate: sent('node', 'node')
predicate: internal('node',)
predicate: allowed_in('node',)
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'internal(node0)', 'sent(node0,node0)']
representative states : 0, 2


=== State Orbit 0 =====================
size : 1
repr state: 000
lex min decimal: 0
states:
000




=== State Orbit 1 =====================
size : 1
repr state: 010
lex min decimal: 2
states:
010



[QRM NOTE]: Time elapsed since start: 6.639 seconds

[QRM NOTE]: Time elapsed since last: 0.079 seconds

[QRM NOTE]: Peak memory: 1195998 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.642 seconds

[QRM NOTE]: Time elapsed since last: 0.004 seconds

[QRM NOTE]: Peak memory: 146915 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=1]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=1]

==================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : --1
0     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1--
1     : ['allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 2

[PRIME NOTE]: number of orbits before merging: 2

[PRIME NOTE]: number of primes: 2

[QRM NOTE]: Time elapsed since start: 6.656 seconds

[QRM NOTE]: Time elapsed since last: 0.014 seconds

[QRM NOTE]: Peak memory: 1202051 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=1]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1]
 solution : []


Before reduction : 
 pending  : [0, 1]
 solution : []

Essensial at level 0 : {0, 1}

Before removed
 coverage : [(0, -1), (1, -1)]

After removed
 coverage : [(0, -1), (1, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1)]

After removed
 coverage : [(0, -1), (1, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1]

[QRM NOTE]: Time elapsed since start: 6.657 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 154493 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=1]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : --1
0     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node0)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('node0', EnumeratedSort('node', ('node0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node0,node0)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('node', ('node0',)))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1--
1     : ['allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0',))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$allowed_in$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0',)), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0',)),)}

sign_func_name2count:  {'0$allowed_in': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~allowed_in(NODE0)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=1]

==========================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : --1
0     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 1--
1     : ['allowed_in(node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~allowed_in(NODE0)
qcost : 2



[QRM NOTE]: Time elapsed since start: 6.723 seconds

[QRM NOTE]: Time elapsed since last: 0.066 seconds

[QRM NOTE]: Peak memory: 1809867 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=1]

=========================================================================


New level: 1
 pending : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1)]

After removed
 coverage : [(0, -1), (1, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1]


Solution : [0, 1] has cost 4.


Before backtrack at level 1
 pending : []
 solution : [0, 1]

After backtrack at level 1
 pending : []
 solution : [0, 1]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=1]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 4

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 1] (length = 2)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_1] forall NODE0. ~allowed_in(NODE0) # qcost: 2




[QRM NOTE]: Time elapsed since start: 6.764 seconds

[QRM NOTE]: Time elapsed since last: 0.040 seconds

[QRM NOTE]: Peak memory: 1801599 bytes


===========================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/firewall: node=1]

===========================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.765 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 753641 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=1]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_1.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 39: invar_1

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_1.0.ivy: line 39: invar_1 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 39: invar_1 ... FAIL
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 39: invar_1 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_1.0.ivy: line 26: assumption

error: failed checks: 1
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 8.599 seconds

[QRM NOTE]: Time elapsed since last: 1.834 seconds

[QRM NOTE]: Peak memory: 804012 bytes


***************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/firewall: node=1

***************************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.node_1.0.ivy -s node=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/firewall.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=2]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm firewall.node_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_2.finite.cpp firewall.node_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_2.finite.o firewall.node_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 8

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 8

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.488 seconds

[QRM NOTE]: Time elapsed since last: 6.488 seconds

[QRM NOTE]: Peak memory: 1175156 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        8

[FW NOTE]: number of dfs representative states:     5

[FW NOTE]: number of dfs non-representative states: 3


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=2]

=======================================================================================

sort: node=['node0', 'node1']
predicate: allowed_in('node',)
predicate: internal('node',)
predicate: sent('node', 'node')
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'internal(node0)', 'internal(node1)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node1,node0)', 'sent(node1,node1)']
representative states : 0, 48, 16, 100, 102


=== State Orbit 0 =====================
size : 1
repr state: 00000000
lex min decimal: 0
states:
00000000




=== State Orbit 1 =====================
size : 1
repr state: 00110000
lex min decimal: 48
states:
00110000




=== State Orbit 2 =====================
size : 2
repr state: 00010000
lex min decimal: 16
states:
00100000
00010000




=== State Orbit 3 =====================
size : 2
repr state: 10010010
lex min decimal: 100
states:
10010010
01100100




=== State Orbit 4 =====================
size : 2
repr state: 10010110
lex min decimal: 102
states:
10010110
01100110



[QRM NOTE]: Time elapsed since start: 6.558 seconds

[QRM NOTE]: Time elapsed since last: 0.070 seconds

[QRM NOTE]: Peak memory: 1203471 bytes


============================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/firewall: node=2]

============================================================================================================

Found a representative state in Rmin not in reachability: decimal: 54, binary: 00110110

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.561 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 157171 bytes

next size: node=2


************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/firewall: node=2

************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.ivy -s node=2 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/firewall.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.020 seconds

[QRM NOTE]: Time elapsed since last: 0.020 seconds

[QRM NOTE]: Peak memory: 2198 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=2]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=2]

==================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : ----1---
0     : ['sent(node0,node0)']
1     : -------1
1     : ['sent(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-1----
2     : ['allowed_in(node1)', 'internal(node1)']
3     : 1-1-----
3     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : 1--0----
4     : ['allowed_in(node0)', '~internal(node1)']
5     : -10-----
5     : ['allowed_in(node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : 1-----0-
6     : ['allowed_in(node0)', '~sent(node1,node0)']
7     : -1---0--
7     : ['allowed_in(node1)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
8 (*) : 11------
8     : ['allowed_in(node0)', 'allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 2
9 (*) : 0--1-1--
9     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
10     : -01---1-
10     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
15 (*) : 0--1--1-
15     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
16     : -01--1--
16     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : ---1-10-
11     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
12     : --1--01-
12     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : --11-1--
13     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
14     : --11--1-
14     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
17 (*) : 00----1-
17     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
18     : 00---1--
18     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 2
num_suborbits: 1
19 (*) : 0----01-
19     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
20     : -0---10-
20     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 4
num_suborbits: 2
21 (*) : 0-0---1-
21     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
22     : -0-0-1--
22     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
23 (*) : -0-0--1-
23     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
24     : 0-0--1--
24     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
25 (*) : ---0-01-
25     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
26     : --0--10-
26     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 2
num_suborbits: 1
27 (*) : --00--1-
27     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
28     : --00-1--
28     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 13

[PRIME NOTE]: number of orbits before merging: 15

[PRIME NOTE]: number of primes: 29

[QRM NOTE]: Time elapsed since start: 0.037 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 1098705 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=2]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : []

Essensial at level 0 : {0, 3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, 12), (11, 4), (12, 8)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 3]


Before reduction : 
 pending  : [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 3]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, 12), (11, 4), (12, 8)]

After removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, 12), (11, 4), (12, 8)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 3]

[QRM NOTE]: Time elapsed since start: 0.040 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 49690 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=2]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : ----1---
0     : ['sent(node0,node0)']
1     : -------1
1     : ['sent(node1,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node0)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node0,node0)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : 1-----0-
6     : ['allowed_in(node0)', '~sent(node1,node0)']
7     : -1---0--
7     : ['allowed_in(node1)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. sent(NODE1,NODE0) | ~allowed_in(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-1----
2     : ['allowed_in(node1)', 'internal(node1)']
3     : 1-1-----
3     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'internal': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : 1--0----
4     : ['allowed_in(node0)', '~internal(node1)']
5     : -10-----
5     : ['allowed_in(node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'internal': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~allowed_in(NODE0) | internal(NODE1) | NODE0 = NODE1


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
8 (*) : 11------
8     : ['allowed_in(node0)', 'allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$allowed_in$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),)}

sign_func_name2count:  {'0$allowed_in': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 4
num_suborbits: 2
9 (*) : 0--1-1--
9     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
10     : -01---1-
10     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
15 (*) : 0--1--1-
15     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
16     : -01--1--
16     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'internal(node1)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'internal(node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'internal(node1)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'internal(NODE0)', '~allowed_in(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE3,NODE0,NODE1. ~sent(NODE1,NODE2) | ~internal(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : ---1-10-
11     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
12     : --1--01-
12     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', 'internal(NODE0)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | NODE0 = NODE1


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : --11-1--
13     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
14     : --11--1-
14     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$0': [node$0$internal$0$0; node$0$sent$0$0], 'node$0$internal$0; node$0$sent$1': [node$0$internal$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$0': node$0$internal$0$0; node$0$sent$0$0, 'node$0$internal$0; node$0$sent$1': node$0$internal$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE1)', 'sent(NODE0,NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~internal(NODE1) | ~sent(NODE0,NODE1) | ~internal(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 7 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
17 (*) : 00----1-
17     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
18     : 00---1--
18     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~allowed_in(node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$1, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~allowed_in(node1)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$1], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$1, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', '~allowed_in(NODE0)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. allowed_in(NODE1) | allowed_in(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1


---------- Quantifier Inference: orbit 8 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 9 =====================
size : 2
num_suborbits: 1
19 (*) : 0----01-
19     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
20     : -0---10-
20     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~sent(node0,node1)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 9 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 10 =====================
size : 4
num_suborbits: 2
21 (*) : 0-0---1-
21     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
22     : -0-0-1--
22     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
23 (*) : -0-0--1-
23     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
24     : 0-0--1--
24     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node0)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~internal(node0)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1')),), 'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE2)', 'sent(NODE0,NODE1)', '~internal(NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. allowed_in(NODE2) | ~sent(NODE0,NODE1) | internal(NODE2) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 10 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
25 (*) : ---0-01-
25     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
26     : --0--10-
26     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))), Const('node1', EnumeratedSort('node', ('node0', 'node1'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$internal$0$0, node$1$sent$1$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~sent(NODE1,NODE0)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | internal(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 11 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 12 =====================
size : 2
num_suborbits: 1
27 (*) : --00--1-
27     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
28     : --00-1--
28     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1'))), Const('node0', EnumeratedSort('node', ('node0', 'node1'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1'))): [node$1$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node1)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1')),), 'sent': (EnumeratedSort('node', ('node0', 'node1')), EnumeratedSort('node', ('node0', 'node1')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$1], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$1, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~internal(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1


---------- Quantifier Inference: orbit 12 ----------

[QI_CHECK RESULT]: PASS


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=2]

==========================================================================================


=== Prime Orbit 0 =====================
size : 2
num_suborbits: 1
0 (*) : ----1---
0     : ['sent(node0,node0)']
1     : -------1
1     : ['sent(node1,node1)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 3 =====================
size : 2
num_suborbits: 1
6 (*) : 1-----0-
6     : ['allowed_in(node0)', '~sent(node1,node0)']
7     : -1---0--
7     : ['allowed_in(node1)', '~sent(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. sent(NODE1,NODE0) | ~allowed_in(NODE0) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
2 (*) : -1-1----
2     : ['allowed_in(node1)', 'internal(node1)']
3     : 1-1-----
3     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 2
num_suborbits: 1
4 (*) : 1--0----
4     : ['allowed_in(node0)', '~internal(node1)']
5     : -10-----
5     : ['allowed_in(node1)', '~internal(node0)']
num_forall :   2
num_exists :   0
num_literals : 3
quantified form : forall NODE0,NODE1. ~allowed_in(NODE0) | internal(NODE1) | NODE0 = NODE1
qcost : 5




=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
8 (*) : 11------
8     : ['allowed_in(node0)', 'allowed_in(node1)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 5 =====================
size : 4
num_suborbits: 2
9 (*) : 0--1-1--
9     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
10     : -01---1-
10     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
15 (*) : 0--1--1-
15     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
16     : -01--1--
16     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE2,NODE3,NODE0,NODE1. ~sent(NODE1,NODE2) | ~internal(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 13




=== Prime Orbit 6 =====================
size : 2
num_suborbits: 1
11 (*) : ---1-10-
11     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
12     : --1--01-
12     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 7 =====================
size : 2
num_suborbits: 1
13 (*) : --11-1--
13     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
14     : --11--1-
14     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~internal(NODE1) | ~sent(NODE0,NODE1) | ~internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 8 =====================
size : 2
num_suborbits: 1
17 (*) : 00----1-
17     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
18     : 00---1--
18     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. allowed_in(NODE1) | allowed_in(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 9 =====================
size : 2
num_suborbits: 1
19 (*) : 0----01-
19     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
20     : -0---10-
20     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 10 =====================
size : 4
num_suborbits: 2
21 (*) : 0-0---1-
21     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
22     : -0-0-1--
22     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
23 (*) : -0-0--1-
23     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
24     : 0-0--1--
24     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. allowed_in(NODE2) | ~sent(NODE0,NODE1) | internal(NODE2) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 11 =====================
size : 2
num_suborbits: 1
25 (*) : ---0-01-
25     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
26     : --0--10-
26     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 12 =====================
size : 2
num_suborbits: 1
27 (*) : --00--1-
27     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
28     : --00-1--
28     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE0,NODE1) | internal(NODE0) | internal(NODE1) | NODE0 = NODE1
qcost : 6



[QRM NOTE]: Time elapsed since start: 0.344 seconds

[QRM NOTE]: Time elapsed since last: 0.305 seconds

[QRM NOTE]: Peak memory: 1790265 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=2]

=========================================================================


New level: 1
 pending : [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 3]


Before reduction : 
 pending  : [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 3]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, 12), (11, 4), (12, 8)]

After removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, 12), (11, 4), (12, 8)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 solution : [0, 3]


Solution : [0, 3] has cost 7.


Decide in level 1 among pending : [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12]

Coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, 12), (11, 4), (12, 8)]

Decide 10 with phase True at level 1

After decision at level 1
 pending : [1, 2, 4, 5, 6, 7, 8, 9, 11, 12]
 solution : [0, 3, 10]


New level: 2
 pending : [1, 2, 4, 5, 6, 7, 8, 9, 11, 12]
 solution : [0, 3, 10]


Before reduction : 
 pending  : [1, 2, 4, 5, 6, 7, 8, 9, 11, 12]
 solution : [0, 3, 10]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, 12), (11, 4), (12, 8)]

After removed
 coverage : [(0, -1), (1, 8), (2, 2), (3, -1), (4, 4), (5, 4), (6, 2), (7, 8), (8, 2), (9, 1), (10, -1), (11, 0), (12, 1)]

Covered at level 2 : {11}

After reduction : 
 pending  : [1, 2, 4, 5, 6, 7, 8, 9, 12]
 solution : [0, 3, 10]


Before reduction : 
 pending  : [1, 2, 4, 5, 6, 7, 8, 9, 12]
 solution : [0, 3, 10]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, 2), (3, -1), (4, 4), (5, 4), (6, 2), (7, 8), (8, 2), (9, 1), (10, -1), (11, 0), (12, 1)]

After removed
 coverage : [(0, -1), (1, 8), (2, 2), (3, -1), (4, 4), (5, 4), (6, 2), (7, 8), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

Covered at level 2 : set()

After reduction : 
 pending  : [1, 2, 4, 5, 6, 7, 8, 9, 12]
 solution : [0, 3, 10]


Solution : [0, 3, 10] has cost 17.


Decide in level 2 among pending : [1, 2, 4, 5, 6, 7, 8, 9, 12]

Coverage : [(0, -1), (1, 8), (2, 2), (3, -1), (4, 4), (5, 4), (6, 2), (7, 8), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

Decide 1 with phase True at level 2

After decision at level 2
 pending : [2, 4, 5, 6, 7, 8, 9, 12]
 solution : [0, 3, 10, 1]


New level: 3
 pending : [2, 4, 5, 6, 7, 8, 9, 12]
 solution : [0, 3, 10, 1]


Before reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 12]
 solution : [0, 3, 10, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, 2), (3, -1), (4, 4), (5, 4), (6, 2), (7, 8), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, 2), (6, 1), (7, 2), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 4, 5, 6, 7, 8, 9, 12]
 solution : [0, 3, 10, 1]


Solution : [0, 3, 10, 1] has cost 20.


Decide in level 3 among pending : [2, 4, 5, 6, 7, 8, 9, 12]

Coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, 2), (6, 1), (7, 2), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

Decide 5 with phase True at level 3

After decision at level 3
 pending : [2, 4, 6, 7, 8, 9, 12]
 solution : [0, 3, 10, 1, 5]


New level: 4
 pending : [2, 4, 6, 7, 8, 9, 12]
 solution : [0, 3, 10, 1, 5]


Before reduction : 
 pending  : [2, 4, 6, 7, 8, 9, 12]
 solution : [0, 3, 10, 1, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, 2), (6, 1), (7, 2), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, 1)]

Covered at level 4 : {8, 9, 6, 7}

After reduction : 
 pending  : [2, 4, 12]
 solution : [0, 3, 10, 1, 5]


Before reduction : 
 pending  : [2, 4, 12]
 solution : [0, 3, 10, 1, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 4, 12]
 solution : [0, 3, 10, 1, 5]


Solution : [0, 3, 10, 1, 5] has cost 33.


Decide in level 4 among pending : [2, 4, 12]

Coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 2 with phase True at level 4

After decision at level 4
 pending : [4, 12]
 solution : [0, 3, 10, 1, 5, 2]


New level: 5
 pending : [4, 12]
 solution : [0, 3, 10, 1, 5, 2]


Before reduction : 
 pending  : [4, 12]
 solution : [0, 3, 10, 1, 5, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 5 : {4, 12}

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 5, 2]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 5, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 5, 2]


Solution : [0, 3, 10, 1, 5, 2] has cost 38.


Before backtrack at level 5
 pending : []
 solution : [0, 3, 10, 1, 5, 2]

After backtrack at level 5
 pending : [4, 12]
 solution : [0, 3, 10, 1, 5, 2]


Invert decision for 2 at level 4


New level: 5
 pending : [4, 12]
 solution : [0, 3, 10, 1, 5]


Before reduction : 
 pending  : [4, 12]
 solution : [0, 3, 10, 1, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 12]
 solution : [0, 3, 10, 1, 5]


Solution : [0, 3, 10, 1, 5] has cost 33.


Decide in level 5 among pending : [4, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 4 with phase True at level 5

After decision at level 5
 pending : [12]
 solution : [0, 3, 10, 1, 5, 4]


New level: 6
 pending : [12]
 solution : [0, 3, 10, 1, 5, 4]


Before reduction : 
 pending  : [12]
 solution : [0, 3, 10, 1, 5, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 6 : {12}

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 5, 4]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 5, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 5, 4]


Solution : [0, 3, 10, 1, 5, 4] has cost 35.


Before backtrack at level 6
 pending : []
 solution : [0, 3, 10, 1, 5, 4]

After backtrack at level 6
 pending : [12]
 solution : [0, 3, 10, 1, 5, 4]


Invert decision for 4 at level 5


New level: 6
 pending : [12]
 solution : [0, 3, 10, 1, 5]


Before reduction : 
 pending  : [12]
 solution : [0, 3, 10, 1, 5]

Essensial at level 6 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 5, 12]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 5, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 5, 12]


Solution : [0, 3, 10, 1, 5, 12] has cost 39.


Before backtrack at level 6
 pending : []
 solution : [0, 3, 10, 1, 5, 12]

After backtrack at level 6
 pending : [12]
 solution : [0, 3, 10, 1, 5]


Before backtrack at level 5
 pending : [12]
 solution : [0, 3, 10, 1, 5]

After backtrack at level 5
 pending : [12, 4]
 solution : [0, 3, 10, 1, 5]


Before backtrack at level 4
 pending : [12, 4]
 solution : [0, 3, 10, 1, 5]

After backtrack at level 4
 pending : [12, 4, 6, 7, 8, 9, 2]
 solution : [0, 3, 10, 1, 5]


Invert decision for 5 at level 3


New level: 4
 pending : [12, 4, 6, 7, 8, 9, 2]
 solution : [0, 3, 10, 1]


Before reduction : 
 pending  : [12, 4, 6, 7, 8, 9, 2]
 solution : [0, 3, 10, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, 1), (7, 2), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

Covered at level 4 : set()

After reduction : 
 pending  : [12, 4, 6, 7, 8, 9, 2]
 solution : [0, 3, 10, 1]


Solution : [0, 3, 10, 1] has cost 20.


Decide in level 4 among pending : [12, 4, 6, 7, 8, 9, 2]

Coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, 1), (7, 2), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

Decide 7 with phase True at level 4

After decision at level 4
 pending : [12, 4, 6, 8, 9, 2]
 solution : [0, 3, 10, 1, 7]


New level: 5
 pending : [12, 4, 6, 8, 9, 2]
 solution : [0, 3, 10, 1, 7]


Before reduction : 
 pending  : [12, 4, 6, 8, 9, 2]
 solution : [0, 3, 10, 1, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, 1), (7, 2), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, 1)]

Covered at level 5 : {8, 9, 6}

After reduction : 
 pending  : [12, 4, 2]
 solution : [0, 3, 10, 1, 7]


Before reduction : 
 pending  : [12, 4, 2]
 solution : [0, 3, 10, 1, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 5 : set()

After reduction : 
 pending  : [12, 4, 2]
 solution : [0, 3, 10, 1, 7]


Solution : [0, 3, 10, 1, 7] has cost 26.


Decide in level 5 among pending : [12, 4, 2]

Coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 12 with phase True at level 5

After decision at level 5
 pending : [4, 2]
 solution : [0, 3, 10, 1, 7, 12]


New level: 6
 pending : [4, 2]
 solution : [0, 3, 10, 1, 7, 12]


Before reduction : 
 pending  : [4, 2]
 solution : [0, 3, 10, 1, 7, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : {2, 4}

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 7, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 7, 12]


Solution : [0, 3, 10, 1, 7, 12] has cost 32.


Before backtrack at level 6
 pending : []
 solution : [0, 3, 10, 1, 7, 12]

After backtrack at level 6
 pending : [4, 2]
 solution : [0, 3, 10, 1, 7, 12]


Invert decision for 12 at level 5


New level: 6
 pending : [4, 2]
 solution : [0, 3, 10, 1, 7]


Before reduction : 
 pending  : [4, 2]
 solution : [0, 3, 10, 1, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 2]
 solution : [0, 3, 10, 1, 7]


Solution : [0, 3, 10, 1, 7] has cost 26.


Decide in level 6 among pending : [4, 2]

Coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [2]
 solution : [0, 3, 10, 1, 7, 4]


New level: 7
 pending : [2]
 solution : [0, 3, 10, 1, 7, 4]


Before reduction : 
 pending  : [2]
 solution : [0, 3, 10, 1, 7, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : {2}

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 7, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 7, 4]


Solution : [0, 3, 10, 1, 7, 4] has cost 28.


Before backtrack at level 7
 pending : []
 solution : [0, 3, 10, 1, 7, 4]

After backtrack at level 7
 pending : [2]
 solution : [0, 3, 10, 1, 7, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [2]
 solution : [0, 3, 10, 1, 7]


Before reduction : 
 pending  : [2]
 solution : [0, 3, 10, 1, 7]

Essensial at level 7 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 7, 2]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 7, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 7, 2]


Solution : [0, 3, 10, 1, 7, 2] has cost 31.


Before backtrack at level 7
 pending : []
 solution : [0, 3, 10, 1, 7, 2]

After backtrack at level 7
 pending : [2]
 solution : [0, 3, 10, 1, 7]


Before backtrack at level 6
 pending : [2]
 solution : [0, 3, 10, 1, 7]

After backtrack at level 6
 pending : [2, 4]
 solution : [0, 3, 10, 1, 7]


Before backtrack at level 5
 pending : [2, 4]
 solution : [0, 3, 10, 1, 7]

After backtrack at level 5
 pending : [2, 4, 6, 8, 9, 12]
 solution : [0, 3, 10, 1, 7]


Invert decision for 7 at level 4


New level: 5
 pending : [2, 4, 6, 8, 9, 12]
 solution : [0, 3, 10, 1]


Before reduction : 
 pending  : [2, 4, 6, 8, 9, 12]
 solution : [0, 3, 10, 1]

Essensial at level 5 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, 1)]

Covered at level 5 : {9, 6}

After reduction : 
 pending  : [2, 4, 12]
 solution : [0, 3, 10, 1, 8]


Before reduction : 
 pending  : [2, 4, 12]
 solution : [0, 3, 10, 1, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 4, 12]
 solution : [0, 3, 10, 1, 8]


Solution : [0, 3, 10, 1, 8] has cost 26.


Decide in level 5 among pending : [2, 4, 12]

Coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 2 with phase True at level 5

After decision at level 5
 pending : [4, 12]
 solution : [0, 3, 10, 1, 8, 2]


New level: 6
 pending : [4, 12]
 solution : [0, 3, 10, 1, 8, 2]


Before reduction : 
 pending  : [4, 12]
 solution : [0, 3, 10, 1, 8, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 6 : {4, 12}

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 8, 2]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 8, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 8, 2]


Solution : [0, 3, 10, 1, 8, 2] has cost 31.


Before backtrack at level 6
 pending : []
 solution : [0, 3, 10, 1, 8, 2]

After backtrack at level 6
 pending : [4, 12]
 solution : [0, 3, 10, 1, 8, 2]


Invert decision for 2 at level 5


New level: 6
 pending : [4, 12]
 solution : [0, 3, 10, 1, 8]


Before reduction : 
 pending  : [4, 12]
 solution : [0, 3, 10, 1, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 12]
 solution : [0, 3, 10, 1, 8]


Solution : [0, 3, 10, 1, 8] has cost 26.


Decide in level 6 among pending : [4, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [12]
 solution : [0, 3, 10, 1, 8, 4]


New level: 7
 pending : [12]
 solution : [0, 3, 10, 1, 8, 4]


Before reduction : 
 pending  : [12]
 solution : [0, 3, 10, 1, 8, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 7 : {12}

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 8, 4]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 8, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 8, 4]


Solution : [0, 3, 10, 1, 8, 4] has cost 28.


Before backtrack at level 7
 pending : []
 solution : [0, 3, 10, 1, 8, 4]

After backtrack at level 7
 pending : [12]
 solution : [0, 3, 10, 1, 8, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [12]
 solution : [0, 3, 10, 1, 8]


Before reduction : 
 pending  : [12]
 solution : [0, 3, 10, 1, 8]

Essensial at level 7 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 8, 12]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 8, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 1, 8, 12]


Solution : [0, 3, 10, 1, 8, 12] has cost 32.


Before backtrack at level 7
 pending : []
 solution : [0, 3, 10, 1, 8, 12]

After backtrack at level 7
 pending : [12]
 solution : [0, 3, 10, 1, 8]


Before backtrack at level 6
 pending : [12]
 solution : [0, 3, 10, 1, 8]

After backtrack at level 6
 pending : [12, 4]
 solution : [0, 3, 10, 1, 8]


Before backtrack at level 5
 pending : [12, 4]
 solution : [0, 3, 10, 1, 8]

After backtrack at level 5
 pending : [12, 4, 8, 6, 9, 2]
 solution : [0, 3, 10, 1]


Before backtrack at level 4
 pending : [12, 4, 8, 6, 9, 2]
 solution : [0, 3, 10, 1]

After backtrack at level 4
 pending : [12, 4, 8, 6, 9, 2, 7]
 solution : [0, 3, 10, 1]


Before backtrack at level 3
 pending : [12, 4, 8, 6, 9, 2, 7]
 solution : [0, 3, 10, 1]

After backtrack at level 3
 pending : [12, 4, 8, 6, 9, 2, 7, 5]
 solution : [0, 3, 10, 1]


Invert decision for 1 at level 2


New level: 3
 pending : [12, 4, 8, 6, 9, 2, 7, 5]
 solution : [0, 3, 10]


Before reduction : 
 pending  : [12, 4, 8, 6, 9, 2, 7, 5]
 solution : [0, 3, 10]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 4), (5, 4), (6, 2), (7, 8), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

Covered at level 3 : set()

After reduction : 
 pending  : [12, 4, 8, 6, 9, 2, 7, 5]
 solution : [0, 3, 10]


Solution : [0, 3, 10] has cost 17.


Decide in level 3 among pending : [12, 4, 8, 6, 9, 2, 7, 5]

Coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 4), (5, 4), (6, 2), (7, 8), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

Decide 7 with phase True at level 3

After decision at level 3
 pending : [12, 4, 8, 6, 9, 2, 5]
 solution : [0, 3, 10, 7]


New level: 4
 pending : [12, 4, 8, 6, 9, 2, 5]
 solution : [0, 3, 10, 7]


Before reduction : 
 pending  : [12, 4, 8, 6, 9, 2, 5]
 solution : [0, 3, 10, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 4), (5, 4), (6, 2), (7, 8), (8, 2), (9, 1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 4), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, 1)]

Covered at level 4 : {8, 9, 5, 6}

After reduction : 
 pending  : [12, 4, 2]
 solution : [0, 3, 10, 7]


Before reduction : 
 pending  : [12, 4, 2]
 solution : [0, 3, 10, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 4), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 4), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Covered at level 4 : set()

After reduction : 
 pending  : [12, 4, 2]
 solution : [0, 3, 10, 7]


Solution : [0, 3, 10, 7] has cost 23.


Decide in level 4 among pending : [12, 4, 2]

Coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 4), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

Decide 4 with phase True at level 4

After decision at level 4
 pending : [12, 2]
 solution : [0, 3, 10, 7, 4]


New level: 5
 pending : [12, 2]
 solution : [0, 3, 10, 7, 4]


Before reduction : 
 pending  : [12, 2]
 solution : [0, 3, 10, 7, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 4), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 5 : {2, 12}

After reduction : 
 pending  : []
 solution : [0, 3, 10, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 7, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 7, 4]


Solution : [0, 3, 10, 7, 4] has cost 25.


Before backtrack at level 5
 pending : []
 solution : [0, 3, 10, 7, 4]

After backtrack at level 5
 pending : [12, 2]
 solution : [0, 3, 10, 7, 4]


Invert decision for 4 at level 4


New level: 5
 pending : [12, 2]
 solution : [0, 3, 10, 7]


Before reduction : 
 pending  : [12, 2]
 solution : [0, 3, 10, 7]

Essensial at level 5 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

Covered at level 5 : {12}

After reduction : 
 pending  : []
 solution : [0, 3, 10, 7, 2]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 7, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 7, 2]


Solution : [0, 3, 10, 7, 2] has cost 28.


Before backtrack at level 5
 pending : []
 solution : [0, 3, 10, 7, 2]

After backtrack at level 5
 pending : [2, 12]
 solution : [0, 3, 10, 7]


Before backtrack at level 4
 pending : [2, 12]
 solution : [0, 3, 10, 7]

After backtrack at level 4
 pending : [2, 12, 8, 6, 9, 5, 4]
 solution : [0, 3, 10, 7]


Invert decision for 7 at level 3


New level: 4
 pending : [2, 12, 8, 6, 9, 5, 4]
 solution : [0, 3, 10]


Before reduction : 
 pending  : [2, 12, 8, 6, 9, 5, 4]
 solution : [0, 3, 10]

Essensial at level 4 : {4, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, 0)]

Covered at level 4 : {2, 6, 8, 9, 12}

After reduction : 
 pending  : []
 solution : [0, 3, 10, 4, 5]


Before reduction : 
 pending  : []
 solution : [0, 3, 10, 4, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 10, 4, 5]


Solution : [0, 3, 10, 4, 5] has cost 32.


Before backtrack at level 4
 pending : []
 solution : [0, 3, 10, 4, 5]

After backtrack at level 4
 pending : [5, 4, 2, 12, 8, 6, 9]
 solution : [0, 3, 10]


Before backtrack at level 3
 pending : [5, 4, 2, 12, 8, 6, 9]
 solution : [0, 3, 10]

After backtrack at level 3
 pending : [5, 4, 2, 12, 8, 6, 9, 7]
 solution : [0, 3, 10]


Before backtrack at level 2
 pending : [5, 4, 2, 12, 8, 6, 9, 7]
 solution : [0, 3, 10]

After backtrack at level 2
 pending : [5, 4, 2, 12, 8, 6, 9, 7, 11, 1]
 solution : [0, 3, 10]


Invert decision for 10 at level 1


New level: 2
 pending : [5, 4, 2, 12, 8, 6, 9, 7, 11, 1]
 solution : [0, 3]


Before reduction : 
 pending  : [5, 4, 2, 12, 8, 6, 9, 7, 11, 1]
 solution : [0, 3]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, -1), (11, 4), (12, 8)]

Covered at level 2 : set()

After reduction : 
 pending  : [5, 4, 2, 12, 8, 6, 9, 7, 11, 1]
 solution : [0, 3]


Solution : [0, 3] has cost 7.


Decide in level 2 among pending : [5, 4, 2, 12, 8, 6, 9, 7, 11, 1]

Coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, -1), (11, 4), (12, 8)]

Decide 5 with phase True at level 2

After decision at level 2
 pending : [4, 2, 12, 8, 6, 9, 7, 11, 1]
 solution : [0, 3, 5]


New level: 3
 pending : [4, 2, 12, 8, 6, 9, 7, 11, 1]
 solution : [0, 3, 5]


Before reduction : 
 pending  : [4, 2, 12, 8, 6, 9, 7, 11, 1]
 solution : [0, 3, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, 9), (6, 4), (7, 8), (8, 8), (9, 4), (10, -1), (11, 4), (12, 8)]

After removed
 coverage : [(0, -1), (1, 2), (2, 8), (3, -1), (4, 4), (5, -1), (6, 0), (7, 1), (8, 2), (9, 1), (10, -1), (11, 2), (12, 8)]

Covered at level 3 : {6}

After reduction : 
 pending  : [4, 2, 12, 8, 9, 7, 11, 1]
 solution : [0, 3, 5]


Before reduction : 
 pending  : [4, 2, 12, 8, 9, 7, 11, 1]
 solution : [0, 3, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 2), (2, 8), (3, -1), (4, 4), (5, -1), (6, 0), (7, 1), (8, 2), (9, 1), (10, -1), (11, 2), (12, 8)]

After removed
 coverage : [(0, -1), (1, 2), (2, 8), (3, -1), (4, 4), (5, -1), (6, -1), (7, 1), (8, 2), (9, 1), (10, -1), (11, 2), (12, 8)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 2, 12, 8, 9, 7, 11, 1]
 solution : [0, 3, 5]


Solution : [0, 3, 5] has cost 20.


Decide in level 3 among pending : [4, 2, 12, 8, 9, 7, 11, 1]

Coverage : [(0, -1), (1, 2), (2, 8), (3, -1), (4, 4), (5, -1), (6, -1), (7, 1), (8, 2), (9, 1), (10, -1), (11, 2), (12, 8)]

Decide 2 with phase True at level 3

After decision at level 3
 pending : [4, 12, 8, 9, 7, 11, 1]
 solution : [0, 3, 5, 2]


New level: 4
 pending : [4, 12, 8, 9, 7, 11, 1]
 solution : [0, 3, 5, 2]


Before reduction : 
 pending  : [4, 12, 8, 9, 7, 11, 1]
 solution : [0, 3, 5, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 2), (2, 8), (3, -1), (4, 4), (5, -1), (6, -1), (7, 1), (8, 2), (9, 1), (10, -1), (11, 2), (12, 8)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, 2), (9, 1), (10, -1), (11, 1), (12, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 12, 8, 9, 7, 11, 1]
 solution : [0, 3, 5, 2]


Solution : [0, 3, 5, 2] has cost 25.


Decide in level 4 among pending : [4, 12, 8, 9, 7, 11, 1]

Coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, 2), (9, 1), (10, -1), (11, 1), (12, 2)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [4, 8, 9, 7, 11, 1]
 solution : [0, 3, 5, 2, 12]


New level: 5
 pending : [4, 8, 9, 7, 11, 1]
 solution : [0, 3, 5, 2, 12]


Before reduction : 
 pending  : [4, 8, 9, 7, 11, 1]
 solution : [0, 3, 5, 2, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, 2), (9, 1), (10, -1), (11, 1), (12, 2)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1)]

Covered at level 5 : {8, 9, 11}

After reduction : 
 pending  : [4, 7, 1]
 solution : [0, 3, 5, 2, 12]


Before reduction : 
 pending  : [4, 7, 1]
 solution : [0, 3, 5, 2, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 7, 1]
 solution : [0, 3, 5, 2, 12]


Solution : [0, 3, 5, 2, 12] has cost 31.


Before backtrack at level 5
 pending : [4, 7, 1]
 solution : [0, 3, 5, 2, 12]

After backtrack at level 5
 pending : [4, 7, 1, 8, 9, 11]
 solution : [0, 3, 5, 2, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [4, 7, 1, 8, 9, 11]
 solution : [0, 3, 5, 2]


Before reduction : 
 pending  : [4, 7, 1, 8, 9, 11]
 solution : [0, 3, 5, 2]

Essensial at level 5 : {8}

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1)]

Covered at level 5 : {9, 11}

After reduction : 
 pending  : [4, 7, 1]
 solution : [0, 3, 5, 2, 8]


Before reduction : 
 pending  : [4, 7, 1]
 solution : [0, 3, 5, 2, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 7, 1]
 solution : [0, 3, 5, 2, 8]


Solution : [0, 3, 5, 2, 8] has cost 31.


Before backtrack at level 5
 pending : [4, 7, 1]
 solution : [0, 3, 5, 2, 8]

After backtrack at level 5
 pending : [4, 7, 1, 8, 9, 11]
 solution : [0, 3, 5, 2]


Before backtrack at level 4
 pending : [4, 7, 1, 8, 9, 11]
 solution : [0, 3, 5, 2]

After backtrack at level 4
 pending : [4, 7, 1, 8, 9, 11, 12]
 solution : [0, 3, 5, 2]


Invert decision for 2 at level 3


New level: 4
 pending : [4, 7, 1, 8, 9, 11, 12]
 solution : [0, 3, 5]


Before reduction : 
 pending  : [4, 7, 1, 8, 9, 11, 12]
 solution : [0, 3, 5]

Essensial at level 4 : {12}

Before removed
 coverage : [(0, -1), (1, 1), (2, -1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, -1), (4, 4), (5, -1), (6, -1), (7, 1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1)]

Covered at level 4 : {8, 9, 11}

After reduction : 
 pending  : [4, 7, 1]
 solution : [0, 3, 5, 12]


Before reduction : 
 pending  : [4, 7, 1]
 solution : [0, 3, 5, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, -1), (4, 4), (5, -1), (6, -1), (7, 1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, -1), (4, 4), (5, -1), (6, -1), (7, 1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 7, 1]
 solution : [0, 3, 5, 12]


Solution : [0, 3, 5, 12] has cost 26.


Before backtrack at level 4
 pending : [4, 7, 1]
 solution : [0, 3, 5, 12]

After backtrack at level 4
 pending : [4, 7, 1, 12, 8, 9, 11]
 solution : [0, 3, 5]


Before backtrack at level 3
 pending : [4, 7, 1, 12, 8, 9, 11]
 solution : [0, 3, 5]

After backtrack at level 3
 pending : [4, 7, 1, 12, 8, 9, 11, 6, 2]
 solution : [0, 3, 5]


Invert decision for 5 at level 2


New level: 3
 pending : [4, 7, 1, 12, 8, 9, 11, 6, 2]
 solution : [0, 3]


Before reduction : 
 pending  : [4, 7, 1, 12, 8, 9, 11, 6, 2]
 solution : [0, 3]

Essensial at level 3 : {8}

Before removed
 coverage : [(0, -1), (1, 2), (2, -1), (3, -1), (4, 4), (5, -1), (6, -1), (7, 1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, -1), (6, 2), (7, 8), (8, -1), (9, 0), (10, -1), (11, 2), (12, 8)]

Covered at level 3 : {9}

After reduction : 
 pending  : [4, 7, 1, 12, 11, 6, 2]
 solution : [0, 3, 8]


Before reduction : 
 pending  : [4, 7, 1, 12, 11, 6, 2]
 solution : [0, 3, 8]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, -1), (6, 2), (7, 8), (8, -1), (9, 0), (10, -1), (11, 2), (12, 8)]

After removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, -1), (6, 2), (7, 8), (8, -1), (9, -1), (10, -1), (11, 2), (12, 8)]

Covered at level 3 : set()

After reduction : 
 pending  : [4, 7, 1, 12, 11, 6, 2]
 solution : [0, 3, 8]


Solution : [0, 3, 8] has cost 13.


Decide in level 3 among pending : [4, 7, 1, 12, 11, 6, 2]

Coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, -1), (6, 2), (7, 8), (8, -1), (9, -1), (10, -1), (11, 2), (12, 8)]

Decide 7 with phase True at level 3

After decision at level 3
 pending : [4, 1, 12, 11, 6, 2]
 solution : [0, 3, 8, 7]


New level: 4
 pending : [4, 1, 12, 11, 6, 2]
 solution : [0, 3, 8, 7]


Before reduction : 
 pending  : [4, 1, 12, 11, 6, 2]
 solution : [0, 3, 8, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, 8), (2, 8), (3, -1), (4, 4), (5, -1), (6, 2), (7, 8), (8, -1), (9, -1), (10, -1), (11, 2), (12, 8)]

After removed
 coverage : [(0, -1), (1, 4), (2, 8), (3, -1), (4, 4), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2), (12, 8)]

Covered at level 4 : set()

After reduction : 
 pending  : [4, 1, 12, 11, 6, 2]
 solution : [0, 3, 8, 7]


Solution : [0, 3, 8, 7] has cost 19.


Decide in level 4 among pending : [4, 1, 12, 11, 6, 2]

Coverage : [(0, -1), (1, 4), (2, 8), (3, -1), (4, 4), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2), (12, 8)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [4, 1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12]


New level: 5
 pending : [4, 1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12]


Before reduction : 
 pending  : [4, 1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 4), (2, 8), (3, -1), (4, 4), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 2), (12, 8)]

After removed
 coverage : [(0, -1), (1, 4), (2, 4), (3, -1), (4, 4), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12]


Solution : [0, 3, 8, 7, 12] has cost 25.


Decide in level 5 among pending : [4, 1, 11, 6, 2]

Coverage : [(0, -1), (1, 4), (2, 4), (3, -1), (4, 4), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, -1)]

Decide 4 with phase True at level 5

After decision at level 5
 pending : [1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12, 4]


New level: 6
 pending : [1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12, 4]


Before reduction : 
 pending  : [1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, 4), (2, 4), (3, -1), (4, 4), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 2), (2, 2), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12, 4]


Solution : [0, 3, 8, 7, 12, 4] has cost 27.


Before backtrack at level 6
 pending : [1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12, 4]

After backtrack at level 6
 pending : [1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12, 4]


Invert decision for 4 at level 5


New level: 6
 pending : [1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12]


Before reduction : 
 pending  : [1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, 2), (2, 2), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 4), (2, 4), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [1, 11, 6, 2]
 solution : [0, 3, 8, 7, 12]


Solution : [0, 3, 8, 7, 12] has cost 25.


Decide in level 6 among pending : [1, 11, 6, 2]

Coverage : [(0, -1), (1, 4), (2, 4), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, -1)]

Decide 1 with phase True at level 6

After decision at level 6
 pending : [11, 6, 2]
 solution : [0, 3, 8, 7, 12, 1]


New level: 7
 pending : [11, 6, 2]
 solution : [0, 3, 8, 7, 12, 1]


Before reduction : 
 pending  : [11, 6, 2]
 solution : [0, 3, 8, 7, 12, 1]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, 4), (2, 4), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

Covered at level 7 : {2, 11, 6}

After reduction : 
 pending  : []
 solution : [0, 3, 8, 7, 12, 1]


Before reduction : 
 pending  : []
 solution : [0, 3, 8, 7, 12, 1]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 8, 7, 12, 1]


Solution : [0, 3, 8, 7, 12, 1] has cost 28.


Before backtrack at level 7
 pending : []
 solution : [0, 3, 8, 7, 12, 1]

After backtrack at level 7
 pending : [11, 6, 2]
 solution : [0, 3, 8, 7, 12, 1]


Invert decision for 1 at level 6


New level: 7
 pending : [11, 6, 2]
 solution : [0, 3, 8, 7, 12]


Before reduction : 
 pending  : [11, 6, 2]
 solution : [0, 3, 8, 7, 12]

Essensial at level 7 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

Covered at level 7 : {11, 6}

After reduction : 
 pending  : []
 solution : [0, 3, 8, 7, 12, 2]


Before reduction : 
 pending  : []
 solution : [0, 3, 8, 7, 12, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 8, 7, 12, 2]


Solution : [0, 3, 8, 7, 12, 2] has cost 30.


Before backtrack at level 7
 pending : []
 solution : [0, 3, 8, 7, 12, 2]

After backtrack at level 7
 pending : [2, 11, 6]
 solution : [0, 3, 8, 7, 12]


Before backtrack at level 6
 pending : [2, 11, 6]
 solution : [0, 3, 8, 7, 12]

After backtrack at level 6
 pending : [2, 11, 6, 1]
 solution : [0, 3, 8, 7, 12]


Before backtrack at level 5
 pending : [2, 11, 6, 1]
 solution : [0, 3, 8, 7, 12]

After backtrack at level 5
 pending : [2, 11, 6, 1, 4]
 solution : [0, 3, 8, 7, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [2, 11, 6, 1, 4]
 solution : [0, 3, 8, 7]


Before reduction : 
 pending  : [2, 11, 6, 1, 4]
 solution : [0, 3, 8, 7]

Essensial at level 5 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

Covered at level 5 : {1, 11, 4, 6}

After reduction : 
 pending  : []
 solution : [0, 3, 8, 7, 2]


Before reduction : 
 pending  : []
 solution : [0, 3, 8, 7, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, 0), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 8, 7, 2]


Solution : [0, 3, 8, 7, 2] has cost 24.


Before backtrack at level 5
 pending : []
 solution : [0, 3, 8, 7, 2]

After backtrack at level 5
 pending : [2, 11, 6, 1, 4]
 solution : [0, 3, 8, 7]


Before backtrack at level 4
 pending : [2, 11, 6, 1, 4]
 solution : [0, 3, 8, 7]

After backtrack at level 4
 pending : [2, 11, 6, 1, 4, 12]
 solution : [0, 3, 8, 7]


Invert decision for 7 at level 3


New level: 4
 pending : [2, 11, 6, 1, 4, 12]
 solution : [0, 3, 8]


Before reduction : 
 pending  : [2, 11, 6, 1, 4, 12]
 solution : [0, 3, 8]

Essensial at level 4 : {1}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, -1), (4, 1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, 8)]

Covered at level 4 : {6}

After reduction : 
 pending  : [2, 11, 4, 12]
 solution : [0, 3, 8, 1]


Before reduction : 
 pending  : [2, 11, 4, 12]
 solution : [0, 3, 8, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, -1), (4, 1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, 8)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 11, 4, 12]
 solution : [0, 3, 8, 1]


Solution : [0, 3, 8, 1] has cost 16.


Decide in level 4 among pending : [2, 11, 4, 12]

Coverage : [(0, -1), (1, -1), (2, 4), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, 8)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [2, 11, 4]
 solution : [0, 3, 8, 1, 12]


New level: 5
 pending : [2, 11, 4]
 solution : [0, 3, 8, 1, 12]


Before reduction : 
 pending  : [2, 11, 4]
 solution : [0, 3, 8, 1, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 1), (12, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

Covered at level 5 : {2, 11, 4}

After reduction : 
 pending  : []
 solution : [0, 3, 8, 1, 12]


Before reduction : 
 pending  : []
 solution : [0, 3, 8, 1, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 8, 1, 12]


Solution : [0, 3, 8, 1, 12] has cost 22.


Before backtrack at level 5
 pending : []
 solution : [0, 3, 8, 1, 12]

After backtrack at level 5
 pending : [2, 11, 4]
 solution : [0, 3, 8, 1, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [2, 11, 4]
 solution : [0, 3, 8, 1]


Before reduction : 
 pending  : [2, 11, 4]
 solution : [0, 3, 8, 1]

Essensial at level 5 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

Covered at level 5 : {11, 4}

After reduction : 
 pending  : []
 solution : [0, 3, 8, 1, 2]


Before reduction : 
 pending  : []
 solution : [0, 3, 8, 1, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 3, 8, 1, 2]


Solution : [0, 3, 8, 1, 2] has cost 21.


Before backtrack at level 5
 pending : []
 solution : [0, 3, 8, 1, 2]

After backtrack at level 5
 pending : [2, 11, 4]
 solution : [0, 3, 8, 1]


Before backtrack at level 4
 pending : [2, 11, 4]
 solution : [0, 3, 8, 1]

After backtrack at level 4
 pending : [2, 11, 4, 1, 6, 12]
 solution : [0, 3, 8]


Before backtrack at level 3
 pending : [2, 11, 4, 1, 6, 12]
 solution : [0, 3, 8]

After backtrack at level 3
 pending : [2, 11, 4, 1, 6, 12, 8, 9, 7]
 solution : [0, 3]


Before backtrack at level 2
 pending : [2, 11, 4, 1, 6, 12, 8, 9, 7]
 solution : [0, 3]

After backtrack at level 2
 pending : [2, 11, 4, 1, 6, 12, 8, 9, 7, 5]
 solution : [0, 3]


Before backtrack at level 1
 pending : [2, 11, 4, 1, 6, 12, 8, 9, 7, 5]
 solution : [0, 3]

After backtrack at level 1
 pending : [2, 11, 4, 1, 6, 12, 8, 9, 7, 5, 10]
 solution : [0, 3]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=2]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 21

[MIN NOTE]: maximum branch and bound depth: 7

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 3, 8, 1, 2] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_3] forall NODE0,NODE1. sent(NODE1,NODE0) | ~allowed_in(NODE0) | NODE0 = NODE1 # qcost: 5

invariant [invar_8] forall NODE0,NODE1. allowed_in(NODE1) | allowed_in(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1 # qcost: 6

invariant [invar_1] forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0) # qcost: 3

invariant [invar_2] forall NODE0,NODE1. ~allowed_in(NODE0) | internal(NODE1) | NODE0 = NODE1 # qcost: 5




[QRM NOTE]: Time elapsed since start: 0.473 seconds

[QRM NOTE]: Time elapsed since last: 0.128 seconds

[QRM NOTE]: Peak memory: 1772021 bytes


===========================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/firewall: node=2]

===========================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.487 seconds

[QRM NOTE]: Time elapsed since last: 0.014 seconds

[QRM NOTE]: Peak memory: 728318 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=2]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_2.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 39: invar_3
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 40: invar_8
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 41: invar_1
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 42: invar_2

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 39: invar_3 ... PASS
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 40: invar_8 ... PASS
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 41: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_2.0.ivy: line 42: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 39: invar_3 ... FAIL
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 40: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 41: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 42: invar_2 ... FAIL
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 39: invar_3 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 40: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 41: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 42: invar_2 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_2.0.ivy: line 26: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 2.820 seconds

[QRM NOTE]: Time elapsed since last: 2.333 seconds

[QRM NOTE]: Peak memory: 777560 bytes


***************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/firewall: node=2

***************************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.node_2.0.ivy -s node=3 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/firewall.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm firewall.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_3.finite.cpp firewall.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_3.finite.o firewall.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 18

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 6.403 seconds

[QRM NOTE]: Time elapsed since last: 6.403 seconds

[QRM NOTE]: Peak memory: 1176607 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        68

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 52


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: internal('node',)
predicate: allowed_in('node',)
predicate: sent('node', 'node')
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)']
representative states : 0, 3584, 1536, 512, 7176, 7240, 7242, 7246, 7178, 7182, 7180, 5128, 14528, 14532, 14564, 5130


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000111000000000
lex min decimal: 3584
states:
000111000000000




=== State Orbit 2 =====================
size : 3
repr state: 000011000000000
lex min decimal: 1536
states:
000110000000000
000101000000000
000011000000000




=== State Orbit 3 =====================
size : 3
repr state: 000001000000000
lex min decimal: 512
states:
000001000000000
000100000000000
000010000000000




=== State Orbit 4 =====================
size : 6
repr state: 100011000100000
lex min decimal: 7176
states:
010101010000000
010101000000010
100011000000100
001110000001000
001110001000000
100011000100000




=== State Orbit 5 =====================
size : 3
repr state: 100011000100100
lex min decimal: 7240
states:
010101010000010
001110001001000
100011000100100




=== State Orbit 6 =====================
size : 6
repr state: 100011010100100
lex min decimal: 7242
states:
100011001100100
100011010100100
001110001001100
010101010100010
010101010001010
001110001001010




=== State Orbit 7 =====================
size : 3
repr state: 100011011100100
lex min decimal: 7246
states:
100011011100100
010101010101010
001110001001110




=== State Orbit 8 =====================
size : 6
repr state: 100011010100000
lex min decimal: 7178
states:
001110001000100
100011001000100
100011010100000
010101010100000
001110000001010
010101000001010




=== State Orbit 9 =====================
size : 6
repr state: 100011011100000
lex min decimal: 7182
states:
100011011000100
001110000001110
100011011100000
001110001000110
010101010101000
010101000101010




=== State Orbit 10 =====================
size : 6
repr state: 100011001100000
lex min decimal: 7180
states:
001110000001100
001110001000010
010101000100010
100011010000100
100011001100000
010101010001000




=== State Orbit 11 =====================
size : 6
repr state: 100001000000100
lex min decimal: 5128
states:
010100010000000
010001000000010
100010000100000
001010000001000
001100001000000
100001000000100




=== State Orbit 12 =====================
size : 3
repr state: 110001000000110
lex min decimal: 14528
states:
110001000000110
011100011000000
101010000101000




=== State Orbit 13 =====================
size : 6
repr state: 110001001000110
lex min decimal: 14532
states:
110001001000110
110001000001110
011100011100000
101010000101010
101010010101000
011100011000100




=== State Orbit 14 =====================
size : 3
repr state: 110001001001110
lex min decimal: 14564
states:
011100011100100
101010010101010
110001001001110




=== State Orbit 15 =====================
size : 6
repr state: 100001001000100
lex min decimal: 5130
states:
100010010100000
010001000001010
001010000001010
001100001000100
100001001000100
010100010100000



[QRM NOTE]: Time elapsed since start: 6.526 seconds

[QRM NOTE]: Time elapsed since last: 0.123 seconds

[QRM NOTE]: Peak memory: 1226751 bytes


============================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/firewall: node=3]

============================================================================================================

Representatitive states in reachability not in Rmin

{14528, 14564, 14532, 7176, 5128, 7178, 5130, 7180, 7182}

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.562 seconds

[QRM NOTE]: Time elapsed since last: 0.036 seconds

[QRM NOTE]: Peak memory: 196687 bytes

next size: node=3


************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/firewall: node=3

************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.ivy -s node=3 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/firewall.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.020 seconds

[QRM NOTE]: Time elapsed since last: 0.020 seconds

[QRM NOTE]: Peak memory: 19660 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : -1--1----------
3     : ['allowed_in(node1)', 'internal(node1)']
4     : --1--1---------
4     : ['allowed_in(node2)', 'internal(node2)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
6 (*) : --100----------
6     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
7     : -1-0-0---------
7     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
8     : 1---00---------
8     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
9 (*) : --1-0---0------
9     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
10     : -1---0-0-------
10     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
11     : --10-------0---
11     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
12     : 1----0---0-----
12     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
13     : -1-0---------0-
13     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
14     : 1---0-------0--
14     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
15 (*) : -0--0------1---
15     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
16     : --0--0-------1-
16     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
17     : 0--0----1------
17     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
18     : --0--0------1--
18     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
19     : 0--0---1-------
19     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
20     : -0--0----1-----
20     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
42 (*) : -0--0--------1-
42     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
43     : --0--0-----1---
43     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
44     : 0--0--------1--
44     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
45     : --0--0--1------
45     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
46     : 0--0-----1-----
46     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
47     : -0--0--1-------
47     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
21 (*) : ----00-----1---
21     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
22     : ----00-------1-
22     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
23     : ---0-0--1------
23     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
24     : ---0-0------1--
24     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
25     : ---00--1-------
25     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
26     : ---00----1-----
26     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
27 (*) : --1-0------1---
27     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
28     : -1---0-------1-
28     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
29     : --10----1------
29     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
30     : 1----0------1--
30     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
31     : -1-0---1-------
31     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
32     : 1---0----1-----
32     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
36 (*) : --1-0--------1-
36     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
37     : -1---0-----1---
37     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
38     : --10--------1--
38     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
39     : 1----0--1------
39     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
40     : -1-0-----1-----
40     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
41     : 1---0--1-------
41     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
33 (*) : 1-1-0----------
33     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
34     : 11---0---------
34     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
35     : -110-----------
35     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
48 (*) : --1-----0--0---
48     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
49     : -1-----0-----0-
49     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
50     : 1--------0--0--
50     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
51 (*) : -11-----0------
51     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
52     : -11----0-------
52     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
53     : 1-1--------0---
53     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
54     : 1-1------0-----
54     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
55     : 11-----------0-
55     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
56     : 11----------0--
56     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 2
57 (*) : -0---1-----1---
57     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
58     : --0-1--------1-
58     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
59     : 0----1--1------
59     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
60     : --01--------1--
60     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
61     : 0---1--1-------
61     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
62     : -0-1-----1-----
62     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
75 (*) : --0-1------1---
75     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
76     : -0---1-------1-
76     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
77     : --01----1------
77     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
78     : 0----1------1--
78     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
79     : -0-1---1-------
79     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
80     : 0---1----1-----
80     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
63 (*) : ----11-----1---
63     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
64     : ----11-------1-
64     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
65     : ---1-1--1------
65     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
66     : ---1-1------1--
66     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
67     : ---11--1-------
67     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
68     : ---11----1-----
68     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
69 (*) : -00--------1---
69     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
70     : -00----------1-
70     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
71     : 0-0-----1------
71     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
72     : 0-0---------1--
72     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
73     : 00-----1-------
73     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
74     : 00-------1-----
74     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
81 (*) : -11--------1---
81     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
82     : -11----------1-
82     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
83     : 1-1-----1------
83     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
84     : 1-1---------1--
84     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
85     : 11-----1-------
85     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
86     : 11-------1-----
86     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 8
num_suborbits: 2
87 (*) : ---------1-11--
87     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
88     : ---------1--11-
88     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
89     : -------11----1-
89     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
90     : -------1----11-
90     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
91     : -------11--1---
91     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
92     : --------11-1---
92     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
93 (*) : --------11---1-
93     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
94     : -------1---11--
94     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 3
96 (*) : 0-1----10------
96     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
97     : 01-----01------
97     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
98     : -01------1-0---
98     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
99     : 10-------0-1---
99     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
100     : -10---------10-
100     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
101     : 1-0---------01-
101     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
108 (*) : 0-1-----01-----
108     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
109     : 01-----0----1--
109     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
110     : -01----1---0---
110     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
111     : 10-------0---1-
111     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
112     : -10-----1----0-
112     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
113     : 1-0--------10--
113     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
120 (*) : 0-1----0-1-----
120     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
121     : 01------0---1--
121     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
122     : -01----1-0-----
122     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
123     : 10---------0-1-
123     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
124     : -10-----1---0--
124     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
125     : 1-0--------1-0-
125     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
102 (*) : 0-1----1---1---
102     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
103     : 01------1----1-
103     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
104     : -01-----11-----
104     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
105     : 10---------11--
105     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
106     : -10----1----1--
106     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
107     : 1-0------1---1-
107     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
114 (*) : 0-1------1-1---
114     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
115     : 01----------11-
115     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
116     : -01----11------
116     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
117     : 10----------11-
117     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
118     : -10----11------
118     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
119     : 1-0------1-1---
119     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
126 (*) : 0-1------1---1-
126     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
127     : 01---------11--
127     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
128     : -01----1----1--
128     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
129     : 10------1----1-
129     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
130     : -10-----11-----
130     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
131     : 1-0----1---1---
131     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
132 (*) : 0-1----1-----1-
132     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
133     : 01------1--1---
133     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
134     : -01------1--1--
134     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
135     : 10------1--1---
135     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
136     : -10------1--1--
136     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
137     : 1-0----1-----1-
137     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
138 (*) : --1-0--0-1-----
138     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
139     : -1---0--0---1--
139     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
140     : --10---1-0-----
140     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
141     : 1----0-----0-1-
141     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
142     : -1-0----1---0--
142     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
143     : 1---0------1-0-
143     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 18
num_suborbits: 3
144 (*) : --1-1----1-0---
144     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
145     : -1---1------10-
145     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
146     : --11---10------
146     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
147     : 1----1------01-
147     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
148     : -1-1---01------
148     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
149     : 1---1----0-1---
149     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
150 (*) : --1-1--1---0---
150     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
151     : -1---1--1----0-
151     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
152     : --11----01-----
152     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
153     : 1----1-----10--
153     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
154     : -1-1---0----1--
154     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
155     : 1---1----0---1-
155     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
192 (*) : --11---0-1-----
192     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
193     : -1-1----0---1--
193     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
194     : --1-1--1-0-----
194     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
195     : 1---1------0-1-
195     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
196     : -1---1--1---0--
196     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
197     : 1----1-----1-0-
197     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
156 (*) : --1----0-1-0---
156     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
157     : -1------0---10-
157     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
158     : --1----100-----
158     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
159     : 1----------001-
159     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
160     : -1-----01---0--
160     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
161     : 1--------0-1-0-
161     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
162 (*) : --1------1-0-1-
162     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
163     : -1---------110-
163     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
164     : --1----10---1--
164     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
165     : 1-------1---01-
165     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
166     : -1-----011-----
166     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
167     : 1------1-0-1---
167     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
168 (*) : --1----1---0-1-
168     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
169     : -1------1--1-0-
169     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
170     : --1-----01--1--
170     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
171     : 1-------1--10--
171     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
172     : -1-----0-1--1--
172     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
173     : 1------1-0---1-
173     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
174 (*) : --1----011-----
174     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
175     : -1-----10---1--
175     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
176     : --1----1-0-1---
176     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
177     : 1--------1-0-1-
177     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
178     : -1------1---01-
178     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
179     : 1----------110-
179     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
210 (*) : --1----0-1--1--
210     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
211     : -1------01--1--
211     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
212     : --1----1-0---1-
212     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
213     : 1------1---0-1-
213     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
214     : -1------1--10--
214     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
215     : 1-------1--1-0-
215     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
180 (*) : --1-1---11-----
180     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
181     : -1---1-1----1--
181     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
182     : --11---1---1---
182     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
183     : 1----1---1---1-
183     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
184     : -1-1----1----1-
184     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
185     : 1---1------11--
185     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
186 (*) : --1-1--11------
186     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
187     : -1---1-11------
187     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
188     : --11-----1-1---
188     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
189     : 1----1---1-1---
189     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
190     : -1-1--------11-
190     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
191     : 1---1-------11-
191     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
198 (*) : --11-----1---1-
198     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
199     : -1-1-------11--
199     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
200     : --1-1--1----1--
200     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
201     : 1---1---1----1-
201     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
202     : -1---1--11-----
202     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
203     : 1----1-1---1---
203     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
204 (*) : --11---1-----1-
204     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
205     : -1-1----1--1---
205     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
206     : --1-1----1--1--
206     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
207     : 1---1---1--1---
207     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
208     : -1---1---1--1--
208     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
209     : 1----1-1-----1-
209     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 24
num_suborbits: 4
216 (*) : ---0----1--1-0-
216     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
217     : ---0---1---0-1-
217     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
218     : ----0---1--10--
218     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
219     : ----0---01--1--
219     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
220     : -----0-1-0---1-
220     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
221     : -----0-0-1--1--
221     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
240 (*) : ---0----1--10--
240     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
241     : ---0---1-0---1-
241     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
242     : ----0---1--1-0-
242     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
243     : ----0--0-1--1--
243     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
244     : -----0-1---0-1-
244     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
245     : -----0--01--1--
245     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
258 (*) : ---0----1---01-
258     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
259     : ---0---1-0-1---
259     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
260     : ----0------110-
260     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
261     : ----0--011-----
261     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
262     : -----0---1-0-1-
262     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
263     : -----0-10---1--
263     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
282 (*) : ---0-------110-
282     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
283     : ---0-----1-0-1-
283     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
284     : ----0---1---01-
284     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
285     : ----0--10---1--
285     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
286     : -----0-1-0-1---
286     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
287     : -----0-011-----
287     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
222 (*) : ---0----10--0--
222     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
223     : ---0---1-0--0--
223     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
224     : ----0--0---1-0-
224     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
225     : ----0--0-1---0-
225     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
226     : -----0--0--0-1-
226     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
227     : -----0--0--01--
227     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
228 (*) : -0-0----1--1---
228     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
229     : --00---1-----1-
229     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
230     : 0---0---1--1---
230     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
231     : --0-0----1--1--
231     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
232     : 0----0-1-----1-
232     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
233     : -0---0---1--1--
233     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
246 (*) : -0-0----1----1-
246     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
247     : --00---1---1---
247     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
248     : 0---0------11--
248     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
249     : --0-0---11-----
249     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
250     : 0----0---1---1-
250     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
251     : -0---0-1----1--
251     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
288 (*) : -0-0-------11--
288     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
289     : --00-----1---1-
289     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
290     : 0---0---1----1-
290     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
291     : --0-0--1----1--
291     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
292     : 0----0-1---1---
292     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
293     : -0---0--11-----
293     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
300 (*) : -0-0--------11-
300     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
301     : --00-----1-1---
301     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
302     : 0---0-------11-
302     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
303     : --0-0--11------
303     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
304     : 0----0---1-1---
304     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
305     : -0---0-11------
305     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
234 (*) : ---01---1--1---
234     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
235     : ---0-1-1-----1-
235     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
236     : ---10---1--1---
236     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
237     : ----01---1--1--
237     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
238     : ---1-0-1-----1-
238     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
239     : ----10---1--1--
239     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
252 (*) : ---01---1----1-
252     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
253     : ---0-1-1---1---
253     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
254     : ---10------11--
254     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
255     : ----01--11-----
255     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
256     : ---1-0---1---1-
256     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
257     : ----10-1----1--
257     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
294 (*) : ---01------11--
294     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
295     : ---0-1---1---1-
295     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
296     : ---10---1----1-
296     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
297     : ----01-1----1--
297     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
298     : ---1-0-1---1---
298     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
299     : ----10--11-----
299     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
306 (*) : ---01-------11-
306     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
307     : ---0-1---1-1---
307     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
308     : ---10-------11-
308     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
309     : ----01-11------
309     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
310     : ---1-0---1-1---
310     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
311     : ----10-11------
311     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
264 (*) : -0-0-------0-1-
264     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
265     : --00-------1-0-
265     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
266     : 0---0---0---1--
266     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
267     : --0-0---1---0--
267     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
268     : 0----0-0-1-----
268     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
269     : -0---0-1-0-----
269     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
270 (*) : ---01------0-1-
270     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
271     : ---0-1-----1-0-
271     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
272     : ---10---0---1--
272     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
273     : ----01--1---0--
273     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
274     : ---1-0-0-1-----
274     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
275     : ----10-1-0-----
275     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
276 (*) : ---0-0-----0-1-
276     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
277     : ---00------1-0-
277     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
278     : ----00--0---1--
278     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
279     : ---00---1---0--
279     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
280     : ----00-0-1-----
280     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
281     : ---0-0-1-0-----
281     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 12
num_suborbits: 2
312 (*) : -0-----1-0---1-
312     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
313     : --0-----1--10--
313     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
314     : 0------0-1--1--
314     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
315     : --0-----1--1-0-
315     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
316     : 0-------01--1--
316     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
317     : -0-----1---0-1-
317     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
324 (*) : -0-----1-0-1---
324     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
325     : --0-----1---01-
325     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
326     : 0------011-----
326     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
327     : --0--------110-
327     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
328     : 0------10---1--
328     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
329     : -0-------1-0-1-
329     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 12
num_suborbits: 2
318 (*) : ----1--1-0---1-
318     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
319     : -----1--1--10--
319     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
320     : ---1---0-1--1--
320     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
321     : -----1--1--1-0-
321     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
322     : ---1----01--1--
322     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
323     : ----1--1---0-1-
323     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
330 (*) : ----1--1-0-1---
330     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
331     : -----1--1---01-
331     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
332     : ---1---011-----
332     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
333     : -----1-----110-
333     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
334     : ---1---10---1--
334     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
335     : ----1----1-0-1-
335     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
336 (*) : -0-----1-0--0--
336     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
337     : --0-----10--0--
337     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
338     : 0------0-1---0-
338     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
339     : --0----0---1-0-
339     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
340     : 0-------0--01--
340     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
341     : -0------0--0-1-
341     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
342 (*) : ----1--1-0--0--
342     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
343     : -----1--10--0--
343     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
344     : ---1---0-1---0-
344     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
345     : -----1-0---1-0-
345     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
346     : ---1----0--01--
346     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
347     : ----1---0--0-1-
347     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 62

[PRIME NOTE]: number of primes: 348

[QRM NOTE]: Time elapsed since start: 0.096 seconds

[QRM NOTE]: Time elapsed since last: 0.075 seconds

[QRM NOTE]: Peak memory: 1386890 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=3]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {0, 8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 384), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 384), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8]

[QRM NOTE]: Time elapsed since start: 0.112 seconds

[QRM NOTE]: Time elapsed since last: 0.017 seconds

[QRM NOTE]: Peak memory: 326210 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=3]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node2,node2)']

sign_func_name2args: {'0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node2,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
48 (*) : --1-----0--0---
48     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
49     : -1-----0-----0-
49     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
50     : 1--------0--0--
50     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1}

	identical_multi_classes: {'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))


---------- Quantifier Inference: orbit 8 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : -1--1----------
3     : ['allowed_in(node1)', 'internal(node1)']
4     : --1--1---------
4     : ['allowed_in(node2)', 'internal(node2)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
6 (*) : --100----------
6     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
7     : -1-0-0---------
7     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
8     : 1---00---------
8     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
9 (*) : --1-0---0------
9     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
10     : -1---0-0-------
10     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
11     : --10-------0---
11     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
12     : 1----0---0-----
12     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
13     : -1-0---------0-
13     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
14     : 1---0-------0--
14     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | internal(NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 3 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
15 (*) : -0--0------1---
15     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
16     : --0--0-------1-
16     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
17     : 0--0----1------
17     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
18     : --0--0------1--
18     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
19     : 0--0---1-------
19     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
20     : -0--0----1-----
20     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
42 (*) : -0--0--------1-
42     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
43     : --0--0-----1---
43     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
44     : 0--0--------1--
44     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
45     : --0--0--1------
45     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
46     : 0--0-----1-----
46     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
47     : -0--0--1-------
47     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node1)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node1)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', '~allowed_in(NODE2)', 'sent(NODE0,NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. internal(NODE2) | allowed_in(NODE2) | ~sent(NODE0,NODE1) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 4 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
21 (*) : ----00-----1---
21     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
22     : ----00-------1-
22     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
23     : ---0-0--1------
23     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
24     : ---0-0------1--
24     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
25     : ---00--1-------
25     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
26     : ---00----1-----
26     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~internal(node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~internal(node2)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$0], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$0, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE1)', 'sent(NODE0,NODE1)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. internal(NODE1) | ~sent(NODE0,NODE1) | internal(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 5 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
27 (*) : --1-0------1---
27     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
28     : -1---0-------1-
28     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
29     : --10----1------
29     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
30     : 1----0------1--
30     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
31     : -1-0---1-------
31     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
32     : 1---0----1-----
32     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
36 (*) : --1-0--------1-
36     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
37     : -1---0-----1---
37     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
38     : --10--------1--
38     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
39     : 1----0--1------
39     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
40     : -1-0-----1-----
40     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
41     : 1---0--1-------
41     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node1)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node1)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node1)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', '~internal(NODE3)', 'allowed_in(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE1,NODE2) | internal(NODE3) | ~allowed_in(NODE0) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


---------- Quantifier Inference: orbit 6 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
33 (*) : 1-1-0----------
33     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
34     : 11---0---------
34     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
35     : -110-----------
35     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 2, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))


---------- Quantifier Inference: orbit 7 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
51 (*) : -11-----0------
51     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
52     : -11----0-------
52     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
53     : 1-1--------0---
53     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
54     : 1-1------0-----
54     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
55     : 11-----------0-
55     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
56     : 11----------0--
56     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$1; node$1$sent$1$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$1; node$1$sent$1$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', 'allowed_in(NODE0)', '~sent(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~allowed_in(NODE1) | ~allowed_in(NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 9 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 2
57 (*) : -0---1-----1---
57     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
58     : --0-1--------1-
58     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
59     : 0----1--1------
59     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
60     : --01--------1--
60     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
61     : 0---1--1-------
61     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
62     : -0-1-----1-----
62     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
75 (*) : --0-1------1---
75     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
76     : -0---1-------1-
76     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
77     : --01----1------
77     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
78     : 0----1------1--
78     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
79     : -0-1---1-------
79     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
80     : 0---1----1-----
80     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'internal(node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'internal(node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'internal(node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'internal(NODE0)', '~allowed_in(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE1,NODE2) | ~internal(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


---------- Quantifier Inference: orbit 10 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
63 (*) : ----11-----1---
63     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
64     : ----11-------1-
64     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
65     : ---1-1--1------
65     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
66     : ---1-1------1--
66     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
67     : ---11--1-------
67     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
68     : ---11----1-----
68     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$0': [node$0$internal$0$0; node$0$sent$0$0], 'node$0$internal$0; node$0$sent$1': [node$0$internal$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$0': node$0$internal$0$0; node$0$sent$0$0, 'node$0$internal$0; node$0$sent$1': node$0$internal$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE1)', 'internal(NODE0)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~internal(NODE1) | ~internal(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1


---------- Quantifier Inference: orbit 11 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
69 (*) : -00--------1---
69     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
70     : -00----------1-
70     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
71     : 0-0-----1------
71     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
72     : 0-0---------1--
72     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
73     : 00-----1-------
73     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
74     : 00-------1-----
74     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~allowed_in(node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~allowed_in(node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$0], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$0, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 12 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
81 (*) : -11--------1---
81     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
82     : -11----------1-
82     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
83     : 1-1-----1------
83     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
84     : 1-1---------1--
84     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
85     : 11-----1-------
85     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
86     : 11-------1-----
86     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$sent$0': [node$0$allowed_in$0$0; node$0$sent$0$0], 'node$0$allowed_in$0; node$0$sent$1': [node$0$allowed_in$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$sent$0': node$0$allowed_in$0$0; node$0$sent$0$0, 'node$0$allowed_in$0; node$0$sent$1': node$0$allowed_in$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', 'allowed_in(NODE1)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE0,NODE1) | ~allowed_in(NODE1) | ~allowed_in(NODE0) | NODE0 = NODE1


---------- Quantifier Inference: orbit 13 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 14 =====================
size : 8
num_suborbits: 2
87 (*) : ---------1-11--
87     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
88     : ---------1--11-
88     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
89     : -------11----1-
89     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
90     : -------1----11-
90     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
91     : -------11--1---
91     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
92     : --------11-1---
92     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
93 (*) : --------11---1-
93     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
94     : -------1---11--
94     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$2], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$0$2; node$0$sent$1$1, node$0$sent$1$0; node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$0$sent$1$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$2, node$0$sent$0$2; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2, node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$0$2 | node$0$sent$1$0 | node$0$sent$1$1 | node$0$sent$1$2}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE4)', 'sent(NODE2,NODE5)', 'sent(NODE0,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE4) | ~sent(NODE2,NODE5) | ~sent(NODE0,NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 14 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$2]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


---------- Quantifier Inference: orbit 15 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 16 =====================
size : 18
num_suborbits: 3
96 (*) : 0-1----10------
96     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
97     : 01-----01------
97     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
98     : -01------1-0---
98     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
99     : 10-------0-1---
99     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
100     : -10---------10-
100     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
101     : 1-0---------01-
101     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
108 (*) : 0-1-----01-----
108     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
109     : 01-----0----1--
109     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
110     : -01----1---0---
110     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
111     : 10-------0---1-
111     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
112     : -10-----1----0-
112     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
113     : 1-0--------10--
113     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
120 (*) : 0-1----0-1-----
120     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
121     : 01------0---1--
121     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
122     : -01----1-0-----
122     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
123     : 10---------0-1-
123     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
124     : -10-----1---0--
124     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
125     : 1-0--------1-0-
125     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', '~sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$sent$0': [node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$sent$0': node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', '~sent(NODE3,NODE4)', 'allowed_in(NODE0)', '~allowed_in(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE4,NODE2,NODE0. ~sent(NODE1,NODE2) | sent(NODE3,NODE4) | ~allowed_in(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 16 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
102 (*) : 0-1----1---1---
102     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
103     : 01------1----1-
103     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
104     : -01-----11-----
104     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
105     : 10---------11--
105     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
106     : -10----1----1--
106     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
107     : 1-0------1---1-
107     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
114 (*) : 0-1------1-1---
114     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
115     : 01----------11-
115     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
116     : -01----11------
116     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
117     : 10----------11-
117     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
118     : -10----11------
118     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
119     : 1-0------1-1---
119     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
126 (*) : 0-1------1---1-
126     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
127     : 01---------11--
127     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
128     : -01----1----1--
128     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
129     : 10------1----1-
129     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
130     : -10-----11-----
130     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
131     : 1-0----1---1---
131     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
132 (*) : 0-1----1-----1-
132     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
133     : 01------1--1---
133     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
134     : -01------1--1--
134     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
135     : 10------1--1---
135     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
136     : -10------1--1--
136     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
137     : 1-0----1-----1-
137     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', 'allowed_in(NODE0)', '~allowed_in(NODE5)', 'sent(NODE2,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE3:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE3) | ~allowed_in(NODE0) | allowed_in(NODE5) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 17 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
138 (*) : --1-0--0-1-----
138     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
139     : -1---0--0---1--
139     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
140     : --10---1-0-----
140     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
141     : 1----0-----0-1-
141     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
142     : -1-0----1---0--
142     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
143     : 1---0------1-0-
143     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'allowed_in(NODE0)', '~internal(NODE1)', '~sent(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | internal(NODE1) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 18 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 19 =====================
size : 18
num_suborbits: 3
144 (*) : --1-1----1-0---
144     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
145     : -1---1------10-
145     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
146     : --11---10------
146     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
147     : 1----1------01-
147     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
148     : -1-1---01------
148     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
149     : 1---1----0-1---
149     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
150 (*) : --1-1--1---0---
150     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
151     : -1---1--1----0-
151     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
152     : --11----01-----
152     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
153     : 1----1-----10--
153     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
154     : -1-1---0----1--
154     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
155     : 1---1----0---1-
155     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
192 (*) : --11---0-1-----
192     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
193     : -1-1----0---1--
193     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
194     : --1-1--1-0-----
194     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
195     : 1---1------0-1-
195     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
196     : -1---1--1---0--
196     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
197     : 1----1-----1-0-
197     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0; node$1$sent$0': [node$0$internal$0$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0; node$1$sent$0': node$0$internal$0$0; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE1)', 'sent(NODE2,NODE3)', 'allowed_in(NODE0)', '~sent(NODE1,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE4,NODE2,NODE0. ~internal(NODE1) | ~sent(NODE2,NODE3) | ~allowed_in(NODE0) | sent(NODE1,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 19 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
156 (*) : --1----0-1-0---
156     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
157     : -1------0---10-
157     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
158     : --1----100-----
158     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
159     : 1----------001-
159     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
160     : -1-----01---0--
160     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
161     : 1--------0-1-0-
161     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$0$1, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$1, node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$1, node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$1], 'node$0$sent$0; node$1$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$1, 'node$0$sent$0; node$1$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', '~sent(NODE1,NODE0)', 'allowed_in(NODE0)', '~sent(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE1,NODE2) | sent(NODE1,NODE0) | ~allowed_in(NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 20 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
162 (*) : --1------1-0-1-
162     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
163     : -1---------110-
163     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
164     : --1----10---1--
164     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
165     : 1-------1---01-
165     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
166     : -1-----011-----
166     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
167     : 1------1-0-1---
167     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
168 (*) : --1----1---0-1-
168     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
169     : -1------1--1-0-
169     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
170     : --1-----01--1--
170     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
171     : 1-------1--10--
171     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
172     : -1-----0-1--1--
172     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
173     : 1------1-0---1-
173     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
174 (*) : --1----011-----
174     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
175     : -1-----10---1--
175     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
176     : --1----1-0-1---
176     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
177     : 1--------1-0-1-
177     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
178     : -1------1---01-
178     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
179     : 1----------110-
179     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
210 (*) : --1----0-1--1--
210     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
211     : -1------01--1--
211     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
212     : --1----1-0---1-
212     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
213     : 1------1---0-1-
213     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
214     : -1------1--10--
214     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
215     : 1-------1--1-0-
215     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$1; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$1; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', 'allowed_in(NODE0)', '~sent(NODE4,NODE5)', 'sent(NODE2,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE3) | ~allowed_in(NODE0) | sent(NODE4,NODE5) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE5 | NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE0 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 21 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
180 (*) : --1-1---11-----
180     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
181     : -1---1-1----1--
181     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
182     : --11---1---1---
182     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
183     : 1----1---1---1-
183     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
184     : -1-1----1----1-
184     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
185     : 1---1------11--
185     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
186 (*) : --1-1--11------
186     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
187     : -1---1-11------
187     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
188     : --11-----1-1---
188     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
189     : 1----1---1-1---
189     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
190     : -1-1--------11-
190     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
191     : 1---1-------11-
191     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
198 (*) : --11-----1---1-
198     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
199     : -1-1-------11--
199     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
200     : --1-1--1----1--
200     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
201     : 1---1---1----1-
201     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
202     : -1---1--11-----
202     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
203     : 1----1-1---1---
203     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
204 (*) : --11---1-----1-
204     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
205     : -1-1----1--1---
205     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
206     : --1-1----1--1--
206     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
207     : 1---1---1--1---
207     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
208     : -1---1---1--1--
208     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
209     : 1----1-1-----1-
209     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0': node$0$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE1)', 'sent(NODE3,NODE5)', 'allowed_in(NODE0)', 'sent(NODE2,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~internal(NODE1) | ~sent(NODE3,NODE5) | ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE1 = NODE4 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 22 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 23 =====================
size : 24
num_suborbits: 4
216 (*) : ---0----1--1-0-
216     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
217     : ---0---1---0-1-
217     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
218     : ----0---1--10--
218     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
219     : ----0---01--1--
219     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
220     : -----0-1-0---1-
220     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
221     : -----0-0-1--1--
221     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
240 (*) : ---0----1--10--
240     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
241     : ---0---1-0---1-
241     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
242     : ----0---1--1-0-
242     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
243     : ----0--0-1--1--
243     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
244     : -----0-1---0-1-
244     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
245     : -----0--01--1--
245     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
258 (*) : ---0----1---01-
258     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
259     : ---0---1-0-1---
259     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
260     : ----0------110-
260     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
261     : ----0--011-----
261     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
262     : -----0---1-0-1-
262     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
263     : -----0-10---1--
263     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
282 (*) : ---0-------110-
282     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
283     : ---0-----1-0-1-
283     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
284     : ----0---1---01-
284     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
285     : ----0--10---1--
285     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
286     : -----0-1-0-1---
286     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
287     : -----0-011-----
287     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1, node$1$internal$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1 | node$1$internal$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', '~sent(NODE2,NODE5)', '~internal(NODE4)', 'sent(NODE0,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE3) | sent(NODE2,NODE5) | internal(NODE4) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 23 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
222 (*) : ---0----10--0--
222     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
223     : ---0---1-0--0--
223     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
224     : ----0--0---1-0-
224     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
225     : ----0--0-1---0-
225     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
226     : -----0--0--0-1-
226     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
227     : -----0--0--01--
227     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', 'sent(NODE0,NODE1)', '~internal(NODE0)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 24 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
228 (*) : -0-0----1--1---
228     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
229     : --00---1-----1-
229     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
230     : 0---0---1--1---
230     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
231     : --0-0----1--1--
231     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
232     : 0----0-1-----1-
232     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
233     : -0---0---1--1--
233     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
246 (*) : -0-0----1----1-
246     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
247     : --00---1---1---
247     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
248     : 0---0------11--
248     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
249     : --0-0---11-----
249     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
250     : 0----0---1---1-
250     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
251     : -0---0-1----1--
251     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
288 (*) : -0-0-------11--
288     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
289     : --00-----1---1-
289     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
290     : 0---0---1----1-
290     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
291     : --0-0--1----1--
291     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
292     : 0----0-1---1---
292     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
293     : -0---0--11-----
293     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
300 (*) : -0-0--------11-
300     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
301     : --00-----1-1---
301     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
302     : 0---0-------11-
302     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
303     : --0-0--11------
303     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
304     : 0----0---1-1---
304     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
305     : -0---0-11------
305     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$allowed_in$0': node$1$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', 'sent(NODE1,NODE3)', '~internal(NODE5)', '~allowed_in(NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | internal(NODE5) | allowed_in(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3))


---------- Quantifier Inference: orbit 25 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
234 (*) : ---01---1--1---
234     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
235     : ---0-1-1-----1-
235     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
236     : ---10---1--1---
236     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
237     : ----01---1--1--
237     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
238     : ---1-0-1-----1-
238     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
239     : ----10---1--1--
239     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
252 (*) : ---01---1----1-
252     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
253     : ---0-1-1---1---
253     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
254     : ---10------11--
254     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
255     : ----01--11-----
255     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
256     : ---1-0---1---1-
256     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
257     : ----10-1----1--
257     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
294 (*) : ---01------11--
294     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
295     : ---0-1---1---1-
295     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
296     : ---10---1----1-
296     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
297     : ----01-1----1--
297     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
298     : ---1-0-1---1---
298     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
299     : ----10--11-----
299     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
306 (*) : ---01-------11-
306     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
307     : ---0-1---1-1---
307     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
308     : ---10-------11-
308     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
309     : ----01-11------
309     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
310     : ---1-0---1-1---
310     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
311     : ----10-11------
311     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', 'internal(NODE0)', '~internal(NODE5)', 'sent(NODE2,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE3) | ~internal(NODE0) | internal(NODE5) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 26 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
264 (*) : -0-0-------0-1-
264     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
265     : --00-------1-0-
265     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
266     : 0---0---0---1--
266     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
267     : --0-0---1---0--
267     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
268     : 0----0-0-1-----
268     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
269     : -0---0-1-0-----
269     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~allowed_in(NODE1)', '~internal(NODE2)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | allowed_in(NODE1) | internal(NODE2) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 27 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
270 (*) : ---01------0-1-
270     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
271     : ---0-1-----1-0-
271     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
272     : ---10---0---1--
272     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
273     : ----01--1---0--
273     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
274     : ---1-0-0-1-----
274     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
275     : ----10-1-0-----
275     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'internal(node1)', '~sent(node1,node2)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'internal(NODE0)', '~sent(NODE0,NODE1)', 'sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. internal(NODE2) | ~internal(NODE0) | sent(NODE0,NODE1) | ~sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 28 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
276 (*) : ---0-0-----0-1-
276     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
277     : ---00------1-0-
277     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
278     : ----00--0---1--
278     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
279     : ---00---1---0--
279     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
280     : ----00-0-1-----
280     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
281     : ---0-0-1-0-----
281     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node2)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$1$sent$1$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node2)', '~sent(node1,node2)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~internal(NODE2)', '~sent(NODE1,NODE0)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | internal(NODE2) | sent(NODE1,NODE0) | internal(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 29 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 30 =====================
size : 12
num_suborbits: 2
312 (*) : -0-----1-0---1-
312     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
313     : --0-----1--10--
313     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
314     : 0------0-1--1--
314     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
315     : --0-----1--1-0-
315     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
316     : 0-------01--1--
316     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
317     : -0-----1---0-1-
317     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
324 (*) : -0-----1-0-1---
324     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
325     : --0-----1---01-
325     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
326     : 0------011-----
326     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
327     : --0--------110-
327     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
328     : 0------10---1--
328     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
329     : -0-------1-0-1-
329     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', '~allowed_in(NODE2)', '~sent(NODE2,NODE0)', 'sent(NODE0,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE1,NODE3) | allowed_in(NODE2) | sent(NODE2,NODE0) | ~sent(NODE0,NODE2) | ((NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 30 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 31 =====================
size : 12
num_suborbits: 2
318 (*) : ----1--1-0---1-
318     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
319     : -----1--1--10--
319     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
320     : ---1---0-1--1--
320     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
321     : -----1--1--1-0-
321     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
322     : ---1----01--1--
322     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
323     : ----1--1---0-1-
323     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
330 (*) : ----1--1-0-1---
330     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
331     : -----1--1---01-
331     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
332     : ---1---011-----
332     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
333     : -----1-----110-
333     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
334     : ---1---10---1--
334     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
335     : ----1----1-0-1-
335     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1': node$0$sent$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE0,NODE1)', 'internal(NODE0)', 'sent(NODE2,NODE3)', 'sent(NODE1,NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2,NODE3. sent(NODE0,NODE1) | ~internal(NODE0) | ~sent(NODE2,NODE3) | ~sent(NODE1,NODE0) | ((NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


---------- Quantifier Inference: orbit 31 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
336 (*) : -0-----1-0--0--
336     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
337     : --0-----10--0--
337     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
338     : 0------0-1---0-
338     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
339     : --0----0---1-0-
339     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
340     : 0-------0--01--
340     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
341     : -0------0--0-1-
341     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', '~sent(NODE1,NODE0)', 'sent(NODE0,NODE1)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. allowed_in(NODE1) | sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 32 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
342 (*) : ----1--1-0--0--
342     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
343     : -----1--10--0--
343     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
344     : ---1---0-1---0-
344     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
345     : -----1-0---1-0-
345     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
346     : ---1----0--01--
346     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
347     : ----1---0--0-1-
347     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE0,NODE1)', 'internal(NODE0)', 'sent(NODE1,NODE0)', '~sent(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. sent(NODE0,NODE1) | ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


---------- Quantifier Inference: orbit 33 ----------

[QI_CHECK RESULT]: PASS


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==========================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 8 =====================
size : 3
num_suborbits: 1
48 (*) : --1-----0--0---
48     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
49     : -1-----0-----0-
49     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
50     : 1--------0--0--
50     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : -1--1----------
3     : ['allowed_in(node1)', 'internal(node1)']
4     : --1--1---------
4     : ['allowed_in(node2)', 'internal(node2)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
6 (*) : --100----------
6     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
7     : -1-0-0---------
7     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
8     : 1---00---------
8     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
9 (*) : --1-0---0------
9     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
10     : -1---0-0-------
10     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
11     : --10-------0---
11     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
12     : 1----0---0-----
12     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
13     : -1-0---------0-
13     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
14     : 1---0-------0--
14     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | internal(NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
15 (*) : -0--0------1---
15     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
16     : --0--0-------1-
16     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
17     : 0--0----1------
17     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
18     : --0--0------1--
18     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
19     : 0--0---1-------
19     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
20     : -0--0----1-----
20     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
42 (*) : -0--0--------1-
42     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
43     : --0--0-----1---
43     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
44     : 0--0--------1--
44     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
45     : --0--0--1------
45     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
46     : 0--0-----1-----
46     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
47     : -0--0--1-------
47     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. internal(NODE2) | allowed_in(NODE2) | ~sent(NODE0,NODE1) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
21 (*) : ----00-----1---
21     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
22     : ----00-------1-
22     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
23     : ---0-0--1------
23     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
24     : ---0-0------1--
24     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
25     : ---00--1-------
25     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
26     : ---00----1-----
26     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. internal(NODE1) | ~sent(NODE0,NODE1) | internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
27 (*) : --1-0------1---
27     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
28     : -1---0-------1-
28     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
29     : --10----1------
29     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
30     : 1----0------1--
30     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
31     : -1-0---1-------
31     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
32     : 1---0----1-----
32     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
36 (*) : --1-0--------1-
36     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
37     : -1---0-----1---
37     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
38     : --10--------1--
38     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
39     : 1----0--1------
39     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
40     : -1-0-----1-----
40     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
41     : 1---0--1-------
41     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE1,NODE2) | internal(NODE3) | ~allowed_in(NODE0) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 13




=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
33 (*) : 1-1-0----------
33     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
34     : 11---0---------
34     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
35     : -110-----------
35     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
51 (*) : -11-----0------
51     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
52     : -11----0-------
52     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
53     : 1-1--------0---
53     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
54     : 1-1------0-----
54     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
55     : 11-----------0-
55     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
56     : 11----------0--
56     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NODE2. ~allowed_in(NODE1) | ~allowed_in(NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 10 =====================
size : 12
num_suborbits: 2
57 (*) : -0---1-----1---
57     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
58     : --0-1--------1-
58     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
59     : 0----1--1------
59     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
60     : --01--------1--
60     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
61     : 0---1--1-------
61     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
62     : -0-1-----1-----
62     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
75 (*) : --0-1------1---
75     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
76     : -0---1-------1-
76     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
77     : --01----1------
77     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
78     : 0----1------1--
78     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
79     : -0-1---1-------
79     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
80     : 0---1----1-----
80     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE1,NODE2) | ~internal(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 13




=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
63 (*) : ----11-----1---
63     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
64     : ----11-------1-
64     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
65     : ---1-1--1------
65     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
66     : ---1-1------1--
66     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
67     : ---11--1-------
67     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
68     : ---11----1-----
68     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~internal(NODE1) | ~internal(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
69 (*) : -00--------1---
69     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
70     : -00----------1-
70     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
71     : 0-0-----1------
71     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
72     : 0-0---------1--
72     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
73     : 00-----1-------
73     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
74     : 00-------1-----
74     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
81 (*) : -11--------1---
81     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
82     : -11----------1-
82     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
83     : 1-1-----1------
83     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
84     : 1-1---------1--
84     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
85     : 11-----1-------
85     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
86     : 11-------1-----
86     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE0,NODE1) | ~allowed_in(NODE1) | ~allowed_in(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 14 =====================
size : 8
num_suborbits: 2
87 (*) : ---------1-11--
87     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
88     : ---------1--11-
88     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
89     : -------11----1-
89     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
90     : -------1----11-
90     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
91     : -------11--1---
91     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
92     : --------11-1---
92     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
93 (*) : --------11---1-
93     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
94     : -------1---11--
94     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   6
num_exists :   0
num_literals : 15
quantified form : forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE4) | ~sent(NODE2,NODE5) | ~sent(NODE0,NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 21




=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 16 =====================
size : 18
num_suborbits: 3
96 (*) : 0-1----10------
96     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
97     : 01-----01------
97     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
98     : -01------1-0---
98     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
99     : 10-------0-1---
99     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
100     : -10---------10-
100     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
101     : 1-0---------01-
101     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
108 (*) : 0-1-----01-----
108     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
109     : 01-----0----1--
109     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
110     : -01----1---0---
110     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
111     : 10-------0---1-
111     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
112     : -10-----1----0-
112     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
113     : 1-0--------10--
113     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
120 (*) : 0-1----0-1-----
120     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
121     : 01------0---1--
121     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
122     : -01----1-0-----
122     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
123     : 10---------0-1-
123     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
124     : -10-----1---0--
124     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
125     : 1-0--------1-0-
125     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE1,NODE3,NODE4,NODE2,NODE0. ~sent(NODE1,NODE2) | sent(NODE3,NODE4) | ~allowed_in(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 24




=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
102 (*) : 0-1----1---1---
102     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
103     : 01------1----1-
103     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
104     : -01-----11-----
104     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
105     : 10---------11--
105     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
106     : -10----1----1--
106     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
107     : 1-0------1---1-
107     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
114 (*) : 0-1------1-1---
114     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
115     : 01----------11-
115     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
116     : -01----11------
116     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
117     : 10----------11-
117     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
118     : -10----11------
118     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
119     : 1-0------1-1---
119     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
126 (*) : 0-1------1---1-
126     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
127     : 01---------11--
127     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
128     : -01----1----1--
128     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
129     : 10------1----1-
129     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
130     : -10-----11-----
130     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
131     : 1-0----1---1---
131     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
132 (*) : 0-1----1-----1-
132     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
133     : 01------1--1---
133     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
134     : -01------1--1--
134     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
135     : 10------1--1---
135     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
136     : -10------1--1--
136     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
137     : 1-0----1-----1-
137     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE3) | ~allowed_in(NODE0) | allowed_in(NODE5) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 18 =====================
size : 6
num_suborbits: 1
138 (*) : --1-0--0-1-----
138     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
139     : -1---0--0---1--
139     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
140     : --10---1-0-----
140     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
141     : 1----0-----0-1-
141     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
142     : -1-0----1---0--
142     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
143     : 1---0------1-0-
143     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | internal(NODE1) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 19 =====================
size : 18
num_suborbits: 3
144 (*) : --1-1----1-0---
144     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
145     : -1---1------10-
145     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
146     : --11---10------
146     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
147     : 1----1------01-
147     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
148     : -1-1---01------
148     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
149     : 1---1----0-1---
149     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
150 (*) : --1-1--1---0---
150     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
151     : -1---1--1----0-
151     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
152     : --11----01-----
152     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
153     : 1----1-----10--
153     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
154     : -1-1---0----1--
154     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
155     : 1---1----0---1-
155     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
192 (*) : --11---0-1-----
192     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
193     : -1-1----0---1--
193     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
194     : --1-1--1-0-----
194     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
195     : 1---1------0-1-
195     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
196     : -1---1--1---0--
196     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
197     : 1----1-----1-0-
197     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE1,NODE3,NODE4,NODE2,NODE0. ~internal(NODE1) | ~sent(NODE2,NODE3) | ~allowed_in(NODE0) | sent(NODE1,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 24




=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
156 (*) : --1----0-1-0---
156     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
157     : -1------0---10-
157     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
158     : --1----100-----
158     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
159     : 1----------001-
159     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
160     : -1-----01---0--
160     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
161     : 1--------0-1-0-
161     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE1,NODE2) | sent(NODE1,NODE0) | ~allowed_in(NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
162 (*) : --1------1-0-1-
162     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
163     : -1---------110-
163     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
164     : --1----10---1--
164     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
165     : 1-------1---01-
165     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
166     : -1-----011-----
166     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
167     : 1------1-0-1---
167     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
168 (*) : --1----1---0-1-
168     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
169     : -1------1--1-0-
169     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
170     : --1-----01--1--
170     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
171     : 1-------1--10--
171     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
172     : -1-----0-1--1--
172     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
173     : 1------1-0---1-
173     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
174 (*) : --1----011-----
174     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
175     : -1-----10---1--
175     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
176     : --1----1-0-1---
176     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
177     : 1--------1-0-1-
177     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
178     : -1------1---01-
178     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
179     : 1----------110-
179     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
210 (*) : --1----0-1--1--
210     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
211     : -1------01--1--
211     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
212     : --1----1-0---1-
212     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
213     : 1------1---0-1-
213     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
214     : -1------1--10--
214     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
215     : 1-------1--1-0-
215     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE3) | ~allowed_in(NODE0) | sent(NODE4,NODE5) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE5 | NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE0 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
180 (*) : --1-1---11-----
180     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
181     : -1---1-1----1--
181     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
182     : --11---1---1---
182     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
183     : 1----1---1---1-
183     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
184     : -1-1----1----1-
184     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
185     : 1---1------11--
185     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
186 (*) : --1-1--11------
186     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
187     : -1---1-11------
187     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
188     : --11-----1-1---
188     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
189     : 1----1---1-1---
189     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
190     : -1-1--------11-
190     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
191     : 1---1-------11-
191     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
198 (*) : --11-----1---1-
198     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
199     : -1-1-------11--
199     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
200     : --1-1--1----1--
200     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
201     : 1---1---1----1-
201     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
202     : -1---1--11-----
202     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
203     : 1----1-1---1---
203     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
204 (*) : --11---1-----1-
204     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
205     : -1-1----1--1---
205     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
206     : --1-1----1--1--
206     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
207     : 1---1---1--1---
207     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
208     : -1---1---1--1--
208     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
209     : 1----1-1-----1-
209     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~internal(NODE1) | ~sent(NODE3,NODE5) | ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE1 = NODE4 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 23 =====================
size : 24
num_suborbits: 4
216 (*) : ---0----1--1-0-
216     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
217     : ---0---1---0-1-
217     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
218     : ----0---1--10--
218     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
219     : ----0---01--1--
219     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
220     : -----0-1-0---1-
220     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
221     : -----0-0-1--1--
221     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
240 (*) : ---0----1--10--
240     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
241     : ---0---1-0---1-
241     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
242     : ----0---1--1-0-
242     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
243     : ----0--0-1--1--
243     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
244     : -----0-1---0-1-
244     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
245     : -----0--01--1--
245     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
258 (*) : ---0----1---01-
258     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
259     : ---0---1-0-1---
259     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
260     : ----0------110-
260     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
261     : ----0--011-----
261     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
262     : -----0---1-0-1-
262     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
263     : -----0-10---1--
263     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
282 (*) : ---0-------110-
282     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
283     : ---0-----1-0-1-
283     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
284     : ----0---1---01-
284     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
285     : ----0--10---1--
285     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
286     : -----0-1-0-1---
286     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
287     : -----0-011-----
287     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE3) | sent(NODE2,NODE5) | internal(NODE4) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
222 (*) : ---0----10--0--
222     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
223     : ---0---1-0--0--
223     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
224     : ----0--0---1-0-
224     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
225     : ----0--0-1---0-
225     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
226     : -----0--0--0-1-
226     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
227     : -----0--0--01--
227     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
228 (*) : -0-0----1--1---
228     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
229     : --00---1-----1-
229     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
230     : 0---0---1--1---
230     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
231     : --0-0----1--1--
231     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
232     : 0----0-1-----1-
232     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
233     : -0---0---1--1--
233     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
246 (*) : -0-0----1----1-
246     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
247     : --00---1---1---
247     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
248     : 0---0------11--
248     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
249     : --0-0---11-----
249     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
250     : 0----0---1---1-
250     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
251     : -0---0-1----1--
251     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
288 (*) : -0-0-------11--
288     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
289     : --00-----1---1-
289     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
290     : 0---0---1----1-
290     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
291     : --0-0--1----1--
291     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
292     : 0----0-1---1---
292     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
293     : -0---0--11-----
293     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
300 (*) : -0-0--------11-
300     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
301     : --00-----1-1---
301     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
302     : 0---0-------11-
302     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
303     : --0-0--11------
303     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
304     : 0----0---1-1---
304     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
305     : -0---0-11------
305     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | internal(NODE5) | allowed_in(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3))
qcost : 34




=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
234 (*) : ---01---1--1---
234     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
235     : ---0-1-1-----1-
235     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
236     : ---10---1--1---
236     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
237     : ----01---1--1--
237     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
238     : ---1-0-1-----1-
238     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
239     : ----10---1--1--
239     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
252 (*) : ---01---1----1-
252     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
253     : ---0-1-1---1---
253     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
254     : ---10------11--
254     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
255     : ----01--11-----
255     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
256     : ---1-0---1---1-
256     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
257     : ----10-1----1--
257     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
294 (*) : ---01------11--
294     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
295     : ---0-1---1---1-
295     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
296     : ---10---1----1-
296     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
297     : ----01-1----1--
297     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
298     : ---1-0-1---1---
298     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
299     : ----10--11-----
299     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
306 (*) : ---01-------11-
306     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
307     : ---0-1---1-1---
307     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
308     : ---10-------11-
308     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
309     : ----01-11------
309     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
310     : ---1-0---1-1---
310     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
311     : ----10-11------
311     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE3,NODE5,NODE4,NODE2,NODE0. ~sent(NODE1,NODE3) | ~internal(NODE0) | internal(NODE5) | ~sent(NODE2,NODE4) | ((NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
264 (*) : -0-0-------0-1-
264     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
265     : --00-------1-0-
265     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
266     : 0---0---0---1--
266     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
267     : --0-0---1---0--
267     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
268     : 0----0-0-1-----
268     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
269     : -0---0-1-0-----
269     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | allowed_in(NODE1) | internal(NODE2) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
270 (*) : ---01------0-1-
270     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
271     : ---0-1-----1-0-
271     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
272     : ---10---0---1--
272     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
273     : ----01--1---0--
273     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
274     : ---1-0-0-1-----
274     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
275     : ----10-1-0-----
275     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. internal(NODE2) | ~internal(NODE0) | sent(NODE0,NODE1) | ~sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
276 (*) : ---0-0-----0-1-
276     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
277     : ---00------1-0-
277     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
278     : ----00--0---1--
278     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
279     : ---00---1---0--
279     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
280     : ----00-0-1-----
280     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
281     : ---0-0-1-0-----
281     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | internal(NODE2) | sent(NODE1,NODE0) | internal(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 30 =====================
size : 12
num_suborbits: 2
312 (*) : -0-----1-0---1-
312     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
313     : --0-----1--10--
313     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
314     : 0------0-1--1--
314     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
315     : --0-----1--1-0-
315     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
316     : 0-------01--1--
316     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
317     : -0-----1---0-1-
317     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
324 (*) : -0-----1-0-1---
324     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
325     : --0-----1---01-
325     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
326     : 0------011-----
326     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
327     : --0--------110-
327     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
328     : 0------10---1--
328     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
329     : -0-------1-0-1-
329     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE1,NODE3) | allowed_in(NODE2) | sent(NODE2,NODE0) | ~sent(NODE0,NODE2) | ((NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 16




=== Prime Orbit 31 =====================
size : 12
num_suborbits: 2
318 (*) : ----1--1-0---1-
318     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
319     : -----1--1--10--
319     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
320     : ---1---0-1--1--
320     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
321     : -----1--1--1-0-
321     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
322     : ---1----01--1--
322     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
323     : ----1--1---0-1-
323     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
330 (*) : ----1--1-0-1---
330     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
331     : -----1--1---01-
331     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
332     : ---1---011-----
332     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
333     : -----1-----110-
333     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
334     : ---1---10---1--
334     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
335     : ----1----1-0-1-
335     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE0,NODE1,NODE2,NODE3. sent(NODE0,NODE1) | ~internal(NODE0) | ~sent(NODE2,NODE3) | ~sent(NODE1,NODE0) | ((NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 16




=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
336 (*) : -0-----1-0--0--
336     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
337     : --0-----10--0--
337     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
338     : 0------0-1---0-
338     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
339     : --0----0---1-0-
339     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
340     : 0-------0--01--
340     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
341     : -0------0--0-1-
341     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. allowed_in(NODE1) | sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
342 (*) : ----1--1-0--0--
342     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
343     : -----1--10--0--
343     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
344     : ---1---0-1---0-
344     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
345     : -----1-0---1-0-
345     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
346     : ---1----0--01--
346     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
347     : ----1---0--0-1-
347     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. sent(NODE0,NODE1) | ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10



[QRM NOTE]: Time elapsed since start: 11.483 seconds

[QRM NOTE]: Time elapsed since last: 11.371 seconds

[QRM NOTE]: Peak memory: 5449199 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=3]

=========================================================================


New level: 1
 pending : [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8]


Solution : [0, 8] has cost 7.


Decide in level 1 among pending : [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, 1024), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1]


New level: 2
 pending : [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1]


Before reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, 640), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, 576), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, 520), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1]


Solution : [0, 8, 1] has cost 10.


Decide in level 2 among pending : [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, 640), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, 576), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, 520), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

Decide 4 with phase True at level 2

After decision at level 2
 pending : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4]


New level: 3
 pending : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, 640), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, 576), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, 520), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, 576), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, 0), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

Covered at level 3 : {24}

After reduction : 
 pending  : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, 576), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, 0), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, 576), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 3 among pending : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, 576), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

Decide 14 with phase True at level 3

After decision at level 3
 pending : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14]


New level: 4
 pending : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, 576), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14]


Solution : [0, 8, 1, 4, 14] has cost 41.


Decide in level 4 among pending : [2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 2 with phase True at level 4

After decision at level 4
 pending : [3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 2]


New level: 5
 pending : [3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 2]


Before reduction : 
 pending  : [3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, 0), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, 0), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 5 : {15, 7}

After reduction : 
 pending  : [3, 5, 6, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 2]


Before reduction : 
 pending  : [3, 5, 6, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, 0), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, 0), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 5, 6, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 2]


Solution : [0, 8, 1, 4, 14, 2] has cost 46.


Decide in level 5 among pending : [3, 5, 6, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 10 with phase True at level 5

After decision at level 5
 pending : [3, 5, 6, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 2, 10]


New level: 6
 pending : [3, 5, 6, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before reduction : 
 pending  : [3, 5, 6, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 2, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, 0), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {32, 33, 11, 12, 30, 31}

After reduction : 
 pending  : [3, 5, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before reduction : 
 pending  : [3, 5, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, 0), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [3, 5, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Solution : [0, 8, 1, 4, 14, 2, 10] has cost 59.


Decide in level 6 among pending : [3, 5, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 6

After decision at level 6
 pending : [3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 5]


New level: 7
 pending : [3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 5]


Before reduction : 
 pending  : [3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : {3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 5]


Solution : [0, 8, 1, 4, 14, 2, 10, 5] has cost 65.


Before backtrack at level 7
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 10, 5]

After backtrack at level 7
 pending : [3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 5]


Invert decision for 5 at level 6


New level: 7
 pending : [3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before reduction : 
 pending  : [3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Solution : [0, 8, 1, 4, 14, 2, 10] has cost 59.


Decide in level 7 among pending : [3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 7

After decision at level 7
 pending : [3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 6]


New level: 8
 pending : [3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 6]


Before reduction : 
 pending  : [3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 6]


Solution : [0, 8, 1, 4, 14, 2, 10, 6] has cost 72.


Before backtrack at level 8
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 10, 6]

After backtrack at level 8
 pending : [3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 6]


Invert decision for 6 at level 7


New level: 8
 pending : [3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before reduction : 
 pending  : [3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Solution : [0, 8, 1, 4, 14, 2, 10] has cost 59.


Decide in level 8 among pending : [3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 13]


New level: 9
 pending : [3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 13]


Before reduction : 
 pending  : [3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 13]


Solution : [0, 8, 1, 4, 14, 2, 10, 13] has cost 65.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 10, 13]

After backtrack at level 9
 pending : [3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before reduction : 
 pending  : [3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Solution : [0, 8, 1, 4, 14, 2, 10] has cost 59.


Decide in level 9 among pending : [3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 3]


New level: 10
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 3]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 3]


Solution : [0, 8, 1, 4, 14, 2, 10, 3] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 10, 3]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]

Essensial at level 10 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 10, 9]


Solution : [0, 8, 1, 4, 14, 2, 10, 9] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 10, 9]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before backtrack at level 9
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 10]

After backtrack at level 9
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before backtrack at level 8
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3]
 solution : [0, 8, 1, 4, 14, 2, 10]

After backtrack at level 8
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3, 13]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before backtrack at level 7
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3, 13]
 solution : [0, 8, 1, 4, 14, 2, 10]

After backtrack at level 7
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3, 13, 6]
 solution : [0, 8, 1, 4, 14, 2, 10]


Before backtrack at level 6
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3, 13, 6]
 solution : [0, 8, 1, 4, 14, 2, 10]

After backtrack at level 6
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 10]


Invert decision for 10 at level 5


New level: 6
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2]


Solution : [0, 8, 1, 4, 14, 2] has cost 46.


Decide in level 6 among pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 27 with phase True at level 6

After decision at level 6
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27]


New level: 7
 pending : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 16), (18, 0), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, 0), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 7 : {18, 28, 29}

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 16), (18, 0), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, 0), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 16), (18, -1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27]


Solution : [0, 8, 1, 4, 14, 2, 27] has cost 56.


Decide in level 7 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 11, 12, 30, 31, 32, 33, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 16), (18, -1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 11 with phase True at level 7

After decision at level 7
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


New level: 8
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 16), (18, -1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, 0), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 12, 30, 31}

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, 0), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Solution : [0, 8, 1, 4, 14, 2, 27, 11] has cost 62.


Decide in level 8 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 13]


New level: 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 13]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {3, 5, 6, 9, 16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 13]


Solution : [0, 8, 1, 4, 14, 2, 27, 11, 13] has cost 68.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 13]

After backtrack at level 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Solution : [0, 8, 1, 4, 14, 2, 27, 11] has cost 62.


Decide in level 9 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 6]


New level: 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 6]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 6]


Solution : [0, 8, 1, 4, 14, 2, 27, 11, 6] has cost 75.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 6]

After backtrack at level 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Solution : [0, 8, 1, 4, 14, 2, 27, 11] has cost 62.


Decide in level 10 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 5]


New level: 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 5]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {3, 9, 16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 5]


Solution : [0, 8, 1, 4, 14, 2, 27, 11, 5] has cost 68.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 5]

After backtrack at level 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Solution : [0, 8, 1, 4, 14, 2, 27, 11] has cost 62.


Decide in level 11 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 9]


New level: 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 9]


Before reduction : 
 pending  : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {3, 16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 9]


Solution : [0, 8, 1, 4, 14, 2, 27, 11, 9] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 9]

After backtrack at level 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before reduction : 
 pending  : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 3]


Solution : [0, 8, 1, 4, 14, 2, 27, 11, 3] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 11, 3]

After backtrack at level 12
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before backtrack at level 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

After backtrack at level 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before backtrack at level 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

After backtrack at level 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before backtrack at level 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

After backtrack at level 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5, 6]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Before backtrack at level 8
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5, 6]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]

After backtrack at level 8
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5, 6, 12, 30, 31, 32, 33, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 11]


Invert decision for 11 at level 7


New level: 8
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5, 6, 12, 30, 31, 32, 33, 13]
 solution : [0, 8, 1, 4, 14, 2, 27]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5, 6, 12, 30, 31, 32, 33, 13]
 solution : [0, 8, 1, 4, 14, 2, 27]

Essensial at level 8 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 30, 31}

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Solution : [0, 8, 1, 4, 14, 2, 27, 12] has cost 62.


Decide in level 8 among pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 5, 6, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 5]


New level: 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 5]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {3, 6, 9, 13, 16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 5]


Solution : [0, 8, 1, 4, 14, 2, 27, 12, 5] has cost 68.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 5]

After backtrack at level 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Solution : [0, 8, 1, 4, 14, 2, 27, 12] has cost 62.


Decide in level 9 among pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 6, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 6]


New level: 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 6]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {3, 9, 13, 16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 6]


Solution : [0, 8, 1, 4, 14, 2, 27, 12, 6] has cost 75.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 6]

After backtrack at level 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Solution : [0, 8, 1, 4, 14, 2, 27, 12] has cost 62.


Decide in level 10 among pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 13]


New level: 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 13]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {3, 9, 16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 13]


Solution : [0, 8, 1, 4, 14, 2, 27, 12, 13] has cost 68.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 13]

After backtrack at level 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Solution : [0, 8, 1, 4, 14, 2, 27, 12] has cost 62.


Decide in level 11 among pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 3]


New level: 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 3]


Before reduction : 
 pending  : [16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {9, 16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 3]


Solution : [0, 8, 1, 4, 14, 2, 27, 12, 3] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 3]

After backtrack at level 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Before reduction : 
 pending  : [16, 17, 19, 20, 21, 22, 23, 25, 26, 9]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]

Essensial at level 12 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 17, 19, 20, 21, 22, 23, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 9]


Solution : [0, 8, 1, 4, 14, 2, 27, 12, 9] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 27, 12, 9]

After backtrack at level 12
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Before backtrack at level 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]

After backtrack at level 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Before backtrack at level 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]

After backtrack at level 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Before backtrack at level 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]

After backtrack at level 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]


Before backtrack at level 8
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6]
 solution : [0, 8, 1, 4, 14, 2, 27, 12]

After backtrack at level 8
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27]


Before backtrack at level 7
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2, 27]

After backtrack at level 7
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5, 18, 28, 29, 11]
 solution : [0, 8, 1, 4, 14, 2, 27]


Invert decision for 27 at level 6


New level: 7
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5, 18, 28, 29, 11]
 solution : [0, 8, 1, 4, 14, 2]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5, 18, 28, 29, 11]
 solution : [0, 8, 1, 4, 14, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, -1), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5, 18, 28, 29, 11]
 solution : [0, 8, 1, 4, 14, 2]


Solution : [0, 8, 1, 4, 14, 2] has cost 46.


Decide in level 7 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 12, 30, 31, 32, 33, 5, 18, 28, 29, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, -1), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 12 with phase True at level 7

After decision at level 7
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 30, 31, 32, 33, 5, 18, 28, 29, 11]
 solution : [0, 8, 1, 4, 14, 2, 12]


New level: 8
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 30, 31, 32, 33, 5, 18, 28, 29, 11]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 30, 31, 32, 33, 5, 18, 28, 29, 11]
 solution : [0, 8, 1, 4, 14, 2, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 24), (18, 1), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, -1), (28, 128), (29, 1), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 11, 30, 31}

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Solution : [0, 8, 1, 4, 14, 2, 12] has cost 52.


Decide in level 8 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 13, 6, 5, 18, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 13]


New level: 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 13]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {3, 5, 6, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 13]


Solution : [0, 8, 1, 4, 14, 2, 12, 13] has cost 58.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 12, 13]

After backtrack at level 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Solution : [0, 8, 1, 4, 14, 2, 12] has cost 52.


Decide in level 9 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 6, 5, 18, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 6]


New level: 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 6]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {3, 5, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 6]


Solution : [0, 8, 1, 4, 14, 2, 12, 6] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 12, 6]

After backtrack at level 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Solution : [0, 8, 1, 4, 14, 2, 12] has cost 52.


Decide in level 10 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 5, 18, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 5]


New level: 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 5]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 5]


Solution : [0, 8, 1, 4, 14, 2, 12, 5] has cost 58.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 12, 5]

After backtrack at level 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Solution : [0, 8, 1, 4, 14, 2, 12] has cost 52.


Decide in level 11 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 9]


New level: 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 9]


Before reduction : 
 pending  : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {3, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 9]


Solution : [0, 8, 1, 4, 14, 2, 12, 9] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 12, 9]

After backtrack at level 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before reduction : 
 pending  : [16, 17, 19, 20, 21, 22, 23, 25, 26, 3, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 12, 3]


Solution : [0, 8, 1, 4, 14, 2, 12, 3] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 12, 3]

After backtrack at level 12
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before backtrack at level 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 12]

After backtrack at level 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before backtrack at level 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 12]

After backtrack at level 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before backtrack at level 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5]
 solution : [0, 8, 1, 4, 14, 2, 12]

After backtrack at level 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5, 6]
 solution : [0, 8, 1, 4, 14, 2, 12]


Before backtrack at level 8
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5, 6]
 solution : [0, 8, 1, 4, 14, 2, 12]

After backtrack at level 8
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5, 6, 30, 31, 32, 33, 11, 13]
 solution : [0, 8, 1, 4, 14, 2, 12]


Invert decision for 12 at level 7


New level: 8
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5, 6, 30, 31, 32, 33, 11, 13]
 solution : [0, 8, 1, 4, 14, 2]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5, 6, 30, 31, 32, 33, 11, 13]
 solution : [0, 8, 1, 4, 14, 2]

Essensial at level 8 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 30, 31}

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]


Solution : [0, 8, 1, 4, 14, 2, 11] has cost 52.


Decide in level 8 among pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 5, 6, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11, 5]


New level: 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11, 5]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 5]


Solution : [0, 8, 1, 4, 14, 2, 11, 5] has cost 58.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 11, 5]

After backtrack at level 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 6, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]


Solution : [0, 8, 1, 4, 14, 2, 11] has cost 52.


Decide in level 9 among pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 6, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 11, 6]


New level: 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 11, 6]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 11, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {3, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 6]


Solution : [0, 8, 1, 4, 14, 2, 11, 6] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 11, 6]

After backtrack at level 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 11, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]


Solution : [0, 8, 1, 4, 14, 2, 11] has cost 52.


Decide in level 10 among pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11, 13]


New level: 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11, 13]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 13]


Solution : [0, 8, 1, 4, 14, 2, 11, 13] has cost 58.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 11, 13]

After backtrack at level 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11]


Before reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11]


Solution : [0, 8, 1, 4, 14, 2, 11] has cost 52.


Decide in level 11 among pending : [3, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11, 3]


New level: 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11, 3]


Before reduction : 
 pending  : [16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 3]


Solution : [0, 8, 1, 4, 14, 2, 11, 3] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 11, 3]

After backtrack at level 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11]


Before reduction : 
 pending  : [16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 9]
 solution : [0, 8, 1, 4, 14, 2, 11]

Essensial at level 12 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 2, 11, 9]


Solution : [0, 8, 1, 4, 14, 2, 11, 9] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 2, 11, 9]

After backtrack at level 12
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 11]


Before backtrack at level 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29]
 solution : [0, 8, 1, 4, 14, 2, 11]

After backtrack at level 11
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3]
 solution : [0, 8, 1, 4, 14, 2, 11]


Before backtrack at level 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3]
 solution : [0, 8, 1, 4, 14, 2, 11]

After backtrack at level 10
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]


Before backtrack at level 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13]
 solution : [0, 8, 1, 4, 14, 2, 11]

After backtrack at level 9
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6]
 solution : [0, 8, 1, 4, 14, 2, 11]


Before backtrack at level 8
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6]
 solution : [0, 8, 1, 4, 14, 2, 11]

After backtrack at level 8
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2]


Before backtrack at level 7
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5]
 solution : [0, 8, 1, 4, 14, 2]

After backtrack at level 7
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12]
 solution : [0, 8, 1, 4, 14, 2]


Before backtrack at level 6
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12]
 solution : [0, 8, 1, 4, 14, 2]

After backtrack at level 6
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27]
 solution : [0, 8, 1, 4, 14, 2]


Before backtrack at level 5
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27]
 solution : [0, 8, 1, 4, 14, 2]

After backtrack at level 5
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 2]


Invert decision for 2 at level 4


New level: 5
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27, 7, 15, 10]
 solution : [0, 8, 1, 4, 14]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27, 7, 15, 10]
 solution : [0, 8, 1, 4, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27, 7, 15, 10]
 solution : [0, 8, 1, 4, 14]


Solution : [0, 8, 1, 4, 14] has cost 41.


Decide in level 5 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 28, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27, 7, 15, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 28 with phase True at level 5

After decision at level 5
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 28]


New level: 6
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 28]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 27, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, 128), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, 0), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 6 : {27}

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 28]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, 0), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 28]


Solution : [0, 8, 1, 4, 14, 28] has cost 51.


Decide in level 6 among pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 13, 6, 11, 30, 31, 32, 33, 5, 12, 7, 15, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 13 with phase True at level 6

After decision at level 6
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 6, 11, 30, 31, 32, 33, 5, 12, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]


New level: 7
 pending : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 6, 11, 30, 31, 32, 33, 5, 12, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]


Before reduction : 
 pending  : [9, 16, 17, 19, 20, 21, 22, 23, 25, 26, 18, 29, 3, 6, 11, 30, 31, 32, 33, 5, 12, 7, 15, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 2), (17, 2), (18, 0), (19, 2), (20, 0), (21, 0), (22, 2), (23, 0), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 7 : {3, 5, 6, 7, 9, 15, 18, 20, 21, 23, 29}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 11, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 11, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 2), (17, 2), (18, 0), (19, 2), (20, 0), (21, 0), (22, 2), (23, 0), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 11, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]


Solution : [0, 8, 1, 4, 14, 28, 13] has cost 57.


Decide in level 7 among pending : [16, 17, 19, 22, 25, 26, 11, 30, 31, 32, 33, 12, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 11 with phase True at level 7

After decision at level 7
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13, 11]


New level: 8
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13, 11]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 10, 12, 16, 17, 19, 22, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 13, 11]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 13, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 13, 11]


Solution : [0, 8, 1, 4, 14, 28, 13, 11] has cost 63.


Before backtrack at level 8
 pending : []
 solution : [0, 8, 1, 4, 14, 28, 13, 11]

After backtrack at level 8
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13, 11]


Invert decision for 11 at level 7


New level: 8
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]


Solution : [0, 8, 1, 4, 14, 28, 13] has cost 57.


Decide in level 8 among pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 12 with phase True at level 8

After decision at level 8
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 10]
 solution : [0, 8, 1, 4, 14, 28, 13, 12]


New level: 9
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 10]
 solution : [0, 8, 1, 4, 14, 28, 13, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 10]
 solution : [0, 8, 1, 4, 14, 28, 13, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 10, 16, 17, 19, 22, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 13, 12]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 13, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 13, 12]


Solution : [0, 8, 1, 4, 14, 28, 13, 12] has cost 63.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 14, 28, 13, 12]

After backtrack at level 9
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 10]
 solution : [0, 8, 1, 4, 14, 28, 13, 12]


Invert decision for 12 at level 8


New level: 9
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 10]
 solution : [0, 8, 1, 4, 14, 28, 13]

Essensial at level 9 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 16, 17, 19, 22, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 13, 10]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 13, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 13, 10]


Solution : [0, 8, 1, 4, 14, 28, 13, 10] has cost 70.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 14, 28, 13, 10]

After backtrack at level 9
 pending : [10, 16, 17, 19, 22, 25, 26, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 28, 13]


Before backtrack at level 8
 pending : [10, 16, 17, 19, 22, 25, 26, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 28, 13]

After backtrack at level 8
 pending : [10, 16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 28, 13]


Before backtrack at level 7
 pending : [10, 16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 28, 13]

After backtrack at level 7
 pending : [10, 16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 11]
 solution : [0, 8, 1, 4, 14, 28, 13]


Invert decision for 13 at level 6


New level: 7
 pending : [10, 16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 11]
 solution : [0, 8, 1, 4, 14, 28]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 11]
 solution : [0, 8, 1, 4, 14, 28]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 11]
 solution : [0, 8, 1, 4, 14, 28]


Solution : [0, 8, 1, 4, 14, 28] has cost 51.


Decide in level 7 among pending : [10, 16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 10 with phase True at level 7

After decision at level 7
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 11]
 solution : [0, 8, 1, 4, 14, 28, 10]


New level: 8
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 11]
 solution : [0, 8, 1, 4, 14, 28, 10]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 11]
 solution : [0, 8, 1, 4, 14, 28, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, 0), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 11, 12, 30, 31}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 10]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, 0), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 10]


Solution : [0, 8, 1, 4, 14, 28, 10] has cost 64.


Before backtrack at level 8
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 10]

After backtrack at level 8
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28, 10]


Invert decision for 10 at level 7


New level: 8
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28]


Solution : [0, 8, 1, 4, 14, 28] has cost 51.


Decide in level 8 among pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 6, 5, 7, 15, 30, 31, 32, 33, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 6 with phase True at level 8

After decision at level 8
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28, 6]


New level: 9
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28, 6]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 2), (17, 2), (18, 0), (19, 2), (20, 0), (21, 0), (22, 2), (23, 0), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 9 : {3, 5, 7, 9, 15, 18, 20, 21, 23, 29}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28, 6]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 2), (17, 2), (18, 0), (19, 2), (20, 0), (21, 0), (22, 2), (23, 0), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28, 6]


Solution : [0, 8, 1, 4, 14, 28, 6] has cost 64.


Before backtrack at level 9
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 28, 6]

After backtrack at level 9
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 6]


Invert decision for 6 at level 8


New level: 9
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28]


Solution : [0, 8, 1, 4, 14, 28] has cost 51.


Decide in level 9 among pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 12 with phase True at level 9

After decision at level 9
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 11, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


New level: 10
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 11, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 11, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 11, 30, 31}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


Solution : [0, 8, 1, 4, 14, 28, 12] has cost 57.


Decide in level 10 among pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 5, 7, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 5]


New level: 11
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 5]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {3, 7, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 12, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 12, 5]


Solution : [0, 8, 1, 4, 14, 28, 12, 5] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 14, 28, 12, 5]

After backtrack at level 11
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 7, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


Solution : [0, 8, 1, 4, 14, 28, 12] has cost 57.


Decide in level 11 among pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 7, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 7]


New level: 12
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 18, 29, 3, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 0), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {18, 29, 15}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 3]
 solution : [0, 8, 1, 4, 14, 28, 12, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 3]
 solution : [0, 8, 1, 4, 14, 28, 12, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 0), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 3]
 solution : [0, 8, 1, 4, 14, 28, 12, 7]


Solution : [0, 8, 1, 4, 14, 28, 12, 7] has cost 62.


Before backtrack at level 12
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 3]
 solution : [0, 8, 1, 4, 14, 28, 12, 7]

After backtrack at level 12
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


Solution : [0, 8, 1, 4, 14, 28, 12] has cost 57.


Decide in level 12 among pending : [16, 17, 19, 22, 25, 26, 9, 20, 21, 23, 3, 18, 29, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 9]


New level: 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 9]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 12, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 12, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 12, 9]


Solution : [0, 8, 1, 4, 14, 28, 12, 9] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 8, 1, 4, 14, 28, 12, 9]

After backtrack at level 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]

Essensial at level 13 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 12, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 12, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 12, 3]


Solution : [0, 8, 1, 4, 14, 28, 12, 3] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 8, 1, 4, 14, 28, 12, 3]

After backtrack at level 13
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]


Before backtrack at level 12
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 12]

After backtrack at level 12
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 28, 12]


Before backtrack at level 11
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 28, 12]

After backtrack at level 11
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 7]
 solution : [0, 8, 1, 4, 14, 28, 12]


Before backtrack at level 10
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 7]
 solution : [0, 8, 1, 4, 14, 28, 12]

After backtrack at level 10
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 7, 30, 31, 32, 33, 11, 5]
 solution : [0, 8, 1, 4, 14, 28, 12]


Invert decision for 12 at level 9


New level: 10
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 7, 30, 31, 32, 33, 11, 5]
 solution : [0, 8, 1, 4, 14, 28]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 7, 30, 31, 32, 33, 11, 5]
 solution : [0, 8, 1, 4, 14, 28]

Essensial at level 10 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 30, 31}

After reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 7, 5]
 solution : [0, 8, 1, 4, 14, 28, 11]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 7, 5]
 solution : [0, 8, 1, 4, 14, 28, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 7, 5]
 solution : [0, 8, 1, 4, 14, 28, 11]


Solution : [0, 8, 1, 4, 14, 28, 11] has cost 57.


Decide in level 10 among pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 7, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 5]
 solution : [0, 8, 1, 4, 14, 28, 11, 7]


New level: 11
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 5]
 solution : [0, 8, 1, 4, 14, 28, 11, 7]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9, 5]
 solution : [0, 8, 1, 4, 14, 28, 11, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 0), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {18, 29, 15}

After reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 5]
 solution : [0, 8, 1, 4, 14, 28, 11, 7]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 5]
 solution : [0, 8, 1, 4, 14, 28, 11, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 0), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 5]
 solution : [0, 8, 1, 4, 14, 28, 11, 7]


Solution : [0, 8, 1, 4, 14, 28, 11, 7] has cost 62.


Before backtrack at level 11
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 5]
 solution : [0, 8, 1, 4, 14, 28, 11, 7]

After backtrack at level 11
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 5, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 5, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 5, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, -1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 5, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]


Solution : [0, 8, 1, 4, 14, 28, 11] has cost 57.


Decide in level 11 among pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 5, 18, 29, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11, 5]


New level: 12
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11, 5]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {3, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 11, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 11, 5]


Solution : [0, 8, 1, 4, 14, 28, 11, 5] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 28, 11, 5]

After backtrack at level 12
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]


Solution : [0, 8, 1, 4, 14, 28, 11] has cost 57.


Decide in level 12 among pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11, 3]


New level: 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11, 3]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 11, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 11, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 11, 3]


Solution : [0, 8, 1, 4, 14, 28, 11, 3] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 8, 1, 4, 14, 28, 11, 3]

After backtrack at level 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]

Essensial at level 13 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 11, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 28, 11, 9]


Solution : [0, 8, 1, 4, 14, 28, 11, 9] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 8, 1, 4, 14, 28, 11, 9]

After backtrack at level 13
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]


Before backtrack at level 12
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 28, 11]

After backtrack at level 12
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3]
 solution : [0, 8, 1, 4, 14, 28, 11]


Before backtrack at level 11
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3]
 solution : [0, 8, 1, 4, 14, 28, 11]

After backtrack at level 11
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5]
 solution : [0, 8, 1, 4, 14, 28, 11]


Before backtrack at level 10
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5]
 solution : [0, 8, 1, 4, 14, 28, 11]

After backtrack at level 10
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7]
 solution : [0, 8, 1, 4, 14, 28]


Before backtrack at level 9
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7]
 solution : [0, 8, 1, 4, 14, 28]

After backtrack at level 9
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12]
 solution : [0, 8, 1, 4, 14, 28]


Before backtrack at level 8
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12]
 solution : [0, 8, 1, 4, 14, 28]

After backtrack at level 8
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12, 6]
 solution : [0, 8, 1, 4, 14, 28]


Before backtrack at level 7
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12, 6]
 solution : [0, 8, 1, 4, 14, 28]

After backtrack at level 7
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12, 6, 10]
 solution : [0, 8, 1, 4, 14, 28]


Before backtrack at level 6
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12, 6, 10]
 solution : [0, 8, 1, 4, 14, 28]

After backtrack at level 6
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12, 6, 10, 27, 13]
 solution : [0, 8, 1, 4, 14, 28]


Invert decision for 28 at level 5


New level: 6
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12, 6, 10, 27, 13]
 solution : [0, 8, 1, 4, 14]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12, 6, 10, 27, 13]
 solution : [0, 8, 1, 4, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12, 6, 10, 27, 13]
 solution : [0, 8, 1, 4, 14]


Solution : [0, 8, 1, 4, 14] has cost 41.


Decide in level 6 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 5, 11, 30, 31, 32, 33, 7, 12, 6, 10, 27, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 5 with phase True at level 6

After decision at level 6
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 11, 30, 31, 32, 33, 7, 12, 6, 10, 27, 13]
 solution : [0, 8, 1, 4, 14, 5]


New level: 7
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 11, 30, 31, 32, 33, 7, 12, 6, 10, 27, 13]
 solution : [0, 8, 1, 4, 14, 5]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 11, 30, 31, 32, 33, 7, 12, 6, 10, 27, 13]
 solution : [0, 8, 1, 4, 14, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 6), (17, 6), (18, 0), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, 128), (28, -1), (29, 0), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 7 : {3, 6, 7, 9, 13, 15, 18, 29}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 11, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 11, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 6), (17, 6), (18, 0), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, 128), (28, -1), (29, 0), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, -1), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, 128), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 11, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5]


Solution : [0, 8, 1, 4, 14, 5] has cost 47.


Decide in level 7 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 11, 30, 31, 32, 33, 12, 10, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, -1), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, 128), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 11 with phase True at level 7

After decision at level 7
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5, 11]


New level: 8
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5, 11]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, -1), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, 128), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 10, 12, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 5, 11]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 5, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 5, 11]


Solution : [0, 8, 1, 4, 14, 5, 11] has cost 53.


Before backtrack at level 8
 pending : []
 solution : [0, 8, 1, 4, 14, 5, 11]

After backtrack at level 8
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5, 11]


Invert decision for 11 at level 7


New level: 8
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, -1), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, 32), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12, 10, 27]
 solution : [0, 8, 1, 4, 14, 5]


Solution : [0, 8, 1, 4, 14, 5] has cost 47.


Decide in level 8 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12, 10, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, -1), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, 32), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 12 with phase True at level 8

After decision at level 8
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 10, 27]
 solution : [0, 8, 1, 4, 14, 5, 12]


New level: 9
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 10, 27]
 solution : [0, 8, 1, 4, 14, 5, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 10, 27]
 solution : [0, 8, 1, 4, 14, 5, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, -1), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, 32), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 10, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 5, 12]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 5, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 5, 12]


Solution : [0, 8, 1, 4, 14, 5, 12] has cost 53.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 14, 5, 12]

After backtrack at level 9
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 10, 27]
 solution : [0, 8, 1, 4, 14, 5, 12]


Invert decision for 12 at level 8


New level: 9
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 10, 27]
 solution : [0, 8, 1, 4, 14, 5]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 10, 27]
 solution : [0, 8, 1, 4, 14, 5]

Essensial at level 9 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 5, 10]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 5, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 5, 10]


Solution : [0, 8, 1, 4, 14, 5, 10] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 14, 5, 10]

After backtrack at level 9
 pending : [10, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27]
 solution : [0, 8, 1, 4, 14, 5]


Before backtrack at level 8
 pending : [10, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27]
 solution : [0, 8, 1, 4, 14, 5]

After backtrack at level 8
 pending : [10, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12]
 solution : [0, 8, 1, 4, 14, 5]


Before backtrack at level 7
 pending : [10, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12]
 solution : [0, 8, 1, 4, 14, 5]

After backtrack at level 7
 pending : [10, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12, 9, 18, 29, 15, 3, 7, 6, 13, 11]
 solution : [0, 8, 1, 4, 14, 5]


Invert decision for 5 at level 6


New level: 7
 pending : [10, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12, 9, 18, 29, 15, 3, 7, 6, 13, 11]
 solution : [0, 8, 1, 4, 14]


Before reduction : 
 pending  : [10, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12, 9, 18, 29, 15, 3, 7, 6, 13, 11]
 solution : [0, 8, 1, 4, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12, 9, 18, 29, 15, 3, 7, 6, 13, 11]
 solution : [0, 8, 1, 4, 14]


Solution : [0, 8, 1, 4, 14] has cost 41.


Decide in level 7 among pending : [10, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12, 9, 18, 29, 15, 3, 7, 6, 13, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 10 with phase True at level 7

After decision at level 7
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12, 9, 18, 29, 15, 3, 7, 6, 13, 11]
 solution : [0, 8, 1, 4, 14, 10]


New level: 8
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12, 9, 18, 29, 15, 3, 7, 6, 13, 11]
 solution : [0, 8, 1, 4, 14, 10]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 27, 12, 9, 18, 29, 15, 3, 7, 6, 13, 11]
 solution : [0, 8, 1, 4, 14, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, 0), (13, 128), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, -1), (29, 4), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 11, 12, 30, 31}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 27, 9, 18, 29, 15, 3, 7, 6, 13]
 solution : [0, 8, 1, 4, 14, 10]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 27, 9, 18, 29, 15, 3, 7, 6, 13]
 solution : [0, 8, 1, 4, 14, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, 0), (13, 128), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, -1), (29, 4), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 27, 9, 18, 29, 15, 3, 7, 6, 13]
 solution : [0, 8, 1, 4, 14, 10]


Solution : [0, 8, 1, 4, 14, 10] has cost 54.


Before backtrack at level 8
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 27, 9, 18, 29, 15, 3, 7, 6, 13]
 solution : [0, 8, 1, 4, 14, 10]

After backtrack at level 8
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 27, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 10]


Invert decision for 10 at level 7


New level: 8
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 27, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 27, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, 1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 27, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14]


Solution : [0, 8, 1, 4, 14] has cost 41.


Decide in level 8 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 27, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 27 with phase True at level 8

After decision at level 8
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27]


New level: 9
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, 128), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27]


Solution : [0, 8, 1, 4, 14, 27] has cost 51.


Decide in level 9 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15, 3, 7, 6, 13, 30, 31, 32, 33, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15, 3, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 7]


New level: 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15, 3, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 18, 29, 15, 3, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, 0), (16, 16), (17, 16), (18, 0), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 10 : {18, 29, 15}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, 0), (16, 16), (17, 16), (18, 0), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 16), (18, -1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 7]


Solution : [0, 8, 1, 4, 14, 27, 7] has cost 56.


Before backtrack at level 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 6, 13, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 7]

After backtrack at level 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 6, 13, 30, 31, 32, 33, 12, 11, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 6, 13, 30, 31, 32, 33, 12, 11, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 6, 13, 30, 31, 32, 33, 12, 11, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 16), (18, -1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 6, 13, 30, 31, 32, 33, 12, 11, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27]


Solution : [0, 8, 1, 4, 14, 27] has cost 51.


Decide in level 10 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 6, 13, 30, 31, 32, 33, 12, 11, 18, 29, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 30, 31, 32, 33, 12, 11, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 6]


New level: 11
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 30, 31, 32, 33, 12, 11, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 6]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 30, 31, 32, 33, 12, 11, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 2), (17, 2), (18, 0), (19, 2), (20, 0), (21, 0), (22, 2), (23, 0), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 11 : {3, 9, 13, 15, 18, 20, 21, 23, 29}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 6]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 2), (17, 2), (18, 0), (19, 2), (20, 0), (21, 0), (22, 2), (23, 0), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, 0), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 6]


Solution : [0, 8, 1, 4, 14, 27, 6] has cost 64.


Before backtrack at level 11
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 14, 27, 6]

After backtrack at level 11
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, -1), (19, 2), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 2), (26, 2), (27, -1), (28, -1), (29, -1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27]


Solution : [0, 8, 1, 4, 14, 27] has cost 51.


Decide in level 11 among pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 12, 11, 20, 21, 23, 9, 3, 13, 18, 29, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 11, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 12]


New level: 12
 pending : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 11, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 30, 31, 32, 33, 11, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 16), (18, 1), (19, 16), (20, 2), (21, 2), (22, 16), (23, 2), (24, -1), (25, 16), (26, 16), (27, -1), (28, -1), (29, 1), (30, 3), (31, 3), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 11, 30, 31}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 12]


Solution : [0, 8, 1, 4, 14, 27, 12] has cost 57.


Before backtrack at level 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 12]

After backtrack at level 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 30, 31, 32, 33, 11]
 solution : [0, 8, 1, 4, 14, 27, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 30, 31, 32, 33, 11]
 solution : [0, 8, 1, 4, 14, 27]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 30, 31, 32, 33, 11]
 solution : [0, 8, 1, 4, 14, 27]

Essensial at level 12 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 30, 31}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 11]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 11]


Solution : [0, 8, 1, 4, 14, 27, 11] has cost 57.


Before backtrack at level 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 27, 11]

After backtrack at level 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 27]


Before backtrack at level 11
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 27]

After backtrack at level 11
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 27]


Before backtrack at level 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 27]

After backtrack at level 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6]
 solution : [0, 8, 1, 4, 14, 27]


Before backtrack at level 9
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6]
 solution : [0, 8, 1, 4, 14, 27]

After backtrack at level 9
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6, 7]
 solution : [0, 8, 1, 4, 14, 27]


Invert decision for 27 at level 8


New level: 9
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6, 7]
 solution : [0, 8, 1, 4, 14]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6, 7]
 solution : [0, 8, 1, 4, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 4), (18, 1), (19, 4), (20, 2), (21, 2), (22, 4), (23, 2), (24, -1), (25, 4), (26, 4), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, -1), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6, 7]
 solution : [0, 8, 1, 4, 14]


Solution : [0, 8, 1, 4, 14] has cost 41.


Decide in level 9 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 13, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, -1), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 13 with phase True at level 9

After decision at level 9
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6, 7]
 solution : [0, 8, 1, 4, 14, 13]


New level: 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6, 7]
 solution : [0, 8, 1, 4, 14, 13]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 11, 30, 31, 32, 33, 12, 6, 7]
 solution : [0, 8, 1, 4, 14, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, -1), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 6), (17, 6), (18, 0), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, -1), (28, -1), (29, 0), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 10 : {3, 6, 7, 9, 15, 18, 29}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 11, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 13]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 11, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 6), (17, 6), (18, 0), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, -1), (28, -1), (29, 0), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, -1), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 11, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 13]


Solution : [0, 8, 1, 4, 14, 13] has cost 47.


Decide in level 10 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 11, 30, 31, 32, 33, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, -1), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 13, 11]


New level: 11
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 13, 11]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 13, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, -1), (19, 6), (20, 2), (21, 2), (22, 6), (23, 2), (24, -1), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 12, 16, 17, 19, 20, 21, 22, 23, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 13, 11]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 13, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 13, 11]


Solution : [0, 8, 1, 4, 14, 13, 11] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 14, 13, 11]

After backtrack at level 11
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 13, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 13]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 12]
 solution : [0, 8, 1, 4, 14, 13]

Essensial at level 11 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 16, 17, 19, 20, 21, 22, 23, 25, 26, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 13, 12]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 13, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 13, 12]


Solution : [0, 8, 1, 4, 14, 13, 12] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 14, 13, 12]

After backtrack at level 11
 pending : [12, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 13]


Before backtrack at level 10
 pending : [12, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33]
 solution : [0, 8, 1, 4, 14, 13]

After backtrack at level 10
 pending : [12, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 9, 3, 18, 29, 15, 6, 7, 11]
 solution : [0, 8, 1, 4, 14, 13]


Invert decision for 13 at level 9


New level: 10
 pending : [12, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 9, 3, 18, 29, 15, 6, 7, 11]
 solution : [0, 8, 1, 4, 14]


Before reduction : 
 pending  : [12, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 9, 3, 18, 29, 15, 6, 7, 11]
 solution : [0, 8, 1, 4, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, -1), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 9, 3, 18, 29, 15, 6, 7, 11]
 solution : [0, 8, 1, 4, 14]


Solution : [0, 8, 1, 4, 14] has cost 41.


Decide in level 10 among pending : [12, 16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 9, 3, 18, 29, 15, 6, 7, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, -1), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

Decide 12 with phase True at level 10

After decision at level 10
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 9, 3, 18, 29, 15, 6, 7, 11]
 solution : [0, 8, 1, 4, 14, 12]


New level: 11
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 9, 3, 18, 29, 15, 6, 7, 11]
 solution : [0, 8, 1, 4, 14, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 30, 31, 32, 33, 9, 3, 18, 29, 15, 6, 7, 11]
 solution : [0, 8, 1, 4, 14, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 24), (17, 24), (18, 4), (19, 24), (20, 8), (21, 8), (22, 24), (23, 8), (24, -1), (25, 21), (26, 21), (27, -1), (28, -1), (29, 4), (30, 12), (31, 12), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 11, 30, 31}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 6, 7]
 solution : [0, 8, 1, 4, 14, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 6, 7]
 solution : [0, 8, 1, 4, 14, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 6, 7]
 solution : [0, 8, 1, 4, 14, 12]


Solution : [0, 8, 1, 4, 14, 12] has cost 47.


Decide in level 11 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 6, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 7]
 solution : [0, 8, 1, 4, 14, 12, 6]


New level: 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 7]
 solution : [0, 8, 1, 4, 14, 12, 6]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 7]
 solution : [0, 8, 1, 4, 14, 12, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {3, 7, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 6]


Solution : [0, 8, 1, 4, 14, 12, 6] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 14, 12, 6]

After backtrack at level 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 7]
 solution : [0, 8, 1, 4, 14, 12, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 7]
 solution : [0, 8, 1, 4, 14, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 7]
 solution : [0, 8, 1, 4, 14, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 7]
 solution : [0, 8, 1, 4, 14, 12]


Solution : [0, 8, 1, 4, 14, 12] has cost 47.


Decide in level 12 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 7 with phase True at level 12

After decision at level 12
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 12, 7]


New level: 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 12, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 12, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {15}

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7]


Solution : [0, 8, 1, 4, 14, 12, 7] has cost 52.


Decide in level 13 among pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 9, 3, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7, 9]


New level: 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7, 9]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {3, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 7, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 7, 9]


Solution : [0, 8, 1, 4, 14, 12, 7, 9] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 14, 12, 7, 9]

After backtrack at level 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 3, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 7, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 7, 3]


Solution : [0, 8, 1, 4, 14, 12, 7, 3] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 14, 12, 7, 3]

After backtrack at level 14
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7]


Before backtrack at level 13
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29]
 solution : [0, 8, 1, 4, 14, 12, 7]

After backtrack at level 13
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12, 7]


Invert decision for 7 at level 12


New level: 13
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12]


Solution : [0, 8, 1, 4, 14, 12] has cost 47.


Decide in level 13 among pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12, 3]


New level: 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12, 3]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 3]


Solution : [0, 8, 1, 4, 14, 12, 3] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 14, 12, 3]

After backtrack at level 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 9]
 solution : [0, 8, 1, 4, 14, 12]

Essensial at level 14 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 12, 9]


Solution : [0, 8, 1, 4, 14, 12, 9] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 14, 12, 9]

After backtrack at level 14
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 12]


Before backtrack at level 13
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 12]

After backtrack at level 13
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3]
 solution : [0, 8, 1, 4, 14, 12]


Before backtrack at level 12
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3]
 solution : [0, 8, 1, 4, 14, 12]

After backtrack at level 12
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 7]
 solution : [0, 8, 1, 4, 14, 12]


Before backtrack at level 11
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 7]
 solution : [0, 8, 1, 4, 14, 12]

After backtrack at level 11
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 7, 30, 31, 32, 33, 11, 6]
 solution : [0, 8, 1, 4, 14, 12]


Invert decision for 12 at level 10


New level: 11
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 7, 30, 31, 32, 33, 11, 6]
 solution : [0, 8, 1, 4, 14]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 7, 30, 31, 32, 33, 11, 6]
 solution : [0, 8, 1, 4, 14]

Essensial at level 11 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 30, 31}

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 7, 6]
 solution : [0, 8, 1, 4, 14, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 7, 6]
 solution : [0, 8, 1, 4, 14, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 7, 6]
 solution : [0, 8, 1, 4, 14, 11]


Solution : [0, 8, 1, 4, 14, 11] has cost 47.


Decide in level 11 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 7, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6]
 solution : [0, 8, 1, 4, 14, 11, 7]


New level: 12
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6]
 solution : [0, 8, 1, 4, 14, 11, 7]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6]
 solution : [0, 8, 1, 4, 14, 11, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {15}

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6]
 solution : [0, 8, 1, 4, 14, 11, 7]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6]
 solution : [0, 8, 1, 4, 14, 11, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6]
 solution : [0, 8, 1, 4, 14, 11, 7]


Solution : [0, 8, 1, 4, 14, 11, 7] has cost 52.


Decide in level 12 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7, 6]


New level: 13
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7, 6]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 7, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 7, 6]


Solution : [0, 8, 1, 4, 14, 11, 7, 6] has cost 65.


Before backtrack at level 13
 pending : []
 solution : [0, 8, 1, 4, 14, 11, 7, 6]

After backtrack at level 13
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7]


Solution : [0, 8, 1, 4, 14, 11, 7] has cost 52.


Decide in level 13 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7, 9]


New level: 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7, 9]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 1), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {3, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 7, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 7, 9]


Solution : [0, 8, 1, 4, 14, 11, 7, 9] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 14, 11, 7, 9]

After backtrack at level 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3]
 solution : [0, 8, 1, 4, 14, 11, 7]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 7, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 7, 3]


Solution : [0, 8, 1, 4, 14, 11, 7, 3] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 14, 11, 7, 3]

After backtrack at level 14
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29]
 solution : [0, 8, 1, 4, 14, 11, 7]


Before backtrack at level 13
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29]
 solution : [0, 8, 1, 4, 14, 11, 7]

After backtrack at level 13
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9]
 solution : [0, 8, 1, 4, 14, 11, 7]


Before backtrack at level 12
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9]
 solution : [0, 8, 1, 4, 14, 11, 7]

After backtrack at level 12
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15, 6]
 solution : [0, 8, 1, 4, 14, 11, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15, 6]
 solution : [0, 8, 1, 4, 14, 11]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15, 6]
 solution : [0, 8, 1, 4, 14, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15, 6]
 solution : [0, 8, 1, 4, 14, 11]


Solution : [0, 8, 1, 4, 14, 11] has cost 47.


Decide in level 12 among pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11, 6]


New level: 13
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11, 6]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {3, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 6]


Solution : [0, 8, 1, 4, 14, 11, 6] has cost 60.


Before backtrack at level 13
 pending : []
 solution : [0, 8, 1, 4, 14, 11, 6]

After backtrack at level 13
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11]


Before reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11]


Solution : [0, 8, 1, 4, 14, 11] has cost 47.


Decide in level 13 among pending : [3, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11, 3]


New level: 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11, 3]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 4), (19, 5), (20, 2), (21, 2), (22, 5), (23, 2), (24, -1), (25, 5), (26, 5), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 3]


Solution : [0, 8, 1, 4, 14, 11, 3] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 14, 11, 3]

After backtrack at level 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11]


Before reduction : 
 pending  : [16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 9, 15]
 solution : [0, 8, 1, 4, 14, 11]

Essensial at level 14 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 14, 11, 9]


Solution : [0, 8, 1, 4, 14, 11, 9] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 14, 11, 9]

After backtrack at level 14
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 11]


Before backtrack at level 13
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15]
 solution : [0, 8, 1, 4, 14, 11]

After backtrack at level 13
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3]
 solution : [0, 8, 1, 4, 14, 11]


Before backtrack at level 12
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3]
 solution : [0, 8, 1, 4, 14, 11]

After backtrack at level 12
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6]
 solution : [0, 8, 1, 4, 14, 11]


Before backtrack at level 11
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6]
 solution : [0, 8, 1, 4, 14, 11]

After backtrack at level 11
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7]
 solution : [0, 8, 1, 4, 14]


Before backtrack at level 10
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7]
 solution : [0, 8, 1, 4, 14]

After backtrack at level 10
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12]
 solution : [0, 8, 1, 4, 14]


Before backtrack at level 9
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12]
 solution : [0, 8, 1, 4, 14]

After backtrack at level 9
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13]
 solution : [0, 8, 1, 4, 14]


Before backtrack at level 8
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13]
 solution : [0, 8, 1, 4, 14]

After backtrack at level 8
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27]
 solution : [0, 8, 1, 4, 14]


Before backtrack at level 7
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27]
 solution : [0, 8, 1, 4, 14]

After backtrack at level 7
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10]
 solution : [0, 8, 1, 4, 14]


Before backtrack at level 6
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10]
 solution : [0, 8, 1, 4, 14]

After backtrack at level 6
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5]
 solution : [0, 8, 1, 4, 14]


Before backtrack at level 5
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5]
 solution : [0, 8, 1, 4, 14]

After backtrack at level 5
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 14]


Before backtrack at level 4
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 14]

After backtrack at level 4
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28, 2]
 solution : [0, 8, 1, 4, 14]


Invert decision for 14 at level 3


New level: 4
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28, 2]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28, 2]
 solution : [0, 8, 1, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28, 2]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 4 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28, 2]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

Decide 2 with phase True at level 4

After decision at level 4
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2]


New level: 5
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 15, 3, 6, 11, 30, 31, 32, 33, 7, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, 0), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, 0), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, 192), (31, 192), (32, 32), (33, 32)]

Covered at level 5 : {7, 15}

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 30, 31, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 30, 31, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, 0), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, 0), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, 192), (31, 192), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, 192), (31, 192), (32, 32), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 30, 31, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 5 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 30, 31, 32, 33, 12, 13, 27, 10, 5, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, 192), (31, 192), (32, 32), (33, 32)]

Decide 30 with phase True at level 5

After decision at level 5
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 31, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2, 30]


New level: 6
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 31, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2, 30]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 31, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2, 30]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, 192), (31, 192), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, 0), (32, 8), (33, 8)]

Covered at level 6 : {31}

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2, 30]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2, 30]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, 0), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2, 30]


Solution : [0, 8, 1, 4, 2, 30] has cost 41.


Decide in level 6 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 11, 32, 33, 12, 13, 27, 10, 5, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


New level: 7
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 32, 33, 12, 13, 27, 10, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 0), (11, -1), (12, 0), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 10, 12}

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 0), (11, -1), (12, 0), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Solution : [0, 8, 1, 4, 2, 30, 11] has cost 47.


Decide in level 7 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 6, 13, 27, 5, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 7

After decision at level 7
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 6]


New level: 8
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 6]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {3, 5, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 11, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 11, 6]


Solution : [0, 8, 1, 4, 2, 30, 11, 6] has cost 60.


Before backtrack at level 8
 pending : []
 solution : [0, 8, 1, 4, 2, 30, 11, 6]

After backtrack at level 8
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 6]


Invert decision for 6 at level 7


New level: 8
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 13, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Solution : [0, 8, 1, 4, 2, 30, 11] has cost 47.


Decide in level 8 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 13, 27, 5, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 13]


New level: 9
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 13]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {3, 5, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 11, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 11, 13]


Solution : [0, 8, 1, 4, 2, 30, 11, 13] has cost 53.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 2, 30, 11, 13]

After backtrack at level 9
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 5, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Solution : [0, 8, 1, 4, 2, 30, 11] has cost 47.


Decide in level 9 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 5, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 5]


New level: 10
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 5]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 11, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 11, 5]


Solution : [0, 8, 1, 4, 2, 30, 11, 5] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 2, 30, 11, 5]

After backtrack at level 10
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Solution : [0, 8, 1, 4, 2, 30, 11] has cost 47.


Decide in level 10 among pending : [9, 16, 17, 19, 22, 25, 26, 20, 21, 23, 18, 29, 3, 27, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 10

After decision at level 10
 pending : [9, 16, 17, 19, 22, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 25]


New level: 11
 pending : [9, 16, 17, 19, 22, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 25]


Before reduction : 
 pending  : [9, 16, 17, 19, 22, 26, 20, 21, 23, 18, 29, 3, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 25]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 25]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 25]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 25]


Solution : [0, 8, 1, 4, 2, 30, 11, 25] has cost 81.


Before backtrack at level 11
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 25]

After backtrack at level 11
 pending : [9, 3, 16, 17, 19, 22, 26, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 25]


Invert decision for 25 at level 10


New level: 11
 pending : [9, 3, 16, 17, 19, 22, 26, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before reduction : 
 pending  : [9, 3, 16, 17, 19, 22, 26, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 3, 16, 17, 19, 22, 26, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Solution : [0, 8, 1, 4, 2, 30, 11] has cost 47.


Decide in level 11 among pending : [9, 3, 16, 17, 19, 22, 26, 20, 21, 23, 18, 29, 27, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 26 with phase True at level 11

After decision at level 11
 pending : [9, 3, 16, 17, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 26]


New level: 12
 pending : [9, 3, 16, 17, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 26]


Before reduction : 
 pending  : [9, 3, 16, 17, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 26]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 26]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 26]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 26]


Solution : [0, 8, 1, 4, 2, 30, 11, 26] has cost 81.


Before backtrack at level 12
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 26]

After backtrack at level 12
 pending : [9, 3, 16, 17, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 26]


Invert decision for 26 at level 11


New level: 12
 pending : [9, 3, 16, 17, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before reduction : 
 pending  : [9, 3, 16, 17, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3, 16, 17, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Solution : [0, 8, 1, 4, 2, 30, 11] has cost 47.


Decide in level 12 among pending : [9, 3, 16, 17, 19, 22, 20, 21, 23, 18, 29, 27, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 17 with phase True at level 12

After decision at level 12
 pending : [9, 3, 16, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 17]


New level: 13
 pending : [9, 3, 16, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 17]


Before reduction : 
 pending  : [9, 3, 16, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 17]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {16, 18, 19, 20, 21, 22, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 17]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 17]


Solution : [0, 8, 1, 4, 2, 30, 11, 17] has cost 81.


Before backtrack at level 13
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 17]

After backtrack at level 13
 pending : [9, 3, 16, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11, 17]


Invert decision for 17 at level 12


New level: 13
 pending : [9, 3, 16, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before reduction : 
 pending  : [9, 3, 16, 19, 22, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]

Essensial at level 13 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {16, 18, 19, 20, 21, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 22]


Solution : [0, 8, 1, 4, 2, 30, 11, 22] has cost 81.


Before backtrack at level 13
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 11, 22]

After backtrack at level 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before backtrack at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 11]

After backtrack at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before backtrack at level 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 11]

After backtrack at level 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before backtrack at level 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26]
 solution : [0, 8, 1, 4, 2, 30, 11]

After backtrack at level 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before backtrack at level 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 30, 11]

After backtrack at level 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before backtrack at level 8
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5]
 solution : [0, 8, 1, 4, 2, 30, 11]

After backtrack at level 8
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13]
 solution : [0, 8, 1, 4, 2, 30, 11]


Before backtrack at level 7
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13]
 solution : [0, 8, 1, 4, 2, 30, 11]

After backtrack at level 7
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 12, 10, 6]
 solution : [0, 8, 1, 4, 2, 30, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 12, 10, 6]
 solution : [0, 8, 1, 4, 2, 30]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 12, 10, 6]
 solution : [0, 8, 1, 4, 2, 30]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, -1), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 12, 10, 6]
 solution : [0, 8, 1, 4, 2, 30]


Solution : [0, 8, 1, 4, 2, 30] has cost 41.


Decide in level 7 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 12, 10, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, -1), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 12 with phase True at level 7

After decision at level 7
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 10, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]


New level: 8
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 10, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 10, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, -1), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 0), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 10}

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 0), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]


Solution : [0, 8, 1, 4, 2, 30, 12] has cost 47.


Decide in level 8 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12, 5]


New level: 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12, 5]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 12, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 12, 5]


Solution : [0, 8, 1, 4, 2, 30, 12, 5] has cost 53.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 4, 2, 30, 12, 5]

After backtrack at level 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]


Solution : [0, 8, 1, 4, 2, 30, 12] has cost 47.


Decide in level 9 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 9

After decision at level 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 30, 12, 13]


New level: 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 30, 12, 13]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 30, 12, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {3, 6, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 12, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 12, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 12, 13]


Solution : [0, 8, 1, 4, 2, 30, 12, 13] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 2, 30, 12, 13]

After backtrack at level 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 30, 12, 13]


Invert decision for 13 at level 9


New level: 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]


Solution : [0, 8, 1, 4, 2, 30, 12] has cost 47.


Decide in level 10 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 30, 12, 6]


New level: 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 30, 12, 6]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 30, 12, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 12, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 30, 12, 6]


Solution : [0, 8, 1, 4, 2, 30, 12, 6] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 2, 30, 12, 6]

After backtrack at level 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 30, 12, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 30, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 30, 12]


Solution : [0, 8, 1, 4, 2, 30, 12] has cost 47.


Decide in level 11 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 26 with phase True at level 11

After decision at level 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 30, 12, 26]


New level: 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 30, 12, 26]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 30, 12, 26]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 26]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 26]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 26]


Solution : [0, 8, 1, 4, 2, 30, 12, 26] has cost 81.


Before backtrack at level 12
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 26]

After backtrack at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 30, 12, 26]


Invert decision for 26 at level 11


New level: 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 30, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 30, 12]


Solution : [0, 8, 1, 4, 2, 30, 12] has cost 47.


Decide in level 12 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 12

After decision at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12, 25]


New level: 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12, 25]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 25]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 25]


Solution : [0, 8, 1, 4, 2, 30, 12, 25] has cost 81.


Before backtrack at level 13
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 25]

After backtrack at level 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12, 25]


Invert decision for 25 at level 12


New level: 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12]


Solution : [0, 8, 1, 4, 2, 30, 12] has cost 47.


Decide in level 13 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 13

After decision at level 13
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12, 22]


New level: 14
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12, 22]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12, 22]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {16, 17, 18, 19, 20, 21, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 22]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 22]


Solution : [0, 8, 1, 4, 2, 30, 12, 22] has cost 81.


Before backtrack at level 14
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 22]

After backtrack at level 14
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12, 22]


Invert decision for 22 at level 13


New level: 14
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 30, 12]

Essensial at level 14 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {16, 18, 19, 20, 21, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 17]


Solution : [0, 8, 1, 4, 2, 30, 12, 17] has cost 81.


Before backtrack at level 14
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 30, 12, 17]

After backtrack at level 14
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before backtrack at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 30, 12]

After backtrack at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before backtrack at level 12
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 30, 12]

After backtrack at level 12
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before backtrack at level 11
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25]
 solution : [0, 8, 1, 4, 2, 30, 12]

After backtrack at level 11
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before backtrack at level 10
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 30, 12]

After backtrack at level 10
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before backtrack at level 9
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6]
 solution : [0, 8, 1, 4, 2, 30, 12]

After backtrack at level 9
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13]
 solution : [0, 8, 1, 4, 2, 30, 12]


Before backtrack at level 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13]
 solution : [0, 8, 1, 4, 2, 30, 12]

After backtrack at level 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 2, 30, 12]


Invert decision for 12 at level 7


New level: 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 2, 30]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 2, 30]

Essensial at level 8 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 8 : {32, 33}

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 30, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 30, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 30, 10]


Solution : [0, 8, 1, 4, 2, 30, 10] has cost 54.


Before backtrack at level 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 30, 10]

After backtrack at level 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33]
 solution : [0, 8, 1, 4, 2, 30]


Before backtrack at level 7
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33]
 solution : [0, 8, 1, 4, 2, 30]

After backtrack at level 7
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12]
 solution : [0, 8, 1, 4, 2, 30]


Before backtrack at level 6
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12]
 solution : [0, 8, 1, 4, 2, 30]

After backtrack at level 6
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 31, 11]
 solution : [0, 8, 1, 4, 2, 30]


Invert decision for 30 at level 5


New level: 6
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 31, 11]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 31, 11]
 solution : [0, 8, 1, 4, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, 192), (32, 32), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 31, 11]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 6 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 31, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, 192), (32, 32), (33, 32)]

Decide 31 with phase True at level 6

After decision at level 6
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31]


New level: 7
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, 192), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31]


Solution : [0, 8, 1, 4, 2, 31] has cost 41.


Decide in level 7 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 10, 32, 33, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 10 with phase True at level 7

After decision at level 7
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31, 10]


New level: 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, 0), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 11, 12}

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, 0), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 10]


Solution : [0, 8, 1, 4, 2, 31, 10] has cost 54.


Before backtrack at level 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 10]

After backtrack at level 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31, 10]


Invert decision for 10 at level 7


New level: 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 12, 11]
 solution : [0, 8, 1, 4, 2, 31]


Solution : [0, 8, 1, 4, 2, 31] has cost 41.


Decide in level 8 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 12 with phase True at level 8

After decision at level 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 11]
 solution : [0, 8, 1, 4, 2, 31, 12]


New level: 9
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 11]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5, 32, 33, 11]
 solution : [0, 8, 1, 4, 2, 31, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 11}

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]


Solution : [0, 8, 1, 4, 2, 31, 12] has cost 47.


Decide in level 9 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12, 6]


New level: 10
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12, 6]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {3, 5, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 12, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 12, 6]


Solution : [0, 8, 1, 4, 2, 31, 12, 6] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 2, 31, 12, 6]

After backtrack at level 10
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 13, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]


Solution : [0, 8, 1, 4, 2, 31, 12] has cost 47.


Decide in level 10 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 5]
 solution : [0, 8, 1, 4, 2, 31, 12, 13]


New level: 11
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 5]
 solution : [0, 8, 1, 4, 2, 31, 12, 13]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 5]
 solution : [0, 8, 1, 4, 2, 31, 12, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {3, 5, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 12, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 12, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 12, 13]


Solution : [0, 8, 1, 4, 2, 31, 12, 13] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 2, 31, 12, 13]

After backtrack at level 11
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 5]
 solution : [0, 8, 1, 4, 2, 31, 12, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]


Solution : [0, 8, 1, 4, 2, 31, 12] has cost 47.


Decide in level 11 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 31, 12, 5]


New level: 12
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 31, 12, 5]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 31, 12, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 12, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 12, 5]


Solution : [0, 8, 1, 4, 2, 31, 12, 5] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 2, 31, 12, 5]

After backtrack at level 12
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 31, 12, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 31, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 31, 12]


Solution : [0, 8, 1, 4, 2, 31, 12] has cost 47.


Decide in level 12 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 12

After decision at level 12
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 26]
 solution : [0, 8, 1, 4, 2, 31, 12, 25]


New level: 13
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 26]
 solution : [0, 8, 1, 4, 2, 31, 12, 25]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 26]
 solution : [0, 8, 1, 4, 2, 31, 12, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 25]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 25]


Solution : [0, 8, 1, 4, 2, 31, 12, 25] has cost 81.


Before backtrack at level 13
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 25]

After backtrack at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 26]
 solution : [0, 8, 1, 4, 2, 31, 12, 25]


Invert decision for 25 at level 12


New level: 13
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 26]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 26]
 solution : [0, 8, 1, 4, 2, 31, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 26]
 solution : [0, 8, 1, 4, 2, 31, 12]


Solution : [0, 8, 1, 4, 2, 31, 12] has cost 47.


Decide in level 13 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 26 with phase True at level 13

After decision at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12, 26]


New level: 14
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12, 26]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12, 26]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 26]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 26]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 26]


Solution : [0, 8, 1, 4, 2, 31, 12, 26] has cost 81.


Before backtrack at level 14
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 26]

After backtrack at level 14
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12, 26]


Invert decision for 26 at level 13


New level: 14
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12]


Solution : [0, 8, 1, 4, 2, 31, 12] has cost 47.


Decide in level 14 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 17 with phase True at level 14

After decision at level 14
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12, 17]


New level: 15
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12, 17]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {16, 18, 19, 20, 21, 22, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 17]


Solution : [0, 8, 1, 4, 2, 31, 12, 17] has cost 81.


Before backtrack at level 15
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 17]

After backtrack at level 15
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12, 17]


Invert decision for 17 at level 14


New level: 15
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 12]

Essensial at level 15 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {16, 18, 19, 20, 21, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 22]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 22]


Solution : [0, 8, 1, 4, 2, 31, 12, 22] has cost 81.


Before backtrack at level 15
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 12, 22]

After backtrack at level 15
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before backtrack at level 14
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 31, 12]

After backtrack at level 14
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before backtrack at level 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 12]

After backtrack at level 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before backtrack at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26]
 solution : [0, 8, 1, 4, 2, 31, 12]

After backtrack at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before backtrack at level 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 31, 12]

After backtrack at level 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before backtrack at level 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5]
 solution : [0, 8, 1, 4, 2, 31, 12]

After backtrack at level 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13]
 solution : [0, 8, 1, 4, 2, 31, 12]


Before backtrack at level 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13]
 solution : [0, 8, 1, 4, 2, 31, 12]

After backtrack at level 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 11, 6]
 solution : [0, 8, 1, 4, 2, 31, 12]


Invert decision for 12 at level 8


New level: 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 11, 6]
 solution : [0, 8, 1, 4, 2, 31]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 32, 33, 11, 6]
 solution : [0, 8, 1, 4, 2, 31]

Essensial at level 9 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 9 : {32, 33}

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]


Solution : [0, 8, 1, 4, 2, 31, 11] has cost 47.


Decide in level 9 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 5, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11, 5]


New level: 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11, 5]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {3, 6, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 11, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 11, 5]


Solution : [0, 8, 1, 4, 2, 31, 11, 5] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 8, 1, 4, 2, 31, 11, 5]

After backtrack at level 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]


Solution : [0, 8, 1, 4, 2, 31, 11] has cost 47.


Decide in level 10 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 31, 11, 13]


New level: 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 31, 11, 13]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 31, 11, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {3, 6, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 11, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 11, 13]


Solution : [0, 8, 1, 4, 2, 31, 11, 13] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 8, 1, 4, 2, 31, 11, 13]

After backtrack at level 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 31, 11, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]


Solution : [0, 8, 1, 4, 2, 31, 11] has cost 47.


Decide in level 11 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 31, 11, 6]


New level: 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 31, 11, 6]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 31, 11, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 11, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 31, 11, 6]


Solution : [0, 8, 1, 4, 2, 31, 11, 6] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 8, 1, 4, 2, 31, 11, 6]

After backtrack at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 31, 11, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 31, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]
 solution : [0, 8, 1, 4, 2, 31, 11]


Solution : [0, 8, 1, 4, 2, 31, 11] has cost 47.


Decide in level 12 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 26, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 26 with phase True at level 12

After decision at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 31, 11, 26]


New level: 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 31, 11, 26]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 31, 11, 26]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 26]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 26]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 26]


Solution : [0, 8, 1, 4, 2, 31, 11, 26] has cost 81.


Before backtrack at level 13
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 26]

After backtrack at level 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 31, 11, 26]


Invert decision for 26 at level 12


New level: 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 31, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]
 solution : [0, 8, 1, 4, 2, 31, 11]


Solution : [0, 8, 1, 4, 2, 31, 11] has cost 47.


Decide in level 13 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 25 with phase True at level 13

After decision at level 13
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11, 25]


New level: 14
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11, 25]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11, 25]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, 19), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 25]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 25]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 25]


Solution : [0, 8, 1, 4, 2, 31, 11, 25] has cost 81.


Before backtrack at level 14
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 25]

After backtrack at level 14
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11, 25]


Invert decision for 25 at level 13


New level: 14
 pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11]


Solution : [0, 8, 1, 4, 2, 31, 11] has cost 47.


Decide in level 14 among pending : [9, 3, 22, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 14

After decision at level 14
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11, 22]


New level: 15
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11, 22]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11, 22]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 17), (18, 1), (19, 5), (20, 2), (21, 12), (22, 17), (23, 11), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {16, 17, 18, 19, 20, 21, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 22]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 22]


Solution : [0, 8, 1, 4, 2, 31, 11, 22] has cost 81.


Before backtrack at level 15
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 22]

After backtrack at level 15
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11, 22]


Invert decision for 22 at level 14


New level: 15
 pending : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 21, 23, 18, 29, 27, 28, 17]
 solution : [0, 8, 1, 4, 2, 31, 11]

Essensial at level 15 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {16, 18, 19, 20, 21, 23, 27, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 17]


Solution : [0, 8, 1, 4, 2, 31, 11, 17] has cost 81.


Before backtrack at level 15
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 31, 11, 17]

After backtrack at level 15
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before backtrack at level 14
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28]
 solution : [0, 8, 1, 4, 2, 31, 11]

After backtrack at level 14
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before backtrack at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22]
 solution : [0, 8, 1, 4, 2, 31, 11]

After backtrack at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before backtrack at level 12
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25]
 solution : [0, 8, 1, 4, 2, 31, 11]

After backtrack at level 12
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before backtrack at level 11
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26]
 solution : [0, 8, 1, 4, 2, 31, 11]

After backtrack at level 11
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before backtrack at level 10
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6]
 solution : [0, 8, 1, 4, 2, 31, 11]

After backtrack at level 10
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13]
 solution : [0, 8, 1, 4, 2, 31, 11]


Before backtrack at level 9
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13]
 solution : [0, 8, 1, 4, 2, 31, 11]

After backtrack at level 9
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5]
 solution : [0, 8, 1, 4, 2, 31]


Before backtrack at level 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5]
 solution : [0, 8, 1, 4, 2, 31]

After backtrack at level 8
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12]
 solution : [0, 8, 1, 4, 2, 31]


Before backtrack at level 7
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12]
 solution : [0, 8, 1, 4, 2, 31]

After backtrack at level 7
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 31]


Invert decision for 31 at level 6


New level: 7
 pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 7 among pending : [9, 3, 17, 16, 19, 20, 21, 23, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 23 with phase True at level 7

After decision at level 7
 pending : [9, 3, 17, 16, 19, 20, 21, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 23]


New level: 8
 pending : [9, 3, 17, 16, 19, 20, 21, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 23]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 23]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 40), (18, 1), (19, 16), (20, 0), (21, 0), (22, 40), (23, -1), (24, -1), (25, 37), (26, 37), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 8 : {20, 21}

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 23]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 23]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 40), (18, 1), (19, 16), (20, 0), (21, 0), (22, 40), (23, -1), (24, -1), (25, 37), (26, 37), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 40), (18, 1), (19, 16), (20, -1), (21, -1), (22, 40), (23, -1), (24, -1), (25, 37), (26, 37), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 23]


Solution : [0, 8, 1, 4, 2, 23] has cost 59.


Before backtrack at level 8
 pending : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 23]

After backtrack at level 8
 pending : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10, 20, 21]
 solution : [0, 8, 1, 4, 2, 23]


Invert decision for 23 at level 7


New level: 8
 pending : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10, 20, 21]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10, 20, 21]
 solution : [0, 8, 1, 4, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 40), (18, 1), (19, 16), (20, -1), (21, -1), (22, 40), (23, -1), (24, -1), (25, 37), (26, 37), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, -1), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10, 20, 21]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 8 among pending : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 25, 26, 6, 13, 11, 32, 33, 5, 12, 10, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, -1), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 25 with phase True at level 8

After decision at level 8
 pending : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 26, 6, 13, 11, 32, 33, 5, 12, 10, 20, 21]
 solution : [0, 8, 1, 4, 2, 25]


New level: 9
 pending : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 26, 6, 13, 11, 32, 33, 5, 12, 10, 20, 21]
 solution : [0, 8, 1, 4, 2, 25]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 27, 28, 22, 26, 6, 13, 11, 32, 33, 5, 12, 10, 20, 21]
 solution : [0, 8, 1, 4, 2, 25]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, -1), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 1), (10, 128), (11, 128), (12, 128), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 9 : {16, 17, 18, 19, 20, 21, 22, 26, 29}

After reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 25]


Before reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 25]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 1), (10, 128), (11, 128), (12, 128), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 1), (10, 128), (11, 128), (12, 128), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 25]


Solution : [0, 8, 1, 4, 2, 25] has cost 59.


Before backtrack at level 9
 pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 25]

After backtrack at level 9
 pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 26, 20, 21]
 solution : [0, 8, 1, 4, 2, 25]


Invert decision for 25 at level 8


New level: 9
 pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 26, 20, 21]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 26, 20, 21]
 solution : [0, 8, 1, 4, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 1), (10, 128), (11, 128), (12, 128), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, -1), (24, -1), (25, -1), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 26, 20, 21]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 9 among pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 26, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, -1), (24, -1), (25, -1), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 26 with phase True at level 9

After decision at level 9
 pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 26]


New level: 10
 pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 26]


Before reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 26]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, -1), (24, -1), (25, -1), (26, 129), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 1), (10, 128), (11, 128), (12, 128), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 0), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 10 : {16, 17, 18, 19, 20, 21, 22, 29}

After reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 26]


Before reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 26]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 1), (10, 128), (11, 128), (12, 128), (13, 1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 0), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 1), (10, 128), (11, 128), (12, 128), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 26]


Solution : [0, 8, 1, 4, 2, 26] has cost 59.


Before backtrack at level 10
 pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10]
 solution : [0, 8, 1, 4, 2, 26]

After backtrack at level 10
 pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 26]


Invert decision for 26 at level 9


New level: 10
 pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, 1), (6, 1), (7, -1), (8, -1), (9, 1), (10, 128), (11, 128), (12, 128), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 10 among pending : [9, 3, 27, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 27 with phase True at level 10

After decision at level 10
 pending : [9, 3, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27]


New level: 11
 pending : [9, 3, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27]


Before reduction : 
 pending  : [9, 3, 28, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 18, 29, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 96), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, 0), (19, 32), (20, 2), (21, 18), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 11 : {18, 28, 29}

After reduction : 
 pending  : [9, 3, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27]


Before reduction : 
 pending  : [9, 3, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, 0), (19, 32), (20, 2), (21, 18), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, -1), (19, 32), (20, 2), (21, 18), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 3, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27]


Solution : [0, 8, 1, 4, 2, 27] has cost 35.


Decide in level 11 among pending : [9, 3, 6, 13, 11, 32, 33, 5, 12, 10, 17, 16, 19, 22, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, -1), (19, 32), (20, 2), (21, 18), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [9, 3, 6, 13, 32, 33, 5, 12, 10, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


New level: 12
 pending : [9, 3, 6, 13, 32, 33, 5, 12, 10, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before reduction : 
 pending  : [9, 3, 6, 13, 32, 33, 5, 12, 10, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, -1), (19, 32), (20, 2), (21, 18), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 0), (11, -1), (12, 0), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 12}

After reduction : 
 pending  : [9, 3, 6, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before reduction : 
 pending  : [9, 3, 6, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 0), (11, -1), (12, 0), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3, 6, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Solution : [0, 8, 1, 4, 2, 27, 11] has cost 41.


Decide in level 12 among pending : [9, 3, 6, 13, 5, 17, 16, 19, 22, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [9, 3, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 6]


New level: 13
 pending : [9, 3, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 6]


Before reduction : 
 pending  : [9, 3, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {3, 5, 9, 13, 16, 17, 19, 20, 21, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 11, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 11, 6]


Solution : [0, 8, 1, 4, 2, 27, 11, 6] has cost 54.


Before backtrack at level 13
 pending : []
 solution : [0, 8, 1, 4, 2, 27, 11, 6]

After backtrack at level 13
 pending : [9, 3, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [9, 3, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before reduction : 
 pending  : [9, 3, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3, 13, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Solution : [0, 8, 1, 4, 2, 27, 11] has cost 41.


Decide in level 13 among pending : [9, 3, 13, 5, 17, 16, 19, 22, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 13

After decision at level 13
 pending : [9, 3, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 13]


New level: 14
 pending : [9, 3, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 13]


Before reduction : 
 pending  : [9, 3, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {3, 5, 9, 16, 17, 19, 20, 21, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 11, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 11, 13]


Solution : [0, 8, 1, 4, 2, 27, 11, 13] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 2, 27, 11, 13]

After backtrack at level 14
 pending : [9, 3, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 13]


Invert decision for 13 at level 13


New level: 14
 pending : [9, 3, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before reduction : 
 pending  : [9, 3, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3, 5, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Solution : [0, 8, 1, 4, 2, 27, 11] has cost 41.


Decide in level 14 among pending : [9, 3, 5, 17, 16, 19, 22, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [9, 3, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 5]


New level: 15
 pending : [9, 3, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 5]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {3, 9, 16, 17, 19, 20, 21, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 11, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 11, 5]


Solution : [0, 8, 1, 4, 2, 27, 11, 5] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 8, 1, 4, 2, 27, 11, 5]

After backtrack at level 15
 pending : [9, 3, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [9, 3, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Solution : [0, 8, 1, 4, 2, 27, 11] has cost 41.


Decide in level 15 among pending : [9, 3, 17, 16, 19, 22, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 17 with phase True at level 15

After decision at level 15
 pending : [9, 3, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 17]


New level: 16
 pending : [9, 3, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 17]


Before reduction : 
 pending  : [9, 3, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 17]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {16, 19, 20, 21, 22}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 11, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 11, 17]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 11, 17]


Solution : [0, 8, 1, 4, 2, 27, 11, 17] has cost 75.


Before backtrack at level 16
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 11, 17]

After backtrack at level 16
 pending : [9, 3, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11, 17]


Invert decision for 17 at level 15


New level: 16
 pending : [9, 3, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before reduction : 
 pending  : [9, 3, 16, 19, 22, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]

Essensial at level 16 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {16, 19, 20, 21}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 11, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 11, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 11, 22]


Solution : [0, 8, 1, 4, 2, 27, 11, 22] has cost 75.


Before backtrack at level 16
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 11, 22]

After backtrack at level 16
 pending : [9, 3, 22, 16, 19, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before backtrack at level 15
 pending : [9, 3, 22, 16, 19, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 11]

After backtrack at level 15
 pending : [9, 3, 22, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before backtrack at level 14
 pending : [9, 3, 22, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 11]

After backtrack at level 14
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 5]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before backtrack at level 13
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 5]
 solution : [0, 8, 1, 4, 2, 27, 11]

After backtrack at level 13
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13]
 solution : [0, 8, 1, 4, 2, 27, 11]


Before backtrack at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13]
 solution : [0, 8, 1, 4, 2, 27, 11]

After backtrack at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 32, 33, 12, 10, 6]
 solution : [0, 8, 1, 4, 2, 27, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 32, 33, 12, 10, 6]
 solution : [0, 8, 1, 4, 2, 27]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 32, 33, 12, 10, 6]
 solution : [0, 8, 1, 4, 2, 27]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 128), (11, -1), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, -1), (19, 32), (20, 2), (21, 18), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 32, 33, 12, 10, 6]
 solution : [0, 8, 1, 4, 2, 27]


Solution : [0, 8, 1, 4, 2, 27] has cost 35.


Decide in level 12 among pending : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 32, 33, 12, 10, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 128), (11, -1), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, -1), (19, 32), (20, 2), (21, 18), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 12 with phase True at level 12

After decision at level 12
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 32, 33, 10, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]


New level: 13
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 32, 33, 10, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 32, 33, 10, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 128), (11, -1), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, -1), (19, 32), (20, 2), (21, 18), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 0), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10}

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, 0), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]


Solution : [0, 8, 1, 4, 2, 27, 12] has cost 41.


Decide in level 13 among pending : [9, 3, 22, 16, 19, 20, 21, 17, 5, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12, 5]


New level: 14
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12, 5]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {3, 6, 9, 13, 16, 17, 19, 20, 21, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 12, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 12, 5]


Solution : [0, 8, 1, 4, 2, 27, 12, 5] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 2, 27, 12, 5]

After backtrack at level 14
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]


Solution : [0, 8, 1, 4, 2, 27, 12] has cost 41.


Decide in level 14 among pending : [9, 3, 22, 16, 19, 20, 21, 17, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 14

After decision at level 14
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 6]
 solution : [0, 8, 1, 4, 2, 27, 12, 13]


New level: 15
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 6]
 solution : [0, 8, 1, 4, 2, 27, 12, 13]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 6]
 solution : [0, 8, 1, 4, 2, 27, 12, 13]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {3, 6, 9, 16, 17, 19, 20, 21, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 12, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 12, 13]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 12, 13]


Solution : [0, 8, 1, 4, 2, 27, 12, 13] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 8, 1, 4, 2, 27, 12, 13]

After backtrack at level 15
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 6]
 solution : [0, 8, 1, 4, 2, 27, 12, 13]


Invert decision for 13 at level 14


New level: 15
 pending : [9, 3, 22, 16, 19, 20, 21, 17, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]


Solution : [0, 8, 1, 4, 2, 27, 12] has cost 41.


Decide in level 15 among pending : [9, 3, 22, 16, 19, 20, 21, 17, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 15

After decision at level 15
 pending : [9, 3, 22, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12, 6]


New level: 16
 pending : [9, 3, 22, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12, 6]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {3, 9, 16, 17, 19, 20, 21, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 12, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 27, 12, 6]


Solution : [0, 8, 1, 4, 2, 27, 12, 6] has cost 54.


Before backtrack at level 16
 pending : []
 solution : [0, 8, 1, 4, 2, 27, 12, 6]

After backtrack at level 16
 pending : [9, 3, 22, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12, 6]


Invert decision for 6 at level 15


New level: 16
 pending : [9, 3, 22, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12]


Solution : [0, 8, 1, 4, 2, 27, 12] has cost 41.


Decide in level 16 among pending : [9, 3, 22, 16, 19, 20, 21, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 16

After decision at level 16
 pending : [9, 3, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12, 22]


New level: 17
 pending : [9, 3, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12, 22]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {16, 17, 19, 20, 21}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 12, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 12, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 12, 22]


Solution : [0, 8, 1, 4, 2, 27, 12, 22] has cost 75.


Before backtrack at level 17
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 12, 22]

After backtrack at level 17
 pending : [9, 3, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12, 22]


Invert decision for 22 at level 16


New level: 17
 pending : [9, 3, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 21, 17]
 solution : [0, 8, 1, 4, 2, 27, 12]

Essensial at level 17 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {16, 19, 20, 21}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 12, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 12, 17]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 12, 17]


Solution : [0, 8, 1, 4, 2, 27, 12, 17] has cost 75.


Before backtrack at level 17
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 27, 12, 17]

After backtrack at level 17
 pending : [9, 3, 17, 16, 19, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before backtrack at level 16
 pending : [9, 3, 17, 16, 19, 20, 21]
 solution : [0, 8, 1, 4, 2, 27, 12]

After backtrack at level 16
 pending : [9, 3, 17, 16, 19, 20, 21, 22]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before backtrack at level 15
 pending : [9, 3, 17, 16, 19, 20, 21, 22]
 solution : [0, 8, 1, 4, 2, 27, 12]

After backtrack at level 15
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before backtrack at level 14
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6]
 solution : [0, 8, 1, 4, 2, 27, 12]

After backtrack at level 14
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13]
 solution : [0, 8, 1, 4, 2, 27, 12]


Before backtrack at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13]
 solution : [0, 8, 1, 4, 2, 27, 12]

After backtrack at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 2, 27, 12]


Invert decision for 12 at level 12


New level: 13
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 2, 27]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 2, 27]

Essensial at level 13 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 13 : {32, 33}

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 27, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 27, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 27, 10]


Solution : [0, 8, 1, 4, 2, 27, 10] has cost 48.


Before backtrack at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 27, 10]

After backtrack at level 13
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5, 10, 32, 33]
 solution : [0, 8, 1, 4, 2, 27]


Before backtrack at level 12
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5, 10, 32, 33]
 solution : [0, 8, 1, 4, 2, 27]

After backtrack at level 12
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5, 10, 32, 33, 12]
 solution : [0, 8, 1, 4, 2, 27]


Before backtrack at level 11
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5, 10, 32, 33, 12]
 solution : [0, 8, 1, 4, 2, 27]

After backtrack at level 11
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2, 27]


Invert decision for 27 at level 10


New level: 11
 pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 11 among pending : [9, 3, 17, 16, 19, 20, 21, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 21 with phase True at level 11

After decision at level 11
 pending : [9, 3, 17, 16, 19, 20, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2, 21]


New level: 12
 pending : [9, 3, 17, 16, 19, 20, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2, 21]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2, 21]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 40), (18, 1), (19, 16), (20, 0), (21, -1), (22, 40), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 64), (29, 1), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 12 : {20}

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2, 21]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2, 21]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 40), (18, 1), (19, 16), (20, 0), (21, -1), (22, 40), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 64), (29, 1), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 40), (18, 1), (19, 16), (20, -1), (21, -1), (22, 40), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 64), (29, 1), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2, 21]


Solution : [0, 8, 1, 4, 2, 21] has cost 59.


Before backtrack at level 12
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11]
 solution : [0, 8, 1, 4, 2, 21]

After backtrack at level 12
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11, 20]
 solution : [0, 8, 1, 4, 2, 21]


Invert decision for 21 at level 11


New level: 12
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11, 20]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11, 20]
 solution : [0, 8, 1, 4, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 16), (17, 40), (18, 1), (19, 16), (20, -1), (21, -1), (22, 40), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 64), (29, 1), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11, 20]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 12 among pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 10, 32, 33, 12, 28, 18, 29, 11, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 10 with phase True at level 12

After decision at level 12
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 32, 33, 12, 28, 18, 29, 11, 20]
 solution : [0, 8, 1, 4, 2, 10]


New level: 13
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 32, 33, 12, 28, 18, 29, 11, 20]
 solution : [0, 8, 1, 4, 2, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 32, 33, 12, 28, 18, 29, 11, 20]
 solution : [0, 8, 1, 4, 2, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, 128), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, 0), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 11, 12}

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29, 20]
 solution : [0, 8, 1, 4, 2, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29, 20]
 solution : [0, 8, 1, 4, 2, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, 0), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29, 20]
 solution : [0, 8, 1, 4, 2, 10]


Solution : [0, 8, 1, 4, 2, 10] has cost 38.


Decide in level 13 among pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 13

After decision at level 13
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 20]


New level: 14
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 20]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 20]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 20]


Solution : [0, 8, 1, 4, 2, 10, 20] has cost 48.


Before backtrack at level 14
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 20]

After backtrack at level 14
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 20]


Invert decision for 20 at level 13


New level: 14
 pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Solution : [0, 8, 1, 4, 2, 10] has cost 38.


Decide in level 14 among pending : [9, 3, 17, 16, 19, 22, 6, 13, 5, 28, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 14

After decision at level 14
 pending : [9, 3, 17, 16, 19, 22, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 6]


New level: 15
 pending : [9, 3, 17, 16, 19, 22, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 6]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {3, 5, 9, 13, 16, 17, 18, 19, 22, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 10, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 10, 6]


Solution : [0, 8, 1, 4, 2, 10, 6] has cost 51.


Before backtrack at level 15
 pending : []
 solution : [0, 8, 1, 4, 2, 10, 6]

After backtrack at level 15
 pending : [9, 3, 17, 16, 19, 22, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 6]


Invert decision for 6 at level 14


New level: 15
 pending : [9, 3, 17, 16, 19, 22, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 13, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Solution : [0, 8, 1, 4, 2, 10] has cost 38.


Decide in level 15 among pending : [9, 3, 17, 16, 19, 22, 13, 5, 28, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 15

After decision at level 15
 pending : [9, 3, 17, 16, 19, 22, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 13]


New level: 16
 pending : [9, 3, 17, 16, 19, 22, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 13]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {3, 5, 9, 16, 17, 18, 19, 22, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 10, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 10, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 10, 13]


Solution : [0, 8, 1, 4, 2, 10, 13] has cost 44.


Before backtrack at level 16
 pending : []
 solution : [0, 8, 1, 4, 2, 10, 13]

After backtrack at level 16
 pending : [9, 3, 17, 16, 19, 22, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 13]


Invert decision for 13 at level 15


New level: 16
 pending : [9, 3, 17, 16, 19, 22, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 5, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Solution : [0, 8, 1, 4, 2, 10] has cost 38.


Decide in level 16 among pending : [9, 3, 17, 16, 19, 22, 5, 28, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [9, 3, 17, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 5]


New level: 17
 pending : [9, 3, 17, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 5]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {3, 9, 16, 17, 18, 19, 22, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 10, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 10, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 10, 5]


Solution : [0, 8, 1, 4, 2, 10, 5] has cost 44.


Before backtrack at level 17
 pending : []
 solution : [0, 8, 1, 4, 2, 10, 5]

After backtrack at level 17
 pending : [9, 3, 17, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [9, 3, 17, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Solution : [0, 8, 1, 4, 2, 10] has cost 38.


Decide in level 17 among pending : [9, 3, 17, 16, 19, 22, 28, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 17 with phase True at level 17

After decision at level 17
 pending : [9, 3, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 17]


New level: 18
 pending : [9, 3, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 17]


Before reduction : 
 pending  : [9, 3, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {16, 18, 19, 22, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 10, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 10, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 10, 17]


Solution : [0, 8, 1, 4, 2, 10, 17] has cost 72.


Before backtrack at level 18
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 10, 17]

After backtrack at level 18
 pending : [9, 3, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10, 17]


Invert decision for 17 at level 17


New level: 18
 pending : [9, 3, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Before reduction : 
 pending  : [9, 3, 16, 19, 22, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]

Essensial at level 18 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {16, 18, 19, 28, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 10, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 10, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 10, 22]


Solution : [0, 8, 1, 4, 2, 10, 22] has cost 72.


Before backtrack at level 18
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 10, 22]

After backtrack at level 18
 pending : [9, 3, 22, 16, 19, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]


Before backtrack at level 17
 pending : [9, 3, 22, 16, 19, 28, 18, 29]
 solution : [0, 8, 1, 4, 2, 10]

After backtrack at level 17
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 10]


Before backtrack at level 16
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 10]

After backtrack at level 16
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5]
 solution : [0, 8, 1, 4, 2, 10]


Before backtrack at level 15
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5]
 solution : [0, 8, 1, 4, 2, 10]

After backtrack at level 15
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5, 13]
 solution : [0, 8, 1, 4, 2, 10]


Before backtrack at level 14
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5, 13]
 solution : [0, 8, 1, 4, 2, 10]

After backtrack at level 14
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 10]


Before backtrack at level 13
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 10]

After backtrack at level 13
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2, 10]


Invert decision for 10 at level 12


New level: 13
 pending : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 13 among pending : [9, 3, 22, 16, 19, 28, 18, 29, 17, 5, 13, 6, 32, 33, 12, 11, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 28 with phase True at level 13

After decision at level 13
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2, 28]


New level: 14
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2, 28]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2, 28]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 128), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, 0), (19, 32), (20, 2), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 14 : {18, 29}

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2, 28]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2, 28]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, 0), (19, 32), (20, 2), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, -1), (19, 32), (20, 2), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 5, 13, 6, 32, 33, 12, 11, 20]
 solution : [0, 8, 1, 4, 2, 28]


Solution : [0, 8, 1, 4, 2, 28] has cost 35.


Decide in level 14 among pending : [9, 3, 22, 16, 19, 17, 5, 13, 6, 32, 33, 12, 11, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, -1), (19, 32), (20, 2), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 12 with phase True at level 14

After decision at level 14
 pending : [9, 3, 22, 16, 19, 17, 5, 13, 6, 32, 33, 11, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


New level: 15
 pending : [9, 3, 22, 16, 19, 17, 5, 13, 6, 32, 33, 11, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 5, 13, 6, 32, 33, 11, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 32), (17, 64), (18, -1), (19, 32), (20, 2), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 11}

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 5, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 5, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 5, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Solution : [0, 8, 1, 4, 2, 28, 12] has cost 41.


Decide in level 15 among pending : [9, 3, 22, 16, 19, 17, 5, 13, 6, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [9, 3, 22, 16, 19, 17, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 5]


New level: 16
 pending : [9, 3, 22, 16, 19, 17, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 5]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {3, 6, 9, 13, 16, 17, 19, 20, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 12, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 12, 5]


Solution : [0, 8, 1, 4, 2, 28, 12, 5] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 8, 1, 4, 2, 28, 12, 5]

After backtrack at level 16
 pending : [9, 3, 22, 16, 19, 17, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [9, 3, 22, 16, 19, 17, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Solution : [0, 8, 1, 4, 2, 28, 12] has cost 41.


Decide in level 16 among pending : [9, 3, 22, 16, 19, 17, 13, 6, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 16

After decision at level 16
 pending : [9, 3, 22, 16, 19, 17, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 13]


New level: 17
 pending : [9, 3, 22, 16, 19, 17, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 13]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 13]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {3, 6, 9, 16, 17, 19, 20, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 12, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 12, 13]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 12, 13]


Solution : [0, 8, 1, 4, 2, 28, 12, 13] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 8, 1, 4, 2, 28, 12, 13]

After backtrack at level 17
 pending : [9, 3, 22, 16, 19, 17, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 13]


Invert decision for 13 at level 16


New level: 17
 pending : [9, 3, 22, 16, 19, 17, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 6, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Solution : [0, 8, 1, 4, 2, 28, 12] has cost 41.


Decide in level 17 among pending : [9, 3, 22, 16, 19, 17, 6, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 17

After decision at level 17
 pending : [9, 3, 22, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 6]


New level: 18
 pending : [9, 3, 22, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 6]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {3, 9, 16, 17, 19, 20, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 12, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 12, 6]


Solution : [0, 8, 1, 4, 2, 28, 12, 6] has cost 54.


Before backtrack at level 18
 pending : []
 solution : [0, 8, 1, 4, 2, 28, 12, 6]

After backtrack at level 18
 pending : [9, 3, 22, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 6]


Invert decision for 6 at level 17


New level: 18
 pending : [9, 3, 22, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Solution : [0, 8, 1, 4, 2, 28, 12] has cost 41.


Decide in level 18 among pending : [9, 3, 22, 16, 19, 17, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 18

After decision at level 18
 pending : [9, 3, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 22]


New level: 19
 pending : [9, 3, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 22]


Before reduction : 
 pending  : [9, 3, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {16, 17, 19, 20}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 12, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 12, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 12, 22]


Solution : [0, 8, 1, 4, 2, 28, 12, 22] has cost 75.


Before backtrack at level 19
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 12, 22]

After backtrack at level 19
 pending : [9, 3, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12, 22]


Invert decision for 22 at level 18


New level: 19
 pending : [9, 3, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before reduction : 
 pending  : [9, 3, 16, 19, 17, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]

Essensial at level 19 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {16, 19, 20}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 12, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 12, 17]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 12, 17]


Solution : [0, 8, 1, 4, 2, 28, 12, 17] has cost 75.


Before backtrack at level 19
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 12, 17]

After backtrack at level 19
 pending : [9, 3, 17, 16, 19, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before backtrack at level 18
 pending : [9, 3, 17, 16, 19, 20]
 solution : [0, 8, 1, 4, 2, 28, 12]

After backtrack at level 18
 pending : [9, 3, 17, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before backtrack at level 17
 pending : [9, 3, 17, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 12]

After backtrack at level 17
 pending : [9, 3, 17, 16, 19, 20, 22, 6]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before backtrack at level 16
 pending : [9, 3, 17, 16, 19, 20, 22, 6]
 solution : [0, 8, 1, 4, 2, 28, 12]

After backtrack at level 16
 pending : [9, 3, 17, 16, 19, 20, 22, 6, 13]
 solution : [0, 8, 1, 4, 2, 28, 12]


Before backtrack at level 15
 pending : [9, 3, 17, 16, 19, 20, 22, 6, 13]
 solution : [0, 8, 1, 4, 2, 28, 12]

After backtrack at level 15
 pending : [9, 3, 17, 16, 19, 20, 22, 6, 13, 32, 33, 11, 5]
 solution : [0, 8, 1, 4, 2, 28, 12]


Invert decision for 12 at level 14


New level: 15
 pending : [9, 3, 17, 16, 19, 20, 22, 6, 13, 32, 33, 11, 5]
 solution : [0, 8, 1, 4, 2, 28]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 6, 13, 32, 33, 11, 5]
 solution : [0, 8, 1, 4, 2, 28]

Essensial at level 15 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33}

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]


Solution : [0, 8, 1, 4, 2, 28, 11] has cost 41.


Decide in level 15 among pending : [9, 3, 17, 16, 19, 20, 22, 6, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 15

After decision at level 15
 pending : [9, 3, 17, 16, 19, 20, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11, 6]


New level: 16
 pending : [9, 3, 17, 16, 19, 20, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11, 6]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {3, 5, 9, 13, 16, 17, 19, 20, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 11, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 11, 6]


Solution : [0, 8, 1, 4, 2, 28, 11, 6] has cost 54.


Before backtrack at level 16
 pending : []
 solution : [0, 8, 1, 4, 2, 28, 11, 6]

After backtrack at level 16
 pending : [9, 3, 17, 16, 19, 20, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11, 6]


Invert decision for 6 at level 15


New level: 16
 pending : [9, 3, 17, 16, 19, 20, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]


Solution : [0, 8, 1, 4, 2, 28, 11] has cost 41.


Decide in level 16 among pending : [9, 3, 17, 16, 19, 20, 22, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 16

After decision at level 16
 pending : [9, 3, 17, 16, 19, 20, 22, 5]
 solution : [0, 8, 1, 4, 2, 28, 11, 13]


New level: 17
 pending : [9, 3, 17, 16, 19, 20, 22, 5]
 solution : [0, 8, 1, 4, 2, 28, 11, 13]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 5]
 solution : [0, 8, 1, 4, 2, 28, 11, 13]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {3, 5, 9, 16, 17, 19, 20, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 11, 13]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 11, 13]


Solution : [0, 8, 1, 4, 2, 28, 11, 13] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 8, 1, 4, 2, 28, 11, 13]

After backtrack at level 17
 pending : [9, 3, 17, 16, 19, 20, 22, 5]
 solution : [0, 8, 1, 4, 2, 28, 11, 13]


Invert decision for 13 at level 16


New level: 17
 pending : [9, 3, 17, 16, 19, 20, 22, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]


Solution : [0, 8, 1, 4, 2, 28, 11] has cost 41.


Decide in level 17 among pending : [9, 3, 17, 16, 19, 20, 22, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 17

After decision at level 17
 pending : [9, 3, 17, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11, 5]


New level: 18
 pending : [9, 3, 17, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11, 5]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {3, 9, 16, 17, 19, 20, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 11, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 28, 11, 5]


Solution : [0, 8, 1, 4, 2, 28, 11, 5] has cost 47.


Before backtrack at level 18
 pending : []
 solution : [0, 8, 1, 4, 2, 28, 11, 5]

After backtrack at level 18
 pending : [9, 3, 17, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11, 5]


Invert decision for 5 at level 17


New level: 18
 pending : [9, 3, 17, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11]


Solution : [0, 8, 1, 4, 2, 28, 11] has cost 41.


Decide in level 18 among pending : [9, 3, 17, 16, 19, 20, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 17 with phase True at level 18

After decision at level 18
 pending : [9, 3, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11, 17]


New level: 19
 pending : [9, 3, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11, 17]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11, 17]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {16, 19, 20, 22}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 11, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 11, 17]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 11, 17]


Solution : [0, 8, 1, 4, 2, 28, 11, 17] has cost 75.


Before backtrack at level 19
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 11, 17]

After backtrack at level 19
 pending : [9, 3, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11, 17]


Invert decision for 17 at level 18


New level: 19
 pending : [9, 3, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11]


Before reduction : 
 pending  : [9, 3, 16, 19, 20, 22]
 solution : [0, 8, 1, 4, 2, 28, 11]

Essensial at level 19 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {16, 19, 20}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 11, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 11, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 11, 22]


Solution : [0, 8, 1, 4, 2, 28, 11, 22] has cost 75.


Before backtrack at level 19
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 28, 11, 22]

After backtrack at level 19
 pending : [9, 3, 22, 16, 19, 20]
 solution : [0, 8, 1, 4, 2, 28, 11]


Before backtrack at level 18
 pending : [9, 3, 22, 16, 19, 20]
 solution : [0, 8, 1, 4, 2, 28, 11]

After backtrack at level 18
 pending : [9, 3, 22, 16, 19, 20, 17]
 solution : [0, 8, 1, 4, 2, 28, 11]


Before backtrack at level 17
 pending : [9, 3, 22, 16, 19, 20, 17]
 solution : [0, 8, 1, 4, 2, 28, 11]

After backtrack at level 17
 pending : [9, 3, 22, 16, 19, 20, 17, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]


Before backtrack at level 16
 pending : [9, 3, 22, 16, 19, 20, 17, 5]
 solution : [0, 8, 1, 4, 2, 28, 11]

After backtrack at level 16
 pending : [9, 3, 22, 16, 19, 20, 17, 5, 13]
 solution : [0, 8, 1, 4, 2, 28, 11]


Before backtrack at level 15
 pending : [9, 3, 22, 16, 19, 20, 17, 5, 13]
 solution : [0, 8, 1, 4, 2, 28, 11]

After backtrack at level 15
 pending : [9, 3, 22, 16, 19, 20, 17, 5, 13, 11, 32, 33, 6]
 solution : [0, 8, 1, 4, 2, 28]


Before backtrack at level 14
 pending : [9, 3, 22, 16, 19, 20, 17, 5, 13, 11, 32, 33, 6]
 solution : [0, 8, 1, 4, 2, 28]

After backtrack at level 14
 pending : [9, 3, 22, 16, 19, 20, 17, 5, 13, 11, 32, 33, 6, 18, 29, 12]
 solution : [0, 8, 1, 4, 2, 28]


Invert decision for 28 at level 13


New level: 14
 pending : [9, 3, 22, 16, 19, 20, 17, 5, 13, 11, 32, 33, 6, 18, 29, 12]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 17, 5, 13, 11, 32, 33, 6, 18, 29, 12]
 solution : [0, 8, 1, 4, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 17, 5, 13, 11, 32, 33, 6, 18, 29, 12]
 solution : [0, 8, 1, 4, 2]


Solution : [0, 8, 1, 4, 2] has cost 25.


Decide in level 14 among pending : [9, 3, 22, 16, 19, 20, 17, 5, 13, 11, 32, 33, 6, 18, 29, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 11 with phase True at level 14

After decision at level 14
 pending : [9, 3, 22, 16, 19, 20, 17, 5, 13, 32, 33, 6, 18, 29, 12]
 solution : [0, 8, 1, 4, 2, 11]


New level: 15
 pending : [9, 3, 22, 16, 19, 20, 17, 5, 13, 32, 33, 6, 18, 29, 12]
 solution : [0, 8, 1, 4, 2, 11]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 17, 5, 13, 32, 33, 6, 18, 29, 12]
 solution : [0, 8, 1, 4, 2, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 52), (17, 80), (18, 8), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, 0), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 12}

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 17, 5, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 17, 5, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, 0), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 20, 17, 5, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11]


Solution : [0, 8, 1, 4, 2, 11] has cost 31.


Decide in level 15 among pending : [9, 3, 22, 16, 19, 20, 17, 5, 13, 6, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 15

After decision at level 15
 pending : [9, 3, 22, 16, 19, 17, 5, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


New level: 16
 pending : [9, 3, 22, 16, 19, 17, 5, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 5, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 5, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Solution : [0, 8, 1, 4, 2, 11, 20] has cost 41.


Decide in level 16 among pending : [9, 3, 22, 16, 19, 17, 5, 13, 6, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [9, 3, 22, 16, 19, 17, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 5]


New level: 17
 pending : [9, 3, 22, 16, 19, 17, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 5]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {3, 6, 9, 13, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 20, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 20, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 20, 5]


Solution : [0, 8, 1, 4, 2, 11, 20, 5] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 8, 1, 4, 2, 11, 20, 5]

After backtrack at level 17
 pending : [9, 3, 22, 16, 19, 17, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [9, 3, 22, 16, 19, 17, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 13, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Solution : [0, 8, 1, 4, 2, 11, 20] has cost 41.


Decide in level 17 among pending : [9, 3, 22, 16, 19, 17, 13, 6, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 17

After decision at level 17
 pending : [9, 3, 22, 16, 19, 17, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 13]


New level: 18
 pending : [9, 3, 22, 16, 19, 17, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 13]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 13]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {3, 6, 9, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 20, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 20, 13]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 20, 13]


Solution : [0, 8, 1, 4, 2, 11, 20, 13] has cost 47.


Before backtrack at level 18
 pending : []
 solution : [0, 8, 1, 4, 2, 11, 20, 13]

After backtrack at level 18
 pending : [9, 3, 22, 16, 19, 17, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 13]


Invert decision for 13 at level 17


New level: 18
 pending : [9, 3, 22, 16, 19, 17, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 6, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Solution : [0, 8, 1, 4, 2, 11, 20] has cost 41.


Decide in level 18 among pending : [9, 3, 22, 16, 19, 17, 6, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 18

After decision at level 18
 pending : [9, 3, 22, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 6]


New level: 19
 pending : [9, 3, 22, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 6]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {3, 9, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 20, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 20, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 20, 6]


Solution : [0, 8, 1, 4, 2, 11, 20, 6] has cost 54.


Before backtrack at level 19
 pending : []
 solution : [0, 8, 1, 4, 2, 11, 20, 6]

After backtrack at level 19
 pending : [9, 3, 22, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 6]


Invert decision for 6 at level 18


New level: 19
 pending : [9, 3, 22, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Solution : [0, 8, 1, 4, 2, 11, 20] has cost 41.


Decide in level 19 among pending : [9, 3, 22, 16, 19, 17, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 19

After decision at level 19
 pending : [9, 3, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 22]


New level: 20
 pending : [9, 3, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 22]


Before reduction : 
 pending  : [9, 3, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 22]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {16, 17, 18, 19, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 20, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 20, 22]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 20, 22]


Solution : [0, 8, 1, 4, 2, 11, 20, 22] has cost 75.


Before backtrack at level 20
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 20, 22]

After backtrack at level 20
 pending : [9, 3, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20, 22]


Invert decision for 22 at level 19


New level: 20
 pending : [9, 3, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Before reduction : 
 pending  : [9, 3, 16, 19, 17, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]

Essensial at level 20 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {16, 18, 19, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 20, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 20, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 20, 17]


Solution : [0, 8, 1, 4, 2, 11, 20, 17] has cost 75.


Before backtrack at level 20
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 20, 17]

After backtrack at level 20
 pending : [9, 3, 17, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]


Before backtrack at level 19
 pending : [9, 3, 17, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 2, 11, 20]

After backtrack at level 19
 pending : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 20]


Before backtrack at level 18
 pending : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 20]

After backtrack at level 18
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6]
 solution : [0, 8, 1, 4, 2, 11, 20]


Before backtrack at level 17
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6]
 solution : [0, 8, 1, 4, 2, 11, 20]

After backtrack at level 17
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13]
 solution : [0, 8, 1, 4, 2, 11, 20]


Before backtrack at level 16
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13]
 solution : [0, 8, 1, 4, 2, 11, 20]

After backtrack at level 16
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 11, 20]


Invert decision for 20 at level 15


New level: 16
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 11]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 11]


Solution : [0, 8, 1, 4, 2, 11] has cost 31.


Decide in level 16 among pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 16

After decision at level 16
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 11, 6]


New level: 17
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 11, 6]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 11, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {3, 5, 9, 13, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 6]


Solution : [0, 8, 1, 4, 2, 11, 6] has cost 44.


Before backtrack at level 17
 pending : []
 solution : [0, 8, 1, 4, 2, 11, 6]

After backtrack at level 17
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 11, 6]


Invert decision for 6 at level 16


New level: 17
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 11]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5]
 solution : [0, 8, 1, 4, 2, 11]


Solution : [0, 8, 1, 4, 2, 11] has cost 31.


Decide in level 17 among pending : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 17

After decision at level 17
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 5]
 solution : [0, 8, 1, 4, 2, 11, 13]


New level: 18
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 5]
 solution : [0, 8, 1, 4, 2, 11, 13]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 5]
 solution : [0, 8, 1, 4, 2, 11, 13]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {3, 5, 9, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 13]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 13]


Solution : [0, 8, 1, 4, 2, 11, 13] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 8, 1, 4, 2, 11, 13]

After backtrack at level 18
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 5]
 solution : [0, 8, 1, 4, 2, 11, 13]


Invert decision for 13 at level 17


New level: 18
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 5]
 solution : [0, 8, 1, 4, 2, 11]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 5]
 solution : [0, 8, 1, 4, 2, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 5]
 solution : [0, 8, 1, 4, 2, 11]


Solution : [0, 8, 1, 4, 2, 11] has cost 31.


Decide in level 18 among pending : [9, 3, 17, 16, 19, 18, 29, 22, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 18

After decision at level 18
 pending : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 5]


New level: 19
 pending : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 5]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 5]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {3, 9, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 5]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 11, 5]


Solution : [0, 8, 1, 4, 2, 11, 5] has cost 37.


Before backtrack at level 19
 pending : []
 solution : [0, 8, 1, 4, 2, 11, 5]

After backtrack at level 19
 pending : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 5]


Invert decision for 5 at level 18


New level: 19
 pending : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11]


Solution : [0, 8, 1, 4, 2, 11] has cost 31.


Decide in level 19 among pending : [9, 3, 17, 16, 19, 18, 29, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 17 with phase True at level 19

After decision at level 19
 pending : [9, 3, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 17]


New level: 20
 pending : [9, 3, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 17]


Before reduction : 
 pending  : [9, 3, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {16, 18, 19, 22, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 17]


Solution : [0, 8, 1, 4, 2, 11, 17] has cost 65.


Before backtrack at level 20
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 17]

After backtrack at level 20
 pending : [9, 3, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11, 17]


Invert decision for 17 at level 19


New level: 20
 pending : [9, 3, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11]


Before reduction : 
 pending  : [9, 3, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 11]

Essensial at level 20 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {16, 18, 19, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 22]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 22]


Solution : [0, 8, 1, 4, 2, 11, 22] has cost 65.


Before backtrack at level 20
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 11, 22]

After backtrack at level 20
 pending : [9, 3, 22, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 2, 11]


Before backtrack at level 19
 pending : [9, 3, 22, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 2, 11]

After backtrack at level 19
 pending : [9, 3, 22, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 11]


Before backtrack at level 18
 pending : [9, 3, 22, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 11]

After backtrack at level 18
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5]
 solution : [0, 8, 1, 4, 2, 11]


Before backtrack at level 17
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5]
 solution : [0, 8, 1, 4, 2, 11]

After backtrack at level 17
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13]
 solution : [0, 8, 1, 4, 2, 11]


Before backtrack at level 16
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13]
 solution : [0, 8, 1, 4, 2, 11]

After backtrack at level 16
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 11]


Before backtrack at level 15
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 11]

After backtrack at level 15
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 32, 33, 12, 20]
 solution : [0, 8, 1, 4, 2, 11]


Invert decision for 11 at level 14


New level: 15
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 32, 33, 12, 20]
 solution : [0, 8, 1, 4, 2]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 32, 33, 12, 20]
 solution : [0, 8, 1, 4, 2]

Essensial at level 15 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33}

After reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 12]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 20]
 solution : [0, 8, 1, 4, 2, 12]


Solution : [0, 8, 1, 4, 2, 12] has cost 31.


Decide in level 15 among pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 15

After decision at level 15
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 20]


New level: 16
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 20]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 20]


Solution : [0, 8, 1, 4, 2, 12, 20] has cost 41.


Before backtrack at level 16
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 20]

After backtrack at level 16
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 20]


Invert decision for 20 at level 15


New level: 16
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 12]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]
 solution : [0, 8, 1, 4, 2, 12]


Solution : [0, 8, 1, 4, 2, 12] has cost 31.


Decide in level 16 among pending : [9, 3, 22, 16, 19, 18, 29, 17, 5, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 5]


New level: 17
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 5]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {3, 6, 9, 13, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 12, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 12, 5]


Solution : [0, 8, 1, 4, 2, 12, 5] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 8, 1, 4, 2, 12, 5]

After backtrack at level 17
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 12, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 12]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 13, 6]
 solution : [0, 8, 1, 4, 2, 12]


Solution : [0, 8, 1, 4, 2, 12] has cost 31.


Decide in level 17 among pending : [9, 3, 22, 16, 19, 18, 29, 17, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 17

After decision at level 17
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 6]
 solution : [0, 8, 1, 4, 2, 12, 13]


New level: 18
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 6]
 solution : [0, 8, 1, 4, 2, 12, 13]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 6]
 solution : [0, 8, 1, 4, 2, 12, 13]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {3, 6, 9, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 12, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 12, 13]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 12, 13]


Solution : [0, 8, 1, 4, 2, 12, 13] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 8, 1, 4, 2, 12, 13]

After backtrack at level 18
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 6]
 solution : [0, 8, 1, 4, 2, 12, 13]


Invert decision for 13 at level 17


New level: 18
 pending : [9, 3, 22, 16, 19, 18, 29, 17, 6]
 solution : [0, 8, 1, 4, 2, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 6]
 solution : [0, 8, 1, 4, 2, 12]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17, 6]
 solution : [0, 8, 1, 4, 2, 12]


Solution : [0, 8, 1, 4, 2, 12] has cost 31.


Decide in level 18 among pending : [9, 3, 22, 16, 19, 18, 29, 17, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 18

After decision at level 18
 pending : [9, 3, 22, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12, 6]


New level: 19
 pending : [9, 3, 22, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12, 6]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {3, 9, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 12, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 2, 12, 6]


Solution : [0, 8, 1, 4, 2, 12, 6] has cost 44.


Before backtrack at level 19
 pending : []
 solution : [0, 8, 1, 4, 2, 12, 6]

After backtrack at level 19
 pending : [9, 3, 22, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12, 6]


Invert decision for 6 at level 18


New level: 19
 pending : [9, 3, 22, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12]


Solution : [0, 8, 1, 4, 2, 12] has cost 31.


Decide in level 19 among pending : [9, 3, 22, 16, 19, 18, 29, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 19

After decision at level 19
 pending : [9, 3, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12, 22]


New level: 20
 pending : [9, 3, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12, 22]


Before reduction : 
 pending  : [9, 3, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12, 22]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {16, 17, 18, 19, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 12, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 12, 22]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 12, 22]


Solution : [0, 8, 1, 4, 2, 12, 22] has cost 65.


Before backtrack at level 20
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 12, 22]

After backtrack at level 20
 pending : [9, 3, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12, 22]


Invert decision for 22 at level 19


New level: 20
 pending : [9, 3, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12]


Before reduction : 
 pending  : [9, 3, 16, 19, 18, 29, 17]
 solution : [0, 8, 1, 4, 2, 12]

Essensial at level 20 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {16, 18, 19, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 12, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 12, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 2, 12, 17]


Solution : [0, 8, 1, 4, 2, 12, 17] has cost 65.


Before backtrack at level 20
 pending : [9, 3]
 solution : [0, 8, 1, 4, 2, 12, 17]

After backtrack at level 20
 pending : [9, 3, 17, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 2, 12]


Before backtrack at level 19
 pending : [9, 3, 17, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 2, 12]

After backtrack at level 19
 pending : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 12]


Before backtrack at level 18
 pending : [9, 3, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 2, 12]

After backtrack at level 18
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6]
 solution : [0, 8, 1, 4, 2, 12]


Before backtrack at level 17
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6]
 solution : [0, 8, 1, 4, 2, 12]

After backtrack at level 17
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13]
 solution : [0, 8, 1, 4, 2, 12]


Before backtrack at level 16
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13]
 solution : [0, 8, 1, 4, 2, 12]

After backtrack at level 16
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 12]


Before backtrack at level 15
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5]
 solution : [0, 8, 1, 4, 2, 12]

After backtrack at level 15
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 14
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 14
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 13
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 13
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 12
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 12
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 11
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 11
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 10
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 10
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 9
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 9
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 8
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 8
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 7
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 7
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 6
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 6
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 31]
 solution : [0, 8, 1, 4, 2]


Before backtrack at level 5
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 31]
 solution : [0, 8, 1, 4, 2]

After backtrack at level 5
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 31, 15, 7, 30]
 solution : [0, 8, 1, 4, 2]


Invert decision for 2 at level 4


New level: 5
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 31, 15, 7, 30]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 31, 15, 7, 30]
 solution : [0, 8, 1, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 31, 15, 7, 30]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 5 among pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 31, 15, 7, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

Decide 31 with phase True at level 5

After decision at level 5
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7, 30]
 solution : [0, 8, 1, 4, 31]


New level: 6
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7, 30]
 solution : [0, 8, 1, 4, 31]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7, 30]
 solution : [0, 8, 1, 4, 31]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, 192), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, 0), (31, -1), (32, 8), (33, 8)]

Covered at level 6 : {30}

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7]
 solution : [0, 8, 1, 4, 31]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7]
 solution : [0, 8, 1, 4, 31]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, 0), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7]
 solution : [0, 8, 1, 4, 31]


Solution : [0, 8, 1, 4, 31] has cost 36.


Decide in level 6 among pending : [9, 3, 17, 16, 19, 18, 29, 22, 6, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 6]


New level: 7
 pending : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 6]


Before reduction : 
 pending  : [9, 3, 17, 16, 19, 18, 29, 22, 13, 5, 12, 32, 33, 20, 11, 28, 10, 21, 27, 26, 25, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 4), (17, 10), (18, 0), (19, 4), (20, 0), (21, 0), (22, 10), (23, 0), (24, -1), (25, 8), (26, 8), (27, 8), (28, 32), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 7 : {3, 5, 7, 9, 13, 15, 18, 20, 21, 23, 29}

After reduction : 
 pending  : [17, 16, 19, 22, 12, 32, 33, 11, 28, 10, 27, 26, 25]
 solution : [0, 8, 1, 4, 31, 6]


Before reduction : 
 pending  : [17, 16, 19, 22, 12, 32, 33, 11, 28, 10, 27, 26, 25]
 solution : [0, 8, 1, 4, 31, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 4), (17, 10), (18, 0), (19, 4), (20, 0), (21, 0), (22, 10), (23, 0), (24, -1), (25, 8), (26, 8), (27, 8), (28, 32), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 4), (17, 10), (18, -1), (19, 4), (20, -1), (21, -1), (22, 10), (23, -1), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 12, 32, 33, 11, 28, 10, 27, 26, 25]
 solution : [0, 8, 1, 4, 31, 6]


Solution : [0, 8, 1, 4, 31, 6] has cost 49.


Before backtrack at level 7
 pending : [17, 16, 19, 22, 12, 32, 33, 11, 28, 10, 27, 26, 25]
 solution : [0, 8, 1, 4, 31, 6]

After backtrack at level 7
 pending : [17, 16, 19, 22, 12, 32, 33, 11, 28, 10, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [17, 16, 19, 22, 12, 32, 33, 11, 28, 10, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31]


Before reduction : 
 pending  : [17, 16, 19, 22, 12, 32, 33, 11, 28, 10, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 4), (17, 10), (18, -1), (19, 4), (20, -1), (21, -1), (22, 10), (23, -1), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 12, 32, 33, 11, 28, 10, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31]


Solution : [0, 8, 1, 4, 31] has cost 36.


Decide in level 7 among pending : [17, 16, 19, 22, 12, 32, 33, 11, 28, 10, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 12 with phase True at level 7

After decision at level 7
 pending : [17, 16, 19, 22, 32, 33, 11, 28, 10, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 12]


New level: 8
 pending : [17, 16, 19, 22, 32, 33, 11, 28, 10, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 12]


Before reduction : 
 pending  : [17, 16, 19, 22, 32, 33, 11, 28, 10, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 10, 11}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 12]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 12]


Solution : [0, 8, 1, 4, 31, 12] has cost 42.


Before backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 12]

After backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31, 12]


Invert decision for 12 at level 7


New level: 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31]


Solution : [0, 8, 1, 4, 31] has cost 36.


Decide in level 8 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 13, 5, 20, 21, 23, 15, 7, 32, 33, 11, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31, 13]


New level: 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31, 13]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 10), (18, 0), (19, 4), (20, 0), (21, 0), (22, 10), (23, 0), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 9 : {3, 5, 7, 9, 15, 18, 20, 21, 23, 29}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31, 13]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 10), (18, 0), (19, 4), (20, 0), (21, 0), (22, 10), (23, 0), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 10), (18, -1), (19, 4), (20, -1), (21, -1), (22, 10), (23, -1), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31, 13]


Solution : [0, 8, 1, 4, 31, 13] has cost 42.


Before backtrack at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 31, 13]

After backtrack at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 10, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 10, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 10, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 10), (18, -1), (19, 4), (20, -1), (21, -1), (22, 10), (23, -1), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 10, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31]


Solution : [0, 8, 1, 4, 31] has cost 36.


Decide in level 9 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 10, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 11 with phase True at level 9

After decision at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 10, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 11]


New level: 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 10, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 11]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 10, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 10}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 11]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 11]


Solution : [0, 8, 1, 4, 31, 11] has cost 42.


Before backtrack at level 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 11]

After backtrack at level 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 32, 33, 10]
 solution : [0, 8, 1, 4, 31, 11]


Invert decision for 11 at level 9


New level: 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 32, 33, 10]
 solution : [0, 8, 1, 4, 31]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 32, 33, 10]
 solution : [0, 8, 1, 4, 31]

Essensial at level 10 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 10 : {32, 33}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 10]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 10]


Solution : [0, 8, 1, 4, 31, 10] has cost 49.


Before backtrack at level 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7]
 solution : [0, 8, 1, 4, 31, 10]

After backtrack at level 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33]
 solution : [0, 8, 1, 4, 31]


Before backtrack at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33]
 solution : [0, 8, 1, 4, 31]

After backtrack at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11]
 solution : [0, 8, 1, 4, 31]


Before backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11]
 solution : [0, 8, 1, 4, 31]

After backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13]
 solution : [0, 8, 1, 4, 31]


Before backtrack at level 7
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13]
 solution : [0, 8, 1, 4, 31]

After backtrack at level 7
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12]
 solution : [0, 8, 1, 4, 31]


Before backtrack at level 6
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12]
 solution : [0, 8, 1, 4, 31]

After backtrack at level 6
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 30, 6]
 solution : [0, 8, 1, 4, 31]


Invert decision for 31 at level 5


New level: 6
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 30, 6]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 30, 6]
 solution : [0, 8, 1, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, -1), (32, 32), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 30, 6]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 6 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 30, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, -1), (32, 32), (33, 32)]

Decide 30 with phase True at level 6

After decision at level 6
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 6]
 solution : [0, 8, 1, 4, 30]


New level: 7
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 6]
 solution : [0, 8, 1, 4, 30]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 6]
 solution : [0, 8, 1, 4, 30]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, 192), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 6]
 solution : [0, 8, 1, 4, 30]


Solution : [0, 8, 1, 4, 30] has cost 36.


Decide in level 7 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 5, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 6]
 solution : [0, 8, 1, 4, 30, 5]


New level: 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 6]
 solution : [0, 8, 1, 4, 30, 5]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 10, 32, 33, 11, 13, 12, 6]
 solution : [0, 8, 1, 4, 30, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 4), (17, 10), (18, 0), (19, 4), (20, 0), (21, 0), (22, 10), (23, 0), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 8 : {3, 6, 7, 9, 13, 15, 18, 20, 21, 23, 29}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 10, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 5]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 10, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 4), (17, 10), (18, 0), (19, 4), (20, 0), (21, 0), (22, 10), (23, 0), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 4), (17, 10), (18, -1), (19, 4), (20, -1), (21, -1), (22, 10), (23, -1), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 10, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 5]


Solution : [0, 8, 1, 4, 30, 5] has cost 42.


Before backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 10, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 5]

After backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 10, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 10, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 10, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 4), (17, 10), (18, -1), (19, 4), (20, -1), (21, -1), (22, 10), (23, -1), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 10, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30]


Solution : [0, 8, 1, 4, 30] has cost 36.


Decide in level 8 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 10, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 10 with phase True at level 8

After decision at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30, 10]


New level: 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30, 10]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, 0), (13, 128), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 11, 12}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30, 10]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, 0), (13, 128), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30, 10]


Solution : [0, 8, 1, 4, 30, 10] has cost 49.


Before backtrack at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6]
 solution : [0, 8, 1, 4, 30, 10]

After backtrack at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 10]


Invert decision for 10 at level 8


New level: 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30]


Solution : [0, 8, 1, 4, 30] has cost 36.


Decide in level 9 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 7, 13, 6, 32, 33, 11, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 7]


New level: 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 7]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 15, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, 0), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 10 : {15}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 7]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, 0), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 7]


Solution : [0, 8, 1, 4, 30, 7] has cost 41.


Before backtrack at level 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 13, 6, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 7]

After backtrack at level 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 13, 6, 32, 33, 11, 12, 15]
 solution : [0, 8, 1, 4, 30, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 13, 6, 32, 33, 11, 12, 15]
 solution : [0, 8, 1, 4, 30]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 13, 6, 32, 33, 11, 12, 15]
 solution : [0, 8, 1, 4, 30]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, 128), (12, 128), (13, 32), (14, -1), (15, -1), (16, 24), (17, 72), (18, 1), (19, 24), (20, 2), (21, 12), (22, 72), (23, 11), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 13, 6, 32, 33, 11, 12, 15]
 solution : [0, 8, 1, 4, 30]


Solution : [0, 8, 1, 4, 30] has cost 36.


Decide in level 10 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 13, 6, 32, 33, 11, 12, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 32, 33, 11, 12, 15]
 solution : [0, 8, 1, 4, 30, 13]


New level: 11
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 32, 33, 11, 12, 15]
 solution : [0, 8, 1, 4, 30, 13]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 32, 33, 11, 12, 15]
 solution : [0, 8, 1, 4, 30, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 4), (17, 10), (18, 0), (19, 4), (20, 0), (21, 0), (22, 10), (23, 0), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 11 : {3, 6, 9, 15, 18, 20, 21, 23, 29}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 13]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 4), (17, 10), (18, 0), (19, 4), (20, 0), (21, 0), (22, 10), (23, 0), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 4), (17, 10), (18, -1), (19, 4), (20, -1), (21, -1), (22, 10), (23, -1), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 13]


Solution : [0, 8, 1, 4, 30, 13] has cost 42.


Before backtrack at level 11
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12]
 solution : [0, 8, 1, 4, 30, 13]

After backtrack at level 11
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 4), (17, 10), (18, -1), (19, 4), (20, -1), (21, -1), (22, 10), (23, -1), (24, -1), (25, 8), (26, 8), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30]


Solution : [0, 8, 1, 4, 30] has cost 36.


Decide in level 11 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 11, 12, 9, 3, 18, 29, 20, 21, 23, 6, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 12, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 11]


New level: 12
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 12, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 11]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 32, 33, 12, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 24), (17, 72), (18, 32), (19, 24), (20, 16), (21, 32), (22, 72), (23, 36), (24, -1), (25, 101), (26, 101), (27, 32), (28, 32), (29, 32), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 12}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 11]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 11]


Solution : [0, 8, 1, 4, 30, 11] has cost 42.


Before backtrack at level 12
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 11]

After backtrack at level 12
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 32, 33, 12]
 solution : [0, 8, 1, 4, 30, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 32, 33, 12]
 solution : [0, 8, 1, 4, 30]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 32, 33, 12]
 solution : [0, 8, 1, 4, 30]

Essensial at level 12 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 12 : {32, 33}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 12]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 12]


Solution : [0, 8, 1, 4, 30, 12] has cost 42.


Before backtrack at level 12
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15]
 solution : [0, 8, 1, 4, 30, 12]

After backtrack at level 12
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33]
 solution : [0, 8, 1, 4, 30]


Before backtrack at level 11
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33]
 solution : [0, 8, 1, 4, 30]

After backtrack at level 11
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11]
 solution : [0, 8, 1, 4, 30]


Before backtrack at level 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11]
 solution : [0, 8, 1, 4, 30]

After backtrack at level 10
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13]
 solution : [0, 8, 1, 4, 30]


Before backtrack at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13]
 solution : [0, 8, 1, 4, 30]

After backtrack at level 9
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13, 7]
 solution : [0, 8, 1, 4, 30]


Before backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13, 7]
 solution : [0, 8, 1, 4, 30]

After backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13, 7, 10]
 solution : [0, 8, 1, 4, 30]


Before backtrack at level 7
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13, 7, 10]
 solution : [0, 8, 1, 4, 30]

After backtrack at level 7
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4, 30]


Invert decision for 30 at level 6


New level: 7
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 17), (18, 32), (19, 5), (20, 16), (21, 32), (22, 17), (23, 36), (24, -1), (25, 19), (26, 19), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 7 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 23, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 23 with phase True at level 7

After decision at level 7
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4, 23]


New level: 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4, 23]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 20, 21, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4, 23]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, 168), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 40), (18, 4), (19, 16), (20, 0), (21, 0), (22, 40), (23, -1), (24, -1), (25, 37), (26, 37), (27, 32), (28, 32), (29, 4), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 8 : {20, 21}

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4, 23]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4, 23]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 40), (18, 4), (19, 16), (20, 0), (21, 0), (22, 40), (23, -1), (24, -1), (25, 37), (26, 37), (27, 32), (28, 32), (29, 4), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 40), (18, 4), (19, 16), (20, -1), (21, -1), (22, 40), (23, -1), (24, -1), (25, 37), (26, 37), (27, 32), (28, 32), (29, 4), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4, 23]


Solution : [0, 8, 1, 4, 23] has cost 54.


Before backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5]
 solution : [0, 8, 1, 4, 23]

After backtrack at level 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 23]


Invert decision for 23 at level 7


New level: 8
 pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 40), (18, 4), (19, 16), (20, -1), (21, -1), (22, 40), (23, -1), (24, -1), (25, 37), (26, 37), (27, 32), (28, 32), (29, 4), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 8 among pending : [17, 16, 19, 22, 28, 27, 26, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 26 with phase True at level 8

After decision at level 8
 pending : [17, 16, 19, 22, 28, 27, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 26]


New level: 9
 pending : [17, 16, 19, 22, 28, 27, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 26]


Before reduction : 
 pending  : [17, 16, 19, 22, 28, 27, 25, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 26]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, 129), (26, 129), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 0), (17, 0), (18, 8), (19, 0), (20, 2), (21, 5), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 9 : {16, 17, 19, 22, 25}

After reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 26]


Before reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 26]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 0), (17, 0), (18, 8), (19, 0), (20, 2), (21, 5), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, -1), (17, -1), (18, 8), (19, -1), (20, 2), (21, 5), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 26]


Solution : [0, 8, 1, 4, 26] has cost 54.


Before backtrack at level 9
 pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 26]

After backtrack at level 9
 pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22, 25]
 solution : [0, 8, 1, 4, 26]


Invert decision for 26 at level 8


New level: 9
 pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22, 25]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22, 25]
 solution : [0, 8, 1, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, -1), (17, -1), (18, 8), (19, -1), (20, 2), (21, 5), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, 129), (26, -1), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22, 25]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 9 among pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, 129), (26, -1), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 25 with phase True at level 9

After decision at level 9
 pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 25]


New level: 10
 pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 25]


Before reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, 129), (26, -1), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 0), (17, 0), (18, 8), (19, 0), (20, 2), (21, 5), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 10 : {16, 17, 19, 22}

After reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 25]


Before reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 0), (17, 0), (18, 8), (19, 0), (20, 2), (21, 5), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, -1), (17, -1), (18, 8), (19, -1), (20, 2), (21, 5), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 25]


Solution : [0, 8, 1, 4, 25] has cost 54.


Before backtrack at level 10
 pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21]
 solution : [0, 8, 1, 4, 25]

After backtrack at level 10
 pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 25]


Invert decision for 25 at level 9


New level: 10
 pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, -1), (17, -1), (18, 8), (19, -1), (20, 2), (21, 5), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 10 among pending : [28, 27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 28 with phase True at level 10

After decision at level 10
 pending : [27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28]


New level: 11
 pending : [27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28]


Before reduction : 
 pending  : [27, 9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, 128), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 11 : {27}

After reduction : 
 pending  : [9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28]


Before reduction : 
 pending  : [9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28]


Solution : [0, 8, 1, 4, 28] has cost 30.


Decide in level 11 among pending : [9, 3, 18, 29, 6, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [9, 3, 18, 29, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28, 6]


New level: 12
 pending : [9, 3, 18, 29, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28, 6]


Before reduction : 
 pending  : [9, 3, 18, 29, 15, 12, 32, 33, 11, 13, 7, 10, 5, 20, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 4), (17, 8), (18, 0), (19, 4), (20, 0), (21, 2), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 12 : {3, 5, 7, 9, 13, 15, 18, 20, 29}

After reduction : 
 pending  : [12, 32, 33, 11, 10, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28, 6]


Before reduction : 
 pending  : [12, 32, 33, 11, 10, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, 0), (14, -1), (15, 0), (16, 4), (17, 8), (18, 0), (19, 4), (20, 0), (21, 2), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 4), (17, 8), (18, -1), (19, 4), (20, -1), (21, 2), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [12, 32, 33, 11, 10, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28, 6]


Solution : [0, 8, 1, 4, 28, 6] has cost 43.


Before backtrack at level 12
 pending : [12, 32, 33, 11, 10, 21, 17, 16, 19, 22]
 solution : [0, 8, 1, 4, 28, 6]

After backtrack at level 12
 pending : [12, 32, 33, 11, 10, 21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [12, 32, 33, 11, 10, 21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28]


Before reduction : 
 pending  : [12, 32, 33, 11, 10, 21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 4), (17, 8), (18, -1), (19, 4), (20, -1), (21, 2), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [12, 32, 33, 11, 10, 21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28]


Solution : [0, 8, 1, 4, 28] has cost 30.


Decide in level 12 among pending : [12, 32, 33, 11, 10, 21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 12 with phase True at level 12

After decision at level 12
 pending : [32, 33, 11, 10, 21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12]


New level: 13
 pending : [32, 33, 11, 10, 21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12]


Before reduction : 
 pending  : [32, 33, 11, 10, 21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 11}

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12]


Solution : [0, 8, 1, 4, 28, 12] has cost 36.


Decide in level 13 among pending : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 13, 7, 5, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 13

After decision at level 13
 pending : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 13]


New level: 14
 pending : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 13]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {3, 5, 7, 9, 15, 16, 17, 18, 19, 20, 21, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 12, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 12, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 12, 13]


Solution : [0, 8, 1, 4, 28, 12, 13] has cost 42.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 28, 12, 13]

After backtrack at level 14
 pending : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 13]


Invert decision for 13 at level 13


New level: 14
 pending : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 7, 5, 20]
 solution : [0, 8, 1, 4, 28, 12]


Solution : [0, 8, 1, 4, 28, 12] has cost 36.


Decide in level 14 among pending : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 7, 5, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 7 with phase True at level 14

After decision at level 14
 pending : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 7]


New level: 15
 pending : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 7]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 18, 29, 15, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 16), (18, 0), (19, 4), (20, 2), (21, 74), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {18, 29, 15}

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 7]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 16), (18, 0), (19, 4), (20, 2), (21, 74), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 7]


Solution : [0, 8, 1, 4, 28, 12, 7] has cost 41.


Before backtrack at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 5, 20]
 solution : [0, 8, 1, 4, 28, 12, 7]

After backtrack at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 5, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12, 7]


Invert decision for 7 at level 14


New level: 15
 pending : [21, 17, 16, 19, 22, 9, 3, 5, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 5, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 5, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12]


Solution : [0, 8, 1, 4, 28, 12] has cost 36.


Decide in level 15 among pending : [21, 17, 16, 19, 22, 9, 3, 5, 20, 18, 29, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12, 5]


New level: 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12, 5]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {3, 9, 15, 16, 17, 18, 19, 20, 21, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 12, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 12, 5]


Solution : [0, 8, 1, 4, 28, 12, 5] has cost 42.


Before backtrack at level 16
 pending : []
 solution : [0, 8, 1, 4, 28, 12, 5]

After backtrack at level 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 18, 29, 15]
 solution : [0, 8, 1, 4, 28, 12]

Essensial at level 16 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, 0), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {18, 29}

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20]
 solution : [0, 8, 1, 4, 28, 12, 15]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20]
 solution : [0, 8, 1, 4, 28, 12, 15]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, 0), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20]
 solution : [0, 8, 1, 4, 28, 12, 15]


Solution : [0, 8, 1, 4, 28, 12, 15] has cost 38.


Before backtrack at level 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20]
 solution : [0, 8, 1, 4, 28, 12, 15]

After backtrack at level 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 12]


Before backtrack at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 12]

After backtrack at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 5]
 solution : [0, 8, 1, 4, 28, 12]


Before backtrack at level 14
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 5]
 solution : [0, 8, 1, 4, 28, 12]

After backtrack at level 14
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 5, 7]
 solution : [0, 8, 1, 4, 28, 12]


Before backtrack at level 13
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 5, 7]
 solution : [0, 8, 1, 4, 28, 12]

After backtrack at level 13
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 5, 7, 32, 33, 11, 10, 13]
 solution : [0, 8, 1, 4, 28, 12]


Invert decision for 12 at level 12


New level: 13
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 5, 7, 32, 33, 11, 10, 13]
 solution : [0, 8, 1, 4, 28]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 5, 7, 32, 33, 11, 10, 13]
 solution : [0, 8, 1, 4, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 5, 7, 32, 33, 11, 10, 13]
 solution : [0, 8, 1, 4, 28]


Solution : [0, 8, 1, 4, 28] has cost 30.


Decide in level 13 among pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 5, 7, 32, 33, 11, 10, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 32, 33, 11, 10, 13]
 solution : [0, 8, 1, 4, 28, 5]


New level: 14
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 32, 33, 11, 10, 13]
 solution : [0, 8, 1, 4, 28, 5]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 32, 33, 11, 10, 13]
 solution : [0, 8, 1, 4, 28, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, -1), (13, 0), (14, -1), (15, 0), (16, 4), (17, 8), (18, 0), (19, 4), (20, 0), (21, 2), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 14 : {3, 7, 9, 13, 15, 18, 20, 29}

After reduction : 
 pending  : [21, 17, 16, 19, 22, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 28, 5]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 28, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, -1), (13, 0), (14, -1), (15, 0), (16, 4), (17, 8), (18, 0), (19, 4), (20, 0), (21, 2), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 8), (18, -1), (19, 4), (20, -1), (21, 2), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 32, 33, 11, 10]
 solution : [0, 8, 1, 4, 28, 5]


Solution : [0, 8, 1, 4, 28, 5] has cost 36.


Decide in level 14 among pending : [21, 17, 16, 19, 22, 32, 33, 11, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 8), (18, -1), (19, 4), (20, -1), (21, 2), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 11 with phase True at level 14

After decision at level 14
 pending : [21, 17, 16, 19, 22, 32, 33, 10]
 solution : [0, 8, 1, 4, 28, 5, 11]


New level: 15
 pending : [21, 17, 16, 19, 22, 32, 33, 10]
 solution : [0, 8, 1, 4, 28, 5, 11]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 32, 33, 10]
 solution : [0, 8, 1, 4, 28, 5, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 8), (18, -1), (19, 4), (20, -1), (21, 2), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 10, 16, 17, 19, 21, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 5, 11]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 5, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 5, 11]


Solution : [0, 8, 1, 4, 28, 5, 11] has cost 42.


Before backtrack at level 15
 pending : []
 solution : [0, 8, 1, 4, 28, 5, 11]

After backtrack at level 15
 pending : [21, 17, 16, 19, 22, 32, 33, 10]
 solution : [0, 8, 1, 4, 28, 5, 11]


Invert decision for 11 at level 14


New level: 15
 pending : [21, 17, 16, 19, 22, 32, 33, 10]
 solution : [0, 8, 1, 4, 28, 5]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 32, 33, 10]
 solution : [0, 8, 1, 4, 28, 5]

Essensial at level 15 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 17, 19, 21, 22}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 5, 10]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 5, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 5, 10]


Solution : [0, 8, 1, 4, 28, 5, 10] has cost 49.


Before backtrack at level 15
 pending : []
 solution : [0, 8, 1, 4, 28, 5, 10]

After backtrack at level 15
 pending : [10, 21, 17, 16, 19, 22, 32, 33]
 solution : [0, 8, 1, 4, 28, 5]


Before backtrack at level 14
 pending : [10, 21, 17, 16, 19, 22, 32, 33]
 solution : [0, 8, 1, 4, 28, 5]

After backtrack at level 14
 pending : [10, 21, 17, 16, 19, 22, 32, 33, 9, 3, 20, 15, 18, 29, 7, 13, 11]
 solution : [0, 8, 1, 4, 28, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [10, 21, 17, 16, 19, 22, 32, 33, 9, 3, 20, 15, 18, 29, 7, 13, 11]
 solution : [0, 8, 1, 4, 28]


Before reduction : 
 pending  : [10, 21, 17, 16, 19, 22, 32, 33, 9, 3, 20, 15, 18, 29, 7, 13, 11]
 solution : [0, 8, 1, 4, 28]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 21, 17, 16, 19, 22, 32, 33, 9, 3, 20, 15, 18, 29, 7, 13, 11]
 solution : [0, 8, 1, 4, 28]


Solution : [0, 8, 1, 4, 28] has cost 30.


Decide in level 14 among pending : [10, 21, 17, 16, 19, 22, 32, 33, 9, 3, 20, 15, 18, 29, 7, 13, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 10 with phase True at level 14

After decision at level 14
 pending : [21, 17, 16, 19, 22, 32, 33, 9, 3, 20, 15, 18, 29, 7, 13, 11]
 solution : [0, 8, 1, 4, 28, 10]


New level: 15
 pending : [21, 17, 16, 19, 22, 32, 33, 9, 3, 20, 15, 18, 29, 7, 13, 11]
 solution : [0, 8, 1, 4, 28, 10]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 32, 33, 9, 3, 20, 15, 18, 29, 7, 13, 11]
 solution : [0, 8, 1, 4, 28, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, 128), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, 80), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 11}

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13]
 solution : [0, 8, 1, 4, 28, 10]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13]
 solution : [0, 8, 1, 4, 28, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13]
 solution : [0, 8, 1, 4, 28, 10]


Solution : [0, 8, 1, 4, 28, 10] has cost 43.


Before backtrack at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13]
 solution : [0, 8, 1, 4, 28, 10]

After backtrack at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13, 32, 33, 11]
 solution : [0, 8, 1, 4, 28, 10]


Invert decision for 10 at level 14


New level: 15
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13, 32, 33, 11]
 solution : [0, 8, 1, 4, 28]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13, 32, 33, 11]
 solution : [0, 8, 1, 4, 28]

Essensial at level 15 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33}

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13]
 solution : [0, 8, 1, 4, 28, 11]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13]
 solution : [0, 8, 1, 4, 28, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 80), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13]
 solution : [0, 8, 1, 4, 28, 11]


Solution : [0, 8, 1, 4, 28, 11] has cost 36.


Decide in level 15 among pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 7, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 7 with phase True at level 15

After decision at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13]
 solution : [0, 8, 1, 4, 28, 11, 7]


New level: 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13]
 solution : [0, 8, 1, 4, 28, 11, 7]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13]
 solution : [0, 8, 1, 4, 28, 11, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, 0), (16, 4), (17, 16), (18, 0), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {18, 29, 15}

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 13]
 solution : [0, 8, 1, 4, 28, 11, 7]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 13]
 solution : [0, 8, 1, 4, 28, 11, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, 0), (16, 4), (17, 16), (18, 0), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 13]
 solution : [0, 8, 1, 4, 28, 11, 7]


Solution : [0, 8, 1, 4, 28, 11, 7] has cost 41.


Before backtrack at level 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 13]
 solution : [0, 8, 1, 4, 28, 11, 7]

After backtrack at level 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 13, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11, 7]


Invert decision for 7 at level 15


New level: 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 13, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 13, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 32), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 13, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11]


Solution : [0, 8, 1, 4, 28, 11] has cost 36.


Decide in level 16 among pending : [21, 17, 16, 19, 22, 9, 3, 20, 13, 15, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 13 with phase True at level 16

After decision at level 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11, 13]


New level: 17
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11, 13]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11, 13]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, 32), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {3, 9, 15, 16, 17, 18, 19, 20, 21, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 11, 13]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 11, 13]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 28, 11, 13]


Solution : [0, 8, 1, 4, 28, 11, 13] has cost 42.


Before backtrack at level 17
 pending : []
 solution : [0, 8, 1, 4, 28, 11, 13]

After backtrack at level 17
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11, 13]


Invert decision for 13 at level 16


New level: 17
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11]

Essensial at level 17 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, 0), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {18, 29}

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20]
 solution : [0, 8, 1, 4, 28, 11, 15]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20]
 solution : [0, 8, 1, 4, 28, 11, 15]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, 0), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20]
 solution : [0, 8, 1, 4, 28, 11, 15]


Solution : [0, 8, 1, 4, 28, 11, 15] has cost 38.


Before backtrack at level 17
 pending : [21, 17, 16, 19, 22, 9, 3, 20]
 solution : [0, 8, 1, 4, 28, 11, 15]

After backtrack at level 17
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11]


Before backtrack at level 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29]
 solution : [0, 8, 1, 4, 28, 11]

After backtrack at level 16
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13]
 solution : [0, 8, 1, 4, 28, 11]


Before backtrack at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13]
 solution : [0, 8, 1, 4, 28, 11]

After backtrack at level 15
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7]
 solution : [0, 8, 1, 4, 28]


Before backtrack at level 14
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7]
 solution : [0, 8, 1, 4, 28]

After backtrack at level 14
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10]
 solution : [0, 8, 1, 4, 28]


Before backtrack at level 13
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10]
 solution : [0, 8, 1, 4, 28]

After backtrack at level 13
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5]
 solution : [0, 8, 1, 4, 28]


Before backtrack at level 12
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5]
 solution : [0, 8, 1, 4, 28]

After backtrack at level 12
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12]
 solution : [0, 8, 1, 4, 28]


Before backtrack at level 11
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12]
 solution : [0, 8, 1, 4, 28]

After backtrack at level 11
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4, 28]


Invert decision for 28 at level 10


New level: 11
 pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 16), (18, -1), (19, 4), (20, 2), (21, 12), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 11 among pending : [21, 17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 21 with phase True at level 11

After decision at level 11
 pending : [17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4, 21]


New level: 12
 pending : [17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4, 21]


Before reduction : 
 pending  : [17, 16, 19, 22, 9, 3, 20, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4, 21]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, 128), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 40), (18, 4), (19, 16), (20, 0), (21, -1), (22, 40), (23, -1), (24, -1), (25, -1), (26, -1), (27, 64), (28, -1), (29, 4), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 12 : {20}

After reduction : 
 pending  : [17, 16, 19, 22, 9, 3, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4, 21]


Before reduction : 
 pending  : [17, 16, 19, 22, 9, 3, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4, 21]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 40), (18, 4), (19, 16), (20, 0), (21, -1), (22, 40), (23, -1), (24, -1), (25, -1), (26, -1), (27, 64), (28, -1), (29, 4), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 40), (18, 4), (19, 16), (20, -1), (21, -1), (22, 40), (23, -1), (24, -1), (25, -1), (26, -1), (27, 64), (28, -1), (29, 4), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 9, 3, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4, 21]


Solution : [0, 8, 1, 4, 21] has cost 54.


Before backtrack at level 12
 pending : [17, 16, 19, 22, 9, 3, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6]
 solution : [0, 8, 1, 4, 21]

After backtrack at level 12
 pending : [17, 16, 19, 22, 9, 3, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6, 20]
 solution : [0, 8, 1, 4, 21]


Invert decision for 21 at level 11


New level: 12
 pending : [17, 16, 19, 22, 9, 3, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6, 20]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [17, 16, 19, 22, 9, 3, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6, 20]
 solution : [0, 8, 1, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 16), (17, 40), (18, 4), (19, 16), (20, -1), (21, -1), (22, 40), (23, -1), (24, -1), (25, -1), (26, -1), (27, 64), (28, -1), (29, 4), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 9, 3, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6, 20]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 12 among pending : [17, 16, 19, 22, 9, 3, 15, 18, 29, 13, 11, 32, 33, 7, 10, 5, 12, 27, 6, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 13 with phase True at level 12

After decision at level 12
 pending : [17, 16, 19, 22, 9, 3, 15, 18, 29, 11, 32, 33, 7, 10, 5, 12, 27, 6, 20]
 solution : [0, 8, 1, 4, 13]


New level: 13
 pending : [17, 16, 19, 22, 9, 3, 15, 18, 29, 11, 32, 33, 7, 10, 5, 12, 27, 6, 20]
 solution : [0, 8, 1, 4, 13]


Before reduction : 
 pending  : [17, 16, 19, 22, 9, 3, 15, 18, 29, 11, 32, 33, 7, 10, 5, 12, 27, 6, 20]
 solution : [0, 8, 1, 4, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, 128), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 16), (17, 20), (18, 0), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, -1), (29, 0), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 13 : {3, 5, 6, 7, 9, 15, 18, 29}

After reduction : 
 pending  : [17, 16, 19, 22, 11, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13]


Before reduction : 
 pending  : [17, 16, 19, 22, 11, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 0), (16, 16), (17, 20), (18, 0), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, -1), (29, 0), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, -1), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 11, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13]


Solution : [0, 8, 1, 4, 13] has cost 26.


Decide in level 13 among pending : [17, 16, 19, 22, 11, 32, 33, 10, 12, 27, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, -1), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 11 with phase True at level 13

After decision at level 13
 pending : [17, 16, 19, 22, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13, 11]


New level: 14
 pending : [17, 16, 19, 22, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13, 11]


Before reduction : 
 pending  : [17, 16, 19, 22, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, -1), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 10, 12, 16, 17, 19, 20, 22, 27}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 13, 11]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 13, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 13, 11]


Solution : [0, 8, 1, 4, 13, 11] has cost 32.


Before backtrack at level 14
 pending : []
 solution : [0, 8, 1, 4, 13, 11]

After backtrack at level 14
 pending : [17, 16, 19, 22, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13, 11]


Invert decision for 11 at level 13


New level: 14
 pending : [17, 16, 19, 22, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13]


Before reduction : 
 pending  : [17, 16, 19, 22, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, -1), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 32, 33, 10, 12, 27, 20]
 solution : [0, 8, 1, 4, 13]


Solution : [0, 8, 1, 4, 13] has cost 26.


Decide in level 14 among pending : [17, 16, 19, 22, 32, 33, 10, 12, 27, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, -1), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 10 with phase True at level 14

After decision at level 14
 pending : [17, 16, 19, 22, 32, 33, 12, 27, 20]
 solution : [0, 8, 1, 4, 13, 10]


New level: 15
 pending : [17, 16, 19, 22, 32, 33, 12, 27, 20]
 solution : [0, 8, 1, 4, 13, 10]


Before reduction : 
 pending  : [17, 16, 19, 22, 32, 33, 12, 27, 20]
 solution : [0, 8, 1, 4, 13, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, -1), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 12, 16, 17, 19, 20, 22, 27}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 13, 10]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 13, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 13, 10]


Solution : [0, 8, 1, 4, 13, 10] has cost 39.


Before backtrack at level 15
 pending : []
 solution : [0, 8, 1, 4, 13, 10]

After backtrack at level 15
 pending : [17, 16, 19, 22, 32, 33, 12, 27, 20]
 solution : [0, 8, 1, 4, 13, 10]


Invert decision for 10 at level 14


New level: 15
 pending : [17, 16, 19, 22, 32, 33, 12, 27, 20]
 solution : [0, 8, 1, 4, 13]


Before reduction : 
 pending  : [17, 16, 19, 22, 32, 33, 12, 27, 20]
 solution : [0, 8, 1, 4, 13]

Essensial at level 15 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 17, 19, 20, 22, 27}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 13, 12]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 13, 12]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 13, 12]


Solution : [0, 8, 1, 4, 13, 12] has cost 32.


Before backtrack at level 15
 pending : []
 solution : [0, 8, 1, 4, 13, 12]

After backtrack at level 15
 pending : [12, 17, 16, 19, 22, 32, 33, 27, 20]
 solution : [0, 8, 1, 4, 13]


Before backtrack at level 14
 pending : [12, 17, 16, 19, 22, 32, 33, 27, 20]
 solution : [0, 8, 1, 4, 13]

After backtrack at level 14
 pending : [12, 17, 16, 19, 22, 32, 33, 27, 20, 10]
 solution : [0, 8, 1, 4, 13]


Before backtrack at level 13
 pending : [12, 17, 16, 19, 22, 32, 33, 27, 20, 10]
 solution : [0, 8, 1, 4, 13]

After backtrack at level 13
 pending : [12, 17, 16, 19, 22, 32, 33, 27, 20, 10, 9, 3, 15, 18, 29, 7, 5, 6, 11]
 solution : [0, 8, 1, 4, 13]


Invert decision for 13 at level 12


New level: 13
 pending : [12, 17, 16, 19, 22, 32, 33, 27, 20, 10, 9, 3, 15, 18, 29, 7, 5, 6, 11]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [12, 17, 16, 19, 22, 32, 33, 27, 20, 10, 9, 3, 15, 18, 29, 7, 5, 6, 11]
 solution : [0, 8, 1, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [12, 17, 16, 19, 22, 32, 33, 27, 20, 10, 9, 3, 15, 18, 29, 7, 5, 6, 11]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 13 among pending : [12, 17, 16, 19, 22, 32, 33, 27, 20, 10, 9, 3, 15, 18, 29, 7, 5, 6, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 12 with phase True at level 13

After decision at level 13
 pending : [17, 16, 19, 22, 32, 33, 27, 20, 10, 9, 3, 15, 18, 29, 7, 5, 6, 11]
 solution : [0, 8, 1, 4, 12]


New level: 14
 pending : [17, 16, 19, 22, 32, 33, 27, 20, 10, 9, 3, 15, 18, 29, 7, 5, 6, 11]
 solution : [0, 8, 1, 4, 12]


Before reduction : 
 pending  : [17, 16, 19, 22, 32, 33, 27, 20, 10, 9, 3, 15, 18, 29, 7, 5, 6, 11]
 solution : [0, 8, 1, 4, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, 128), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 10, 11}

After reduction : 
 pending  : [17, 16, 19, 22, 27, 20, 9, 3, 15, 18, 29, 7, 5, 6]
 solution : [0, 8, 1, 4, 12]


Before reduction : 
 pending  : [17, 16, 19, 22, 27, 20, 9, 3, 15, 18, 29, 7, 5, 6]
 solution : [0, 8, 1, 4, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 27, 20, 9, 3, 15, 18, 29, 7, 5, 6]
 solution : [0, 8, 1, 4, 12]


Solution : [0, 8, 1, 4, 12] has cost 26.


Decide in level 14 among pending : [17, 16, 19, 22, 27, 20, 9, 3, 15, 18, 29, 7, 5, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 7 with phase True at level 14

After decision at level 14
 pending : [17, 16, 19, 22, 27, 20, 9, 3, 15, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7]


New level: 15
 pending : [17, 16, 19, 22, 27, 20, 9, 3, 15, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7]


Before reduction : 
 pending  : [17, 16, 19, 22, 27, 20, 9, 3, 15, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {15}

After reduction : 
 pending  : [17, 16, 19, 22, 27, 20, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7]


Before reduction : 
 pending  : [17, 16, 19, 22, 27, 20, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 27, 20, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7]


Solution : [0, 8, 1, 4, 12, 7] has cost 31.


Decide in level 15 among pending : [17, 16, 19, 22, 27, 20, 9, 3, 18, 29, 5, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 15

After decision at level 15
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7, 20]


New level: 16
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7, 20]


Before reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7, 20]


Solution : [0, 8, 1, 4, 12, 7, 20] has cost 41.


Before backtrack at level 16
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7, 20]

After backtrack at level 16
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7, 20]


Invert decision for 20 at level 15


New level: 16
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7]


Before reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]
 solution : [0, 8, 1, 4, 12, 7]


Solution : [0, 8, 1, 4, 12, 7] has cost 31.


Decide in level 16 among pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 5, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 6]
 solution : [0, 8, 1, 4, 12, 7, 5]


New level: 17
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 6]
 solution : [0, 8, 1, 4, 12, 7, 5]


Before reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29, 6]
 solution : [0, 8, 1, 4, 12, 7, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {3, 6, 9, 16, 17, 18, 19, 22, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 7, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 7, 5]


Solution : [0, 8, 1, 4, 12, 7, 5] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 8, 1, 4, 12, 7, 5]

After backtrack at level 17
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 6]
 solution : [0, 8, 1, 4, 12, 7, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 6]
 solution : [0, 8, 1, 4, 12, 7]


Before reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29, 6]
 solution : [0, 8, 1, 4, 12, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29, 6]
 solution : [0, 8, 1, 4, 12, 7]


Solution : [0, 8, 1, 4, 12, 7] has cost 31.


Decide in level 17 among pending : [17, 16, 19, 22, 27, 9, 3, 18, 29, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 17

After decision at level 17
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7, 6]


New level: 18
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7, 6]


Before reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {3, 9, 16, 17, 18, 19, 22, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 7, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 7, 6]


Solution : [0, 8, 1, 4, 12, 7, 6] has cost 44.


Before backtrack at level 18
 pending : []
 solution : [0, 8, 1, 4, 12, 7, 6]

After backtrack at level 18
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7, 6]


Invert decision for 6 at level 17


New level: 18
 pending : [17, 16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7]


Before reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [17, 16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7]


Solution : [0, 8, 1, 4, 12, 7] has cost 31.


Decide in level 18 among pending : [17, 16, 19, 22, 27, 9, 3, 18, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 17 with phase True at level 18

After decision at level 18
 pending : [16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7, 17]


New level: 19
 pending : [16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7, 17]


Before reduction : 
 pending  : [16, 19, 22, 27, 9, 3, 18, 29]
 solution : [0, 8, 1, 4, 12, 7, 17]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {16, 18, 19, 22, 27, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 12, 7, 17]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 12, 7, 17]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 12, 7, 17]


Solution : [0, 8, 1, 4, 12, 7, 17] has cost 65.


Before backtrack at level 19
 pending : [9, 3]
 solution : [0, 8, 1, 4, 12, 7, 17]

After backtrack at level 19
 pending : [9, 3, 16, 19, 22, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 7, 17]


Invert decision for 17 at level 18


New level: 19
 pending : [9, 3, 16, 19, 22, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 7]


Before reduction : 
 pending  : [9, 3, 16, 19, 22, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 7]

Essensial at level 19 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {16, 18, 19, 27, 29}

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 12, 7, 22]


Before reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 12, 7, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 3]
 solution : [0, 8, 1, 4, 12, 7, 22]


Solution : [0, 8, 1, 4, 12, 7, 22] has cost 65.


Before backtrack at level 19
 pending : [9, 3]
 solution : [0, 8, 1, 4, 12, 7, 22]

After backtrack at level 19
 pending : [9, 3, 22, 16, 19, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 7]


Before backtrack at level 18
 pending : [9, 3, 22, 16, 19, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 7]

After backtrack at level 18
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 7]


Before backtrack at level 17
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 7]

After backtrack at level 17
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 6]
 solution : [0, 8, 1, 4, 12, 7]


Before backtrack at level 16
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 6]
 solution : [0, 8, 1, 4, 12, 7]

After backtrack at level 16
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 6, 5]
 solution : [0, 8, 1, 4, 12, 7]


Before backtrack at level 15
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 6, 5]
 solution : [0, 8, 1, 4, 12, 7]

After backtrack at level 15
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 6, 5, 15, 20]
 solution : [0, 8, 1, 4, 12, 7]


Invert decision for 7 at level 14


New level: 15
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 6, 5, 15, 20]
 solution : [0, 8, 1, 4, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 6, 5, 15, 20]
 solution : [0, 8, 1, 4, 12]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 6, 5, 15, 20]
 solution : [0, 8, 1, 4, 12]


Solution : [0, 8, 1, 4, 12] has cost 26.


Decide in level 15 among pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 6, 5, 15, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 15

After decision at level 15
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 5, 15, 20]
 solution : [0, 8, 1, 4, 12, 6]


New level: 16
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 5, 15, 20]
 solution : [0, 8, 1, 4, 12, 6]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 5, 15, 20]
 solution : [0, 8, 1, 4, 12, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {3, 5, 9, 15, 16, 17, 18, 19, 20, 22, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 6]


Solution : [0, 8, 1, 4, 12, 6] has cost 39.


Before backtrack at level 16
 pending : []
 solution : [0, 8, 1, 4, 12, 6]

After backtrack at level 16
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 5, 15, 20]
 solution : [0, 8, 1, 4, 12, 6]


Invert decision for 6 at level 15


New level: 16
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 5, 15, 20]
 solution : [0, 8, 1, 4, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 5, 15, 20]
 solution : [0, 8, 1, 4, 12]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 5, 15, 20]
 solution : [0, 8, 1, 4, 12]


Solution : [0, 8, 1, 4, 12] has cost 26.


Decide in level 16 among pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 5, 15, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 15, 20]
 solution : [0, 8, 1, 4, 12, 5]


New level: 17
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 15, 20]
 solution : [0, 8, 1, 4, 12, 5]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 15, 20]
 solution : [0, 8, 1, 4, 12, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {3, 9, 15, 16, 17, 18, 19, 20, 22, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 12, 5]


Solution : [0, 8, 1, 4, 12, 5] has cost 32.


Before backtrack at level 17
 pending : []
 solution : [0, 8, 1, 4, 12, 5]

After backtrack at level 17
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 15, 20]
 solution : [0, 8, 1, 4, 12, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 15, 20]
 solution : [0, 8, 1, 4, 12]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 15, 20]
 solution : [0, 8, 1, 4, 12]

Essensial at level 17 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 20]
 solution : [0, 8, 1, 4, 12, 15]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 20]
 solution : [0, 8, 1, 4, 12, 15]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17, 20]
 solution : [0, 8, 1, 4, 12, 15]


Solution : [0, 8, 1, 4, 12, 15] has cost 28.


Decide in level 17 among pending : [9, 3, 22, 16, 19, 27, 18, 29, 17, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 17

After decision at level 17
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15, 20]


New level: 18
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15, 20]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15, 20]


Solution : [0, 8, 1, 4, 12, 15, 20] has cost 38.


Before backtrack at level 18
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15, 20]

After backtrack at level 18
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15, 20]


Invert decision for 20 at level 17


New level: 18
 pending : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15]


Before reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 4), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15]


Solution : [0, 8, 1, 4, 12, 15] has cost 28.


Decide in level 18 among pending : [9, 3, 22, 16, 19, 27, 18, 29, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 18

After decision at level 18
 pending : [3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15, 9]


New level: 19
 pending : [3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15, 9]


Before reduction : 
 pending  : [3, 22, 16, 19, 27, 18, 29, 17]
 solution : [0, 8, 1, 4, 12, 15, 9]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 0), (19, 0), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {3, 16, 18, 19, 27, 29}

After reduction : 
 pending  : [22, 17]
 solution : [0, 8, 1, 4, 12, 15, 9]


Before reduction : 
 pending  : [22, 17]
 solution : [0, 8, 1, 4, 12, 15, 9]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 0), (19, 0), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [22, 17]
 solution : [0, 8, 1, 4, 12, 15, 9]


Solution : [0, 8, 1, 4, 12, 15, 9] has cost 37.


Before backtrack at level 19
 pending : [22, 17]
 solution : [0, 8, 1, 4, 12, 15, 9]

After backtrack at level 19
 pending : [22, 17, 3, 16, 19, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 15, 9]


Invert decision for 9 at level 18


New level: 19
 pending : [22, 17, 3, 16, 19, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 15]


Before reduction : 
 pending  : [22, 17, 3, 16, 19, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 15]

Essensial at level 19 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 0), (19, 0), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {16, 18, 19, 27, 29}

After reduction : 
 pending  : [22, 17]
 solution : [0, 8, 1, 4, 12, 15, 3]


Before reduction : 
 pending  : [22, 17]
 solution : [0, 8, 1, 4, 12, 15, 3]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 0), (19, 0), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [22, 17]
 solution : [0, 8, 1, 4, 12, 15, 3]


Solution : [0, 8, 1, 4, 12, 15, 3] has cost 37.


Before backtrack at level 19
 pending : [22, 17]
 solution : [0, 8, 1, 4, 12, 15, 3]

After backtrack at level 19
 pending : [22, 17, 3, 16, 19, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 15]


Before backtrack at level 18
 pending : [22, 17, 3, 16, 19, 27, 18, 29]
 solution : [0, 8, 1, 4, 12, 15]

After backtrack at level 18
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9]
 solution : [0, 8, 1, 4, 12, 15]


Before backtrack at level 17
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9]
 solution : [0, 8, 1, 4, 12, 15]

After backtrack at level 17
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20]
 solution : [0, 8, 1, 4, 12]


Before backtrack at level 16
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20]
 solution : [0, 8, 1, 4, 12]

After backtrack at level 16
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20, 5]
 solution : [0, 8, 1, 4, 12]


Before backtrack at level 15
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20, 5]
 solution : [0, 8, 1, 4, 12]

After backtrack at level 15
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20, 5, 6]
 solution : [0, 8, 1, 4, 12]


Before backtrack at level 14
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20, 5, 6]
 solution : [0, 8, 1, 4, 12]

After backtrack at level 14
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4, 12]


Invert decision for 12 at level 13


New level: 14
 pending : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 14 among pending : [22, 17, 3, 16, 19, 27, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 27 with phase True at level 14

After decision at level 14
 pending : [22, 17, 3, 16, 19, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4, 27]


New level: 15
 pending : [22, 17, 3, 16, 19, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4, 27]


Before reduction : 
 pending  : [22, 17, 3, 16, 19, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4, 27]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [22, 17, 3, 16, 19, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4, 27]


Solution : [0, 8, 1, 4, 27] has cost 30.


Decide in level 15 among pending : [22, 17, 3, 16, 19, 18, 29, 9, 15, 20, 5, 6, 32, 33, 10, 11, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [22, 17, 3, 16, 19, 18, 29, 9, 15, 20, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4, 27, 5]


New level: 16
 pending : [22, 17, 3, 16, 19, 18, 29, 9, 15, 20, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4, 27, 5]


Before reduction : 
 pending  : [22, 17, 3, 16, 19, 18, 29, 9, 15, 20, 6, 32, 33, 10, 11, 7]
 solution : [0, 8, 1, 4, 27, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 8), (18, 0), (19, 4), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 16 : {3, 6, 7, 9, 15, 18, 20, 29}

After reduction : 
 pending  : [22, 17, 16, 19, 32, 33, 10, 11]
 solution : [0, 8, 1, 4, 27, 5]


Before reduction : 
 pending  : [22, 17, 16, 19, 32, 33, 10, 11]
 solution : [0, 8, 1, 4, 27, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 8), (18, 0), (19, 4), (20, 0), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 8), (18, -1), (19, 4), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 32, 33, 10, 11]
 solution : [0, 8, 1, 4, 27, 5]


Solution : [0, 8, 1, 4, 27, 5] has cost 36.


Before backtrack at level 16
 pending : [22, 17, 16, 19, 32, 33, 10, 11]
 solution : [0, 8, 1, 4, 27, 5]

After backtrack at level 16
 pending : [22, 17, 16, 19, 32, 33, 10, 11, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [22, 17, 16, 19, 32, 33, 10, 11, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27]


Before reduction : 
 pending  : [22, 17, 16, 19, 32, 33, 10, 11, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 8), (18, -1), (19, 4), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 32, 33, 10, 11, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27]


Solution : [0, 8, 1, 4, 27] has cost 30.


Decide in level 16 among pending : [22, 17, 16, 19, 32, 33, 10, 11, 3, 18, 29, 9, 15, 20, 6, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

Decide 10 with phase True at level 16

After decision at level 16
 pending : [22, 17, 16, 19, 32, 33, 11, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 10]


New level: 17
 pending : [22, 17, 16, 19, 32, 33, 11, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 10]


Before reduction : 
 pending  : [22, 17, 16, 19, 32, 33, 11, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 32), (17, 64), (18, 8), (19, 32), (20, 16), (21, -1), (22, 64), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 11}

After reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 10]


Before reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 10]


Solution : [0, 8, 1, 4, 27, 10] has cost 43.


Before backtrack at level 17
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 10]

After backtrack at level 17
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 32, 33, 11]
 solution : [0, 8, 1, 4, 27, 10]


Invert decision for 10 at level 16


New level: 17
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 32, 33, 11]
 solution : [0, 8, 1, 4, 27]


Before reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 32, 33, 11]
 solution : [0, 8, 1, 4, 27]

Essensial at level 17 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 17 : {32, 33}

After reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 11]


Before reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 11]


Solution : [0, 8, 1, 4, 27, 11] has cost 36.


Before backtrack at level 17
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7]
 solution : [0, 8, 1, 4, 27, 11]

After backtrack at level 17
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 11, 32, 33]
 solution : [0, 8, 1, 4, 27]


Before backtrack at level 16
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 11, 32, 33]
 solution : [0, 8, 1, 4, 27]

After backtrack at level 16
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 11, 32, 33, 10]
 solution : [0, 8, 1, 4, 27]


Before backtrack at level 15
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 11, 32, 33, 10]
 solution : [0, 8, 1, 4, 27]

After backtrack at level 15
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 11, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 27]


Invert decision for 27 at level 14


New level: 15
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 11, 32, 33, 10, 5]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 11, 32, 33, 10, 5]
 solution : [0, 8, 1, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 16), (18, 8), (19, 4), (20, 16), (21, -1), (22, 16), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 15 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 11, 32, 33, 10, 5]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 15 among pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 6, 7, 11, 32, 33, 10, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 6 with phase True at level 15

After decision at level 15
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 7, 11, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 6]


New level: 16
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 7, 11, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 6]


Before reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 15, 20, 7, 11, 32, 33, 10, 5]
 solution : [0, 8, 1, 4, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 0), (16, 16), (17, 20), (18, 0), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 16 : {3, 5, 7, 9, 15, 18, 29}

After reduction : 
 pending  : [22, 17, 16, 19, 20, 11, 32, 33, 10]
 solution : [0, 8, 1, 4, 6]


Before reduction : 
 pending  : [22, 17, 16, 19, 20, 11, 32, 33, 10]
 solution : [0, 8, 1, 4, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 0), (16, 16), (17, 20), (18, 0), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, -1), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 16 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 20, 11, 32, 33, 10]
 solution : [0, 8, 1, 4, 6]


Solution : [0, 8, 1, 4, 6] has cost 33.


Before backtrack at level 16
 pending : [22, 17, 16, 19, 20, 11, 32, 33, 10]
 solution : [0, 8, 1, 4, 6]

After backtrack at level 16
 pending : [22, 17, 16, 19, 20, 11, 32, 33, 10, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4, 6]


Invert decision for 6 at level 15


New level: 16
 pending : [22, 17, 16, 19, 20, 11, 32, 33, 10, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [22, 17, 16, 19, 20, 11, 32, 33, 10, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, -1), (19, 16), (20, 4), (21, -1), (22, 20), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Covered at level 16 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 20, 11, 32, 33, 10, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4]


Solution : [0, 8, 1, 4] has cost 20.


Decide in level 16 among pending : [22, 17, 16, 19, 20, 11, 32, 33, 10, 3, 18, 29, 9, 15, 7, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

Decide 11 with phase True at level 16

After decision at level 16
 pending : [22, 17, 16, 19, 20, 32, 33, 10, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4, 11]


New level: 17
 pending : [22, 17, 16, 19, 20, 32, 33, 10, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4, 11]


Before reduction : 
 pending  : [22, 17, 16, 19, 20, 32, 33, 10, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 128), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 52), (17, 80), (18, 32), (19, 52), (20, 64), (21, -1), (22, 80), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 10}

After reduction : 
 pending  : [22, 17, 16, 19, 20, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4, 11]


Before reduction : 
 pending  : [22, 17, 16, 19, 20, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 20, 3, 18, 29, 9, 15, 7, 5]
 solution : [0, 8, 1, 4, 11]


Solution : [0, 8, 1, 4, 11] has cost 26.


Decide in level 17 among pending : [22, 17, 16, 19, 20, 3, 18, 29, 9, 15, 7, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 7 with phase True at level 17

After decision at level 17
 pending : [22, 17, 16, 19, 20, 3, 18, 29, 9, 15, 5]
 solution : [0, 8, 1, 4, 11, 7]


New level: 18
 pending : [22, 17, 16, 19, 20, 3, 18, 29, 9, 15, 5]
 solution : [0, 8, 1, 4, 11, 7]


Before reduction : 
 pending  : [22, 17, 16, 19, 20, 3, 18, 29, 9, 15, 5]
 solution : [0, 8, 1, 4, 11, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {15}

After reduction : 
 pending  : [22, 17, 16, 19, 20, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7]


Before reduction : 
 pending  : [22, 17, 16, 19, 20, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 20, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7]


Solution : [0, 8, 1, 4, 11, 7] has cost 31.


Decide in level 18 among pending : [22, 17, 16, 19, 20, 3, 18, 29, 9, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 18

After decision at level 18
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7, 20]


New level: 19
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7, 20]


Before reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7, 20]


Solution : [0, 8, 1, 4, 11, 7, 20] has cost 41.


Before backtrack at level 19
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7, 20]

After backtrack at level 19
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7, 20]


Invert decision for 20 at level 18


New level: 19
 pending : [22, 17, 16, 19, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7]


Before reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9, 5]
 solution : [0, 8, 1, 4, 11, 7]


Solution : [0, 8, 1, 4, 11, 7] has cost 31.


Decide in level 19 among pending : [22, 17, 16, 19, 3, 18, 29, 9, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 19

After decision at level 19
 pending : [22, 17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7, 5]


New level: 20
 pending : [22, 17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7, 5]


Before reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7, 5]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : {3, 9, 16, 17, 18, 19, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 11, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 11, 7, 5]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 11, 7, 5]


Solution : [0, 8, 1, 4, 11, 7, 5] has cost 37.


Before backtrack at level 20
 pending : []
 solution : [0, 8, 1, 4, 11, 7, 5]

After backtrack at level 20
 pending : [22, 17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7, 5]


Invert decision for 5 at level 19


New level: 20
 pending : [22, 17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7]


Before reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [22, 17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7]


Solution : [0, 8, 1, 4, 11, 7] has cost 31.


Decide in level 20 among pending : [22, 17, 16, 19, 3, 18, 29, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 22 with phase True at level 20

After decision at level 20
 pending : [17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7, 22]


New level: 21
 pending : [17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7, 22]


Before reduction : 
 pending  : [17, 16, 19, 3, 18, 29, 9]
 solution : [0, 8, 1, 4, 11, 7, 22]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : {16, 17, 18, 19, 29}

After reduction : 
 pending  : [3, 9]
 solution : [0, 8, 1, 4, 11, 7, 22]


Before reduction : 
 pending  : [3, 9]
 solution : [0, 8, 1, 4, 11, 7, 22]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [3, 9]
 solution : [0, 8, 1, 4, 11, 7, 22]


Solution : [0, 8, 1, 4, 11, 7, 22] has cost 65.


Before backtrack at level 21
 pending : [3, 9]
 solution : [0, 8, 1, 4, 11, 7, 22]

After backtrack at level 21
 pending : [3, 9, 17, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 7, 22]


Invert decision for 22 at level 20


New level: 21
 pending : [3, 9, 17, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 7]


Before reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 7]

Essensial at level 21 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : {16, 18, 19, 29}

After reduction : 
 pending  : [3, 9]
 solution : [0, 8, 1, 4, 11, 7, 17]


Before reduction : 
 pending  : [3, 9]
 solution : [0, 8, 1, 4, 11, 7, 17]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [3, 9]
 solution : [0, 8, 1, 4, 11, 7, 17]


Solution : [0, 8, 1, 4, 11, 7, 17] has cost 65.


Before backtrack at level 21
 pending : [3, 9]
 solution : [0, 8, 1, 4, 11, 7, 17]

After backtrack at level 21
 pending : [3, 9, 17, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 7]


Before backtrack at level 20
 pending : [3, 9, 17, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 7]

After backtrack at level 20
 pending : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 7]


Before backtrack at level 19
 pending : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 7]

After backtrack at level 19
 pending : [3, 9, 17, 16, 19, 18, 29, 22, 5]
 solution : [0, 8, 1, 4, 11, 7]


Before backtrack at level 18
 pending : [3, 9, 17, 16, 19, 18, 29, 22, 5]
 solution : [0, 8, 1, 4, 11, 7]

After backtrack at level 18
 pending : [3, 9, 17, 16, 19, 18, 29, 22, 5, 15, 20]
 solution : [0, 8, 1, 4, 11, 7]


Invert decision for 7 at level 17


New level: 18
 pending : [3, 9, 17, 16, 19, 18, 29, 22, 5, 15, 20]
 solution : [0, 8, 1, 4, 11]


Before reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22, 5, 15, 20]
 solution : [0, 8, 1, 4, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22, 5, 15, 20]
 solution : [0, 8, 1, 4, 11]


Solution : [0, 8, 1, 4, 11] has cost 26.


Decide in level 18 among pending : [3, 9, 17, 16, 19, 18, 29, 22, 5, 15, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 18

After decision at level 18
 pending : [3, 9, 17, 16, 19, 18, 29, 22, 15, 20]
 solution : [0, 8, 1, 4, 11, 5]


New level: 19
 pending : [3, 9, 17, 16, 19, 18, 29, 22, 15, 20]
 solution : [0, 8, 1, 4, 11, 5]


Before reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22, 15, 20]
 solution : [0, 8, 1, 4, 11, 5]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {3, 9, 15, 16, 17, 18, 19, 20, 22, 29}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 11, 5]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 4, 11, 5]


Solution : [0, 8, 1, 4, 11, 5] has cost 32.


Before backtrack at level 19
 pending : []
 solution : [0, 8, 1, 4, 11, 5]

After backtrack at level 19
 pending : [3, 9, 17, 16, 19, 18, 29, 22, 15, 20]
 solution : [0, 8, 1, 4, 11, 5]


Invert decision for 5 at level 18


New level: 19
 pending : [3, 9, 17, 16, 19, 18, 29, 22, 15, 20]
 solution : [0, 8, 1, 4, 11]


Before reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22, 15, 20]
 solution : [0, 8, 1, 4, 11]

Essensial at level 19 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22, 20]
 solution : [0, 8, 1, 4, 11, 15]


Before reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22, 20]
 solution : [0, 8, 1, 4, 11, 15]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22, 20]
 solution : [0, 8, 1, 4, 11, 15]


Solution : [0, 8, 1, 4, 11, 15] has cost 28.


Decide in level 19 among pending : [3, 9, 17, 16, 19, 18, 29, 22, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 19

After decision at level 19
 pending : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15, 20]


New level: 20
 pending : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15, 20]


Before reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15, 20]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15, 20]


Solution : [0, 8, 1, 4, 11, 15, 20] has cost 38.


Before backtrack at level 20
 pending : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15, 20]

After backtrack at level 20
 pending : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15, 20]


Invert decision for 20 at level 19


New level: 20
 pending : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15]


Before reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 18), (18, 4), (19, 6), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [3, 9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15]


Solution : [0, 8, 1, 4, 11, 15] has cost 28.


Decide in level 20 among pending : [3, 9, 17, 16, 19, 18, 29, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 20

After decision at level 20
 pending : [9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15, 3]


New level: 21
 pending : [9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15, 3]


Before reduction : 
 pending  : [9, 17, 16, 19, 18, 29, 22]
 solution : [0, 8, 1, 4, 11, 15, 3]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, 18), (18, 8), (19, 10), (20, -1), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 0), (19, 0), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : {9, 16, 18, 19, 29}

After reduction : 
 pending  : [17, 22]
 solution : [0, 8, 1, 4, 11, 15, 3]


Before reduction : 
 pending  : [17, 22]
 solution : [0, 8, 1, 4, 11, 15, 3]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 0), (19, 0), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [17, 22]
 solution : [0, 8, 1, 4, 11, 15, 3]


Solution : [0, 8, 1, 4, 11, 15, 3] has cost 37.


Before backtrack at level 21
 pending : [17, 22]
 solution : [0, 8, 1, 4, 11, 15, 3]

After backtrack at level 21
 pending : [17, 22, 9, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 15, 3]


Invert decision for 3 at level 20


New level: 21
 pending : [17, 22, 9, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 15]


Before reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 15]

Essensial at level 21 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 0), (19, 0), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : {16, 18, 19, 29}

After reduction : 
 pending  : [17, 22]
 solution : [0, 8, 1, 4, 11, 15, 9]


Before reduction : 
 pending  : [17, 22]
 solution : [0, 8, 1, 4, 11, 15, 9]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 0), (19, 0), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [17, 22]
 solution : [0, 8, 1, 4, 11, 15, 9]


Solution : [0, 8, 1, 4, 11, 15, 9] has cost 37.


Before backtrack at level 21
 pending : [17, 22]
 solution : [0, 8, 1, 4, 11, 15, 9]

After backtrack at level 21
 pending : [17, 22, 9, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 15]


Before backtrack at level 20
 pending : [17, 22, 9, 16, 19, 18, 29]
 solution : [0, 8, 1, 4, 11, 15]

After backtrack at level 20
 pending : [17, 22, 9, 16, 19, 18, 29, 3]
 solution : [0, 8, 1, 4, 11, 15]


Before backtrack at level 19
 pending : [17, 22, 9, 16, 19, 18, 29, 3]
 solution : [0, 8, 1, 4, 11, 15]

After backtrack at level 19
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20]
 solution : [0, 8, 1, 4, 11]


Before backtrack at level 18
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20]
 solution : [0, 8, 1, 4, 11]

After backtrack at level 18
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5]
 solution : [0, 8, 1, 4, 11]


Before backtrack at level 17
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5]
 solution : [0, 8, 1, 4, 11]

After backtrack at level 17
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 32, 33, 10, 7]
 solution : [0, 8, 1, 4, 11]


Invert decision for 11 at level 16


New level: 17
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 32, 33, 10, 7]
 solution : [0, 8, 1, 4]


Before reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 32, 33, 10, 7]
 solution : [0, 8, 1, 4]

Essensial at level 17 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 17 : {32, 33}

After reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7]
 solution : [0, 8, 1, 4, 10]


Before reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7]
 solution : [0, 8, 1, 4, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7]
 solution : [0, 8, 1, 4, 10]


Solution : [0, 8, 1, 4, 10] has cost 33.


Before backtrack at level 17
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7]
 solution : [0, 8, 1, 4, 10]

After backtrack at level 17
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33]
 solution : [0, 8, 1, 4]


Before backtrack at level 16
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33]
 solution : [0, 8, 1, 4]

After backtrack at level 16
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11]
 solution : [0, 8, 1, 4]


Before backtrack at level 15
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11]
 solution : [0, 8, 1, 4]

After backtrack at level 15
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6]
 solution : [0, 8, 1, 4]


Before backtrack at level 14
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6]
 solution : [0, 8, 1, 4]

After backtrack at level 14
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27]
 solution : [0, 8, 1, 4]


Before backtrack at level 13
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27]
 solution : [0, 8, 1, 4]

After backtrack at level 13
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12]
 solution : [0, 8, 1, 4]


Before backtrack at level 12
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12]
 solution : [0, 8, 1, 4]

After backtrack at level 12
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13]
 solution : [0, 8, 1, 4]


Before backtrack at level 11
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13]
 solution : [0, 8, 1, 4]

After backtrack at level 11
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21]
 solution : [0, 8, 1, 4]


Before backtrack at level 10
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21]
 solution : [0, 8, 1, 4]

After backtrack at level 10
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28]
 solution : [0, 8, 1, 4]


Before backtrack at level 9
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28]
 solution : [0, 8, 1, 4]

After backtrack at level 9
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25]
 solution : [0, 8, 1, 4]


Before backtrack at level 8
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25]
 solution : [0, 8, 1, 4]

After backtrack at level 8
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26]
 solution : [0, 8, 1, 4]


Before backtrack at level 7
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26]
 solution : [0, 8, 1, 4]

After backtrack at level 7
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23]
 solution : [0, 8, 1, 4]


Before backtrack at level 6
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23]
 solution : [0, 8, 1, 4]

After backtrack at level 6
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30]
 solution : [0, 8, 1, 4]


Before backtrack at level 5
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30]
 solution : [0, 8, 1, 4]

After backtrack at level 5
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31]
 solution : [0, 8, 1, 4]


Before backtrack at level 4
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31]
 solution : [0, 8, 1, 4]

After backtrack at level 4
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2]
 solution : [0, 8, 1, 4]


Before backtrack at level 3
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2]
 solution : [0, 8, 1, 4]

After backtrack at level 3
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24, 14]
 solution : [0, 8, 1, 4]


Invert decision for 4 at level 2


New level: 3
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24, 14]
 solution : [0, 8, 1]


Before reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24, 14]
 solution : [0, 8, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 10), (17, 18), (18, 32), (19, 10), (20, 64), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, 576), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, 520), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24, 14]
 solution : [0, 8, 1]


Solution : [0, 8, 1] has cost 10.


Decide in level 3 among pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24, 14]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, 576), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, 520), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

Decide 14 with phase True at level 3

After decision at level 3
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24]
 solution : [0, 8, 1, 14]


New level: 4
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24]
 solution : [0, 8, 1, 14]


Before reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24]
 solution : [0, 8, 1, 14]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, 576), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, 520), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 258), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 48), (17, 48), (18, 128), (19, 26), (20, 16), (21, 16), (22, 24), (23, 60), (24, 128), (25, 136), (26, 68), (27, 256), (28, 128), (29, 256), (30, 48), (31, 24), (32, 128), (33, 64)]

Covered at level 4 : set()

After reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24]
 solution : [0, 8, 1, 14]


Solution : [0, 8, 1, 14] has cost 31.


Decide in level 4 among pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 5, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 258), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 48), (17, 48), (18, 128), (19, 26), (20, 16), (21, 16), (22, 24), (23, 60), (24, 128), (25, 136), (26, 68), (27, 256), (28, 128), (29, 256), (30, 48), (31, 24), (32, 128), (33, 64)]

Decide 5 with phase True at level 4

After decision at level 4
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24]
 solution : [0, 8, 1, 14, 5]


New level: 5
 pending : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24]
 solution : [0, 8, 1, 14, 5]


Before reduction : 
 pending  : [17, 22, 9, 16, 19, 18, 29, 3, 15, 20, 7, 10, 32, 33, 11, 6, 27, 12, 13, 21, 28, 25, 26, 23, 30, 31, 2, 24]
 solution : [0, 8, 1, 14, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 258), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 48), (17, 48), (18, 128), (19, 26), (20, 16), (21, 16), (22, 24), (23, 60), (24, 128), (25, 136), (26, 68), (27, 256), (28, 128), (29, 256), (30, 48), (31, 24), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 320), (11, 128), (12, 512), (13, 0), (14, -1), (15, 0), (16, 12), (17, 12), (18, 2), (19, 8), (20, 4), (21, 4), (22, 6), (23, 15), (24, 32), (25, 36), (26, 18), (27, 256), (28, 128), (29, 8), (30, 48), (31, 24), (32, 128), (33, 64)]

Covered at level 5 : {2, 3, 6, 7, 9, 13, 15}

After reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 10, 32, 33, 11, 27, 12, 21, 28, 25, 26, 23, 30, 31, 24]
 solution : [0, 8, 1, 14, 5]


Before reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 10, 32, 33, 11, 27, 12, 21, 28, 25, 26, 23, 30, 31, 24]
 solution : [0, 8, 1, 14, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, 320), (11, 128), (12, 512), (13, 0), (14, -1), (15, 0), (16, 12), (17, 12), (18, 2), (19, 8), (20, 4), (21, 4), (22, 6), (23, 15), (24, 32), (25, 36), (26, 18), (27, 256), (28, 128), (29, 8), (30, 48), (31, 24), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 320), (11, 128), (12, 512), (13, -1), (14, -1), (15, -1), (16, 12), (17, 12), (18, 2), (19, 8), (20, 4), (21, 4), (22, 6), (23, 15), (24, 32), (25, 36), (26, 18), (27, 256), (28, 128), (29, 8), (30, 48), (31, 24), (32, 128), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 10, 32, 33, 11, 27, 12, 21, 28, 25, 26, 23, 30, 31, 24]
 solution : [0, 8, 1, 14, 5]


Solution : [0, 8, 1, 14, 5] has cost 37.


Before backtrack at level 5
 pending : [17, 22, 16, 19, 18, 29, 20, 10, 32, 33, 11, 27, 12, 21, 28, 25, 26, 23, 30, 31, 24]
 solution : [0, 8, 1, 14, 5]

After backtrack at level 5
 pending : [17, 22, 16, 19, 18, 29, 20, 10, 32, 33, 11, 27, 12, 21, 28, 25, 26, 23, 30, 31, 24, 9, 3, 15, 7, 6, 13, 2]
 solution : [0, 8, 1, 14, 5]


Invert decision for 5 at level 4


New level: 5
 pending : [17, 22, 16, 19, 18, 29, 20, 10, 32, 33, 11, 27, 12, 21, 28, 25, 26, 23, 30, 31, 24, 9, 3, 15, 7, 6, 13, 2]
 solution : [0, 8, 1, 14]


Before reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 10, 32, 33, 11, 27, 12, 21, 28, 25, 26, 23, 30, 31, 24, 9, 3, 15, 7, 6, 13, 2]
 solution : [0, 8, 1, 14]

Essensial at level 5 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 320), (11, 128), (12, 512), (13, -1), (14, -1), (15, -1), (16, 12), (17, 12), (18, 2), (19, 8), (20, 4), (21, 4), (22, 6), (23, 15), (24, 32), (25, 36), (26, 18), (27, 256), (28, 128), (29, 8), (30, 48), (31, 24), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 10), (17, 10), (18, 128), (19, 5), (20, 4), (21, 4), (22, 5), (23, 15), (24, 32), (25, 32), (26, 16), (27, 8), (28, 4), (29, 256), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 5 : {32, 33, 10, 11, 30, 31}

After reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2]
 solution : [0, 8, 1, 14, 12]


Before reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2]
 solution : [0, 8, 1, 14, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 10), (17, 10), (18, 128), (19, 5), (20, 4), (21, 4), (22, 5), (23, 15), (24, 32), (25, 32), (26, 16), (27, 8), (28, 4), (29, 256), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 10), (17, 10), (18, 128), (19, 5), (20, 4), (21, 4), (22, 5), (23, 15), (24, 32), (25, 32), (26, 16), (27, 8), (28, 4), (29, 256), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2]
 solution : [0, 8, 1, 14, 12]


Solution : [0, 8, 1, 14, 12] has cost 37.


Before backtrack at level 5
 pending : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2]
 solution : [0, 8, 1, 14, 12]

After backtrack at level 5
 pending : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31]
 solution : [0, 8, 1, 14]


Before backtrack at level 4
 pending : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31]
 solution : [0, 8, 1, 14]

After backtrack at level 4
 pending : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1, 14]


Invert decision for 14 at level 3


New level: 4
 pending : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1]


Before reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 10), (17, 10), (18, 128), (19, 5), (20, 4), (21, 4), (22, 5), (23, 15), (24, 32), (25, 32), (26, 16), (27, 8), (28, 4), (29, 256), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, 520), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

Covered at level 4 : set()

After reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1]


Solution : [0, 8, 1] has cost 10.


Decide in level 4 among pending : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 25, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, 520), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

Decide 25 with phase True at level 4

After decision at level 4
 pending : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1, 25]


New level: 5
 pending : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1, 25]


Before reduction : 
 pending  : [17, 22, 16, 19, 18, 29, 20, 27, 21, 28, 26, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1, 25]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, 520), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 256), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 0), (17, 0), (18, 32), (19, 0), (20, 2), (21, 5), (22, 0), (23, 5), (24, 128), (25, -1), (26, 0), (27, 4), (28, 2), (29, 256), (30, 144), (31, 72), (32, 128), (33, 64)]

Covered at level 5 : {16, 17, 19, 22, 26}

After reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1, 25]


Before reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1, 25]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 256), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 0), (17, 0), (18, 32), (19, 0), (20, 2), (21, 5), (22, 0), (23, 5), (24, 128), (25, -1), (26, 0), (27, 4), (28, 2), (29, 256), (30, 144), (31, 72), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 256), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, -1), (17, -1), (18, 32), (19, -1), (20, 2), (21, 5), (22, -1), (23, 5), (24, 64), (25, -1), (26, -1), (27, 4), (28, 2), (29, 256), (30, 144), (31, 72), (32, 128), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1, 25]


Solution : [0, 8, 1, 25] has cost 44.


Before backtrack at level 5
 pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5]
 solution : [0, 8, 1, 25]

After backtrack at level 5
 pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 25]


Invert decision for 25 at level 4


New level: 5
 pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1]


Before reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 256), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, -1), (17, -1), (18, 32), (19, -1), (20, 2), (21, 5), (22, -1), (23, 5), (24, 64), (25, -1), (26, -1), (27, 4), (28, 2), (29, 256), (30, 144), (31, 72), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, -1), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1]


Solution : [0, 8, 1] has cost 10.


Decide in level 5 among pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 12, 10, 32, 33, 11, 30, 31, 5, 17, 22, 16, 19, 26]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, -1), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

Decide 12 with phase True at level 5

After decision at level 5
 pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 10, 32, 33, 11, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12]


New level: 6
 pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 10, 32, 33, 11, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12]


Before reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 10, 32, 33, 11, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 264), (7, 128), (8, -1), (9, 64), (10, 320), (11, 128), (12, 512), (13, 128), (14, -1), (15, 64), (16, 112), (17, 160), (18, 128), (19, 64), (20, 64), (21, 160), (22, 102), (23, 384), (24, 128), (25, -1), (26, 272), (27, 256), (28, 128), (29, 256), (30, 384), (31, 192), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 258), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, 330), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, 0), (33, 0)]

Covered at level 6 : {32, 33, 10, 11}

After reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12]


Before reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 258), (7, 128), (8, -1), (9, 64), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, 330), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, 330), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 5, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12]


Solution : [0, 8, 1, 12] has cost 16.


Decide in level 6 among pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 5, 17, 22, 16, 19, 26]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, 330), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, -1), (33, -1)]

Decide 5 with phase True at level 6

After decision at level 6
 pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 5]


New level: 7
 pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 5]


Before reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, 512), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, 330), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 7 : {2, 3, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 12, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 12, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 12, 5]


Solution : [0, 8, 1, 12, 5] has cost 22.


Before backtrack at level 7
 pending : []
 solution : [0, 8, 1, 12, 5]

After backtrack at level 7
 pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 5]


Invert decision for 5 at level 6


New level: 7
 pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12]


Before reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, 330), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12]


Solution : [0, 8, 1, 12] has cost 16.


Decide in level 7 among pending : [18, 29, 20, 27, 21, 28, 23, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, 330), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, -1), (33, -1)]

Decide 23 with phase True at level 7

After decision at level 7
 pending : [18, 29, 20, 27, 21, 28, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 23]


New level: 8
 pending : [18, 29, 20, 27, 21, 28, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 23]


Before reduction : 
 pending  : [18, 29, 20, 27, 21, 28, 24, 9, 3, 15, 7, 6, 13, 2, 30, 31, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 23]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, 330), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 257), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 6), (17, 18), (18, 16), (19, 3), (20, 0), (21, 0), (22, 9), (23, -1), (24, 8), (25, -1), (26, 12), (27, 4), (28, 2), (29, 64), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 8 : {20, 21, 30, 31}

After reduction : 
 pending  : [18, 29, 27, 28, 24, 9, 3, 15, 7, 6, 13, 2, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 23]


Before reduction : 
 pending  : [18, 29, 27, 28, 24, 9, 3, 15, 7, 6, 13, 2, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 23]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 257), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 6), (17, 18), (18, 16), (19, 3), (20, 0), (21, 0), (22, 9), (23, -1), (24, 8), (25, -1), (26, 12), (27, 4), (28, 2), (29, 64), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 257), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 6), (17, 18), (18, 16), (19, 3), (20, -1), (21, -1), (22, 9), (23, -1), (24, 8), (25, -1), (26, 12), (27, 4), (28, 2), (29, 64), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [18, 29, 27, 28, 24, 9, 3, 15, 7, 6, 13, 2, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 23]


Solution : [0, 8, 1, 12, 23] has cost 50.


Before backtrack at level 8
 pending : [18, 29, 27, 28, 24, 9, 3, 15, 7, 6, 13, 2, 17, 22, 16, 19, 26]
 solution : [0, 8, 1, 12, 23]

After backtrack at level 8
 pending : [18, 29, 27, 28, 24, 9, 3, 15, 7, 6, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12, 23]


Invert decision for 23 at level 7


New level: 8
 pending : [18, 29, 27, 28, 24, 9, 3, 15, 7, 6, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12]


Before reduction : 
 pending  : [18, 29, 27, 28, 24, 9, 3, 15, 7, 6, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 257), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 6), (17, 18), (18, 16), (19, 3), (20, -1), (21, -1), (22, 9), (23, -1), (24, 8), (25, -1), (26, 12), (27, 4), (28, 2), (29, 64), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, -1), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [18, 29, 27, 28, 24, 9, 3, 15, 7, 6, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12]


Solution : [0, 8, 1, 12] has cost 16.


Decide in level 8 among pending : [18, 29, 27, 28, 24, 9, 3, 15, 7, 6, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]

Coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, -1), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, -1), (33, -1)]

Decide 6 with phase True at level 8

After decision at level 8
 pending : [18, 29, 27, 28, 24, 9, 3, 15, 7, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12, 6]


New level: 9
 pending : [18, 29, 27, 28, 24, 9, 3, 15, 7, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12, 6]


Before reduction : 
 pending  : [18, 29, 27, 28, 24, 9, 3, 15, 7, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 256), (3, 128), (4, -1), (5, -1), (6, 258), (7, 128), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, 64), (16, 20), (17, 36), (18, 128), (19, 10), (20, 64), (21, 112), (22, 18), (23, -1), (24, 32), (25, -1), (26, 52), (27, 32), (28, 16), (29, 256), (30, 12), (31, 6), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 9 : {2, 3, 7, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 12, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 12, 6]


Solution : [0, 8, 1, 12, 6] has cost 29.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 12, 6]

After backtrack at level 9
 pending : [18, 29, 27, 28, 24, 9, 3, 15, 7, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12, 6]


Invert decision for 6 at level 8


New level: 9
 pending : [18, 29, 27, 28, 24, 9, 3, 15, 7, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12]


Before reduction : 
 pending  : [18, 29, 27, 28, 24, 9, 3, 15, 7, 13, 2, 17, 22, 16, 19, 26, 20, 21, 30, 31]
 solution : [0, 8, 1, 12]

Essensial at level 9 : {26, 2, 3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 9 : {7, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 12, 26, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 12, 26, 2, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 12, 26, 2, 3]


Solution : [0, 8, 1, 12, 26, 2, 3] has cost 64.


Before backtrack at level 9
 pending : []
 solution : [0, 8, 1, 12, 26, 2, 3]

After backtrack at level 9
 pending : [3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31]
 solution : [0, 8, 1, 12]


Before backtrack at level 8
 pending : [3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31]
 solution : [0, 8, 1, 12]

After backtrack at level 8
 pending : [3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6]
 solution : [0, 8, 1, 12]


Before backtrack at level 7
 pending : [3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6]
 solution : [0, 8, 1, 12]

After backtrack at level 7
 pending : [3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23]
 solution : [0, 8, 1, 12]


Before backtrack at level 6
 pending : [3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23]
 solution : [0, 8, 1, 12]

After backtrack at level 6
 pending : [3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 10, 32, 33, 11, 5]
 solution : [0, 8, 1, 12]


Invert decision for 12 at level 5


New level: 6
 pending : [3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 10, 32, 33, 11, 5]
 solution : [0, 8, 1]


Before reduction : 
 pending  : [3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 10, 32, 33, 11, 5]
 solution : [0, 8, 1]

Essensial at level 6 : {10, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {2, 3, 6, 7, 9, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 8, 1, 10, 5]


Before reduction : 
 pending  : []
 solution : [0, 8, 1, 10, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 1, 10, 5]


Solution : [0, 8, 1, 10, 5] has cost 29.


Before backtrack at level 6
 pending : []
 solution : [0, 8, 1, 10, 5]

After backtrack at level 6
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11]
 solution : [0, 8, 1]


Before backtrack at level 5
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11]
 solution : [0, 8, 1]

After backtrack at level 5
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12]
 solution : [0, 8, 1]


Before backtrack at level 4
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12]
 solution : [0, 8, 1]

After backtrack at level 4
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25]
 solution : [0, 8, 1]


Before backtrack at level 3
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25]
 solution : [0, 8, 1]

After backtrack at level 3
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14]
 solution : [0, 8, 1]


Before backtrack at level 2
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14]
 solution : [0, 8, 1]

After backtrack at level 2
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14, 4]
 solution : [0, 8, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14, 4]
 solution : [0, 8]


Before reduction : 
 pending  : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14, 4]
 solution : [0, 8]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

Covered at level 2 : set()

After reduction : 
 pending  : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14, 4]
 solution : [0, 8]


Solution : [0, 8] has cost 7.


Decide in level 2 among pending : [10, 5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14, 4]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

Decide 10 with phase True at level 2

After decision at level 2
 pending : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14, 4]
 solution : [0, 8, 10]


New level: 3
 pending : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14, 4]
 solution : [0, 8, 10]


Before reduction : 
 pending  : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 33, 11, 12, 25, 14, 4]
 solution : [0, 8, 10]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 640), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, 768), (11, 512), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 256), (20, 128), (21, 320), (22, 408), (23, 448), (24, 128), (25, 520), (26, 544), (27, 256), (28, 256), (29, 256), (30, 384), (31, 384), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, 576), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, 0)]

Covered at level 3 : {33}

After reduction : 
 pending  : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10]


Before reduction : 
 pending  : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, 576), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, 576), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Covered at level 3 : set()

After reduction : 
 pending  : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10]


Solution : [0, 8, 10] has cost 20.


Decide in level 3 among pending : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 6, 23, 32, 11, 12, 25, 14, 4]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, 576), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Decide 6 with phase True at level 3

After decision at level 3
 pending : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10, 6]


New level: 4
 pending : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10, 6]


Before reduction : 
 pending  : [5, 3, 2, 26, 18, 29, 27, 28, 24, 9, 15, 7, 13, 17, 22, 16, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, 576), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, 576), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 128), (5, 128), (6, -1), (7, 1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, 576), (15, 256), (16, 0), (17, 0), (18, 0), (19, 9), (20, 2), (21, 5), (22, 16), (23, 24), (24, 32), (25, 21), (26, 0), (27, 32), (28, 0), (29, 32), (30, 40), (31, 5), (32, 16), (33, -1)]

Covered at level 4 : {2, 3, 16, 17, 18, 26, 28}

After reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10, 6]


Before reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 128), (5, 128), (6, -1), (7, 1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, 576), (15, 256), (16, 0), (17, 0), (18, 0), (19, 9), (20, 2), (21, 5), (22, 16), (23, 24), (24, 32), (25, 21), (26, 0), (27, 32), (28, 0), (29, 32), (30, 40), (31, 5), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, 576), (15, 256), (16, -1), (17, -1), (18, -1), (19, 9), (20, 2), (21, 5), (22, 16), (23, 24), (24, 32), (25, 21), (26, -1), (27, 32), (28, -1), (29, 32), (30, 40), (31, 5), (32, 16), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10, 6]


Solution : [0, 8, 10, 6] has cost 33.


Before backtrack at level 4
 pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4]
 solution : [0, 8, 10, 6]

After backtrack at level 4
 pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10, 6]


Invert decision for 6 at level 3


New level: 4
 pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10]


Before reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, 1), (8, -1), (9, 64), (10, -1), (11, 128), (12, 128), (13, 128), (14, 576), (15, 256), (16, -1), (17, -1), (18, -1), (19, 9), (20, 2), (21, 5), (22, 16), (23, 24), (24, 32), (25, 21), (26, -1), (27, 32), (28, -1), (29, 32), (30, 40), (31, 5), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, 576), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10]


Solution : [0, 8, 10] has cost 20.


Decide in level 4 among pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 14, 4, 3, 2, 26, 18, 28, 17, 16]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, 576), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10, 14]


New level: 5
 pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10, 14]


Before reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 31, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, 576), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 264), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 48), (17, 48), (18, 256), (19, 40), (20, 16), (21, 16), (22, 40), (23, 28), (24, 64), (25, 66), (26, 64), (27, 128), (28, 16), (29, 256), (30, 6), (31, 0), (32, 32), (33, -1)]

Covered at level 5 : {31}

After reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10, 14]


Before reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 264), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 48), (17, 48), (18, 256), (19, 40), (20, 16), (21, 16), (22, 40), (23, 28), (24, 64), (25, 66), (26, 64), (27, 128), (28, 16), (29, 256), (30, 6), (31, 0), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 264), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 48), (17, 48), (18, 256), (19, 40), (20, 16), (21, 16), (22, 40), (23, 28), (24, 64), (25, 66), (26, 64), (27, 128), (28, 16), (29, 256), (30, 6), (31, -1), (32, 32), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10, 14]


Solution : [0, 8, 10, 14] has cost 41.


Before backtrack at level 5
 pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16]
 solution : [0, 8, 10, 14]

After backtrack at level 5
 pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10]


Before reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 264), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 48), (17, 48), (18, 256), (19, 40), (20, 16), (21, 16), (22, 40), (23, 28), (24, 64), (25, 66), (26, 64), (27, 128), (28, 16), (29, 256), (30, 6), (31, -1), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10]


Solution : [0, 8, 10] has cost 20.


Decide in level 5 among pending : [5, 29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16, 31]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Decide 5 with phase True at level 5

After decision at level 5
 pending : [29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10, 5]


New level: 6
 pending : [29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10, 5]


Before reduction : 
 pending  : [29, 27, 24, 9, 15, 7, 13, 22, 19, 20, 21, 30, 23, 32, 11, 12, 25, 4, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, 512), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 0), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 0), (13, 512), (14, -1), (15, 512), (16, 5), (17, 5), (18, 16), (19, 80), (20, 128), (21, 194), (22, 144), (23, 8), (24, 0), (25, 0), (26, 22), (27, 0), (28, 8), (29, 0), (30, 0), (31, 48), (32, 0), (33, -1)]

Covered at level 6 : {32, 4, 12, 24, 25, 27, 29, 30}

After reduction : 
 pending  : [9, 15, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10, 5]


Before reduction : 
 pending  : [9, 15, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 0), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 0), (13, 512), (14, -1), (15, 512), (16, 5), (17, 5), (18, 16), (19, 80), (20, 128), (21, 194), (22, 144), (23, 8), (24, 0), (25, 0), (26, 22), (27, 0), (28, 8), (29, 0), (30, 0), (31, 48), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, -1), (13, 512), (14, -1), (15, 512), (16, 5), (17, 5), (18, 16), (19, 80), (20, 128), (21, 194), (22, 144), (23, 8), (24, -1), (25, -1), (26, 22), (27, -1), (28, 8), (29, -1), (30, -1), (31, 48), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 15, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10, 5]


Solution : [0, 8, 10, 5] has cost 26.


Before backtrack at level 6
 pending : [9, 15, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31]
 solution : [0, 8, 10, 5]

After backtrack at level 6
 pending : [9, 15, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 5]


Invert decision for 5 at level 5


New level: 6
 pending : [9, 15, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10]


Before reduction : 
 pending  : [9, 15, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, -1), (13, 512), (14, -1), (15, 512), (16, 5), (17, 5), (18, 16), (19, 80), (20, 128), (21, 194), (22, 144), (23, 8), (24, -1), (25, -1), (26, 22), (27, -1), (28, 8), (29, -1), (30, -1), (31, 48), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 15, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10]


Solution : [0, 8, 10] has cost 20.


Decide in level 6 among pending : [9, 15, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Decide 15 with phase True at level 6

After decision at level 6
 pending : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15]


New level: 7
 pending : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15]


Before reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, 512), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 20), (20, 128), (21, 256), (22, 36), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 6), (32, 32), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15]


Solution : [0, 8, 10, 15] has cost 22.


Decide in level 7 among pending : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 2, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 20), (20, 128), (21, 256), (22, 36), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 6), (32, 32), (33, -1)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 2]


New level: 8
 pending : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 2]


Before reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 20), (20, 128), (21, 256), (22, 36), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 6), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 130), (5, -1), (6, -1), (7, 1), (8, -1), (9, 128), (10, -1), (11, 2), (12, 64), (13, 256), (14, -1), (15, -1), (16, 20), (17, 36), (18, 16), (19, 20), (20, 128), (21, 208), (22, 36), (23, 384), (24, 32), (25, 209), (26, 256), (27, 128), (28, 64), (29, 128), (30, 96), (31, 6), (32, 16), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 2]


Solution : [0, 8, 10, 15, 2] has cost 27.


Before backtrack at level 8
 pending : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 2]

After backtrack at level 8
 pending : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15]


Before reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 130), (5, -1), (6, -1), (7, 1), (8, -1), (9, 128), (10, -1), (11, 2), (12, 64), (13, 256), (14, -1), (15, -1), (16, 20), (17, 36), (18, 16), (19, 20), (20, 128), (21, 208), (22, 36), (23, 384), (24, 32), (25, 209), (26, 256), (27, 128), (28, 64), (29, 128), (30, 96), (31, 6), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 272), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 20), (20, 128), (21, 256), (22, 36), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 6), (32, 32), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15]


Solution : [0, 8, 10, 15] has cost 22.


Decide in level 8 among pending : [9, 7, 13, 22, 19, 20, 21, 23, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 272), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 20), (20, 128), (21, 256), (22, 36), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 6), (32, 32), (33, -1)]

Decide 23 with phase True at level 8

After decision at level 8
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 23]


New level: 9
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 23]


Before reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 31, 29, 27, 24, 30, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 23]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 272), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 20), (20, 128), (21, 256), (22, 36), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 6), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 260), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 48), (17, 144), (18, 32), (19, 10), (20, 2), (21, 2), (22, 34), (23, -1), (24, 16), (25, 50), (26, 52), (27, 32), (28, 4), (29, 64), (30, 0), (31, 0), (32, 8), (33, -1)]

Covered at level 9 : {30, 31}

After reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 23]


Before reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 23]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 260), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 48), (17, 144), (18, 32), (19, 10), (20, 2), (21, 2), (22, 34), (23, -1), (24, 16), (25, 50), (26, 52), (27, 32), (28, 4), (29, 64), (30, 0), (31, 0), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 260), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 48), (17, 144), (18, 32), (19, 10), (20, 2), (21, 2), (22, 34), (23, -1), (24, 16), (25, 50), (26, 52), (27, 32), (28, 4), (29, 64), (30, -1), (31, -1), (32, 8), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 23]


Solution : [0, 8, 10, 15, 23] has cost 56.


Before backtrack at level 9
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 4]
 solution : [0, 8, 10, 15, 23]

After backtrack at level 9
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 4, 31, 30]
 solution : [0, 8, 10, 15, 23]


Invert decision for 23 at level 8


New level: 9
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 4, 31, 30]
 solution : [0, 8, 10, 15]


Before reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 4, 31, 30]
 solution : [0, 8, 10, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 260), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 48), (17, 144), (18, 32), (19, 10), (20, 2), (21, 2), (22, 34), (23, -1), (24, 16), (25, 50), (26, 52), (27, 32), (28, 4), (29, 64), (30, -1), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 272), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 20), (20, 128), (21, 160), (22, 36), (23, -1), (24, 64), (25, 210), (26, 224), (27, 128), (28, 32), (29, 256), (30, 96), (31, 6), (32, 32), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 4, 31, 30]
 solution : [0, 8, 10, 15]


Solution : [0, 8, 10, 15] has cost 22.


Decide in level 9 among pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 4, 31, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 272), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 20), (20, 128), (21, 160), (22, 36), (23, -1), (24, 64), (25, 210), (26, 224), (27, 128), (28, 32), (29, 256), (30, 96), (31, 6), (32, 32), (33, -1)]

Decide 4 with phase True at level 9

After decision at level 9
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 31, 30]
 solution : [0, 8, 10, 15, 4]


New level: 10
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 31, 30]
 solution : [0, 8, 10, 15, 4]


Before reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 24, 32, 12, 25, 31, 30]
 solution : [0, 8, 10, 15, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 272), (5, -1), (6, -1), (7, 256), (8, -1), (9, 128), (10, -1), (11, 2), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 20), (20, 128), (21, 160), (22, 36), (23, -1), (24, 64), (25, 210), (26, 224), (27, 128), (28, 32), (29, 256), (30, 96), (31, 6), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 4), (8, -1), (9, 128), (10, -1), (11, 2), (12, 0), (13, 256), (14, -1), (15, -1), (16, 20), (17, 36), (18, 16), (19, 20), (20, 128), (21, 112), (22, 36), (23, -1), (24, 0), (25, 26), (26, 26), (27, 8), (28, 8), (29, 8), (30, 6), (31, 6), (32, 0), (33, -1)]

Covered at level 10 : {24, 32, 12}

After reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 25, 31, 30]
 solution : [0, 8, 10, 15, 4]


Before reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 25, 31, 30]
 solution : [0, 8, 10, 15, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 4), (8, -1), (9, 128), (10, -1), (11, 2), (12, 0), (13, 256), (14, -1), (15, -1), (16, 20), (17, 36), (18, 16), (19, 20), (20, 128), (21, 112), (22, 36), (23, -1), (24, 0), (25, 26), (26, 26), (27, 8), (28, 8), (29, 8), (30, 6), (31, 6), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 4), (8, -1), (9, 128), (10, -1), (11, 2), (12, -1), (13, 256), (14, -1), (15, -1), (16, 20), (17, 36), (18, 16), (19, 20), (20, 128), (21, 112), (22, 36), (23, -1), (24, -1), (25, 26), (26, 26), (27, 8), (28, 8), (29, 8), (30, 6), (31, 6), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 25, 31, 30]
 solution : [0, 8, 10, 15, 4]


Solution : [0, 8, 10, 15, 4] has cost 32.


Before backtrack at level 10
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 25, 31, 30]
 solution : [0, 8, 10, 15, 4]

After backtrack at level 10
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 25, 31, 30, 24, 32, 12]
 solution : [0, 8, 10, 15, 4]


Invert decision for 4 at level 9


New level: 10
 pending : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 25, 31, 30, 24, 32, 12]
 solution : [0, 8, 10, 15]


Before reduction : 
 pending  : [9, 7, 13, 22, 19, 20, 21, 11, 3, 26, 18, 28, 17, 16, 29, 27, 25, 31, 30, 24, 32, 12]
 solution : [0, 8, 10, 15]

Essensial at level 10 : {25, 3, 12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 4), (8, -1), (9, 128), (10, -1), (11, 2), (12, -1), (13, 256), (14, -1), (15, -1), (16, 20), (17, 36), (18, 16), (19, 20), (20, 128), (21, 112), (22, 36), (23, -1), (24, -1), (25, 26), (26, 26), (27, 8), (28, 8), (29, 8), (30, 6), (31, 6), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, 2), (10, -1), (11, 2), (12, -1), (13, 2), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 10 : {32, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [9, 7, 13, 11]
 solution : [0, 8, 10, 15, 25, 3, 12]


Before reduction : 
 pending  : [9, 7, 13, 11]
 solution : [0, 8, 10, 15, 25, 3, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, 2), (10, -1), (11, 2), (12, -1), (13, 2), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 1), (8, -1), (9, 2), (10, -1), (11, 2), (12, -1), (13, 2), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 7, 13, 11]
 solution : [0, 8, 10, 15, 25, 3, 12]


Solution : [0, 8, 10, 15, 25, 3, 12] has cost 71.


Before backtrack at level 10
 pending : [9, 7, 13, 11]
 solution : [0, 8, 10, 15, 25, 3, 12]

After backtrack at level 10
 pending : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32]
 solution : [0, 8, 10, 15]


Before backtrack at level 9
 pending : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32]
 solution : [0, 8, 10, 15]

After backtrack at level 9
 pending : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4]
 solution : [0, 8, 10, 15]


Before backtrack at level 8
 pending : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4]
 solution : [0, 8, 10, 15]

After backtrack at level 8
 pending : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23]
 solution : [0, 8, 10, 15]


Before backtrack at level 7
 pending : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23]
 solution : [0, 8, 10, 15]

After backtrack at level 7
 pending : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 15]


Invert decision for 15 at level 6


New level: 7
 pending : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10]


Before reduction : 
 pending  : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 1), (8, -1), (9, 2), (10, -1), (11, 2), (12, -1), (13, 2), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10]


Solution : [0, 8, 10] has cost 20.


Decide in level 7 among pending : [9, 7, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 7]


New level: 8
 pending : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 7]


Before reduction : 
 pending  : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, 512), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 258), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, 64), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 128), (19, 80), (20, 128), (21, 256), (22, 144), (23, 330), (24, 64), (25, 210), (26, 52), (27, 128), (28, 16), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 7]


Solution : [0, 8, 10, 7] has cost 25.


Before backtrack at level 8
 pending : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 7]

After backtrack at level 8
 pending : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10]


Before reduction : 
 pending  : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 258), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, 64), (12, 128), (13, 256), (14, -1), (15, -1), (16, 100), (17, 160), (18, 128), (19, 80), (20, 128), (21, 256), (22, 144), (23, 330), (24, 64), (25, 210), (26, 52), (27, 128), (28, 16), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, -1), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10]


Solution : [0, 8, 10] has cost 20.


Decide in level 8 among pending : [9, 13, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, -1), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [9, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 13]


New level: 9
 pending : [9, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 13]


Before reduction : 
 pending  : [9, 11, 3, 25, 12, 22, 19, 20, 21, 26, 18, 28, 17, 16, 29, 27, 31, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 272), (5, -1), (6, -1), (7, -1), (8, -1), (9, 256), (10, -1), (11, 128), (12, 128), (13, 512), (14, -1), (15, -1), (16, 100), (17, 160), (18, 256), (19, 80), (20, 128), (21, 256), (22, 144), (23, 384), (24, 64), (25, 210), (26, 256), (27, 128), (28, 64), (29, 256), (30, 96), (31, 48), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 64), (4, 258), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, 64), (19, 0), (20, 4), (21, 14), (22, 0), (23, 322), (24, 64), (25, 210), (26, 8), (27, 128), (28, 2), (29, 256), (30, 96), (31, 0), (32, 32), (33, -1)]

Covered at level 9 : {9, 11, 19, 22, 31}

After reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 13]


Before reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 64), (4, 258), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, 64), (19, 0), (20, 4), (21, 14), (22, 0), (23, 322), (24, 64), (25, 210), (26, 8), (27, 128), (28, 2), (29, 256), (30, 96), (31, 0), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 64), (4, 258), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, 64), (19, -1), (20, 4), (21, 14), (22, -1), (23, 322), (24, 64), (25, 210), (26, 8), (27, 128), (28, 2), (29, 256), (30, 96), (31, -1), (32, 32), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 13]


Solution : [0, 8, 10, 13] has cost 26.


Before backtrack at level 9
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 2]
 solution : [0, 8, 10, 13]

After backtrack at level 9
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 2, 9, 11, 22, 19, 31]
 solution : [0, 8, 10, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 2, 9, 11, 22, 19, 31]
 solution : [0, 8, 10]


Before reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 2, 9, 11, 22, 19, 31]
 solution : [0, 8, 10]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 64), (4, 258), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 16), (17, 20), (18, 64), (19, -1), (20, 4), (21, 14), (22, -1), (23, 322), (24, 64), (25, 210), (26, 8), (27, 128), (28, 2), (29, 256), (30, 96), (31, -1), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 130), (5, -1), (6, -1), (7, -1), (8, -1), (9, 256), (10, -1), (11, 128), (12, 64), (13, -1), (14, -1), (15, -1), (16, 20), (17, 36), (18, 32), (19, 80), (20, 128), (21, 208), (22, 144), (23, 384), (24, 32), (25, 209), (26, 256), (27, 128), (28, 64), (29, 128), (30, 96), (31, 48), (32, 16), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31]
 solution : [0, 8, 10, 2]


Before reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31]
 solution : [0, 8, 10, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 130), (5, -1), (6, -1), (7, -1), (8, -1), (9, 256), (10, -1), (11, 128), (12, 64), (13, -1), (14, -1), (15, -1), (16, 20), (17, 36), (18, 32), (19, 80), (20, 128), (21, 208), (22, 144), (23, 384), (24, 32), (25, 209), (26, 256), (27, 128), (28, 64), (29, 128), (30, 96), (31, 48), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 130), (5, -1), (6, -1), (7, -1), (8, -1), (9, 256), (10, -1), (11, 128), (12, 64), (13, -1), (14, -1), (15, -1), (16, 20), (17, 36), (18, 32), (19, 80), (20, 128), (21, 208), (22, 144), (23, 384), (24, 32), (25, 209), (26, 256), (27, 128), (28, 64), (29, 128), (30, 96), (31, 48), (32, 16), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31]
 solution : [0, 8, 10, 2]


Solution : [0, 8, 10, 2] has cost 25.


Before backtrack at level 9
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31]
 solution : [0, 8, 10, 2]

After backtrack at level 9
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2]
 solution : [0, 8, 10]


Before backtrack at level 8
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2]
 solution : [0, 8, 10]

After backtrack at level 8
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13]
 solution : [0, 8, 10]


Before backtrack at level 7
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13]
 solution : [0, 8, 10]

After backtrack at level 7
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7]
 solution : [0, 8, 10]


Before backtrack at level 6
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7]
 solution : [0, 8, 10]

After backtrack at level 6
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7, 15]
 solution : [0, 8, 10]


Before backtrack at level 5
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7, 15]
 solution : [0, 8, 10]

After backtrack at level 5
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7, 15, 5]
 solution : [0, 8, 10]


Before backtrack at level 4
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7, 15, 5]
 solution : [0, 8, 10]

After backtrack at level 4
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7, 15, 5, 14]
 solution : [0, 8, 10]


Before backtrack at level 3
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7, 15, 5, 14]
 solution : [0, 8, 10]

After backtrack at level 3
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]
 solution : [0, 8, 10]


Invert decision for 10 at level 2


New level: 3
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]
 solution : [0, 8]


Before reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 11, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]
 solution : [0, 8]

Essensial at level 3 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 130), (5, -1), (6, -1), (7, -1), (8, -1), (9, 256), (10, -1), (11, 128), (12, 64), (13, -1), (14, -1), (15, -1), (16, 20), (17, 36), (18, 32), (19, 80), (20, 128), (21, 208), (22, 144), (23, 384), (24, 32), (25, 209), (26, 256), (27, 128), (28, 64), (29, 128), (30, 96), (31, 48), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 640), (5, 512), (6, 528), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 112), (20, 128), (21, 320), (22, 204), (23, 356), (24, 128), (25, 520), (26, 212), (27, 256), (28, 128), (29, 256), (30, 384), (31, 96), (32, 128), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]
 solution : [0, 8, 11]


Before reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]
 solution : [0, 8, 11]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 640), (5, 512), (6, 528), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 112), (20, 128), (21, 320), (22, 204), (23, 356), (24, 128), (25, 520), (26, 212), (27, 256), (28, 128), (29, 256), (30, 384), (31, 96), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 640), (5, 512), (6, 528), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 112), (20, 128), (21, 320), (22, 204), (23, 356), (24, 128), (25, 520), (26, 212), (27, 256), (28, 128), (29, 256), (30, 384), (31, 96), (32, 128), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]
 solution : [0, 8, 11]


Solution : [0, 8, 11] has cost 13.


Decide in level 3 among pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 4, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 640), (5, 512), (6, 528), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 112), (20, 128), (21, 320), (22, 204), (23, 356), (24, 128), (25, 520), (26, 212), (27, 256), (28, 128), (29, 256), (30, 384), (31, 96), (32, 128), (33, 64)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]
 solution : [0, 8, 11, 4]


New level: 4
 pending : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]
 solution : [0, 8, 11, 4]


Before reduction : 
 pending  : [3, 25, 12, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 24, 32, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 33, 6]
 solution : [0, 8, 11, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, 640), (5, 512), (6, 528), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, 512), (13, 512), (14, 576), (15, 512), (16, 224), (17, 320), (18, 256), (19, 112), (20, 128), (21, 320), (22, 204), (23, 356), (24, 128), (25, 520), (26, 212), (27, 256), (28, 128), (29, 256), (30, 384), (31, 96), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 128), (4, -1), (5, 128), (6, 256), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, 0), (13, 512), (14, 576), (15, 512), (16, 20), (17, 36), (18, 64), (19, 40), (20, 128), (21, 208), (22, 72), (23, 149), (24, 0), (25, 26), (26, 52), (27, 8), (28, 16), (29, 32), (30, 6), (31, 12), (32, 0), (33, 0)]

Covered at level 4 : {24, 33, 32, 12}

After reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6]
 solution : [0, 8, 11, 4]


Before reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6]
 solution : [0, 8, 11, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 128), (4, -1), (5, 128), (6, 256), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, 0), (13, 512), (14, 576), (15, 512), (16, 20), (17, 36), (18, 64), (19, 40), (20, 128), (21, 208), (22, 72), (23, 149), (24, 0), (25, 26), (26, 52), (27, 8), (28, 16), (29, 32), (30, 6), (31, 12), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 128), (4, -1), (5, 128), (6, 256), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, 576), (15, 512), (16, 20), (17, 36), (18, 64), (19, 40), (20, 128), (21, 208), (22, 72), (23, 149), (24, -1), (25, 26), (26, 52), (27, 8), (28, 16), (29, 32), (30, 6), (31, 12), (32, -1), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6]
 solution : [0, 8, 11, 4]


Solution : [0, 8, 11, 4] has cost 23.


Before backtrack at level 4
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6]
 solution : [0, 8, 11, 4]

After backtrack at level 4
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6, 12, 24, 32, 33]
 solution : [0, 8, 11, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6, 12, 24, 32, 33]
 solution : [0, 8, 11]


Before reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6, 12, 24, 32, 33]
 solution : [0, 8, 11]

Essensial at level 4 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 128), (4, -1), (5, 128), (6, 256), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, 576), (15, 512), (16, 20), (17, 36), (18, 64), (19, 40), (20, 128), (21, 208), (22, 72), (23, 149), (24, -1), (25, 26), (26, 52), (27, 8), (28, 16), (29, 32), (30, 6), (31, 12), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 520), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, 576), (15, 512), (16, 80), (17, 144), (18, 256), (19, 104), (20, 128), (21, 256), (22, 197), (23, 354), (24, 64), (25, 256), (26, 209), (27, 64), (28, 128), (29, 256), (30, 48), (31, 96), (32, 0), (33, 32)]

Covered at level 4 : {32}

After reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6, 24, 33]
 solution : [0, 8, 11, 12]


Before reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6, 24, 33]
 solution : [0, 8, 11, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 520), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, 576), (15, 512), (16, 80), (17, 144), (18, 256), (19, 104), (20, 128), (21, 256), (22, 197), (23, 354), (24, 64), (25, 256), (26, 209), (27, 64), (28, 128), (29, 256), (30, 48), (31, 96), (32, 0), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, 576), (15, 512), (16, 80), (17, 144), (18, 256), (19, 104), (20, 128), (21, 256), (22, 197), (23, 354), (24, 64), (25, 256), (26, 209), (27, 64), (28, 128), (29, 256), (30, 48), (31, 96), (32, -1), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6, 24, 33]
 solution : [0, 8, 11, 12]


Solution : [0, 8, 11, 12] has cost 19.


Decide in level 4 among pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 14, 6, 24, 33]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, 576), (15, 512), (16, 80), (17, 144), (18, 256), (19, 104), (20, 128), (21, 256), (22, 197), (23, 354), (24, 64), (25, 256), (26, 209), (27, 64), (28, 128), (29, 256), (30, 48), (31, 96), (32, -1), (33, 32)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33]
 solution : [0, 8, 11, 12, 14]


New level: 5
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33]
 solution : [0, 8, 11, 12, 14]


Before reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 30, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33]
 solution : [0, 8, 11, 12, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, 576), (15, 512), (16, 80), (17, 144), (18, 256), (19, 104), (20, 128), (21, 256), (22, 197), (23, 354), (24, 64), (25, 256), (26, 209), (27, 64), (28, 128), (29, 256), (30, 48), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 40), (17, 40), (18, 256), (19, 50), (20, 16), (21, 16), (22, 48), (23, 28), (24, 64), (25, 64), (26, 65), (27, 16), (28, 128), (29, 256), (30, 0), (31, 6), (32, -1), (33, 32)]

Covered at level 5 : {30}

After reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33]
 solution : [0, 8, 11, 12, 14]


Before reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33]
 solution : [0, 8, 11, 12, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 40), (17, 40), (18, 256), (19, 50), (20, 16), (21, 16), (22, 48), (23, 28), (24, 64), (25, 64), (26, 65), (27, 16), (28, 128), (29, 256), (30, 0), (31, 6), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 40), (17, 40), (18, 256), (19, 50), (20, 16), (21, 16), (22, 48), (23, 28), (24, 64), (25, 64), (26, 65), (27, 16), (28, 128), (29, 256), (30, -1), (31, 6), (32, -1), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33]
 solution : [0, 8, 11, 12, 14]


Solution : [0, 8, 11, 12, 14] has cost 40.


Before backtrack at level 5
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33]
 solution : [0, 8, 11, 12, 14]

After backtrack at level 5
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33, 30]
 solution : [0, 8, 11, 12, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33, 30]
 solution : [0, 8, 11, 12]


Before reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33, 30]
 solution : [0, 8, 11, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 40), (17, 40), (18, 256), (19, 50), (20, 16), (21, 16), (22, 48), (23, 28), (24, 64), (25, 64), (26, 65), (27, 16), (28, 128), (29, 256), (30, -1), (31, 6), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 80), (17, 144), (18, 256), (19, 104), (20, 128), (21, 256), (22, 197), (23, 354), (24, 64), (25, 256), (26, 209), (27, 64), (28, 128), (29, 256), (30, 48), (31, 96), (32, -1), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33, 30]
 solution : [0, 8, 11, 12]


Solution : [0, 8, 11, 12] has cost 19.


Decide in level 5 among pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 6, 24, 33, 30]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 80), (17, 144), (18, 256), (19, 104), (20, 128), (21, 256), (22, 197), (23, 354), (24, 64), (25, 256), (26, 209), (27, 64), (28, 128), (29, 256), (30, 48), (31, 96), (32, -1), (33, 32)]

Decide 6 with phase True at level 5

After decision at level 5
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12, 6]


New level: 6
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12, 6]


Before reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 256), (4, -1), (5, 512), (6, 514), (7, 512), (8, -1), (9, 256), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 80), (17, 144), (18, 256), (19, 104), (20, 128), (21, 256), (22, 197), (23, 354), (24, 64), (25, 256), (26, 209), (27, 64), (28, 128), (29, 256), (30, 48), (31, 96), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 6 : {2, 3, 5, 7, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33}

After reduction : 
 pending  : []
 solution : [0, 8, 11, 12, 6]


Before reduction : 
 pending  : []
 solution : [0, 8, 11, 12, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 8, 11, 12, 6]


Solution : [0, 8, 11, 12, 6] has cost 32.


Before backtrack at level 6
 pending : []
 solution : [0, 8, 11, 12, 6]

After backtrack at level 6
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12, 6]


Invert decision for 6 at level 5


New level: 6
 pending : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12]


Before reduction : 
 pending  : [3, 25, 20, 21, 26, 18, 28, 17, 16, 29, 27, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12]

Essensial at level 6 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 512), (6, -1), (7, 128), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 4), (17, 128), (18, 128), (19, 4), (20, 2), (21, 82), (22, 36), (23, 97), (24, 32), (25, 130), (26, 131), (27, 0), (28, 16), (29, 32), (30, 2), (31, 16), (32, -1), (33, 8)]

Covered at level 6 : {27}

After reduction : 
 pending  : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12, 3]


Before reduction : 
 pending  : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 512), (6, -1), (7, 128), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 4), (17, 128), (18, 128), (19, 4), (20, 2), (21, 82), (22, 36), (23, 97), (24, 32), (25, 130), (26, 131), (27, 0), (28, 16), (29, 32), (30, 2), (31, 16), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 512), (6, -1), (7, 128), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, 512), (16, 4), (17, 128), (18, 128), (19, 4), (20, 2), (21, 82), (22, 36), (23, 97), (24, 32), (25, 130), (26, 131), (27, -1), (28, 16), (29, 32), (30, 2), (31, 16), (32, -1), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12, 3]


Solution : [0, 8, 11, 12, 3] has cost 28.


Before backtrack at level 6
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30]
 solution : [0, 8, 11, 12, 3]

After backtrack at level 6
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27]
 solution : [0, 8, 11, 12]


Before backtrack at level 5
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27]
 solution : [0, 8, 11, 12]

After backtrack at level 5
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27, 6]
 solution : [0, 8, 11, 12]


Before backtrack at level 4
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27, 6]
 solution : [0, 8, 11, 12]

After backtrack at level 4
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27, 6, 12, 32, 14]
 solution : [0, 8, 11]


Before backtrack at level 3
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27, 6, 12, 32, 14]
 solution : [0, 8, 11]

After backtrack at level 3
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27, 6, 12, 32, 14, 11, 4]
 solution : [0, 8]


Before backtrack at level 2
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27, 6, 12, 32, 14, 11, 4]
 solution : [0, 8]

After backtrack at level 2
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27, 6, 12, 32, 14, 11, 4, 10]
 solution : [0, 8]


Before backtrack at level 1
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27, 6, 12, 32, 14, 11, 4, 10]
 solution : [0, 8]

After backtrack at level 1
 pending : [25, 20, 21, 26, 18, 28, 17, 16, 29, 23, 9, 22, 19, 31, 2, 13, 7, 15, 5, 24, 33, 30, 3, 27, 6, 12, 32, 14, 11, 4, 10, 1]
 solution : [0, 8]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=3]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 22

[MIN NOTE]: maximum branch and bound depth: 21

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 8, 1, 12, 5] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_8] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 5

invariant [invar_1] forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0) # qcost: 3

invariant [invar_12] forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1 # qcost: 6

invariant [invar_5] forall NODE0,NODE1. internal(NODE1) | ~sent(NODE0,NODE1) | internal(NODE0) | NODE0 = NODE1 # qcost: 6




[QRM NOTE]: Time elapsed since start: 13.714 seconds

[QRM NOTE]: Time elapsed since last: 2.231 seconds

[QRM NOTE]: Peak memory: 2771600 bytes


===========================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/firewall: node=3]

===========================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 13.764 seconds

[QRM NOTE]: Time elapsed since last: 0.050 seconds

[QRM NOTE]: Peak memory: 1727689 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=3]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_8
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_12
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_8 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_12 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_12 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_12 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))) & (forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)) & (forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1) & (forall NODE0,NODE1. internal(NODE1) | ~sent(NODE0,NODE1) | internal(NODE0) | NODE0 = NODE1))

[QRM NOTE]: Time elapsed since start: 15.523 seconds

[QRM NOTE]: Time elapsed since last: 1.759 seconds

[QRM NOTE]: Peak memory: 1772907 bytes


***************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/firewall: node=3

***************************************************************************************

python3 qrm.py ivybench/sym/ivy/firewall.node_3.0.ivy -s node=4 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/firewall.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=4]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm firewall.node_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_4.finite.cpp firewall.node_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_4.finite.o firewall.node_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 24

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 32

[FW NOTE]: symmetric group order: 24

[QRM NOTE]: Time elapsed since start: 7.401 seconds

[QRM NOTE]: Time elapsed since last: 7.401 seconds

[QRM NOTE]: Peak memory: 1181741 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 8

[FW NOTE]: number of total reachable states:        1352

[FW NOTE]: number of dfs representative states:     80

[FW NOTE]: number of dfs non-representative states: 1272


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=4]

=======================================================================================

sort: node=['node0', 'node1', 'node2', 'node3']
predicate: allowed_in('node',)
predicate: sent('node', 'node')
predicate: internal('node',)
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'allowed_in(node3)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'internal(node3)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node0,node3)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node1,node3)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)', 'sent(node2,node3)', 'sent(node3,node0)', 'sent(node3,node1)', 'sent(node3,node2)', 'sent(node3,node3)']
representative states : 0, 983040, 458752, 65536, 196608, 1966096, 1966352, 1970448, 1970450, 1970454, 1970462, 1966354, 1966358, 1966366, 1966362, 1966360, 1966098, 1966102, 1966110, 1966100, 1966108, 1179664, 3408640, 7892992, 7893000, 7893128, 7895176, 3408644, 3408708, 1179666, 1441808, 3932928, 3937024, 3945216, 3945220, 3945228, 3945292, 3945420, 3945284, 3945288, 3937028, 3937036, 3937100, 3937228, 3937164, 3937092, 3937220, 3937156, 3937032, 3937096, 3937224, 3937160, 3937088, 3937216, 3937152, 3932932, 3932940, 3933004, 3933132, 3933068, 3932996, 3933000, 3932936, 3933064, 1442064, 1442066, 1442070, 3936768, 3936776, 3936780, 3936908, 3936972, 3936844, 3936836, 3936840, 3936772, 3936900, 1441810, 1441814, 1441812


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000000000000
lex min decimal: 0
states:
000000000000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000011110000000000000000
lex min decimal: 983040
states:
000011110000000000000000




=== State Orbit 2 =====================
size : 4
repr state: 000001110000000000000000
lex min decimal: 458752
states:
000010110000000000000000
000011010000000000000000
000001110000000000000000
000011100000000000000000




=== State Orbit 3 =====================
size : 4
repr state: 000001000000000000000000
lex min decimal: 65536
states:
000001000000000000000000
000000010000000000000000
000010000000000000000000
000000100000000000000000




=== State Orbit 4 =====================
size : 6
repr state: 000011000000000000000000
lex min decimal: 196608
states:
000001010000000000000000
000000110000000000000000
000001100000000000000000
000010010000000000000000
000011000000000000000000
000010100000000000000000




=== State Orbit 5 =====================
size : 12
repr state: 100001110000100000000000
lex min decimal: 1966096
states:
100001110000000000001000
000111100000000100000000
010010110100000000000000
010010110000000000000100
000111100000000000010000
001011010000001000000000
001011010010000000000000
001011010000000000000010
010010110000000001000000
000111100001000000000000
100001110000100000000000
100001110000000010000000




=== State Orbit 6 =====================
size : 12
repr state: 100001110000100010000000
lex min decimal: 1966352
states:
100001110000100010000000
000111100000000100010000
100001110000100000001000
000111100001000000010000
100001110000000010001000
001011010000001000000010
010010110100000000000100
001011010010000000000010
000111100001000100000000
010010110100000001000000
001011010010001000000000
010010110000000001000100




=== State Orbit 7 =====================
size : 4
repr state: 100001110000100010001000
lex min decimal: 1970448
states:
100001110000100010001000
000111100001000100010000
001011010010001000000010
010010110100000001000100




=== State Orbit 8 =====================
size : 12
repr state: 100001110100100010001000
lex min decimal: 1970450
states:
010010110100001001000100
010010110100100001000100
100001110100100010001000
001011010010001010000010
000111100001000100010100
100001110010100010001000
100001110001100010001000
010010110100000101000100
000111100001000100010010
001011010010001001000010
000111100001000100011000
001011010010001000010010




=== State Orbit 9 =====================
size : 12
repr state: 100001110110100010001000
lex min decimal: 1970454
states:
010010110100101001000100
001011010010001001010010
001011010010001011000010
001011010010001010010010
000111100001000100010110
100001110110100010001000
100001110101100010001000
010010110100100101000100
000111100001000100011010
100001110011100010001000
010010110100001101000100
000111100001000100011100




=== State Orbit 10 =====================
size : 4
repr state: 100001110111100010001000
lex min decimal: 1970462
states:
010010110100101101000100
100001110111100010001000
000111100001000100011110
001011010010001011010010




=== State Orbit 11 =====================
size : 24
repr state: 100001110100100010000000
lex min decimal: 1966354
states:
001011010010001010000000
010010110100100000000100
001011010010001001000000
100001110001100000001000
100001110001000010001000
001011010010000000010010
001011010000001001000010
010010110100100001000000
000111100000000100010010
001011010000001000010010
000111100000000100010100
001011010010000010000010
010010110000000101000100
000111100001000000011000
100001110100100010000000
010010110100001001000000
100001110010100010000000
100001110010000010001000
010010110000001001000100
000111100001000100000100
100001110100100000001000
000111100001000000010010
000111100001000100001000
010010110100000100000100




=== State Orbit 12 =====================
size : 12
repr state: 100001110110100010000000
lex min decimal: 1966358
states:
001011010010001011000000
000111100000000100010110
001011010010000010010010
000111100001000100001100
010010110100101001000000
100001110110100010000000
100001110101100000001000
001011010000001001010010
100001110011000010001000
010010110000001101000100
000111100001000000011010
010010110100100100000100




=== State Orbit 13 =====================
size : 12
repr state: 100001110111100010000000
lex min decimal: 1966366
states:
001011010010000011010010
100001110111100000001000
001011010010001011010000
001011010000001011010010
100001110111000010001000
100001110111100010000000
010010110100101101000000
010010110000101101000100
010010110100101100000100
000111100001000100001110
000111100001000000011110
000111100000000100011110




=== State Orbit 14 =====================
size : 24
repr state: 100001110101100010000000
lex min decimal: 1966362
states:
100001110110100000001000
001011010000001011000010
000111100001000100001010
100001110110000010001000
010010110100100101000000
001011010010001001010000
001011010010000011000010
000111100000000100011100
000111100000000100011010
001011010000001010010010
010010110100001101000000
000111100001000100000110
100001110101000010001000
010010110000101001000100
000111100001000000010110
000111100001000000011100
010010110000100101000100
010010110100101000000100
100001110011100010000000
100001110011100000001000
001011010010000001010010
001011010010001010010000
100001110101100010000000
010010110100001100000100




=== State Orbit 15 =====================
size : 12
repr state: 100001110001100010000000
lex min decimal: 1966360
states:
100001110001100010000000
000111100000000100011000
010010110000100001000100
010010110100001000000100
001011010010000001000010
001011010000001010000010
001011010010001000010000
100001110100000010001000
000111100001000100000010
000111100001000000010100
100001110010100000001000
010010110100000101000000




=== State Orbit 16 =====================
size : 12
repr state: 100001110100100000000000
lex min decimal: 1966098
states:
000111100000000100000100
100001110010000010000000
010010110000001001000000
000111100000000000010010
010010110000000100000100
000111100001000000001000
001011010000001001000000
100001110001000000001000
100001110100100000000000
010010110100100000000000
001011010010000010000000
001011010000000000010010




=== State Orbit 17 =====================
size : 24
repr state: 100001110110100000000000
lex min decimal: 1966102
states:
001011010000000001010010
010010110000100100000100
010010110000001100000100
000111100001000000001010
000111100001000000001100
100001110101100000000000
001011010000000010010010
010010110000101001000000
100001110011000010000000
000111100000000000011010
000111100000000000010110
010010110100100100000000
000111100000000100000110
001011010000001011000000
010010110100101000000000
100001110011000000001000
100001110101000000001000
100001110110000010000000
001011010010000011000000
000111100000000100001100
010010110000001101000000
001011010000001001010000
100001110110100000000000
001011010010000010010000




=== State Orbit 18 =====================
size : 12
repr state: 100001110111100000000000
lex min decimal: 1966110
states:
000111100000000100001110
001011010000001011010000
001011010010000011010000
000111100001000000001110
100001110111100000000000
000111100000000000011110
010010110100101100000000
010010110000101100000100
010010110000101101000000
100001110111000000001000
001011010000000011010010
100001110111000010000000




=== State Orbit 19 =====================
size : 24
repr state: 100001110010100000000000
lex min decimal: 1966100
states:
001011010000001010000000
001011010010000000010000
010010110000100001000000
100001110010100000000000
001011010000000001000010
100001110010000000001000
100001110100000010000000
100001110001100000000000
010010110100001000000000
010010110000000101000000
000111100001000000000010
010010110000001000000100
000111100001000000000100
000111100000000100000010
100001110100000000001000
100001110001000010000000
001011010010000001000000
001011010000001000010000
000111100000000000011000
010010110100000100000000
010010110000100000000100
000111100000000000010100
001011010000000010000010
000111100000000100001000




=== State Orbit 20 =====================
size : 12
repr state: 100001110011100000000000
lex min decimal: 1966108
states:
001011010000000011000010
100001110101000010000000
000111100000000000011100
010010110000101000000100
010010110100001100000000
000111100001000000000110
001011010010000001010000
100001110110000000001000
010010110000100101000000
001011010000001010010000
000111100000000100001010
100001110011100000000000




=== State Orbit 21 =====================
size : 12
repr state: 100001000000100000000000
lex min decimal: 1179664
states:
001000010000000000000010
100000100000000010000000
100001000000100000000000
000110000001000000000000
001010000010000000000000
000101000000000100000000
010010000100000000000000
100000010000000000001000
010000010000000000000100
010000100000000001000000
000100100000000000010000
001001000000001000000000




=== State Orbit 22 =====================
size : 12
repr state: 101001000000101000000000
lex min decimal: 3408640
states:
101000010000000000001010
010110000101000000000000
100101000000100100000000
110000010000000000001100
101001000000101000000000
011010000110000000000000
011000010000000000000110
001101000000001100000000
110000100000000011000000
100100100000000010010000
010100100000000001010000
001110000011000000000000




=== State Orbit 23 =====================
size : 4
repr state: 101101000000101100000000
lex min decimal: 7892992
states:
101101000000101100000000
011110000111000000000000
110100100000000011010000
111000010000000000001110




=== State Orbit 24 =====================
size : 12
repr state: 101101000100101100000000
lex min decimal: 7893000
states:
101101000000101101000000
110100100000000011010010
101101000100101100000000
111000010000000000011110
110100100010000011010000
011110000111000000001000
101101000000101100000100
110100100000001011010000
111000010001000000001110
011110000111000010000000
011110000111100000000000
111000010000000100001110




=== State Orbit 25 =====================
size : 12
repr state: 101101000100101101000000
lex min decimal: 7893128
states:
011110000111100010000000
110100100010000011010010
111000010000000100011110
110100100010001011010000
101101000000101101000100
101101000100101101000000
111000010001000100001110
101101000100101100000100
111000010001000000011110
011110000111100000001000
110100100000001011010010
011110000111000010001000




=== State Orbit 26 =====================
size : 4
repr state: 101101000100101101000100
lex min decimal: 7895176
states:
110100100010001011010010
011110000111100010001000
101101000100101101000100
111000010001000100011110




=== State Orbit 27 =====================
size : 24
repr state: 101001000100101000000000
lex min decimal: 3408644
states:
001110000011000000001000
101001000100101000000000
011010000110000010000000
100100100010000010010000
001101000000001100000100
101001000000101001000000
001110000011000010000000
001101000000001101000000
010100100000001001010000
101000010001000000001010
010100100000000001010010
011000010000000000010110
100100100000000010010010
010110000101100000000000
100101000100100100000000
011010000110100000000000
100101000000100100000100
011000010000000100000110
110000100010000011000000
110000100000001011000000
101000010000000000011010
110000010001000000001100
010110000101000000001000
110000010000000100001100




=== State Orbit 28 =====================
size : 12
repr state: 101001000100101001000000
lex min decimal: 3408708
states:
001101000000001101000100
010100100000001001010010
110000100010001011000000
100101000100100100000100
011010000110100010000000
110000010001000100001100
001110000011000010001000
100100100010000010010010
010110000101100000001000
101000010001000000011010
011000010000000100010110
101001000100101001000000




=== State Orbit 29 =====================
size : 12
repr state: 100001000100100000000000
lex min decimal: 1179666
states:
100001000100100000000000
010000100000001001000000
001001000000001001000000
000110000001000000001000
000101000000000100000100
100000010001000000001000
100000100010000010000000
001010000010000010000000
010000010000000100000100
001000010000000000010010
000100100000000000010010
010010000100100000000000




=== State Orbit 30 =====================
size : 24
repr state: 001011000010000000000000
lex min decimal: 1441808
states:
100001100000100000000000
100001010000000000001000
010000110000000000000100
100000110000000010000000
100001010000100000000000
001001010000001000000000
001011000010000000000000
001010010000000000000010
010010100100000000000000
000111000000000100000000
010010100000000001000000
001011000000001000000000
100000110000000000001000
100001100000000010000000
001001010000000000000010
010010010000000000000100
000110100001000000000000
010000110000000001000000
000101100000000000010000
010010010100000000000000
001010010010000000000000
000110100000000000010000
000101100000000100000000
000111000001000000000000




=== State Orbit 31 =====================
size : 12
repr state: 001111000011000000000000
lex min decimal: 3932928
states:
110000110000000011000000
010110100000000001010000
001111000011000000000000
101001010000101000000000
100101100000100100000000
010110100101000000000000
110000110000000000001100
100101100000000010010000
101001010000000000001010
011010010000000000000110
001111000000001100000000
011010010110000000000000




=== State Orbit 32 =====================
size : 24
repr state: 001111000011001000000000
lex min decimal: 3937024
states:
100101100000000110010000
010110100100000001010000
100101100000100100010000
011010010110000000000100
010110100101000000010000
001111000001001100000000
011010010100000000000110
101001010000101000000010
001111000011001000000000
110000110000000011000100
110000110000000010001100
011010010010000000000110
101001010000100000001010
001111000011000100000000
100101100000100010010000
011010010110000000000010
010110100001000001010000
110000110000000001001100
010110100101000001000000
101001010000101000001000
110000110000000011001000
100101100000100110000000
101001010000001000001010
001111000010001100000000




=== State Orbit 33 =====================
size : 6
repr state: 001111000011001100000000
lex min decimal: 3945216
states:
010110100101000001010000
100101100000100110010000
101001010000101000001010
011010010110000000000110
001111000011001100000000
110000110000000011001100




=== State Orbit 34 =====================
size : 24
repr state: 001111000011001110000000
lex min decimal: 3945220
states:
101001010001101000001010
100101100100100110010000
010110100101000001011000
010110100101000001010010
010110100101001001010000
011010010110000010000110
101001010000101001001010
010110100101100001010000
001111000011001100000100
011010010110000000010110
100101100000100110010010
001111000011001101000000
110000110001000011001100
001111000011001110000000
001111000011001100001000
101001010100101000001010
100101100000100110010100
011010010110100000000110
110000110000000111001100
110000110000001011001100
011010010110000100000110
110000110010000011001100
101001010000101000011010
100101100010100110010000




=== State Orbit 35 =====================
size : 12
repr state: 001111000011001111000000
lex min decimal: 3945228
states:
110000110011000011001100
101001010000101001011010
001111000011001111000000
101001010101101000001010
010110100101000001011010
011010010110100100000110
010110100101101001010000
100101100000100110010110
001111000011001100001100
011010010110000010010110
100101100110100110010000
110000110000001111001100




=== State Orbit 36 =====================
size : 24
repr state: 001111000011001111001000
lex min decimal: 3945292
states:
001111000011001111001000
010110100101100001011010
101001010101101001001010
100101100110100110010100
011010010110100100010110
001111000011001111000100
101001010101101000011010
010110100101101001011000
011010010110100110000110
011010010110100010010110
110000110010001111001100
001111000011001101001100
001111000011001110001100
010110100101101001010010
101001010100101001011010
110000110001001111001100
110000110011000111001100
011010010110000110010110
010110100101001001011010
100101100010100110010110
110000110011001011001100
101001010001101001011010
100101100110100110010010
100101100100100110010110




=== State Orbit 37 =====================
size : 6
repr state: 001111000011001111001100
lex min decimal: 3945420
states:
001111000011001111001100
101001010101101001011010
100101100110100110010110
010110100101101001011010
110000110011001111001100
011010010110100110010110




=== State Orbit 38 =====================
size : 12
repr state: 001111000011001110001000
lex min decimal: 3945284
states:
100101100010100110010010
011010010110000100010110
100101100100100110010100
011010010110100010000110
101001010100101001001010
010110100101001001010010
110000110001000111001100
001111000011001110001000
110000110010001011001100
001111000011001101000100
101001010001101000011010
010110100101100001011000




=== State Orbit 39 =====================
size : 12
repr state: 001111000011001110000100
lex min decimal: 3945288
states:
100101100100100110010010
101001010100101000011010
001111000011001101001000
011010010110000110000110
010110100101100001010010
110000110010000111001100
110000110001001011001100
100101100010100110010100
101001010001101001001010
010110100101001001011000
011010010110100000010110
001111000011001110000100




=== State Orbit 40 =====================
size : 24
repr state: 001111000011001010000000
lex min decimal: 3937028
states:
010110100100001001010000
011010010100000100000110
101001010000101001000010
110000110001000010001100
101001010100101000001000
011010010110000010000010
100101100000000110010010
110000110000000101001100
100101100000100100010100
001111000001001100000100
110000110010000011001000
100101100100100110000000
010110100101100001000000
010110100001000001010010
101001010000001000011010
001111000011000100001000
110000110000001011000100
001111000010001101000000
011010010110100000000100
011010010010000000010110
001111000011001010000000
101001010001100000001010
010110100101000000011000
100101100010100010010000




=== State Orbit 41 =====================
size : 24
repr state: 001111000011001011000000
lex min decimal: 3937036
states:
011010010100100100000110
100101100000000110010110
001111000001001100001100
110000110011000011001000
101001010000101001010010
010110100101000000011010
001111000011001011000000
101001010101100000001010
110000110011000010001100
001111000011000100001100
010110100101101001000000
011010010110100100000100
011010010110000010010010
101001010000001001011010
110000110000001111000100
001111000010001111000000
101001010101101000001000
110000110000001101001100
010110100001000001011010
011010010010000010010110
010110100100101001010000
100101100110100110000000
100101100000100100010110
100101100110100010010000




=== State Orbit 42 =====================
size : 24
repr state: 001111000011001011001000
lex min decimal: 3937100
states:
001111000011001011001000
101001010101101001001000
101001010001001001011010
101001010100101001010010
101001010101100000011010
110000110010001111000100
010110100101100000011010
010110100001001001011010
011010010110100110000100
010110100100101001010010
001111000001001101001100
011010010110100010010010
001111000010001111000100
011010010100100100010110
100101100110100010010010
011010010010000110010110
001111000011000110001100
110000110011000110001100
110000110001001101001100
110000110011001011001000
100101100110100110000100
100101100010000110010110
010110100101101001001000
100101100100100100010110




=== State Orbit 43 =====================
size : 24
repr state: 001111000011001011001100
lex min decimal: 3937228
states:
100101100110100010010110
100101100110000110010110
100101100110100110000110
101001010101001001011010
010110100100101001011010
001111000010001111001100
110000110011001110001100
101001010101101001010010
101001010101100001011010
110000110011001111001000
001111000011001011001100
010110100101101000011010
100101100110100100010110
110000110011001101001100
001111000011000111001100
011010010110100110010100
010110100101101001001010
011010010010100110010110
110000110011001111000100
010110100001101001011010
101001010101101001011000
011010010100100110010110
001111000001001111001100
011010010110100110010010




=== State Orbit 44 =====================
size : 24
repr state: 001111000011001011000100
lex min decimal: 3937164
states:
110000110001001111000100
001111000001001110001100
001111000011001011000100
100101100100000110010110
101001010001101001010010
101001010100001001011010
010110100101101001000010
011010010110100100010100
011010010110000110010010
010110100101001000011010
101001010101101000011000
011010010100100110000110
010110100100101001011000
100101100010100100010110
011010010010100010010110
001111000011000101001100
010110100001100001011010
110000110010001101001100
101001010101100001001010
100101100110100010010100
001111000010001111001000
110000110011000111001000
110000110011001010001100
100101100110100110000010




=== State Orbit 45 =====================
size : 24
repr state: 001111000011001010001000
lex min decimal: 3937092
states:
010110100101100000011000
110000110010001011000100
100101100010000110010010
011010010100000100010110
100101100100100110000100
101001010100101001000010
110000110001000101001100
001111000001001101000100
010110100101100001001000
001111000011000110001000
110000110010001011001000
001111000010001101000100
110000110001000110001100
010110100100001001010010
001111000011001010001000
011010010110100010000010
100101100100100100010100
011010010010000100010110
010110100001001001010010
101001010100101001001000
101001010001001000011010
100101100010100010010010
101001010001100000011010
011010010110100010000100




=== State Orbit 46 =====================
size : 24
repr state: 001111000011001010001100
lex min decimal: 3937220
states:
001111000001001111000100
110000110010001111001000
100101100110100100010100
110000110011000101001100
001111000011000111001000
011010010110100110000010
010110100101101000011000
101001010101001000011010
010110100100001001011010
110000110011001011000100
010110100001101001010010
100101100110000110010010
011010010100000110010110
100101100100100110000110
110000110001001110001100
101001010101101001000010
001111000010001101001100
011010010110100010010100
101001010001100001011010
001111000011001010001100
011010010010100100010110
101001010100101001011000
010110100101100001001010
100101100010100010010110




=== State Orbit 47 =====================
size : 24
repr state: 001111000011001010000100
lex min decimal: 3937156
states:
011010010110000110000010
101001010001101001000010
010110100001100001010010
101001010001100001001010
110000110001001011000100
001111000001001110000100
001111000010001101001000
001111000011000101001000
110000110010000101001100
010110100100001001011000
001111000011001010000100
010110100101001000011000
110000110010000111001000
010110100101100001000010
100101100100000110010010
011010010010100000010110
011010010100000110000110
101001010100001000011010
100101100010100100010100
101001010100101000011000
100101100100100110000010
100101100010100010010100
011010010110100000010100
110000110001001010001100




=== State Orbit 48 =====================
size : 24
repr state: 001111000011001001000000
lex min decimal: 3937032
states:
011010010010000010000110
100101100100100010010000
011010010110000100000100
101001010000101000010010
110000110010000010001100
110000110000000111000100
110000110001000011001000
010110100100100001010000
101001010100100000001010
011010010110000000010010
100101100010100110000000
101001010001101000001000
001111000011000100000100
100101100000100100010010
101001010000001001001010
001111000011001001000000
001111000010001110000000
010110100001000001011000
010110100101001001000000
001111000001001100001000
011010010100100000000110
100101100000000110010100
010110100101000000010010
110000110000001001001100




=== State Orbit 49 =====================
size : 24
repr state: 001111000011001001001000
lex min decimal: 3937096
states:
101001010100101000010010
110000110001001001001100
001111000001001101001000
010110100101001001001000
001111000010001110000100
110000110010000111000100
101001010100100000011010
110000110010000110001100
100101100100100010010010
010110100100100001010010
011010010100100000010110
101001010001001001001010
011010010110000110000100
100101100010100110000100
101001010001101001001000
011010010010000110000110
010110100101100000010010
011010010110100000010010
001111000011001001001000
100101100010000110010100
001111000011000110000100
010110100001001001011000
100101100100100100010010
110000110001001011001000




=== State Orbit 50 =====================
size : 24
repr state: 001111000011001001001100
lex min decimal: 3937224
states:
001111000001001111001000
100101100010100110000110
110000110011001001001100
110000110001001111001000
101001010001101001011000
001111000011001001001100
010110100101001001001010
110000110011000111000100
100101100100100010010110
001111000011000111000100
001111000010001110001100
101001010100100001011010
101001010101001001001010
011010010110000110010100
011010010110100100010010
010110100101101000010010
110000110010001110001100
010110100100100001011010
101001010101101000010010
100101100110000110010100
100101100110100100010010
011010010010100110000110
011010010100100010010110
010110100001101001011000




=== State Orbit 51 =====================
size : 24
repr state: 001111000011001001000100
lex min decimal: 3937160
states:
010110100101001000010010
011010010110000100010100
001111000011001001000100
100101100100100010010100
010110100101001001000010
110000110001000111000100
110000110010001010001100
010110100001100001011000
100101100100000110010100
110000110010001001001100
010110100100100001011000
001111000001001110001000
100101100010100110000010
101001010001101000010010
011010010110000100010010
011010010100100010000110
011010010010100010000110
110000110001000111001000
001111000010001110001000
100101100010100100010010
101001010001101000011000
101001010100001001001010
101001010100100001001010
001111000011000101000100




=== State Orbit 52 =====================
size : 24
repr state: 001111000011001000001000
lex min decimal: 3937088
states:
110000110000001011001000
101001010100101000000010
110000110010000011000100
100101100100100100010000
011010010100000000010110
011010010010000100000110
110000110001000001001100
101001010001001000001010
011010010110100000000010
001111000001001101000000
100101100000100110000100
010110100100000001010010
001111000011000110000000
010110100101000001001000
010110100101100000010000
110000110000000110001100
100101100000100010010010
010110100001001001010000
001111000011001000001000
011010010110000010000100
101001010000101001001000
001111000010001100000100
100101100010000110010000
101001010000100000011010




=== State Orbit 53 =====================
size : 24
repr state: 001111000011001000001100
lex min decimal: 3937216
states:
101001010000101001011000
110000110011000011000100
101001010000100001011010
001111000011001000001100
011010010010100100000110
100101100110000110010000
110000110011000001001100
101001010101101000000010
010110100101000001001010
010110100101101000010000
110000110000001110001100
101001010101001000001010
011010010100000010010110
011010010110000010010100
110000110000001111001000
001111000001001111000000
011010010110100100000010
001111000011000111000000
001111000010001100001100
100101100000100010010110
100101100000100110000110
100101100110100100010000
010110100001101001010000
010110100100000001011010




=== State Orbit 54 =====================
size : 24
repr state: 001111000011001000000100
lex min decimal: 3937152
states:
011010010110000000010100
001111000010001100001000
100101100010100100010000
101001010001101000000010
101001010100001000001010
101001010000101000011000
011010010100000010000110
001111000001001110000000
010110100001100001010000
100101100000100010010100
010110100101001000010000
001111000011001000000100
100101100000100110000010
110000110001000011000100
110000110000001010001100
110000110000000111001000
010110100100000001011000
010110100101000001000010
011010010110000100000010
110000110010000001001100
101001010000100001001010
001111000011000101000000
011010010010100000000110
100101100100000110010000




=== State Orbit 55 =====================
size : 24
repr state: 001111000011000010000000
lex min decimal: 3932932
states:
010110100000001001010000
001111000000001101000000
100101100000100100000100
011010010110100000000000
100101100010000010010000
100101100100100100000000
101001010100101000000000
001111000011000000001000
011010010000000000010110
110000110000000100001100
010110100101100000000000
011010010000000100000110
010110100101000000001000
001111000000001100000100
110000110010000011000000
101001010001000000001010
101001010000101001000000
110000110001000000001100
011010010110000010000000
010110100000000001010010
100101100000000010010010
101001010000000000011010
001111000011000010000000
110000110000001011000000




=== State Orbit 56 =====================
size : 24
repr state: 001111000011000011000000
lex min decimal: 3932940
states:
001111000011000000001100
001111000000001100001100
010110100101101000000000
110000110000001111000000
001111000000001111000000
101001010000101001010000
001111000011000011000000
110000110011000011000000
010110100000101001010000
011010010000000010010110
100101100110100100000000
100101100000000010010110
101001010101101000000000
100101100110000010010000
101001010101000000001010
011010010110000010010000
100101100000100100000110
110000110011000000001100
101001010000000001011010
010110100000000001011010
011010010110100100000000
110000110000001100001100
010110100101000000001010
011010010000100100000110




=== State Orbit 57 =====================
size : 24
repr state: 001111000011000011001000
lex min decimal: 3933004
states:
011010010110100110000000
101001010101000000011010
010110100101100000001010
010110100101101000001000
101001010001000001011010
110000110010001111000000
001111000011000010001100
001111000000001101001100
110000110001001100001100
011010010110100010010000
010110100000001001011010
011010010000000110010110
101001010101101001000000
100101100110000010010010
101001010100101001010000
110000110011001011000000
100101100110100100000100
100101100100100100000110
010110100000101001010010
100101100010000010010110
110000110011000100001100
011010010000100100010110
001111000000001111000100
001111000011000011001000




=== State Orbit 58 =====================
size : 12
repr state: 001111000011000011001100
lex min decimal: 3933132
states:
101001010101000001011010
011010010110100110010000
100101100110000010010110
101001010101101001010000
100101100110100100000110
110000110011001100001100
010110100101101000001010
001111000000001111001100
001111000011000011001100
110000110011001111000000
011010010000100110010110
010110100000101001011010




=== State Orbit 59 =====================
size : 24
repr state: 001111000011000011000100
lex min decimal: 3933068
states:
010110100101101000000010
011010010110100100010000
001111000011000011000100
110000110001001111000000
010110100101001000001010
010110100000100001011010
101001010101101000010000
010110100000101001011000
101001010001101001010000
011010010000100010010110
100101100110000010010100
001111000000001110001100
110000110010001100001100
011010010000100110000110
100101100100000010010110
001111000011000001001100
110000110011001000001100
100101100010100100000110
011010010110000110010000
001111000000001111001000
101001010101000001001010
101001010100000001011010
110000110011000111000000
100101100110100100000010




=== State Orbit 60 =====================
size : 12
repr state: 001111000011000010001000
lex min decimal: 3932996
states:
110000110010001011000000
001111000011000010001000
101001010001000000011010
101001010100101001000000
110000110001000100001100
100101100100100100000100
010110100000001001010010
011010010110100010000000
011010010000000100010110
100101100010000010010010
010110100101100000001000
001111000000001101000100




=== State Orbit 61 =====================
size : 24
repr state: 001111000011000010000100
lex min decimal: 3933000
states:
011010010110100000010000
110000110010000100001100
101001010001000001001010
010110100101001000001000
100101100010000010010100
001111000000001110000100
100101100010100100000100
010110100000100001010010
010110100000001001011000
101001010001101001000000
110000110001001000001100
110000110010000111000000
001111000011000010000100
100101100100100100000010
001111000011000001001000
011010010000000110000110
101001010100000000011010
110000110001001011000000
101001010100101000010000
010110100101100000000010
011010010110000110000000
001111000000001101001000
100101100100000010010010
011010010000100000010110




=== State Orbit 62 =====================
size : 24
repr state: 001111000011000001000000
lex min decimal: 3932936
states:
110000110001000011000000
101001010001101000000000
001111000011000001000000
101001010000101000010000
011010010000100000000110
110000110000000111000000
100101100000000010010100
011010010110000100000000
100101100010100100000000
011010010000000010000110
010110100000000001011000
101001010000000001001010
010110100101001000000000
010110100000100001010000
100101100100000010010000
011010010110000000010000
010110100101000000000010
101001010100000000001010
001111000000001100001000
001111000011000000000100
110000110010000000001100
001111000000001110000000
110000110000001000001100
100101100000100100000010




=== State Orbit 63 =====================
size : 12
repr state: 001111000011000001000100
lex min decimal: 3933064
states:
100101100010100100000010
110000110001000111000000
011010010110000100010000
101001010001101000010000
100101100100000010010100
101001010100000001001010
010110100101001000000010
011010010000100010000110
001111000011000001000100
001111000000001110001000
110000110010001000001100
010110100000100001011000




=== State Orbit 64 =====================
size : 12
repr state: 001011000010001000000000
lex min decimal: 1442064
states:
000111000001000100000000
000110100001000000010000
010010010100000000000100
010000110000000001000100
100000110000000010001000
010010100100000001000000
001010010010000000000010
100001100000100010000000
000101100000000100010000
001001010000001000000010
001011000010001000000000
100001010000100000001000




=== State Orbit 65 =====================
size : 24
repr state: 001011000010001010000000
lex min decimal: 1442066
states:
000110100001000000010010
000111000001000100000100
001011000010001001000000
100000110001000010001000
001010010010000010000010
000111000001000100001000
010010010100100000000100
100001100010100010000000
001001010000001000010010
100001010100100000001000
000101100000000100010100
010000110000000101000100
001010010010000000010010
000101100000000100010010
000110100001000000011000
010010010100000100000100
001011000010001010000000
010000110000001001000100
100001010001100000001000
100001100100100010000000
100000110010000010001000
010010100100001001000000
010010100100100001000000
001001010000001001000010




=== State Orbit 66 =====================
size : 12
repr state: 001011000010001011000000
lex min decimal: 1442070
states:
100001010101100000001000
010010100100101001000000
000101100000000100010110
001011000010001011000000
000110100001000000011010
010010010100100100000100
100000110011000010001000
001010010010000010010010
001001010000001001010010
010000110000001101000100
100001100110100010000000
000111000001000100001100




=== State Orbit 67 =====================
size : 12
repr state: 001111000010000100000000
lex min decimal: 3936768
states:
010110100001000001000000
100101100000100000010000
100101100000000110000000
011010010010000000000100
010110100100000000010000
110000110000000001001000
110000110000000010000100
101001010000001000001000
011010010100000000000010
001111000001001000000000
001111000010000100000000
101001010000100000000010




=== State Orbit 68 =====================
size : 24
repr state: 001111000010000110000000
lex min decimal: 3936776
states:
100101100000000110000100
011010010010000010000100
100101100010000110000000
001111000001001000001000
101001010000100000010010
110000110001000001001000
011010010100000000010010
100101100100100000010000
110000110000001001001000
110000110000000110000100
001111000010000110000000
010110100001001001000000
011010010100100000000010
001111000001001001000000
101001010100100000000010
100101100000100000010010
101001010001001000001000
011010010010000100000100
010110100100100000010000
110000110010000010000100
010110100100000000010010
101001010000001001001000
010110100001000001001000
001111000010000100000100




=== State Orbit 69 =====================
size : 24
repr state: 001111000010000111000000
lex min decimal: 3936780
states:
101001010101001000001000
001111000001001000001100
100101100110000110000000
011010010010000010010100
001111000010000111000000
010110100100101000010000
001111000001001011000000
100101100000100000010110
110000110000001101001000
100101100000000110000110
110000110000001110000100
010110100001101001000000
101001010101100000000010
010110100001000001001010
011010010100100100000010
100101100110100000010000
011010010100000010010010
101001010000001001011000
110000110011000010000100
001111000010000100001100
011010010010100100000100
110000110011000001001000
010110100100000000011010
101001010000100001010010




=== State Orbit 70 =====================
size : 24
repr state: 001111000010000111001000
lex min decimal: 3936908
states:
100101100110000110000010
110000110011001010000100
101001010101100001000010
011010010100100110000010
110000110010001101001000
110000110011000101001000
011010010100000110010010
001111000001001010001100
010110100100101000011000
110000110001001110000100
100101100100000110000110
001111000010000101001100
001111000001001011000100
100101100110100000010100
010110100001100001001010
101001010001100001010010
101001010100001001011000
001111000010000111001000
011010010010100010010100
011010010010100100010100
101001010101001000011000
010110100100001000011010
100101100010100000010110
010110100001101001000010




=== State Orbit 71 =====================
size : 12
repr state: 001111000010000111001100
lex min decimal: 3936972
states:
010110100100101000011010
110000110011001110000100
010110100001101001001010
011010010010100110010100
001111000010000111001100
001111000001001011001100
011010010100100110010010
101001010101001001011000
100101100110100000010110
100101100110000110000110
110000110011001101001000
101001010101100001010010




=== State Orbit 72 =====================
size : 24
repr state: 001111000010000111000100
lex min decimal: 3936844
states:
001111000001001001001100
011010010010000110010100
110000110011000110000100
011010010100100010010010
001111000001001011001000
100101100110100000010010
101001010100100001010010
011010010100100100010010
110000110011001001001000
110000110010001110000100
011010010010100110000100
010110100100100000011010
001111000010000111000100
001111000010000110001100
101001010101100000010010
010110100001001001001010
110000110001001101001000
100101100100100000010110
100101100110000110000100
010110100100101000010010
010110100001101001001000
101001010101001001001000
100101100010000110000110
101001010001001001011000




=== State Orbit 73 =====================
size : 24
repr state: 001111000010000110001000
lex min decimal: 3936836
states:
011010010010100010000100
101001010100100001000010
010110100001001001000010
010110100100100000011000
010110100100001000010010
110000110010001010000100
101001010100001001001000
010110100001100001001000
110000110001000101001000
011010010100100010000010
100101100100100000010100
011010010100000100010010
110000110010001001001000
011010010010000100010100
101001010001001000011000
001111000010000101000100
001111000010000110001000
101001010001100000010010
100101100100000110000100
001111000001001010001000
001111000001001001000100
100101100010100000010010
110000110001000110000100
100101100010000110000010




=== State Orbit 74 =====================
size : 12
repr state: 001111000010000110000100
lex min decimal: 3936840
states:
101001010100100000010010
110000110010000110000100
110000110001001001001000
101001010001001001001000
011010010100100000010010
100101100100100000010010
001111000010000110000100
010110100100100000010010
011010010010000110000100
100101100010000110000100
001111000001001001001000
010110100001001001001000




=== State Orbit 75 =====================
size : 24
repr state: 001111000010000101000000
lex min decimal: 3936772
states:
110000110001000010000100
110000110000001010000100
101001010100001000001000
100101100000100000010100
101001010001100000000010
110000110010000001001000
011010010100000010000010
010110100100000000011000
001111000001001010000000
001111000001001000000100
101001010000001000011000
010110100001000001000010
001111000010000101000000
101001010000100001000010
011010010010000000010100
001111000010000100001000
100101100010100000010000
100101100100000110000000
011010010010100000000100
110000110000000101001000
010110100100001000010000
010110100001100001000000
011010010100000100000010
100101100000000110000010




=== State Orbit 76 =====================
size : 12
repr state: 001111000010000101001000
lex min decimal: 3936900
states:
110000110001001010000100
001111000010000101001000
011010010100000110000010
010110100001100001000010
100101100100000110000010
010110100100001000011000
100101100010100000010100
001111000001001010000100
110000110010000101001000
101001010100001000011000
011010010010100000010100
101001010001100001000010




=== State Orbit 77 =====================
size : 24
repr state: 001011000010000010000000
lex min decimal: 1441810
states:
010010100100100000000000
100001010001000000001000
100000110001000000001000
100000110010000010000000
010010010100100000000000
001001010000001001000000
010010010000000100000100
000101100000000000010010
001010010010000010000000
100001100010000010000000
010010100000001001000000
001011000010000010000000
000111000000000100000100
000111000001000000001000
100001010100100000000000
100001100100100000000000
000101100000000100000100
001001010000000000010010
010000110000000100000100
001011000000001001000000
010000110000001001000000
001010010000000000010010
000110100000000000010010
000110100001000000001000




=== State Orbit 78 =====================
size : 24
repr state: 001011000010000011000000
lex min decimal: 1441814
states:
100000110011000010000000
010010100100101000000000
100000110011000000001000
010010010000100100000100
100001010101000000001000
100001100110100000000000
000111000001000000001100
000101100000000000010110
000110100000000000011010
001011000000001011000000
010010010100100100000000
100001100110000010000000
010010100000101001000000
001001010000001001010000
010000110000001101000000
100001010101100000000000
001010010000000010010010
010000110000001100000100
000111000000000100001100
001011000010000011000000
000101100000000100000110
001001010000000001010010
001010010010000010010000
000110100001000000001010




=== State Orbit 79 =====================
size : 24
repr state: 001011000010000001000000
lex min decimal: 1441812
states:
010000110000001000000100
010000110000000101000000
001011000000001010000000
100001010001100000000000
100001100010100000000000
000101100000000000010100
000101100000000100000010
100000110001000010000000
000111000001000000000100
000111000000000100001000
001011000010000001000000
010010100100001000000000
100000110010000000001000
001010010010000000010000
000110100000000000011000
100001100100000010000000
010010010100000100000000
010010010000100000000100
001001010000000001000010
001001010000001000010000
001010010000000010000010
010010100000100001000000
000110100001000000000010
100001010100000000001000



[QRM NOTE]: Time elapsed since start: 8.190 seconds

[QRM NOTE]: Time elapsed since last: 0.789 seconds

[QRM NOTE]: Peak memory: 1622196 bytes


============================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/firewall: node=4]

============================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 8.735 seconds

[QRM NOTE]: Time elapsed since last: 0.545 seconds

[QRM NOTE]: Peak memory: 595565 bytes

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_8
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_12
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_8 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_12 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_12 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_8 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_12 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_5 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS


********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/firewall.node_3.0.ivy']

[CUTOFF]: node=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 68.527 seconds

[QRM NOTE]: Time elapsed since last: 68.527 seconds

