
***********************************************************

	[QRM]: ivybench/sym/ivy/lock_server.ivy

***********************************************************


**************************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/lock_server: server=1,client=1

**************************************************************************************

python3 qrm.py ivybench/sym/ivy/lock_server.ivy -s server=1,client=1 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lock_server.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==============================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=1,client=1]

==============================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lock_server.server_1_client_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lock_server.server_1_client_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lock_server.server_1_client_1.finite.cpp lock_server.server_1_client_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lock_server.server_1_client_1.finite.o lock_server.server_1_client_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 2

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 2

[FW NOTE]: symmetric group order: 1

[QRM NOTE]: Time elapsed since start: 5.953 seconds

[QRM NOTE]: Time elapsed since last: 5.953 seconds

[QRM NOTE]: Peak memory: 1169176 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 1

[FW NOTE]: number of total reachable states:        2

[FW NOTE]: number of dfs representative states:     2

[FW NOTE]: number of dfs non-representative states: 0


=====================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=1,client=1]

=====================================================================================================

sort: client=['client0']
sort: server=['server0']
predicate: link('client', 'server')
predicate: semaphore('server',)
interpreted atoms: {}
state atoms: ['link(client0,server0)', 'semaphore(server0)']
representative states : 1, 2


=== State Orbit 0 =====================
size : 1
repr state: 01
lex min decimal: 1
states:
01




=== State Orbit 1 =====================
size : 1
repr state: 10
lex min decimal: 2
states:
10



[QRM NOTE]: Time elapsed since start: 6.030 seconds

[QRM NOTE]: Time elapsed since last: 0.077 seconds

[QRM NOTE]: Peak memory: 1193445 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.033 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 143618 bytes


=====================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lock_server: server=1,client=1]

=====================================================================================================


================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lock_server: server=1,client=1]

================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 00
0     : ['~link(client0,server0)', '~semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 11
1     : ['link(client0,server0)', 'semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 2

[PRIME NOTE]: number of orbits before merging: 2

[PRIME NOTE]: number of primes: 2

[QRM NOTE]: Time elapsed since start: 6.045 seconds

[QRM NOTE]: Time elapsed since last: 0.012 seconds

[QRM NOTE]: Peak memory: 1198226 bytes


==========================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lock_server: server=1,client=1]

==========================================================================================

definition primes: set()


New level: 0
 pending : [0, 1]
 solution : []


Before reduction : 
 pending  : [0, 1]
 solution : []

Essensial at level 0 : {0, 1}

Before removed
 coverage : [(0, -1), (1, -1)]

After removed
 coverage : [(0, -1), (1, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1)]

After removed
 coverage : [(0, -1), (1, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1]

[QRM NOTE]: Time elapsed since start: 6.046 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 150491 bytes


==============================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lock_server: server=1,client=1]

==============================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 00
0     : ['~link(client0,server0)', '~semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~link(client0,server0)', '~semaphore(server0)']

sign_func_name2args: {'1$link': [(Const('client0', EnumeratedSort('client', ('client0',))), Const('server0', EnumeratedSort('server', ('server0',))))], '1$semaphore': [(Const('server0', EnumeratedSort('server', ('server0',))),)]}

const2sigs: {Const('client0', EnumeratedSort('client', ('client0',))): [client$1$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$1$link$1$0, server$1$semaphore$0$0]}

sig2const: {'client$1$link$0$0': Const('client0', EnumeratedSort('client', ('client0',))), 'server$1$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'server$1$semaphore$0$0': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0',)): [client$1$link$0$0], EnumeratedSort('server', ('server0',)): [server$1$link$1$0; server$1$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0',)): client$1$link$0$0, EnumeratedSort('server', ('server0',)): server$1$link$1$0; server$1$semaphore$0$0}

part_sig: ('client$1$link$0$0', 'server$1$link$1$0; server$1$semaphore$0$0')


---------- SigGenerator ----------

terms:  ['~link(client0,server0)', '~semaphore(server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0',)), EnumeratedSort('server', ('server0',)), BooleanSort())), 'semaphore': Const('semaphore', FunctionSort(EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0',)), EnumeratedSort('server', ('server0',))), 'semaphore': (EnumeratedSort('server', ('server0',)),)}

sign_func_name2count:  {'1$link': 1, '1$semaphore': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0',)): [client$1$link$0$0], EnumeratedSort('server', ('server0',)): [server$1$link$1$0; server$1$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0',)): client$1$link$0$0, EnumeratedSort('server', ('server0',)): server$1$link$1$0; server$1$semaphore$0$0}

	sort: client

	identical_classes: {'client$1$link$0': [client$1$link$0$0]}

	identical_single_classes: {'client$1$link$0': client$1$link$0$0}

	identical_multi_classes: {}

	sort: server

	identical_classes: {'server$1$link$1; server$1$semaphore$0': [server$1$link$1$0; server$1$semaphore$0$0]}

	identical_single_classes: {'server$1$link$1; server$1$semaphore$0': server$1$link$1$0; server$1$semaphore$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.forall

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('CLIENT0', EnumeratedSort('client', ('client0',))), Var('SERVER0', EnumeratedSort('server', ('server0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0',))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]], '1$semaphore': [[Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~link(CLIENT0,SERVER0)', '~semaphore(SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall SERVER0,CLIENT0. link(CLIENT0,SERVER0) | semaphore(SERVER0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 11
1     : ['link(client0,server0)', 'semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['link(client0,server0)', 'semaphore(server0)']

sign_func_name2args: {'0$link': [(Const('client0', EnumeratedSort('client', ('client0',))), Const('server0', EnumeratedSort('server', ('server0',))))], '0$semaphore': [(Const('server0', EnumeratedSort('server', ('server0',))),)]}

const2sigs: {Const('client0', EnumeratedSort('client', ('client0',))): [client$0$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$0$link$1$0, server$0$semaphore$0$0]}

sig2const: {'client$0$link$0$0': Const('client0', EnumeratedSort('client', ('client0',))), 'server$0$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'server$0$semaphore$0$0': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0',)): [client$0$link$0$0], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0',)): client$0$link$0$0, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$semaphore$0$0}

part_sig: ('client$0$link$0$0', 'server$0$link$1$0; server$0$semaphore$0$0')


---------- SigGenerator ----------

terms:  ['link(client0,server0)', 'semaphore(server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0',)), EnumeratedSort('server', ('server0',)), BooleanSort())), 'semaphore': Const('semaphore', FunctionSort(EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0',)), EnumeratedSort('server', ('server0',))), 'semaphore': (EnumeratedSort('server', ('server0',)),)}

sign_func_name2count:  {'0$link': 1, '0$semaphore': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0',)): [client$0$link$0$0], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0',)): client$0$link$0$0, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$semaphore$0$0}

	sort: client

	identical_classes: {'client$0$link$0': [client$0$link$0$0]}

	identical_single_classes: {'client$0$link$0': client$0$link$0$0}

	identical_multi_classes: {}

	sort: server

	identical_classes: {'server$0$link$1; server$0$semaphore$0': [server$0$link$1$0; server$0$semaphore$0$0]}

	identical_single_classes: {'server$0$link$1; server$0$semaphore$0': server$0$link$1$0; server$0$semaphore$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.forall

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('CLIENT0', EnumeratedSort('client', ('client0',))), Var('SERVER0', EnumeratedSort('server', ('server0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0',))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]], '0$semaphore': [[Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['semaphore(SERVER0)', 'link(CLIENT0,SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lock_server: server=1,client=1]

========================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 00
0     : ['~link(client0,server0)', '~semaphore(server0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall SERVER0,CLIENT0. link(CLIENT0,SERVER0) | semaphore(SERVER0)
qcost : 4




=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : 11
1     : ['link(client0,server0)', 'semaphore(server0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 6.111 seconds

[QRM NOTE]: Time elapsed since last: 0.065 seconds

[QRM NOTE]: Peak memory: 1812952 bytes


=======================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lock_server: server=1,client=1]

=======================================================================================


New level: 1
 pending : []
 solution : [0, 1]


Before reduction : 
 pending  : []
 solution : [0, 1]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1)]

After removed
 coverage : [(0, -1), (1, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1]


Solution : [0, 1] has cost 8.


Before backtrack at level 1
 pending : []
 solution : [0, 1]

After backtrack at level 1
 pending : []
 solution : [0, 1]


======================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lock_server: server=1,client=1]

======================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 8

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 1] (length = 2)

invariant [invar_0] forall SERVER0,CLIENT0. link(CLIENT0,SERVER0) | semaphore(SERVER0) # qcost: 4

invariant [invar_1] forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0) # qcost: 4




[QRM NOTE]: Time elapsed since start: 6.150 seconds

[QRM NOTE]: Time elapsed since last: 0.039 seconds

[QRM NOTE]: Peak memory: 1801571 bytes


=========================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/lock_server: server=1,client=1]

=========================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.152 seconds

[QRM NOTE]: Time elapsed since last: 0.002 seconds

[QRM NOTE]: Peak memory: 754212 bytes


==========================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/lock_server: server=1,client=1]

==========================================================================================

ivy_check complete=fo ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 39: invar_0
        ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 40: invar_1

    The following action implementations are present:
        ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 18: implementation of connect
        ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 24: implementation of disconnect

    The following initializers are present:
        ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 5: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 39: invar_0 ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 40: invar_1 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:connect
            ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 39: invar_0 ... FAIL
            ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 40: invar_1 ... PASS
        (internal) ext:disconnect
            ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 39: invar_0 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 40: invar_1 ... FAIL

    The following program assertions are treated as assumptions:
        in action connect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 19: assumption
        in action disconnect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy: line 25: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 7.885 seconds

[QRM NOTE]: Time elapsed since last: 1.732 seconds

[QRM NOTE]: Peak memory: 803963 bytes


*****************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/lock_server: server=1,client=1

*****************************************************************************************************

python3 qrm.py ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy -s server=2,client=1 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lock_server.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==============================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=2,client=1]

==============================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lock_server.server_2_client_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lock_server.server_2_client_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lock_server.server_2_client_1.finite.cpp lock_server.server_2_client_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lock_server.server_2_client_1.finite.o lock_server.server_2_client_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 4

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 4

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.069 seconds

[QRM NOTE]: Time elapsed since last: 6.069 seconds

[QRM NOTE]: Peak memory: 1171270 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        4

[FW NOTE]: number of dfs representative states:     3

[FW NOTE]: number of dfs non-representative states: 1


=====================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=2,client=1]

=====================================================================================================

sort: client=['client0']
sort: server=['server0', 'server1']
predicate: semaphore('server',)
predicate: link('client', 'server')
interpreted atoms: {}
state atoms: ['link(client0,server0)', 'link(client0,server1)', 'semaphore(server0)', 'semaphore(server1)']
representative states : 3, 6, 12


=== State Orbit 0 =====================
size : 1
repr state: 0011
lex min decimal: 3
states:
0011




=== State Orbit 1 =====================
size : 2
repr state: 1001
lex min decimal: 6
states:
1001
0110




=== State Orbit 2 =====================
size : 1
repr state: 1100
lex min decimal: 12
states:
1100



[QRM NOTE]: Time elapsed since start: 6.142 seconds

[QRM NOTE]: Time elapsed since last: 0.073 seconds

[QRM NOTE]: Peak memory: 1196513 bytes


==========================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lock_server: server=2,client=1]

==========================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.148 seconds

[QRM NOTE]: Time elapsed since last: 0.006 seconds

[QRM NOTE]: Peak memory: 152527 bytes

python3 qrm.py ivybench/sym/ivy/lock_server.server_1_client_1.0.ivy -s server=1,client=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lock_server.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==============================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=1,client=2]

==============================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lock_server.server_1_client_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lock_server.server_1_client_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lock_server.server_1_client_2.finite.cpp lock_server.server_1_client_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lock_server.server_1_client_2.finite.o lock_server.server_1_client_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 3

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 4

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.069 seconds

[QRM NOTE]: Time elapsed since last: 6.069 seconds

[QRM NOTE]: Peak memory: 1170804 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 1

[FW NOTE]: number of total reachable states:        3

[FW NOTE]: number of dfs representative states:     2

[FW NOTE]: number of dfs non-representative states: 1


=====================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=1,client=2]

=====================================================================================================

sort: client=['client0', 'client1']
sort: server=['server0']
predicate: semaphore('server',)
predicate: link('client', 'server')
interpreted atoms: {}
state atoms: ['link(client0,server0)', 'link(client1,server0)', 'semaphore(server0)']
representative states : 1, 2


=== State Orbit 0 =====================
size : 1
repr state: 001
lex min decimal: 1
states:
001




=== State Orbit 1 =====================
size : 2
repr state: 100
lex min decimal: 2
states:
100
010



[QRM NOTE]: Time elapsed since start: 6.141 seconds

[QRM NOTE]: Time elapsed since last: 0.073 seconds

[QRM NOTE]: Peak memory: 1195419 bytes


==========================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lock_server: server=1,client=2]

==========================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 6, binary: 110

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.147 seconds

[QRM NOTE]: Time elapsed since last: 0.006 seconds

[QRM NOTE]: Peak memory: 151431 bytes

next size: server=1,client=2


**************************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/lock_server: server=1,client=2

**************************************************************************************

python3 qrm.py ivybench/sym/ivy/lock_server.ivy -s server=1,client=2 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lock_server.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.016 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 934 bytes


=====================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lock_server: server=1,client=2]

=====================================================================================================


================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lock_server: server=1,client=2]

================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 11-
0     : ['link(client0,server0)', 'link(client1,server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : 1-1
1     : ['link(client0,server0)', 'semaphore(server0)']
2     : -11
2     : ['link(client1,server0)', 'semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
3 (*) : 000
3     : ['~link(client0,server0)', '~link(client1,server0)', '~semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 3

[PRIME NOTE]: number of orbits before merging: 3

[PRIME NOTE]: number of primes: 4

[QRM NOTE]: Time elapsed since start: 0.028 seconds

[QRM NOTE]: Time elapsed since last: 0.012 seconds

[QRM NOTE]: Peak memory: 1058923 bytes


==========================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lock_server: server=1,client=2]

==========================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2]
 solution : []


Before reduction : 
 pending  : [0, 1, 2]
 solution : []

Essensial at level 0 : {0, 1, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2]


Before reduction : 
 pending  : []
 solution : [0, 1, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2]

[QRM NOTE]: Time elapsed since start: 0.030 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 11354 bytes


==============================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lock_server: server=1,client=2]

==============================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 11-
0     : ['link(client0,server0)', 'link(client1,server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['link(client0,server0)', 'link(client1,server0)']

sign_func_name2args: {'0$link': [(Const('client0', EnumeratedSort('client', ('client0', 'client1'))), Const('server0', EnumeratedSort('server', ('server0',)))), (Const('client1', EnumeratedSort('client', ('client0', 'client1'))), Const('server0', EnumeratedSort('server', ('server0',))))]}

const2sigs: {Const('client0', EnumeratedSort('client', ('client0', 'client1'))): [client$0$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$0$link$1$0, server$0$link$1$1], Const('client1', EnumeratedSort('client', ('client0', 'client1'))): [client$0$link$0$1]}

sig2const: {'client$0$link$0$0': Const('client0', EnumeratedSort('client', ('client0', 'client1'))), 'server$0$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'client$0$link$0$1': Const('client1', EnumeratedSort('client', ('client0', 'client1'))), 'server$0$link$1$1': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1')): [client$0$link$0$0, client$0$link$0$1], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$link$1$1]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1')): client$0$link$0$0 | client$0$link$0$1, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$link$1$1}

part_sig: ('client$0$link$0$0 | client$0$link$0$1', 'server$0$link$1$0; server$0$link$1$1')


---------- SigGenerator ----------

terms:  ['link(client0,server0)', 'link(client1,server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0', 'client1')), EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0', 'client1')), EnumeratedSort('server', ('server0',)))}

sign_func_name2count:  {'0$link': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1')): [client$0$link$0$0, client$0$link$0$1], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$link$1$1]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1')): client$0$link$0$0 | client$0$link$0$1, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$link$1$1}

	sort: client

	identical_classes: {'client$0$link$0': [client$0$link$0$0, client$0$link$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'client$0$link$0': [client$0$link$0$0, client$0$link$0$1]}

	sort: server

	identical_classes: {'server$0$link$1; server$0$link$1': [server$0$link$1$0; server$0$link$1$1]}

	identical_single_classes: {'server$0$link$1; server$0$link$1': server$0$link$1$0; server$0$link$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.exists

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('SERVER0', EnumeratedSort('server', ('server0',)))}

exists_qvars: {Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))], [Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['link(CLIENT0,SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall SERVER0. (exists CLIENT0. ~link(CLIENT0,SERVER0))


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : 1-1
1     : ['link(client0,server0)', 'semaphore(server0)']
2     : -11
2     : ['link(client1,server0)', 'semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['link(client0,server0)', 'semaphore(server0)']

sign_func_name2args: {'0$link': [(Const('client0', EnumeratedSort('client', ('client0', 'client1'))), Const('server0', EnumeratedSort('server', ('server0',))))], '0$semaphore': [(Const('server0', EnumeratedSort('server', ('server0',))),)]}

const2sigs: {Const('client0', EnumeratedSort('client', ('client0', 'client1'))): [client$0$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$0$link$1$0, server$0$semaphore$0$0]}

sig2const: {'client$0$link$0$0': Const('client0', EnumeratedSort('client', ('client0', 'client1'))), 'server$0$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'server$0$semaphore$0$0': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1')): [client$0$link$0$0], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1')): client$0$link$0$0, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$semaphore$0$0}

part_sig: ('client$0$link$0$0', 'server$0$link$1$0; server$0$semaphore$0$0')


---------- SigGenerator ----------

terms:  ['link(client0,server0)', 'semaphore(server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0', 'client1')), EnumeratedSort('server', ('server0',)), BooleanSort())), 'semaphore': Const('semaphore', FunctionSort(EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0', 'client1')), EnumeratedSort('server', ('server0',))), 'semaphore': (EnumeratedSort('server', ('server0',)),)}

sign_func_name2count:  {'0$link': 1, '0$semaphore': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1')): [client$0$link$0$0], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1')): client$0$link$0$0, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$semaphore$0$0}

	sort: client

	identical_classes: {'client$0$link$0': [client$0$link$0$0]}

	identical_single_classes: {'client$0$link$0': client$0$link$0$0}

	identical_multi_classes: {}

	sort: server

	identical_classes: {'server$0$link$1; server$0$semaphore$0': [server$0$link$1$0; server$0$semaphore$0$0]}

	identical_single_classes: {'server$0$link$1; server$0$semaphore$0': server$0$link$1$0; server$0$semaphore$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.forall

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('SERVER0', EnumeratedSort('server', ('server0',))), Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]], '0$semaphore': [[Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['semaphore(SERVER0)', 'link(CLIENT0,SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall CLIENT0,SERVER0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0)


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
3 (*) : 000
3     : ['~link(client0,server0)', '~link(client1,server0)', '~semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~link(client0,server0)', '~link(client1,server0)', '~semaphore(server0)']

sign_func_name2args: {'1$link': [(Const('client0', EnumeratedSort('client', ('client0', 'client1'))), Const('server0', EnumeratedSort('server', ('server0',)))), (Const('client1', EnumeratedSort('client', ('client0', 'client1'))), Const('server0', EnumeratedSort('server', ('server0',))))], '1$semaphore': [(Const('server0', EnumeratedSort('server', ('server0',))),)]}

const2sigs: {Const('client0', EnumeratedSort('client', ('client0', 'client1'))): [client$1$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$1$link$1$0, server$1$link$1$1, server$1$semaphore$0$0], Const('client1', EnumeratedSort('client', ('client0', 'client1'))): [client$1$link$0$1]}

sig2const: {'client$1$link$0$0': Const('client0', EnumeratedSort('client', ('client0', 'client1'))), 'server$1$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'client$1$link$0$1': Const('client1', EnumeratedSort('client', ('client0', 'client1'))), 'server$1$link$1$1': Const('server0', EnumeratedSort('server', ('server0',))), 'server$1$semaphore$0$0': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1')): [client$1$link$0$0, client$1$link$0$1], EnumeratedSort('server', ('server0',)): [server$1$link$1$0; server$1$link$1$1; server$1$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1')): client$1$link$0$0 | client$1$link$0$1, EnumeratedSort('server', ('server0',)): server$1$link$1$0; server$1$link$1$1; server$1$semaphore$0$0}

part_sig: ('client$1$link$0$0 | client$1$link$0$1', 'server$1$link$1$0; server$1$link$1$1; server$1$semaphore$0$0')


---------- SigGenerator ----------

terms:  ['~link(client0,server0)', '~link(client1,server0)', '~semaphore(server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0', 'client1')), EnumeratedSort('server', ('server0',)), BooleanSort())), 'semaphore': Const('semaphore', FunctionSort(EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0', 'client1')), EnumeratedSort('server', ('server0',))), 'semaphore': (EnumeratedSort('server', ('server0',)),)}

sign_func_name2count:  {'1$link': 2, '1$semaphore': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1')): [client$1$link$0$0, client$1$link$0$1], EnumeratedSort('server', ('server0',)): [server$1$link$1$0; server$1$link$1$1; server$1$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1')): client$1$link$0$0 | client$1$link$0$1, EnumeratedSort('server', ('server0',)): server$1$link$1$0; server$1$link$1$1; server$1$semaphore$0$0}

	sort: client

	identical_classes: {'client$1$link$0': [client$1$link$0$0, client$1$link$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'client$1$link$0': [client$1$link$0$0, client$1$link$0$1]}

	sort: server

	identical_classes: {'server$1$link$1; server$1$link$1; server$1$semaphore$0': [server$1$link$1$0; server$1$link$1$1; server$1$semaphore$0$0]}

	identical_single_classes: {'server$1$link$1; server$1$link$1; server$1$semaphore$0': server$1$link$1$0; server$1$link$1$1; server$1$semaphore$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.exists

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('SERVER0', EnumeratedSort('server', ('server0',)))}

exists_qvars: {Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))], [Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]], '1$semaphore': [[Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~link(CLIENT0,SERVER0)', '~semaphore(SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall SERVER0. (exists CLIENT0. link(CLIENT0,SERVER0) | semaphore(SERVER0))


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lock_server: server=1,client=2]

========================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : 11-
0     : ['link(client0,server0)', 'link(client1,server0)']
num_forall :   1
num_exists :   1
num_literals : 1
quantified form : forall SERVER0. (exists CLIENT0. ~link(CLIENT0,SERVER0))
qcost : 3




=== Prime Orbit 1 =====================
size : 2
num_suborbits: 1
1 (*) : 1-1
1     : ['link(client0,server0)', 'semaphore(server0)']
2     : -11
2     : ['link(client1,server0)', 'semaphore(server0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall CLIENT0,SERVER0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0)
qcost : 4




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
3 (*) : 000
3     : ['~link(client0,server0)', '~link(client1,server0)', '~semaphore(server0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall SERVER0. (exists CLIENT0. link(CLIENT0,SERVER0) | semaphore(SERVER0))
qcost : 4



[QRM NOTE]: Time elapsed since start: 0.108 seconds

[QRM NOTE]: Time elapsed since last: 0.078 seconds

[QRM NOTE]: Peak memory: 1689096 bytes


=======================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lock_server: server=1,client=2]

=======================================================================================


New level: 1
 pending : []
 solution : [0, 1, 2]


Before reduction : 
 pending  : []
 solution : [0, 1, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2]


Solution : [0, 1, 2] has cost 11.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2]


======================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lock_server: server=1,client=2]

======================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 11

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 1, 2] (length = 3)

invariant [invar_0] forall SERVER0. (exists CLIENT0. ~link(CLIENT0,SERVER0)) # qcost: 3

invariant [invar_1] forall CLIENT0,SERVER0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0) # qcost: 4

invariant [invar_2] forall SERVER0. (exists CLIENT0. link(CLIENT0,SERVER0) | semaphore(SERVER0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 0.152 seconds

[QRM NOTE]: Time elapsed since last: 0.044 seconds

[QRM NOTE]: Peak memory: 1675708 bytes


=========================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/lock_server: server=1,client=2]

=========================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.159 seconds

[QRM NOTE]: Time elapsed since last: 0.007 seconds

[QRM NOTE]: Peak memory: 629536 bytes


==========================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/lock_server: server=1,client=2]

==========================================================================================

ivy_check complete=fo ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 39: invar_0
        ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 40: invar_1
        ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 41: invar_2

    The following action implementations are present:
        ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 18: implementation of connect
        ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 24: implementation of disconnect

    The following initializers are present:
        ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 5: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 39: invar_0 ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 41: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:connect
            ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 39: invar_0 ... FAIL
            ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 41: invar_2 ... PASS
        (internal) ext:disconnect
            ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 39: invar_0 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 40: invar_1 ... FAIL
            ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 41: invar_2 ... PASS

    The following program assertions are treated as assumptions:
        in action connect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 19: assumption
        in action disconnect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy: line 25: assumption

error: failed checks: 2
[IVY_CHECK RESULT]: FAIL ... exit with return code 1

[QRM NOTE]: Time elapsed since start: 1.839 seconds

[QRM NOTE]: Time elapsed since last: 1.680 seconds

[QRM NOTE]: Peak memory: 679358 bytes


*****************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/lock_server: server=1,client=2

*****************************************************************************************************

python3 qrm.py ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy -s server=2,client=2 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lock_server.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==============================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=2,client=2]

==============================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lock_server.server_2_client_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lock_server.server_2_client_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lock_server.server_2_client_2.finite.cpp lock_server.server_2_client_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lock_server.server_2_client_2.finite.o lock_server.server_2_client_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 6

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 8

[FW NOTE]: symmetric group order: 4

[QRM NOTE]: Time elapsed since start: 6.080 seconds

[QRM NOTE]: Time elapsed since last: 6.080 seconds

[QRM NOTE]: Peak memory: 1172553 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        9

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 5


=====================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=2,client=2]

=====================================================================================================

sort: client=['client0', 'client1']
sort: server=['server0', 'server1']
predicate: semaphore('server',)
predicate: link('client', 'server')
interpreted atoms: {}
state atoms: ['link(client0,server0)', 'link(client0,server1)', 'link(client1,server0)', 'link(client1,server1)', 'semaphore(server0)', 'semaphore(server1)']
representative states : 3, 6, 12, 24


=== State Orbit 0 =====================
size : 1
repr state: 000011
lex min decimal: 3
states:
000011




=== State Orbit 1 =====================
size : 4
repr state: 100001
lex min decimal: 6
states:
001001
100001
000110
010010




=== State Orbit 2 =====================
size : 2
repr state: 110000
lex min decimal: 12
states:
110000
001100




=== State Orbit 3 =====================
size : 2
repr state: 100100
lex min decimal: 24
states:
011000
100100



[QRM NOTE]: Time elapsed since start: 6.159 seconds

[QRM NOTE]: Time elapsed since last: 0.080 seconds

[QRM NOTE]: Peak memory: 1199903 bytes


==========================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lock_server: server=2,client=2]

==========================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.177 seconds

[QRM NOTE]: Time elapsed since last: 0.018 seconds

[QRM NOTE]: Peak memory: 160992 bytes

python3 qrm.py ivybench/sym/ivy/lock_server.server_1_client_2.0.ivy -s server=1,client=3 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lock_server.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==============================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=1,client=3]

==============================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lock_server.server_1_client_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lock_server.server_1_client_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lock_server.server_1_client_3.finite.cpp lock_server.server_1_client_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lock_server.server_1_client_3.finite.o lock_server.server_1_client_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 4

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 6

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 6.023 seconds

[QRM NOTE]: Time elapsed since last: 6.023 seconds

[QRM NOTE]: Peak memory: 1171734 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 1

[FW NOTE]: number of total reachable states:        4

[FW NOTE]: number of dfs representative states:     2

[FW NOTE]: number of dfs non-representative states: 2


=====================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=1,client=3]

=====================================================================================================

sort: client=['client0', 'client1', 'client2']
sort: server=['server0']
predicate: link('client', 'server')
predicate: semaphore('server',)
interpreted atoms: {}
state atoms: ['link(client0,server0)', 'link(client1,server0)', 'link(client2,server0)', 'semaphore(server0)']
representative states : 1, 2


=== State Orbit 0 =====================
size : 1
repr state: 0001
lex min decimal: 1
states:
0001




=== State Orbit 1 =====================
size : 3
repr state: 1000
lex min decimal: 2
states:
0100
0010
1000



[QRM NOTE]: Time elapsed since start: 6.099 seconds

[QRM NOTE]: Time elapsed since last: 0.076 seconds

[QRM NOTE]: Peak memory: 1196509 bytes


==========================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lock_server: server=1,client=3]

==========================================================================================================================

Found a representative state in Rmin not in reachability: decimal: 6, binary: 0110

[REACH_CHECK RESULT]: FAIL

[QRM NOTE]: Time elapsed since start: 6.113 seconds

[QRM NOTE]: Time elapsed since last: 0.013 seconds

[QRM NOTE]: Peak memory: 156367 bytes

next size: server=1,client=3


**************************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/lock_server: server=1,client=3

**************************************************************************************

python3 qrm.py ivybench/sym/ivy/lock_server.ivy -s server=1,client=3 -f 1 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lock_server.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


---------- Initializing reachability from file ----------

OK


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 0.016 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 1022 bytes


=====================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/lock_server: server=1,client=3]

=====================================================================================================


================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/lock_server: server=1,client=3]

================================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --11
0     : ['link(client2,server0)', 'semaphore(server0)']
1     : -1-1
1     : ['link(client1,server0)', 'semaphore(server0)']
2     : 1--1
2     : ['link(client0,server0)', 'semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1-1-
3     : ['link(client0,server0)', 'link(client2,server0)']
4     : 11--
4     : ['link(client0,server0)', 'link(client1,server0)']
5     : -11-
5     : ['link(client1,server0)', 'link(client2,server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
6 (*) : 0000
6     : ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 3

[PRIME NOTE]: number of orbits before merging: 3

[PRIME NOTE]: number of primes: 7

[QRM NOTE]: Time elapsed since start: 0.025 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1063922 bytes


==========================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/lock_server: server=1,client=3]

==========================================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2]
 solution : []


Before reduction : 
 pending  : [0, 1, 2]
 solution : []

Essensial at level 0 : {0, 1, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2]


Before reduction : 
 pending  : []
 solution : [0, 1, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2]

[QRM NOTE]: Time elapsed since start: 0.026 seconds

[QRM NOTE]: Time elapsed since last: 0.001 seconds

[QRM NOTE]: Peak memory: 16120 bytes


==============================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/lock_server: server=1,client=3]

==============================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --11
0     : ['link(client2,server0)', 'semaphore(server0)']
1     : -1-1
1     : ['link(client1,server0)', 'semaphore(server0)']
2     : 1--1
2     : ['link(client0,server0)', 'semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['link(client2,server0)', 'semaphore(server0)']

sign_func_name2args: {'0$link': [(Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',))))], '0$semaphore': [(Const('server0', EnumeratedSort('server', ('server0',))),)]}

const2sigs: {Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$0$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$0$link$1$0, server$0$semaphore$0$0]}

sig2const: {'client$0$link$0$0': Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$0$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'server$0$semaphore$0$0': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$0$link$0$0], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$0$link$0$0, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$semaphore$0$0}

part_sig: ('client$0$link$0$0', 'server$0$link$1$0; server$0$semaphore$0$0')


---------- SigGenerator ----------

terms:  ['link(client2,server0)', 'semaphore(server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',)), BooleanSort())), 'semaphore': Const('semaphore', FunctionSort(EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',))), 'semaphore': (EnumeratedSort('server', ('server0',)),)}

sign_func_name2count:  {'0$link': 1, '0$semaphore': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$0$link$0$0], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$0$link$0$0, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$semaphore$0$0}

	sort: client

	identical_classes: {'client$0$link$0': [client$0$link$0$0]}

	identical_single_classes: {'client$0$link$0': client$0$link$0$0}

	identical_multi_classes: {}

	sort: server

	identical_classes: {'server$0$link$1; server$0$semaphore$0': [server$0$link$1$0; server$0$semaphore$0$0]}

	identical_single_classes: {'server$0$link$1; server$0$semaphore$0': server$0$link$1$0; server$0$semaphore$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.forall

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('SERVER0', EnumeratedSort('server', ('server0',))), Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]], '0$semaphore': [[Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['semaphore(SERVER0)', 'link(CLIENT0,SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0)


---------- Quantifier Inference: orbit 0 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1-1-
3     : ['link(client0,server0)', 'link(client2,server0)']
4     : 11--
4     : ['link(client0,server0)', 'link(client1,server0)']
5     : -11-
5     : ['link(client1,server0)', 'link(client2,server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['link(client0,server0)', 'link(client2,server0)']

sign_func_name2args: {'0$link': [(Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',)))), (Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',))))]}

const2sigs: {Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$0$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$0$link$1$0, server$0$link$1$1], Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$0$link$0$1]}

sig2const: {'client$0$link$0$0': Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$0$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'client$0$link$0$1': Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$0$link$1$1': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$0$link$0$0, client$0$link$0$1], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$link$1$1]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$0$link$0$0 | client$0$link$0$1, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$link$1$1}

part_sig: ('client$0$link$0$0 | client$0$link$0$1', 'server$0$link$1$0; server$0$link$1$1')


---------- SigGenerator ----------

terms:  ['link(client0,server0)', 'link(client2,server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',)))}

sign_func_name2count:  {'0$link': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$0$link$0$0, client$0$link$0$1], EnumeratedSort('server', ('server0',)): [server$0$link$1$0; server$0$link$1$1]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$0$link$0$0 | client$0$link$0$1, EnumeratedSort('server', ('server0',)): server$0$link$1$0; server$0$link$1$1}

	sort: client

	identical_classes: {'client$0$link$0': [client$0$link$0$0, client$0$link$0$1]}

	identical_single_classes: {}

	identical_multi_classes: {'client$0$link$0': [client$0$link$0$0, client$0$link$0$1]}

	sort: server

	identical_classes: {'server$0$link$1; server$0$link$1': [server$0$link$1$0; server$0$link$1$1]}

	identical_single_classes: {'server$0$link$1; server$0$link$1': server$0$link$1$0; server$0$link$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.forall

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('SERVER0', EnumeratedSort('server', ('server0',))), Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('CLIENT1', EnumeratedSort('client', ('client0', 'client1', 'client2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))], [Var('CLIENT1', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['link(CLIENT1,SERVER0)', 'link(CLIENT0,SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall SERVER0,CLIENT0,CLIENT1. ~link(CLIENT1,SERVER0) | ~link(CLIENT0,SERVER0) | CLIENT0 = CLIENT1


---------- Quantifier Inference: orbit 1 ----------

[QI_CHECK RESULT]: PASS


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
6 (*) : 0000
6     : ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']

sign_func_name2args: {'1$link': [(Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',)))), (Const('client1', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',)))), (Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Const('server0', EnumeratedSort('server', ('server0',))))], '1$semaphore': [(Const('server0', EnumeratedSort('server', ('server0',))),)]}

const2sigs: {Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$1$link$0$0], Const('server0', EnumeratedSort('server', ('server0',))): [server$1$link$1$0, server$1$link$1$1, server$1$link$1$2, server$1$semaphore$0$0], Const('client1', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$1$link$0$1], Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))): [client$1$link$0$2]}

sig2const: {'client$1$link$0$0': Const('client0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$1$link$1$0': Const('server0', EnumeratedSort('server', ('server0',))), 'client$1$link$0$1': Const('client1', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$1$link$1$1': Const('server0', EnumeratedSort('server', ('server0',))), 'client$1$link$0$2': Const('client2', EnumeratedSort('client', ('client0', 'client1', 'client2'))), 'server$1$link$1$2': Const('server0', EnumeratedSort('server', ('server0',))), 'server$1$semaphore$0$0': Const('server0', EnumeratedSort('server', ('server0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$1$link$0$0, client$1$link$0$1, client$1$link$0$2], EnumeratedSort('server', ('server0',)): [server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$1$link$0$0 | client$1$link$0$1 | client$1$link$0$2, EnumeratedSort('server', ('server0',)): server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0}

part_sig: ('client$1$link$0$0 | client$1$link$0$1 | client$1$link$0$2', 'server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0')


---------- SigGenerator ----------

terms:  ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']

func_name2symbol:  {'link': Const('link', FunctionSort(EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',)), BooleanSort())), 'semaphore': Const('semaphore', FunctionSort(EnumeratedSort('server', ('server0',)), BooleanSort()))}

func_name2args_sort:  {'link': (EnumeratedSort('client', ('client0', 'client1', 'client2')), EnumeratedSort('server', ('server0',))), 'semaphore': (EnumeratedSort('server', ('server0',)),)}

sign_func_name2count:  {'1$link': 3, '1$semaphore': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('client', ('client0', 'client1', 'client2')): [client$1$link$0$0, client$1$link$0$1, client$1$link$0$2], EnumeratedSort('server', ('server0',)): [server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0]}

sort2part_sig: {EnumeratedSort('client', ('client0', 'client1', 'client2')): client$1$link$0$0 | client$1$link$0$1 | client$1$link$0$2, EnumeratedSort('server', ('server0',)): server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0}

	sort: client

	identical_classes: {'client$1$link$0': [client$1$link$0$0, client$1$link$0$1, client$1$link$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'client$1$link$0': [client$1$link$0$0, client$1$link$0$1, client$1$link$0$2]}

	sort: server

	identical_classes: {'server$1$link$1; server$1$link$1; server$1$link$1; server$1$semaphore$0': [server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0]}

	identical_single_classes: {'server$1$link$1; server$1$link$1; server$1$link$1; server$1$semaphore$0': server$1$link$1$0; server$1$link$1$1; server$1$link$1$2; server$1$semaphore$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: client: QuantifierMode.exists

quantifier mode: server: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('SERVER0', EnumeratedSort('server', ('server0',)))}

exists_qvars: {Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$link': [[Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))], [Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))], [Var('CLIENT0', EnumeratedSort('client', ('client0', 'client1', 'client2'))), Var('SERVER0', EnumeratedSort('server', ('server0',)))]], '1$semaphore': [[Var('SERVER0', EnumeratedSort('server', ('server0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~link(CLIENT0,SERVER0)', '~semaphore(SERVER0)']


---------- QFormula: get_qclause ----------

qclause: forall SERVER0. (exists CLIENT0. link(CLIENT0,SERVER0) | semaphore(SERVER0))


---------- Quantifier Inference: orbit 2 ----------

[QI_CHECK RESULT]: PASS


========================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/lock_server: server=1,client=3]

========================================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --11
0     : ['link(client2,server0)', 'semaphore(server0)']
1     : -1-1
1     : ['link(client1,server0)', 'semaphore(server0)']
2     : 1--1
2     : ['link(client0,server0)', 'semaphore(server0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0)
qcost : 4




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1-1-
3     : ['link(client0,server0)', 'link(client2,server0)']
4     : 11--
4     : ['link(client0,server0)', 'link(client1,server0)']
5     : -11-
5     : ['link(client1,server0)', 'link(client2,server0)']
num_forall :   3
num_exists :   0
num_literals : 3
quantified form : forall SERVER0,CLIENT0,CLIENT1. ~link(CLIENT1,SERVER0) | ~link(CLIENT0,SERVER0) | CLIENT0 = CLIENT1
qcost : 6




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
6 (*) : 0000
6     : ['~link(client0,server0)', '~link(client1,server0)', '~link(client2,server0)', '~semaphore(server0)']
num_forall :   1
num_exists :   1
num_literals : 2
quantified form : forall SERVER0. (exists CLIENT0. link(CLIENT0,SERVER0) | semaphore(SERVER0))
qcost : 4



[QRM NOTE]: Time elapsed since start: 0.130 seconds

[QRM NOTE]: Time elapsed since last: 0.104 seconds

[QRM NOTE]: Peak memory: 1703085 bytes


=======================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/lock_server: server=1,client=3]

=======================================================================================


New level: 1
 pending : []
 solution : [0, 1, 2]


Before reduction : 
 pending  : []
 solution : [0, 1, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : []
 solution : [0, 1, 2]


Solution : [0, 1, 2] has cost 14.


Before backtrack at level 1
 pending : []
 solution : [0, 1, 2]

After backtrack at level 1
 pending : []
 solution : [0, 1, 2]


======================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/lock_server: server=1,client=3]

======================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 14

[MIN NOTE]: maximum branch and bound depth: 1

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 1, 2] (length = 3)

invariant [invar_0] forall SERVER0,CLIENT0. ~semaphore(SERVER0) | ~link(CLIENT0,SERVER0) # qcost: 4

invariant [invar_1] forall SERVER0,CLIENT0,CLIENT1. ~link(CLIENT1,SERVER0) | ~link(CLIENT0,SERVER0) | CLIENT0 = CLIENT1 # qcost: 6

invariant [invar_2] forall SERVER0. (exists CLIENT0. link(CLIENT0,SERVER0) | semaphore(SERVER0)) # qcost: 4




[QRM NOTE]: Time elapsed since start: 0.178 seconds

[QRM NOTE]: Time elapsed since last: 0.048 seconds

[QRM NOTE]: Peak memory: 1687026 bytes


=========================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/lock_server: server=1,client=3]

=========================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 0.194 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 646448 bytes


==========================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/lock_server: server=1,client=3]

==========================================================================================

ivy_check complete=fo ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2

    The following action implementations are present:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 18: implementation of connect
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 24: implementation of disconnect

    The following initializers are present:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 5: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0 ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:connect
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2 ... PASS
        (internal) ext:disconnect
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2 ... PASS

    The following program assertions are treated as assumptions:
        in action connect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 19: assumption
        in action disconnect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 25: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall SERVER0,CLIENT0,CLIENT1. ~link(CLIENT1,SERVER0) | ~link(CLIENT0,SERVER0) | CLIENT0 = CLIENT1))

[QRM NOTE]: Time elapsed since start: 1.890 seconds

[QRM NOTE]: Time elapsed since last: 1.696 seconds

[QRM NOTE]: Peak memory: 695414 bytes


*****************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/lock_server: server=1,client=3

*****************************************************************************************************

python3 qrm.py ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy -s server=2,client=3 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lock_server.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==============================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=2,client=3]

==============================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lock_server.server_2_client_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lock_server.server_2_client_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lock_server.server_2_client_3.finite.cpp lock_server.server_2_client_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lock_server.server_2_client_3.finite.o lock_server.server_2_client_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 8

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 12

[FW NOTE]: symmetric group order: 12

[QRM NOTE]: Time elapsed since start: 6.083 seconds

[QRM NOTE]: Time elapsed since last: 6.083 seconds

[QRM NOTE]: Peak memory: 1171884 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 2

[FW NOTE]: number of total reachable states:        16

[FW NOTE]: number of dfs representative states:     4

[FW NOTE]: number of dfs non-representative states: 12


=====================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=2,client=3]

=====================================================================================================

sort: client=['client0', 'client1', 'client2']
sort: server=['server0', 'server1']
predicate: link('client', 'server')
predicate: semaphore('server',)
interpreted atoms: {}
state atoms: ['link(client0,server0)', 'link(client0,server1)', 'link(client1,server0)', 'link(client1,server1)', 'link(client2,server0)', 'link(client2,server1)', 'semaphore(server0)', 'semaphore(server1)']
representative states : 3, 6, 12, 24


=== State Orbit 0 =====================
size : 1
repr state: 00000011
lex min decimal: 3
states:
00000011




=== State Orbit 1 =====================
size : 6
repr state: 10000001
lex min decimal: 6
states:
00100001
00010010
01000010
00001001
00000110
10000001




=== State Orbit 2 =====================
size : 3
repr state: 11000000
lex min decimal: 12
states:
00001100
00110000
11000000




=== State Orbit 3 =====================
size : 6
repr state: 10010000
lex min decimal: 24
states:
10000100
00011000
10010000
00100100
01001000
01100000



[QRM NOTE]: Time elapsed since start: 6.167 seconds

[QRM NOTE]: Time elapsed since last: 0.085 seconds

[QRM NOTE]: Peak memory: 1201298 bytes


==========================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lock_server: server=2,client=3]

==========================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.204 seconds

[QRM NOTE]: Time elapsed since last: 0.037 seconds

[QRM NOTE]: Peak memory: 176673 bytes

python3 qrm.py ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy -s server=1,client=4 -f 2 -g -w -r -t -k -v 5 -w -l ivybench/sym/ivy/lock_server.check.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


==============================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=1,client=4]

==============================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm lock_server.server_1_client_4.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o lock_server.server_1_client_4.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 lock_server.server_1_client_4.finite.cpp lock_server.server_1_client_4.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared lock_server.server_1_client_4.finite.o lock_server.server_1_client_4.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 8

[FW NOTE]: symmetric group order: 24

[QRM NOTE]: Time elapsed since start: 6.504 seconds

[QRM NOTE]: Time elapsed since last: 6.504 seconds

[QRM NOTE]: Peak memory: 1171963 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 1

[FW NOTE]: number of total reachable states:        5

[FW NOTE]: number of dfs representative states:     2

[FW NOTE]: number of dfs non-representative states: 3


=====================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/lock_server: server=1,client=4]

=====================================================================================================

sort: client=['client0', 'client1', 'client2', 'client3']
sort: server=['server0']
predicate: semaphore('server',)
predicate: link('client', 'server')
interpreted atoms: {}
state atoms: ['link(client0,server0)', 'link(client1,server0)', 'link(client2,server0)', 'link(client3,server0)', 'semaphore(server0)']
representative states : 1, 2


=== State Orbit 0 =====================
size : 1
repr state: 00001
lex min decimal: 1
states:
00001




=== State Orbit 1 =====================
size : 4
repr state: 10000
lex min decimal: 2
states:
10000
00100
01000
00010



[QRM NOTE]: Time elapsed since start: 6.583 seconds

[QRM NOTE]: Time elapsed since last: 0.079 seconds

[QRM NOTE]: Peak memory: 1197500 bytes


==========================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/lock_server: server=1,client=4]

==========================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.613 seconds

[QRM NOTE]: Time elapsed since last: 0.030 seconds

[QRM NOTE]: Peak memory: 170642 bytes

ivy_check complete=fo ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2

    The following action implementations are present:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 18: implementation of connect
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 24: implementation of disconnect

    The following initializers are present:
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 5: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0 ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:connect
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2 ... PASS
        (internal) ext:disconnect
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 39: invar_0 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 41: invar_2 ... PASS

    The following program assertions are treated as assumptions:
        in action connect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 19: assumption
        in action disconnect when called from the environment:
            ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy: line 25: assumption

OK
[IVY_CHECK RESULT]: PASS


***********************************************************

	[QRM]: ivybench/sym/ivy/lock_server.ivy

***********************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/lock_server.server_1_client_3.0.ivy']

[CUTOFF]: server=1,client=3

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 75.339 seconds

[QRM NOTE]: Time elapsed since last: 75.339 seconds

