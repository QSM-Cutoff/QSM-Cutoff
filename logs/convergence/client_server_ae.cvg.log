
****************************************************************

	[QRM]: ivybench/sym/ivy/client_server_ae.ivy

****************************************************************


*****************************************************************************************************

	[Synthesize Rmin]: ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1

*****************************************************************************************************

python3 qrm.py ivybench/sym/ivy/client_server_ae.ivy -s node=1,request=1,response=1 -f 1 -g -w -r -v 5 -w -l ivybench/sym/ivy/client_server_ae.cvg.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=============================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm client_server_ae.node_1_request_1_response_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o client_server_ae.node_1_request_1_response_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 client_server_ae.node_1_request_1_response_1.finite.cpp client_server_ae.node_1_request_1_response_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared client_server_ae.node_1_request_1_response_1.finite.o client_server_ae.node_1_request_1_response_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 5

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 3

[FW NOTE]: symmetric group order: 1

[QRM NOTE]: Time elapsed since start: 6.256 seconds

[QRM NOTE]: Time elapsed since last: 6.256 seconds

[QRM NOTE]: Peak memory: 1176181 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 3

[FW NOTE]: number of total reachable states:        6

[FW NOTE]: number of dfs representative states:     6

[FW NOTE]: number of dfs non-representative states: 0


====================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

====================================================================================================================

sort: node=['node0']
sort: request=['request0']
sort: response=['response0']
predicate: response_received('node', 'response')
predicate: request_sent('node', 'request')
predicate: match('request', 'response')
predicate: response_sent('node', 'response')
predicate: responseMatched('node', 'response')
interpreted atoms: {}
state atoms: ['match(request0,response0)', 'request_sent(node0,request0)', 'responseMatched(node0,response0)', 'response_received(node0,response0)', 'response_sent(node0,response0)']
representative states : 0, 16, 8, 28, 29, 31


=== State Orbit 0 =====================
size : 1
repr state: 00000
lex min decimal: 0
states:
00000




=== State Orbit 1 =====================
size : 1
repr state: 10000
lex min decimal: 16
states:
10000




=== State Orbit 2 =====================
size : 1
repr state: 01000
lex min decimal: 8
states:
01000




=== State Orbit 3 =====================
size : 1
repr state: 11100
lex min decimal: 28
states:
11100




=== State Orbit 4 =====================
size : 1
repr state: 11101
lex min decimal: 29
states:
11101




=== State Orbit 5 =====================
size : 1
repr state: 11111
lex min decimal: 31
states:
11111



[QRM NOTE]: Time elapsed since start: 6.330 seconds

[QRM NOTE]: Time elapsed since last: 0.073 seconds

[QRM NOTE]: Peak memory: 1205468 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.332 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 155448 bytes


====================================================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

====================================================================================================================


===============================================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

===============================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : ---10
0     : ['response_received(node0,response0)', '~response_sent(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 1
num_suborbits: 1
1 (*) : -01--
1     : ['responseMatched(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -0--1
2     : ['response_sent(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : -0-1-
3     : ['response_received(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 1
num_suborbits: 1
4 (*) : 0-1--
4     : ['responseMatched(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 0---1
5     : ['response_sent(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 0--1-
6     : ['response_received(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
7 (*) : --0-1
7     : ['response_sent(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : --01-
8     : ['response_received(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 1
num_suborbits: 1
9 (*) : 110--
9     : ['match(request0,response0)', 'request_sent(node0,request0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 10

[PRIME NOTE]: number of orbits before merging: 10

[PRIME NOTE]: number of primes: 10

[QRM NOTE]: Time elapsed since start: 6.342 seconds

[QRM NOTE]: Time elapsed since last: 0.010 seconds

[QRM NOTE]: Peak memory: 1228685 bytes


=========================================================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=========================================================================================================

definition primes: {1, 4, 9}


New level: 0
 pending : [0, 2, 3, 5, 6, 7, 8]
 solution : []


Before reduction : 
 pending  : [0, 2, 3, 5, 6, 7, 8]
 solution : []

Essensial at level 0 : {0}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, 2), (4, -1), (5, 4), (6, 2), (7, 8), (8, 4), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, 2), (4, -1), (5, 4), (6, 2), (7, 8), (8, 4), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, 2), (4, -1), (5, 4), (6, 2), (7, 8), (8, 4), (9, -1)]

Covered at level 0 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]

[QRM NOTE]: Time elapsed since start: 6.348 seconds

[QRM NOTE]: Time elapsed since last: 0.005 seconds

[QRM NOTE]: Peak memory: 180531 bytes


=============================================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=============================================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : ---10
0     : ['response_received(node0,response0)', '~response_sent(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['response_received(node0,response0)', '~response_sent(node0,response0)']

sign_func_name2args: {'0$response_received': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '1$response_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$0$response_received$0$0, node$1$response_sent$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$0$response_received$1$0, response$1$response_sent$1$0]}

sig2const: {'node$0$response_received$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_received$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$1$response_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$1$response_sent$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$response_sent$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$response_sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$response_sent$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$response_sent$1$0}

part_sig: ('node$0$response_received$0$0; node$1$response_sent$0$0', 'response$0$response_received$1$0; response$1$response_sent$1$0')


---------- SigGenerator ----------

terms:  ['response_received(node0,response0)', '~response_sent(node0,response0)']

func_name2symbol:  {'response_received': Const('response_received', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_sent': Const('response_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'response_received': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',))), 'response_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'0$response_received': 1, '1$response_sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$response_sent$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$response_sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$response_sent$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$response_sent$1$0}

	sort: node

	identical_classes: {'node$0$response_received$0; node$1$response_sent$0': [node$0$response_received$0$0; node$1$response_sent$0$0]}

	identical_single_classes: {'node$0$response_received$0; node$1$response_sent$0': node$0$response_received$0$0; node$1$response_sent$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_received$1; response$1$response_sent$1': [response$0$response_received$1$0; response$1$response_sent$1$0]}

	identical_single_classes: {'response$0$response_received$1; response$1$response_sent$1': response$0$response_received$1$0; response$1$response_sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$response_received': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '1$response_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~response_sent(NODE0,RESPONSE0)', 'response_received(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,RESPONSE0. response_sent(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)


=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -0--1
2     : ['response_sent(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~request_sent(node0,request0)', 'response_sent(node0,response0)']

sign_func_name2args: {'1$request_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('request0', EnumeratedSort('request', ('request0',))))], '0$response_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$request_sent$0$0, node$0$response_sent$0$0], Const('request0', EnumeratedSort('request', ('request0',))): [request$1$request_sent$1$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$0$response_sent$1$0]}

sig2const: {'node$1$request_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'request$1$request_sent$1$0': Const('request0', EnumeratedSort('request', ('request0',))), 'node$0$response_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_sent$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0; node$1$request_sent$0$0], EnumeratedSort('request', ('request0',)): [request$1$request_sent$1$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0; node$1$request_sent$0$0, EnumeratedSort('request', ('request0',)): request$1$request_sent$1$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0}

part_sig: ('node$0$response_sent$0$0; node$1$request_sent$0$0', 'request$1$request_sent$1$0', 'response$0$response_sent$1$0')


---------- SigGenerator ----------

terms:  ['~request_sent(node0,request0)', 'response_sent(node0,response0)']

func_name2symbol:  {'request_sent': Const('request_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('request', ('request0',)), BooleanSort())), 'response_sent': Const('response_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'request_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('request', ('request0',))), 'response_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$request_sent': 1, '0$response_sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0; node$1$request_sent$0$0], EnumeratedSort('request', ('request0',)): [request$1$request_sent$1$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0; node$1$request_sent$0$0, EnumeratedSort('request', ('request0',)): request$1$request_sent$1$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0}

	sort: node

	identical_classes: {'node$0$response_sent$0; node$1$request_sent$0': [node$0$response_sent$0$0; node$1$request_sent$0$0]}

	identical_single_classes: {'node$0$response_sent$0; node$1$request_sent$0': node$0$response_sent$0$0; node$1$request_sent$0$0}

	identical_multi_classes: {}

	sort: request

	identical_classes: {'request$1$request_sent$1': [request$1$request_sent$1$0]}

	identical_single_classes: {'request$1$request_sent$1': request$1$request_sent$1$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_sent$1': [response$0$response_sent$1$0]}

	identical_single_classes: {'response$0$response_sent$1': response$0$response_sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: request: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',))), Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$request_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))]], '0$response_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['response_sent(NODE0,RESPONSE0)', '~request_sent(NODE0,REQUEST0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,RESPONSE0,REQUEST0. ~response_sent(NODE0,RESPONSE0) | request_sent(NODE0,REQUEST0)


=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : -0-1-
3     : ['response_received(node0,response0)', '~request_sent(node0,request0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~request_sent(node0,request0)', 'response_received(node0,response0)']

sign_func_name2args: {'1$request_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('request0', EnumeratedSort('request', ('request0',))))], '0$response_received': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$request_sent$0$0, node$0$response_received$0$0], Const('request0', EnumeratedSort('request', ('request0',))): [request$1$request_sent$1$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$0$response_received$1$0]}

sig2const: {'node$1$request_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'request$1$request_sent$1$0': Const('request0', EnumeratedSort('request', ('request0',))), 'node$0$response_received$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_received$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$request_sent$0$0], EnumeratedSort('request', ('request0',)): [request$1$request_sent$1$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$request_sent$0$0, EnumeratedSort('request', ('request0',)): request$1$request_sent$1$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0}

part_sig: ('node$0$response_received$0$0; node$1$request_sent$0$0', 'request$1$request_sent$1$0', 'response$0$response_received$1$0')


---------- SigGenerator ----------

terms:  ['~request_sent(node0,request0)', 'response_received(node0,response0)']

func_name2symbol:  {'request_sent': Const('request_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('request', ('request0',)), BooleanSort())), 'response_received': Const('response_received', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'request_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('request', ('request0',))), 'response_received': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$request_sent': 1, '0$response_received': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$request_sent$0$0], EnumeratedSort('request', ('request0',)): [request$1$request_sent$1$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$request_sent$0$0, EnumeratedSort('request', ('request0',)): request$1$request_sent$1$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0}

	sort: node

	identical_classes: {'node$0$response_received$0; node$1$request_sent$0': [node$0$response_received$0$0; node$1$request_sent$0$0]}

	identical_single_classes: {'node$0$response_received$0; node$1$request_sent$0': node$0$response_received$0$0; node$1$request_sent$0$0}

	identical_multi_classes: {}

	sort: request

	identical_classes: {'request$1$request_sent$1': [request$1$request_sent$1$0]}

	identical_single_classes: {'request$1$request_sent$1': request$1$request_sent$1$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_received$1': [response$0$response_received$1$0]}

	identical_single_classes: {'response$0$response_received$1': response$0$response_received$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: request: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',))), Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$request_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))]], '0$response_received': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['response_received(NODE0,RESPONSE0)', '~request_sent(NODE0,REQUEST0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,RESPONSE0,REQUEST0. ~response_received(NODE0,RESPONSE0) | request_sent(NODE0,REQUEST0)


=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 0---1
5     : ['response_sent(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~match(request0,response0)', 'response_sent(node0,response0)']

sign_func_name2args: {'1$match': [(Const('request0', EnumeratedSort('request', ('request0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '0$response_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('request0', EnumeratedSort('request', ('request0',))): [request$1$match$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$1$match$1$0, response$0$response_sent$1$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$0$response_sent$0$0]}

sig2const: {'request$1$match$0$0': Const('request0', EnumeratedSort('request', ('request0',))), 'response$1$match$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$0$response_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_sent$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('request', ('request0',)): [request$1$match$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0; response$1$match$1$0], EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0]}

sort2part_sig: {EnumeratedSort('request', ('request0',)): request$1$match$0$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0; response$1$match$1$0, EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0}

part_sig: ('node$0$response_sent$0$0', 'request$1$match$0$0', 'response$0$response_sent$1$0; response$1$match$1$0')


---------- SigGenerator ----------

terms:  ['~match(request0,response0)', 'response_sent(node0,response0)']

func_name2symbol:  {'match': Const('match', FunctionSort(EnumeratedSort('request', ('request0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_sent': Const('response_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'match': (EnumeratedSort('request', ('request0',)), EnumeratedSort('response', ('response0',))), 'response_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$match': 1, '0$response_sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('request', ('request0',)): [request$1$match$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0; response$1$match$1$0], EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0]}

sort2part_sig: {EnumeratedSort('request', ('request0',)): request$1$match$0$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0; response$1$match$1$0, EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0}

	sort: request

	identical_classes: {'request$1$match$0': [request$1$match$0$0]}

	identical_single_classes: {'request$1$match$0': request$1$match$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_sent$1; response$1$match$1': [response$0$response_sent$1$0; response$1$match$1$0]}

	identical_single_classes: {'response$0$response_sent$1; response$1$match$1': response$0$response_sent$1$0; response$1$match$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$response_sent$0': [node$0$response_sent$0$0]}

	identical_single_classes: {'node$0$response_sent$0': node$0$response_sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: request: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('NODE0', EnumeratedSort('node', ('node0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$match': [[Var('REQUEST0', EnumeratedSort('request', ('request0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '0$response_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~match(REQUEST0,RESPONSE0)', 'response_sent(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,RESPONSE0,REQUEST0. match(REQUEST0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)


=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 0--1-
6     : ['response_received(node0,response0)', '~match(request0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~match(request0,response0)', 'response_received(node0,response0)']

sign_func_name2args: {'1$match': [(Const('request0', EnumeratedSort('request', ('request0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '0$response_received': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('request0', EnumeratedSort('request', ('request0',))): [request$1$match$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$1$match$1$0, response$0$response_received$1$0], Const('node0', EnumeratedSort('node', ('node0',))): [node$0$response_received$0$0]}

sig2const: {'request$1$match$0$0': Const('request0', EnumeratedSort('request', ('request0',))), 'response$1$match$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$0$response_received$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_received$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('request', ('request0',)): [request$1$match$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$match$1$0], EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0]}

sort2part_sig: {EnumeratedSort('request', ('request0',)): request$1$match$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$match$1$0, EnumeratedSort('node', ('node0',)): node$0$response_received$0$0}

part_sig: ('node$0$response_received$0$0', 'request$1$match$0$0', 'response$0$response_received$1$0; response$1$match$1$0')


---------- SigGenerator ----------

terms:  ['~match(request0,response0)', 'response_received(node0,response0)']

func_name2symbol:  {'match': Const('match', FunctionSort(EnumeratedSort('request', ('request0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_received': Const('response_received', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'match': (EnumeratedSort('request', ('request0',)), EnumeratedSort('response', ('response0',))), 'response_received': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$match': 1, '0$response_received': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('request', ('request0',)): [request$1$match$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$match$1$0], EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0]}

sort2part_sig: {EnumeratedSort('request', ('request0',)): request$1$match$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$match$1$0, EnumeratedSort('node', ('node0',)): node$0$response_received$0$0}

	sort: request

	identical_classes: {'request$1$match$0': [request$1$match$0$0]}

	identical_single_classes: {'request$1$match$0': request$1$match$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_received$1; response$1$match$1': [response$0$response_received$1$0; response$1$match$1$0]}

	identical_single_classes: {'response$0$response_received$1; response$1$match$1': response$0$response_received$1$0; response$1$match$1$0}

	identical_multi_classes: {}

	sort: node

	identical_classes: {'node$0$response_received$0': [node$0$response_received$0$0]}

	identical_single_classes: {'node$0$response_received$0': node$0$response_received$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: request: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('NODE0', EnumeratedSort('node', ('node0',))), Var('REQUEST0', EnumeratedSort('request', ('request0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$match': [[Var('REQUEST0', EnumeratedSort('request', ('request0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '0$response_received': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~match(REQUEST0,RESPONSE0)', 'response_received(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,RESPONSE0,REQUEST0. match(REQUEST0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)


=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
7 (*) : --0-1
7     : ['response_sent(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~responseMatched(node0,response0)', 'response_sent(node0,response0)']

sign_func_name2args: {'1$responseMatched': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '0$response_sent': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$responseMatched$0$0, node$0$response_sent$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$1$responseMatched$1$0, response$0$response_sent$1$0]}

sig2const: {'node$1$responseMatched$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$1$responseMatched$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$0$response_sent$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_sent$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0; node$1$responseMatched$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0; response$1$responseMatched$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0; node$1$responseMatched$0$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0; response$1$responseMatched$1$0}

part_sig: ('node$0$response_sent$0$0; node$1$responseMatched$0$0', 'response$0$response_sent$1$0; response$1$responseMatched$1$0')


---------- SigGenerator ----------

terms:  ['~responseMatched(node0,response0)', 'response_sent(node0,response0)']

func_name2symbol:  {'responseMatched': Const('responseMatched', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_sent': Const('response_sent', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'responseMatched': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',))), 'response_sent': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$responseMatched': 1, '0$response_sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_sent$0$0; node$1$responseMatched$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_sent$1$0; response$1$responseMatched$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_sent$0$0; node$1$responseMatched$0$0, EnumeratedSort('response', ('response0',)): response$0$response_sent$1$0; response$1$responseMatched$1$0}

	sort: node

	identical_classes: {'node$0$response_sent$0; node$1$responseMatched$0': [node$0$response_sent$0$0; node$1$responseMatched$0$0]}

	identical_single_classes: {'node$0$response_sent$0; node$1$responseMatched$0': node$0$response_sent$0$0; node$1$responseMatched$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_sent$1; response$1$responseMatched$1': [response$0$response_sent$1$0; response$1$responseMatched$1$0]}

	identical_single_classes: {'response$0$response_sent$1; response$1$responseMatched$1': response$0$response_sent$1$0; response$1$responseMatched$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$responseMatched': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '0$response_sent': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~responseMatched(NODE0,RESPONSE0)', 'response_sent(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,RESPONSE0. responseMatched(NODE0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)


=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : --01-
8     : ['response_received(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~responseMatched(node0,response0)', 'response_received(node0,response0)']

sign_func_name2args: {'1$responseMatched': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))], '0$response_received': [(Const('node0', EnumeratedSort('node', ('node0',))), Const('response0', EnumeratedSort('response', ('response0',))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0',))): [node$1$responseMatched$0$0, node$0$response_received$0$0], Const('response0', EnumeratedSort('response', ('response0',))): [response$1$responseMatched$1$0, response$0$response_received$1$0]}

sig2const: {'node$1$responseMatched$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$1$responseMatched$1$0': Const('response0', EnumeratedSort('response', ('response0',))), 'node$0$response_received$0$0': Const('node0', EnumeratedSort('node', ('node0',))), 'response$0$response_received$1$0': Const('response0', EnumeratedSort('response', ('response0',)))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$responseMatched$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$responseMatched$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$responseMatched$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$responseMatched$1$0}

part_sig: ('node$0$response_received$0$0; node$1$responseMatched$0$0', 'response$0$response_received$1$0; response$1$responseMatched$1$0')


---------- SigGenerator ----------

terms:  ['~responseMatched(node0,response0)', 'response_received(node0,response0)']

func_name2symbol:  {'responseMatched': Const('responseMatched', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort())), 'response_received': Const('response_received', FunctionSort(EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)), BooleanSort()))}

func_name2args_sort:  {'responseMatched': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',))), 'response_received': (EnumeratedSort('node', ('node0',)), EnumeratedSort('response', ('response0',)))}

sign_func_name2count:  {'1$responseMatched': 1, '0$response_received': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0',)): [node$0$response_received$0$0; node$1$responseMatched$0$0], EnumeratedSort('response', ('response0',)): [response$0$response_received$1$0; response$1$responseMatched$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0',)): node$0$response_received$0$0; node$1$responseMatched$0$0, EnumeratedSort('response', ('response0',)): response$0$response_received$1$0; response$1$responseMatched$1$0}

	sort: node

	identical_classes: {'node$0$response_received$0; node$1$responseMatched$0': [node$0$response_received$0$0; node$1$responseMatched$0$0]}

	identical_single_classes: {'node$0$response_received$0; node$1$responseMatched$0': node$0$response_received$0$0; node$1$responseMatched$0$0}

	identical_multi_classes: {}

	sort: response

	identical_classes: {'response$0$response_received$1; response$1$responseMatched$1': [response$0$response_received$1$0; response$1$responseMatched$1$0]}

	identical_single_classes: {'response$0$response_received$1; response$1$responseMatched$1': response$0$response_received$1$0; response$1$responseMatched$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall

quantifier mode: response: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('RESPONSE0', EnumeratedSort('response', ('response0',))), Var('NODE0', EnumeratedSort('node', ('node0',)))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$responseMatched': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]], '0$response_received': [[Var('NODE0', EnumeratedSort('node', ('node0',))), Var('RESPONSE0', EnumeratedSort('response', ('response0',)))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~responseMatched(NODE0,RESPONSE0)', 'response_received(NODE0,RESPONSE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,RESPONSE0. responseMatched(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)


=======================================================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=======================================================================================================================


=== Prime Orbit 0 =====================
size : 1
num_suborbits: 1
0 (*) : ---10
0     : ['response_received(node0,response0)', '~response_sent(node0,response0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,RESPONSE0. response_sent(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)
qcost : 4




=== Prime Orbit 2 =====================
size : 1
num_suborbits: 1
2 (*) : -0--1
2     : ['response_sent(node0,response0)', '~request_sent(node0,request0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,RESPONSE0,REQUEST0. ~response_sent(NODE0,RESPONSE0) | request_sent(NODE0,REQUEST0)
qcost : 5




=== Prime Orbit 3 =====================
size : 1
num_suborbits: 1
3 (*) : -0-1-
3     : ['response_received(node0,response0)', '~request_sent(node0,request0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,RESPONSE0,REQUEST0. ~response_received(NODE0,RESPONSE0) | request_sent(NODE0,REQUEST0)
qcost : 5




=== Prime Orbit 5 =====================
size : 1
num_suborbits: 1
5 (*) : 0---1
5     : ['response_sent(node0,response0)', '~match(request0,response0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,RESPONSE0,REQUEST0. match(REQUEST0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)
qcost : 5




=== Prime Orbit 6 =====================
size : 1
num_suborbits: 1
6 (*) : 0--1-
6     : ['response_received(node0,response0)', '~match(request0,response0)']
num_forall :   3
num_exists :   0
num_literals : 2
quantified form : forall NODE0,RESPONSE0,REQUEST0. match(REQUEST0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)
qcost : 5




=== Prime Orbit 7 =====================
size : 1
num_suborbits: 1
7 (*) : --0-1
7     : ['response_sent(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,RESPONSE0. responseMatched(NODE0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)
qcost : 4




=== Prime Orbit 8 =====================
size : 1
num_suborbits: 1
8 (*) : --01-
8     : ['response_received(node0,response0)', '~responseMatched(node0,response0)']
num_forall :   2
num_exists :   0
num_literals : 2
quantified form : forall NODE0,RESPONSE0. responseMatched(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)
qcost : 4



[QRM NOTE]: Time elapsed since start: 6.418 seconds

[QRM NOTE]: Time elapsed since last: 0.070 seconds

[QRM NOTE]: Peak memory: 1854332 bytes


======================================================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

======================================================================================================


New level: 1
 pending : [2, 3, 5, 6, 7, 8]
 solution : [0]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, 2), (4, -1), (5, 4), (6, 2), (7, 8), (8, 4), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, 2), (4, -1), (5, 4), (6, 2), (7, 8), (8, 4), (9, -1)]

Covered at level 1 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8]
 solution : [0]


Solution : [0] has cost 4.


Decide in level 1 among pending : [2, 3, 5, 6, 7, 8]

Coverage : [(0, -1), (1, -1), (2, 4), (3, 2), (4, -1), (5, 4), (6, 2), (7, 8), (8, 4), (9, -1)]

Decide 7 with phase True at level 1

After decision at level 1
 pending : [2, 3, 5, 6, 8]
 solution : [0, 7]


New level: 2
 pending : [2, 3, 5, 6, 8]
 solution : [0, 7]


Before reduction : 
 pending  : [2, 3, 5, 6, 8]
 solution : [0, 7]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 4), (3, 2), (4, -1), (5, 4), (6, 2), (7, 8), (8, 4), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, -1)]

Covered at level 2 : {2, 3, 5, 6, 8}

After reduction : 
 pending  : []
 solution : [0, 7]


Before reduction : 
 pending  : []
 solution : [0, 7]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [0, 7]


Solution : [0, 7] has cost 8.


Before backtrack at level 2
 pending : []
 solution : [0, 7]

After backtrack at level 2
 pending : [2, 3, 5, 6, 8]
 solution : [0, 7]


Invert decision for 7 at level 1


New level: 2
 pending : [2, 3, 5, 6, 8]
 solution : [0]


Before reduction : 
 pending  : [2, 3, 5, 6, 8]
 solution : [0]

Essensial at level 2 : {2, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1)]

Covered at level 2 : {8, 3, 6}

After reduction : 
 pending  : []
 solution : [0, 2, 5]


Before reduction : 
 pending  : []
 solution : [0, 2, 5]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)]

Covered at level 2 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 5]


Solution : [0, 2, 5] has cost 14.


Before backtrack at level 2
 pending : []
 solution : [0, 2, 5]

After backtrack at level 2
 pending : [2, 5, 3, 6, 8]
 solution : [0]


Before backtrack at level 1
 pending : [2, 5, 3, 6, 8]
 solution : [0]

After backtrack at level 1
 pending : [2, 5, 3, 6, 8, 7]
 solution : [0]


=====================================================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=====================================================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 8

[MIN NOTE]: maximum branch and bound depth: 2

Definitions (length=1)

invariant [def_responseMatched] responseMatched(N,P) = exists R. (request_sent(N,R) & match(R,P)) # definition

Equality Relations (length=0)

Solution 0 : [0, 7] (length = 2)

invariant [invar_0] forall NODE0,RESPONSE0. response_sent(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0) # qcost: 4

invariant [invar_7] forall NODE0,RESPONSE0. responseMatched(NODE0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0) # qcost: 4




[QRM NOTE]: Time elapsed since start: 6.456 seconds

[QRM NOTE]: Time elapsed since last: 0.039 seconds

[QRM NOTE]: Peak memory: 1840112 bytes


========================================================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

========================================================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.459 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 793032 bytes


=========================================================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1]

=========================================================================================================

ivy_check complete=fo ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy


Isolate this:

    The following definitions are used:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 21: def1

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7

    The following action implementations are present:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 30: implementation of new_request
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 40: implementation of receive_response
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 33: implementation of respond

    The following initializers are present:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 23: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:new_request
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7 ... PASS
        (internal) ext:receive_response
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7 ... PASS
        (internal) ext:respond
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7 ... PASS

    The following program assertions are treated as assumptions:
        in action respond when called from the environment:
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 34: assumption
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 35: assumption
        in action receive_response when called from the environment:
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 41: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall N,P. responseMatched(N,P) <-> (exists R. (request_sent(N,R) & match(R,P)))) & (forall NODE0,RESPONSE0. response_sent(NODE0,RESPONSE0) | ~response_received(NODE0,RESPONSE0)) & (forall NODE0,RESPONSE0. responseMatched(NODE0,RESPONSE0) | ~response_sent(NODE0,RESPONSE0)))

[QRM NOTE]: Time elapsed since start: 8.459 seconds

[QRM NOTE]: Time elapsed since last: 1.999 seconds

[QRM NOTE]: Peak memory: 842853 bytes


********************************************************************************************************************

	[Reachability Convergence Check]: ivybench/sym/ivy/client_server_ae: node=1,request=1,response=1

********************************************************************************************************************

python3 qrm.py ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy -s node=2,request=1,response=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/client_server_ae.cvg.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=2,request=1,response=1]

=============================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm client_server_ae.node_2_request_1_response_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o client_server_ae.node_2_request_1_response_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 client_server_ae.node_2_request_1_response_1.finite.cpp client_server_ae.node_2_request_1_response_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared client_server_ae.node_2_request_1_response_1.finite.o client_server_ae.node_2_request_1_response_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 9

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 6

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.035 seconds

[QRM NOTE]: Time elapsed since last: 6.035 seconds

[QRM NOTE]: Peak memory: 1179174 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 6

[FW NOTE]: number of total reachable states:        20

[FW NOTE]: number of dfs representative states:     13

[FW NOTE]: number of dfs non-representative states: 7


====================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=2,request=1,response=1]

====================================================================================================================

sort: node=['node0', 'node1']
sort: request=['request0']
sort: response=['response0']
predicate: responseMatched('node', 'response')
predicate: response_sent('node', 'response')
predicate: request_sent('node', 'request')
predicate: response_received('node', 'response')
predicate: match('request', 'response')
interpreted atoms: {}
state atoms: ['match(request0,response0)', 'request_sent(node0,request0)', 'request_sent(node1,request0)', 'responseMatched(node0,response0)', 'responseMatched(node1,response0)', 'response_received(node0,response0)', 'response_received(node1,response0)', 'response_sent(node0,response0)', 'response_sent(node1,response0)']
representative states : 0, 256, 64, 192, 336, 496, 497, 499, 503, 511, 501, 337, 341


=== State Orbit 0 =====================
size : 1
repr state: 000000000
lex min decimal: 0
states:
000000000




=== State Orbit 1 =====================
size : 1
repr state: 100000000
lex min decimal: 256
states:
100000000




=== State Orbit 2 =====================
size : 2
repr state: 010000000
lex min decimal: 64
states:
010000000
001000000




=== State Orbit 3 =====================
size : 1
repr state: 011000000
lex min decimal: 192
states:
011000000




=== State Orbit 4 =====================
size : 2
repr state: 110100000
lex min decimal: 336
states:
110100000
101010000




=== State Orbit 5 =====================
size : 1
repr state: 111110000
lex min decimal: 496
states:
111110000




=== State Orbit 6 =====================
size : 2
repr state: 111110010
lex min decimal: 497
states:
111110001
111110010




=== State Orbit 7 =====================
size : 1
repr state: 111110011
lex min decimal: 499
states:
111110011




=== State Orbit 8 =====================
size : 2
repr state: 111111011
lex min decimal: 503
states:
111110111
111111011




=== State Orbit 9 =====================
size : 1
repr state: 111111111
lex min decimal: 511
states:
111111111




=== State Orbit 10 =====================
size : 2
repr state: 111111010
lex min decimal: 501
states:
111111010
111110101




=== State Orbit 11 =====================
size : 2
repr state: 110100010
lex min decimal: 337
states:
110100010
101010001




=== State Orbit 12 =====================
size : 2
repr state: 110101010
lex min decimal: 341
states:
101010101
110101010



[QRM NOTE]: Time elapsed since start: 6.118 seconds

[QRM NOTE]: Time elapsed since last: 0.083 seconds

[QRM NOTE]: Peak memory: 1216340 bytes


=========================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/client_server_ae: node=2,request=1,response=1]

=========================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.133 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 174791 bytes

python3 qrm.py ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy -s node=1,request=2,response=1 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/client_server_ae.cvg.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=1,request=2,response=1]

=============================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm client_server_ae.node_1_request_2_response_1.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o client_server_ae.node_1_request_2_response_1.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 client_server_ae.node_1_request_2_response_1.finite.cpp client_server_ae.node_1_request_2_response_1.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared client_server_ae.node_1_request_2_response_1.finite.o client_server_ae.node_1_request_2_response_1.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 7

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 5

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.053 seconds

[QRM NOTE]: Time elapsed since last: 6.053 seconds

[QRM NOTE]: Peak memory: 1178176 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        30

[FW NOTE]: number of dfs representative states:     18

[FW NOTE]: number of dfs non-representative states: 12


====================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=1,request=2,response=1]

====================================================================================================================

sort: node=['node0']
sort: request=['request0', 'request1']
sort: response=['response0']
predicate: response_received('node', 'response')
predicate: response_sent('node', 'response')
predicate: responseMatched('node', 'response')
predicate: match('request', 'response')
predicate: request_sent('node', 'request')
interpreted atoms: {}
state atoms: ['match(request0,response0)', 'match(request1,response0)', 'request_sent(node0,request0)', 'request_sent(node0,request1)', 'responseMatched(node0,response0)', 'response_received(node0,response0)', 'response_sent(node0,response0)']
representative states : 0, 96, 32, 8, 24, 108, 124, 125, 127, 109, 111, 44, 60, 61, 63, 45, 47, 48


=== State Orbit 0 =====================
size : 1
repr state: 0000000
lex min decimal: 0
states:
0000000




=== State Orbit 1 =====================
size : 1
repr state: 1100000
lex min decimal: 96
states:
1100000




=== State Orbit 2 =====================
size : 2
repr state: 1000000
lex min decimal: 32
states:
1000000
0100000




=== State Orbit 3 =====================
size : 2
repr state: 0010000
lex min decimal: 8
states:
0010000
0001000




=== State Orbit 4 =====================
size : 1
repr state: 0011000
lex min decimal: 24
states:
0011000




=== State Orbit 5 =====================
size : 2
repr state: 1110100
lex min decimal: 108
states:
1110100
1101100




=== State Orbit 6 =====================
size : 1
repr state: 1111100
lex min decimal: 124
states:
1111100




=== State Orbit 7 =====================
size : 1
repr state: 1111101
lex min decimal: 125
states:
1111101




=== State Orbit 8 =====================
size : 1
repr state: 1111111
lex min decimal: 127
states:
1111111




=== State Orbit 9 =====================
size : 2
repr state: 1110101
lex min decimal: 109
states:
1110101
1101101




=== State Orbit 10 =====================
size : 2
repr state: 1110111
lex min decimal: 111
states:
1110111
1101111




=== State Orbit 11 =====================
size : 2
repr state: 1010100
lex min decimal: 44
states:
1010100
0101100




=== State Orbit 12 =====================
size : 2
repr state: 1011100
lex min decimal: 60
states:
0111100
1011100




=== State Orbit 13 =====================
size : 2
repr state: 1011101
lex min decimal: 61
states:
1011101
0111101




=== State Orbit 14 =====================
size : 2
repr state: 1011111
lex min decimal: 63
states:
1011111
0111111




=== State Orbit 15 =====================
size : 2
repr state: 1010101
lex min decimal: 45
states:
1010101
0101101




=== State Orbit 16 =====================
size : 2
repr state: 1010111
lex min decimal: 47
states:
0101111
1010111




=== State Orbit 17 =====================
size : 2
repr state: 1001000
lex min decimal: 48
states:
1001000
0110000



[QRM NOTE]: Time elapsed since start: 6.130 seconds

[QRM NOTE]: Time elapsed since last: 0.077 seconds

[QRM NOTE]: Peak memory: 1218496 bytes


=========================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/client_server_ae: node=1,request=2,response=1]

=========================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 6.144 seconds

[QRM NOTE]: Time elapsed since last: 0.013 seconds

[QRM NOTE]: Peak memory: 174669 bytes

python3 qrm.py ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy -s node=1,request=1,response=2 -f 2 -g -w -r -v 5 -w -l ivybench/sym/ivy/client_server_ae.cvg.log


---------- Parsing Ivy ----------


Printing isolate this:

OK


=============================================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=2]

=============================================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm client_server_ae.node_1_request_1_response_2.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o client_server_ae.node_1_request_1_response_2.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 client_server_ae.node_1_request_1_response_2.finite.cpp client_server_ae.node_1_request_1_response_2.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared client_server_ae.node_1_request_1_response_2.finite.o client_server_ae.node_1_request_1_response_2.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 9

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 5

[FW NOTE]: symmetric group order: 2

[QRM NOTE]: Time elapsed since start: 6.929 seconds

[QRM NOTE]: Time elapsed since last: 6.929 seconds

[QRM NOTE]: Peak memory: 1179110 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 5

[FW NOTE]: number of total reachable states:        20

[FW NOTE]: number of dfs representative states:     13

[FW NOTE]: number of dfs non-representative states: 7


====================================================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=2]

====================================================================================================================

sort: node=['node0']
sort: request=['request0']
sort: response=['response0', 'response1']
predicate: request_sent('node', 'request')
predicate: match('request', 'response')
predicate: response_received('node', 'response')
predicate: response_sent('node', 'response')
predicate: responseMatched('node', 'response')
interpreted atoms: {}
state atoms: ['match(request0,response0)', 'match(request0,response1)', 'request_sent(node0,request0)', 'responseMatched(node0,response0)', 'responseMatched(node0,response1)', 'response_received(node0,response0)', 'response_received(node0,response1)', 'response_sent(node0,response0)', 'response_sent(node0,response1)']
representative states : 0, 384, 128, 64, 496, 497, 499, 503, 511, 501, 208, 209, 213


=== State Orbit 0 =====================
size : 1
repr state: 000000000
lex min decimal: 0
states:
000000000




=== State Orbit 1 =====================
size : 1
repr state: 110000000
lex min decimal: 384
states:
110000000




=== State Orbit 2 =====================
size : 2
repr state: 010000000
lex min decimal: 128
states:
010000000
100000000




=== State Orbit 3 =====================
size : 1
repr state: 001000000
lex min decimal: 64
states:
001000000




=== State Orbit 4 =====================
size : 1
repr state: 111110000
lex min decimal: 496
states:
111110000




=== State Orbit 5 =====================
size : 2
repr state: 111110010
lex min decimal: 497
states:
111110010
111110001




=== State Orbit 6 =====================
size : 1
repr state: 111110011
lex min decimal: 499
states:
111110011




=== State Orbit 7 =====================
size : 2
repr state: 111111011
lex min decimal: 503
states:
111110111
111111011




=== State Orbit 8 =====================
size : 1
repr state: 111111111
lex min decimal: 511
states:
111111111




=== State Orbit 9 =====================
size : 2
repr state: 111111010
lex min decimal: 501
states:
111111010
111110101




=== State Orbit 10 =====================
size : 2
repr state: 011010000
lex min decimal: 208
states:
011010000
101100000




=== State Orbit 11 =====================
size : 2
repr state: 011010001
lex min decimal: 209
states:
011010001
101100010




=== State Orbit 12 =====================
size : 2
repr state: 011010101
lex min decimal: 213
states:
011010101
101101010



[QRM NOTE]: Time elapsed since start: 7.005 seconds

[QRM NOTE]: Time elapsed since last: 0.075 seconds

[QRM NOTE]: Peak memory: 1216278 bytes


=========================================================================================================================================

	[REACH_CHECK]: Reachability Convergence Check for Rmin on [ivybench/sym/ivy/client_server_ae: node=1,request=1,response=2]

=========================================================================================================================================

[REACH_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 7.022 seconds

[QRM NOTE]: Time elapsed since last: 0.017 seconds

[QRM NOTE]: Peak memory: 174635 bytes

ivy_check complete=fo ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy


Isolate this:

    The following definitions are used:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 21: def1

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7

    The following action implementations are present:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 30: implementation of new_request
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 40: implementation of receive_response
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 33: implementation of respond

    The following initializers are present:
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 23: init[after2]

    Initialization must establish the invariant
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
        ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:new_request
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7 ... PASS
        (internal) ext:receive_response
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7 ... PASS
        (internal) ext:respond
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 54: def_responseMatched ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 55: invar_0 ... PASS
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 56: invar_7 ... PASS

    The following program assertions are treated as assumptions:
        in action respond when called from the environment:
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 34: assumption
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 35: assumption
        in action receive_response when called from the environment:
            ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy: line 41: assumption

OK
[IVY_CHECK RESULT]: PASS


****************************************************************

	[QRM]: ivybench/sym/ivy/client_server_ae.ivy

****************************************************************

[RMIN NUM]: 1

[RMIN RESULT]: ['ivybench/sym/ivy/client_server_ae.node_1_request_1_response_1.0.ivy']

[CUTOFF]: node=1,request=1,response=1

[QRM RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 40.134 seconds

[QRM NOTE]: Time elapsed since last: 40.134 seconds

